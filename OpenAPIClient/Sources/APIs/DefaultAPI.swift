//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class DefaultAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "http://}/api/v25.1")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }


    /// Retrieve API Versions
    /// - GET /api/
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func apiGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/api/"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Content File
    /// - GET /api/mdl/components/{component_type_and_record_name}/files
    /// - parameter componentTypeAndRecordName: (path) The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func apiMdlComponentsComponentTypeAndRecordNameFilesGet(componentTypeAndRecordName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/api/mdl/components/{component_type_and_record_name}/files"
                localVarPath = localVarPath.replacingOccurrences(of: "{component_type_and_record_name}", with: componentTypeAndRecordName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Component Record (MDL)
    /// - GET /api/mdl/components/{component_type_and_record_name}
    /// - parameter componentTypeAndRecordName: (path) The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func apiMdlComponentsComponentTypeAndRecordNameGet(componentTypeAndRecordName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/api/mdl/components/{component_type_and_record_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{component_type_and_record_name}", with: componentTypeAndRecordName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Asynchronous MDL Script Results
    /// - GET /api/mdl/execute_async/{job_id}/results
    /// - parameter jobId: (path)  
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func apiMdlExecuteAsyncJobIdResultsGet(jobId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/api/mdl/execute_async/{job_id}/results"
                localVarPath = localVarPath.replacingOccurrences(of: "{job_id}", with: jobId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Execute MDL Script Asynchronously
    /// - POST /api/mdl/execute_async
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func apiMdlExecuteAsyncPost(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/api/mdl/execute_async"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Execute MDL Script
    /// - POST /api/mdl/execute
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func apiMdlExecutePost(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/api/mdl/execute"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Upload Content File
    /// - POST /api/mdl/files
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func apiMdlFilesPost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/api/mdl/files"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Audit Details
    /// - GET /audittrail/{audit_trail_type}
    /// - parameter auditTrailType: (path) The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time. 
    /// - parameter startDate: (query) Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days. (optional)
    /// - parameter endDate: (query) Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days. (optional)
    /// - parameter allDates: (query) Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail. (optional)
    /// - parameter formatResult: (query) To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required. (optional)
    /// - parameter limit: (query) Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
    /// - parameter offset: (query) Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
    /// - parameter objects: (query) This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects&#x3D;product__v,country__v. If omitted, defaults to all objects. (optional)
    /// - parameter events: (query) This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events&#x3D;Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func audittrailAuditTrailTypeGet(auditTrailType: String, startDate: String? = nil, endDate: String? = nil, allDates: String? = nil, formatResult: String? = nil, limit: String? = nil, offset: String? = nil, objects: String? = nil, events: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/audittrail/{audit_trail_type}"
                localVarPath = localVarPath.replacingOccurrences(of: "{audit_trail_type}", with: auditTrailType)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let startDate = startDate { queryItems.append(URLQueryItem(name: "start_date", value: startDate)) } 
                if let endDate = endDate { queryItems.append(URLQueryItem(name: "end_date", value: endDate)) } 
                if let allDates = allDates { queryItems.append(URLQueryItem(name: "all_dates", value: allDates)) } 
                if let formatResult = formatResult { queryItems.append(URLQueryItem(name: "format_result", value: formatResult)) } 
                if let limit = limit { queryItems.append(URLQueryItem(name: "limit", value: limit)) } 
                if let offset = offset { queryItems.append(URLQueryItem(name: "offset", value: offset)) } 
                if let objects = objects { queryItems.append(URLQueryItem(name: "objects", value: objects)) } 
                if let events = events { queryItems.append(URLQueryItem(name: "events", value: events)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Authentication Type Discovery
    /// - POST /auth/discovery
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func authDiscoveryPost(accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/auth/discovery"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// OAuth 2.0 / OpenID Connect
    /// - POST /auth/oauth/session/{oath_oidc_profile_id}
    /// - parameter oathOidcProfileId: (path)  
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func authOauthSessionOathOidcProfileIdPost(oathOidcProfileId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/auth/oauth/session/{oath_oidc_profile_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{oath_oidc_profile_id}", with: oathOidcProfileId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// User Name and Password
    /// - POST /auth
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func authPost(contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/auth"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Single Source Code File
    /// - DELETE /code/{class_name}
    /// - parameter className: (path) The fully qualified class name of your file. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func codeClassNameDelete(className: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/code/{class_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{class_name}", with: className)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Disable Vault Extension
    /// - PUT /code/{class_name}/disable
    /// - parameter className: (path) The fully qualified class name of your file. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func codeClassNameDisablePut(className: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/code/{class_name}/disable"
                localVarPath = localVarPath.replacingOccurrences(of: "{class_name}", with: className)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Enable Vault Extension
    /// - PUT /code/{class_name}/enable
    /// - parameter className: (path) The fully qualified class name of your file. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func codeClassNameEnablePut(className: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/code/{class_name}/enable"
                localVarPath = localVarPath.replacingOccurrences(of: "{class_name}", with: className)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Single Source Code File
    /// - GET /code/{class_name}
    /// - parameter className: (path) The fully qualified class name of your file. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func codeClassNameGet(className: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/code/{class_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{class_name}", with: className)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve All Profiling Sessions
    /// - GET /code/profiler
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func codeProfilerGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/code/profiler"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Profiling Session
    /// - POST /code/profiler
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func codeProfilerPost(authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/code/profiler"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// End Profiling Session
    /// - POST /code/profiler/{session_name}/actions/end
    /// - parameter sessionName: (path) The name of the session, for example,  baseline__c. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func codeProfilerSessionNameActionsEndPost(sessionName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/code/profiler/{session_name}/actions/end"
                localVarPath = localVarPath.replacingOccurrences(of: "{session_name}", with: sessionName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Profiling Session
    /// - DELETE /code/profiler/{session_name}
    /// - parameter sessionName: (path) The name of the session, for example,  baseline__c. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func codeProfilerSessionNameDelete(sessionName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/code/profiler/{session_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{session_name}", with: sessionName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Profiling Session
    /// - GET /code/profiler/{session_name}
    /// - parameter sessionName: (path) The name of the session, for example,  baseline__c. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func codeProfilerSessionNameGet(sessionName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/code/profiler/{session_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{session_name}", with: sessionName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Download Profiling Session Results
    /// - GET /code/profiler/{session_name}/results
    /// - parameter sessionName: (path) The name of the session, for example,  baseline__c. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func codeProfilerSessionNameResultsGet(sessionName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/code/profiler/{session_name}/results"
                localVarPath = localVarPath.replacingOccurrences(of: "{session_name}", with: sessionName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Add or Replace Single Source Code File
    /// - PUT /code
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func codePut(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/code"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Specific Root Nodes
    /// - POST /composites/trees/{edl_hierarchy_or_template}/actions/listnodes
    /// - parameter edlHierarchyOrTemplate: (path) Choose to retrieve either edl_hierarchy__v or edl_template__v 
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(edlHierarchyOrTemplate: String, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/composites/trees/{edl_hierarchy_or_template}/actions/listnodes"
                localVarPath = localVarPath.replacingOccurrences(of: "{edl_hierarchy_or_template}", with: edlHierarchyOrTemplate)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve All Root Nodes
    /// - GET /composites/trees/{edl_hierarchy_or_template}
    /// - parameter edlHierarchyOrTemplate: (path)  
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func compositesTreesEdlHierarchyOrTemplateGet(edlHierarchyOrTemplate: String, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/composites/trees/{edl_hierarchy_or_template}"
                localVarPath = localVarPath.replacingOccurrences(of: "{edl_hierarchy_or_template}", with: edlHierarchyOrTemplate)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve a Node's Children
    /// - GET /composites/trees/edl_hierarchy__v/{parent_node_id}/children
    /// - parameter parentNodeId: (path) The ID of a parent node in the hierarchy. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func compositesTreesEdlHierarchyVParentNodeIdChildrenGet(parentNodeId: String, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/composites/trees/edl_hierarchy__v/{parent_node_id}/children"
                localVarPath = localVarPath.replacingOccurrences(of: "{parent_node_id}", with: parentNodeId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Node Order
    /// - PUT /composites/trees/edl_hierarchy__v/{parent_node_id}/children
    /// - parameter parentNodeId: (path) The ID of a parent node in the hierarchy. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func compositesTreesEdlHierarchyVParentNodeIdChildrenPut(parentNodeId: String, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/composites/trees/edl_hierarchy__v/{parent_node_id}/children"
                localVarPath = localVarPath.replacingOccurrences(of: "{parent_node_id}", with: parentNodeId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Component Record (XML/JSON)
    /// - GET /configuration/{component_type_and_record_name}
    /// - parameter componentTypeAndRecordName: (path) The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint. 
    /// - parameter loc: (query) When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func configurationComponentTypeAndRecordNameGet(componentTypeAndRecordName: String, loc: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/configuration/{component_type_and_record_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{component_type_and_record_name}", with: componentTypeAndRecordName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let loc = loc { queryItems.append(URLQueryItem(name: "loc", value: loc)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Component Record Collection
    /// - GET /configuration/{component_type}
    /// - parameter componentType: (path)  
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func configurationComponentTypeGet(componentType: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/configuration/{component_type}"
                localVarPath = localVarPath.replacingOccurrences(of: "{component_type}", with: componentType)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Details from a Specific Object
    /// - GET /configuration/{object_name_and_object_type}
    /// - parameter objectNameAndObjectType: (path) The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;. 
    /// - parameter loc: (query) When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func configurationObjectNameAndObjectTypeGet(objectNameAndObjectType: String, loc: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/configuration/{object_name_and_object_type}"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name_and_object_type}", with: objectNameAndObjectType)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let loc = loc { queryItems.append(URLQueryItem(name: "loc", value: loc)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Details from All Object Types
    /// - GET /configuration/Objecttype
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func configurationObjecttypeGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/configuration/Objecttype"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Lifecycle Role Assignment Override Rules
    /// - DELETE /configuration/role_assignment_rule
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func configurationRoleAssignmentRuleDelete(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/configuration/role_assignment_rule"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Lifecycle Role Assignment Rules (Default & Override)
    /// - GET /configuration/role_assignment_rule
    /// - parameter lifecycleV: (query) Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v&#x3D;general_lifecycle__c (optional)
    /// - parameter roleV: (query) Include the name of the role from which to retrieve information. For example: role__v&#x3D;editor__c (optional)
    /// - parameter productV: (query) Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v&#x3D;0PR0011001 or product__v.name__v&#x3D;CholeCap (optional)
    /// - parameter countryV: (query) Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v&#x3D;0CR0022002 or country__v.name__v&#x3D;United States (optional)
    /// - parameter studyV: (query) In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v&#x3D;0ST0021J01 or study__v.name__v&#x3D;CholeCap Study (optional)
    /// - parameter studyCountryV: (query) In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v&#x3D;0SC0001001 or study_country__v.name__v&#x3D;Germany (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func configurationRoleAssignmentRuleGet(lifecycleV: String? = nil, roleV: String? = nil, productV: String? = nil, countryV: String? = nil, studyV: String? = nil, studyCountryV: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/configuration/role_assignment_rule"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let lifecycleV = lifecycleV { queryItems.append(URLQueryItem(name: "lifecycle__v", value: lifecycleV)) } 
                if let roleV = roleV { queryItems.append(URLQueryItem(name: "role__v", value: roleV)) } 
                if let productV = productV { queryItems.append(URLQueryItem(name: "product__v", value: productV)) } 
                if let countryV = countryV { queryItems.append(URLQueryItem(name: "country__v", value: countryV)) } 
                if let studyV = studyV { queryItems.append(URLQueryItem(name: "study__v", value: studyV)) } 
                if let studyCountryV = studyCountryV { queryItems.append(URLQueryItem(name: "study_country__v", value: studyCountryV)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Lifecycle Role Assignment Override Rules
    /// - POST /configuration/role_assignment_rule
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func configurationRoleAssignmentRulePost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/configuration/role_assignment_rule"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Lifecycle Role Assignment Rules (Default & Override)
    /// - PUT /configuration/role_assignment_rule
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func configurationRoleAssignmentRulePut(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/configuration/role_assignment_rule"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Initiate Delegated Session
    /// - POST /delegation/login
    /// - parameter authorization: (header) The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid. (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func delegationLoginPost(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/delegation/login"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Delegations
    /// - GET /delegation/vaults
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func delegationVaultsGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/delegation/vaults"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Session Keep Alive
    /// - POST /keep-alive
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func keepAlivePost(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/keep-alive"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Limits on Objects
    /// - GET /limits
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func limitsGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/limits"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Download Daily API Usage
    /// - GET /logs/api_usage
    /// - parameter date: (query) The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past. (optional)
    /// - parameter logFormat: (query) Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP.  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func logsApiUsageGet(date: String? = nil, logFormat: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/logs/api_usage"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let date = date { queryItems.append(URLQueryItem(name: "date", value: date)) } 
                if let logFormat = logFormat { queryItems.append(URLQueryItem(name: "log_format", value: logFormat)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve All Debug Logs
    /// - GET /logs/code/debug
    /// - parameter userId: (query) Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault. (optional)
    /// - parameter includeInactive: (query) Set to &#x60;true&#x60; to include debug log sessions with a status of &#x60;inactive__sys&#x60; in the response. If omitted, defaults to &#x60;false&#x60; and inactive sessions are not included in the response. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func logsCodeDebugGet(userId: String? = nil, includeInactive: Bool? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/logs/code/debug"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let userId = userId { queryItems.append(URLQueryItem(name: "user_id", value: userId)) } 
                if let includeInactive = includeInactive { queryItems.append(URLQueryItem(name: "include_inactive", value: includeInactive ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Debug Log
    /// - DELETE /logs/code/debug/{id}/actions/reset
    /// - parameter id: (path) The ID of the debug log to delete. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func logsCodeDebugIdActionsResetDelete(id: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/logs/code/debug/{id}/actions/reset"
                localVarPath = localVarPath.replacingOccurrences(of: "{id}", with: id)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Reset Debug Log
    /// - POST /logs/code/debug/{id}/actions/reset
    /// - parameter id: (path) The ID of the debug log to delete. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func logsCodeDebugIdActionsResetPost(id: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/logs/code/debug/{id}/actions/reset"
                localVarPath = localVarPath.replacingOccurrences(of: "{id}", with: id)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Download Debug Log Files
    /// - GET /logs/code/debug/{id}/files
    /// - parameter id: (path) The ID of the debug log to download. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func logsCodeDebugIdFilesGet(id: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/logs/code/debug/{id}/files"
                localVarPath = localVarPath.replacingOccurrences(of: "{id}", with: id)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Single Debug Log
    /// - GET /logs/code/debug/{id}
    /// - parameter id: (path) The ID of the debug log to retrieve. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func logsCodeDebugIdGet(id: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/logs/code/debug/{id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{id}", with: id)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Debug Log
    /// - POST /logs/code/debug
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func logsCodeDebugPost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/logs/code/debug"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Download SDK Runtime Log
    /// - GET /logs/code/runtime
    /// - parameter date: (query)  (optional)
    /// - parameter logFormat: (query) Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP.  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func logsCodeRuntimeGet(date: String? = nil, logFormat: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/logs/code/runtime"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let date = date { queryItems.append(URLQueryItem(name: "date", value: date)) } 
                if let logFormat = logFormat { queryItems.append(URLQueryItem(name: "log_format", value: logFormat)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Import Bulk Translation File
    /// - POST /messages/{message_type}/actions/import
    /// - parameter messageType: (path) The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func messagesMessageTypeActionsImportPost(messageType: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/messages/{message_type}/actions/import"
                localVarPath = localVarPath.replacingOccurrences(of: "{message_type}", with: messageType)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Export Bulk Translation File
    /// - POST /messages/{message_type}/language/{lang}/actions/export
    /// - parameter messageType: (path) The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys. 
    /// - parameter lang: (path) A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid.  
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func messagesMessageTypeLanguageLangActionsExportPost(messageType: String, lang: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/messages/{message_type}/language/{lang}/actions/export"
                localVarPath = localVarPath.replacingOccurrences(of: "{message_type}", with: messageType)
                localVarPath = localVarPath.replacingOccurrences(of: "{lang}", with: lang)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Audit Metadata
    /// - GET /metadata/audittrail/{audit_trail_type}
    /// - parameter auditTrailType: (path) The name of the specified audit type (document_audit_trail, object_audit_trail, etc). 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataAudittrailAuditTrailTypeGet(auditTrailType: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/metadata/audittrail/{audit_trail_type}"
                localVarPath = localVarPath.replacingOccurrences(of: "{audit_trail_type}", with: auditTrailType)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Audit Types
    /// - GET /metadata/audittrail
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataAudittrailGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/metadata/audittrail"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Component Type Metadata
    /// - GET /metadata/components/{component_type}
    /// - parameter componentType: (path) The component type name (Picklist, Docfield, Doctype, etc.). 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataComponentsComponentTypeGet(componentType: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/metadata/components/{component_type}"
                localVarPath = localVarPath.replacingOccurrences(of: "{component_type}", with: componentType)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve All Component Metadata
    /// - GET /metadata/components
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataComponentsGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/metadata/components"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Binder Template Node Metadata
    /// - GET /metadata/objects/binders/templates/bindernodes
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataObjectsBindersTemplatesBindernodesGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/metadata/objects/binders/templates/bindernodes"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Binder Template Metadata
    /// - GET /metadata/objects/binders/templates
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataObjectsBindersTemplatesGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/metadata/objects/binders/templates"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Annotation Placemark Type Metadata
    /// - GET /metadata/objects/documents/annotations/placemarks/types/{placemark_type}
    /// - parameter placemarkType: (path) The name of the placemark type. For example, sticky__sys. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(placemarkType: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/metadata/objects/documents/annotations/placemarks/types/{placemark_type}"
                localVarPath = localVarPath.replacingOccurrences(of: "{placemark_type}", with: placemarkType)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Annotation Reference Type Metadata
    /// - GET /metadata/objects/documents/annotations/references/types/{reference_type}
    /// - parameter referenceType: (path)  
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(referenceType: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/metadata/objects/documents/annotations/references/types/{reference_type}"
                localVarPath = localVarPath.replacingOccurrences(of: "{reference_type}", with: referenceType)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Annotation Type Metadata
    /// - GET /metadata/objects/documents/annotations/types/{annotation_type}
    /// - parameter annotationType: (path) The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60; 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(annotationType: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/metadata/objects/documents/annotations/types/{annotation_type}"
                localVarPath = localVarPath.replacingOccurrences(of: "{annotation_type}", with: annotationType)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Event SubType Metadata
    /// - GET /metadata/objects/documents/events/{event_type}/types/{event_subtype}
    /// - parameter eventType: (path) The event type. For example, distribution__v. 
    /// - parameter eventSubtype: (path) The event subtype. For example, approved_email__v. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(eventType: String, eventSubtype: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/metadata/objects/documents/events/{event_type}/types/{event_subtype}"
                localVarPath = localVarPath.replacingOccurrences(of: "{event_type}", with: eventType)
                localVarPath = localVarPath.replacingOccurrences(of: "{event_subtype}", with: eventSubtype)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Event Types and Subtypes
    /// - GET /metadata/objects/documents/events
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataObjectsDocumentsEventsGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/metadata/objects/documents/events"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Lock Metadata
    /// - GET /metadata/objects/documents/lock
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataObjectsDocumentsLockGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/metadata/objects/documents/lock"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Common Document Fields
    /// - POST /metadata/objects/documents/properties/find_common
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataObjectsDocumentsPropertiesFindCommonPost(contentType: String? = nil, accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/metadata/objects/documents/properties/find_common"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve All Document Fields
    /// - GET /metadata/objects/documents/properties
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataObjectsDocumentsPropertiesGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/metadata/objects/documents/properties"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Template Metadata
    /// - GET /metadata/objects/documents/templates
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataObjectsDocumentsTemplatesGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/metadata/objects/documents/templates"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve All Document Types
    /// - GET /metadata/objects/documents/types
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataObjectsDocumentsTypesGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/metadata/objects/documents/types"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Type
    /// - GET /metadata/objects/documents/types/{type}
    /// - parameter type: (path) The document type. See Retrieve Document Types. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataObjectsDocumentsTypesTypeGet(type: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/metadata/objects/documents/types/{type}"
                localVarPath = localVarPath.replacingOccurrences(of: "{type}", with: type)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Type Relationships
    /// - GET /metadata/objects/documents/types/{type}/relationships
    /// - parameter type: (path) The document type. See Retrieve Document Types. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataObjectsDocumentsTypesTypeRelationshipsGet(type: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/metadata/objects/documents/types/{type}/relationships"
                localVarPath = localVarPath.replacingOccurrences(of: "{type}", with: type)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Classification
    /// - GET /metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}
    /// - parameter type: (path) The document type. See Retrieve Document Types. 
    /// - parameter subtype: (path) The document subtype. See Retrieve Document Types. 
    /// - parameter classification: (path) The document classification. See Retrieve Document Types. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(type: String, subtype: String, classification: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}"
                localVarPath = localVarPath.replacingOccurrences(of: "{type}", with: type)
                localVarPath = localVarPath.replacingOccurrences(of: "{subtype}", with: subtype)
                localVarPath = localVarPath.replacingOccurrences(of: "{classification}", with: classification)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Subtype
    /// - GET /metadata/objects/documents/types/{type}/subtypes/{subtype}
    /// - parameter type: (path) The document type. See Retrieve Document Types. 
    /// - parameter subtype: (path) The document subtype. See Retrieve Document Types. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(type: String, subtype: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/metadata/objects/documents/types/{type}/subtypes/{subtype}"
                localVarPath = localVarPath.replacingOccurrences(of: "{type}", with: type)
                localVarPath = localVarPath.replacingOccurrences(of: "{subtype}", with: subtype)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Group Metadata
    /// - GET /metadata/objects/groups
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataObjectsGroupsGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/metadata/objects/groups"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Security Policy Metadata
    /// - GET /metadata/objects/securitypolicies
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataObjectsSecuritypoliciesGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/metadata/objects/securitypolicies"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve User Metadata
    /// - GET /metadata/objects/users
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataObjectsUsersGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/metadata/objects/users"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Archived Document Signature Metadata
    /// - GET /metadata/query/archived_documents/relationships/document_signature__sysr
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/metadata/query/archived_documents/relationships/document_signature__sysr"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Signature Metadata
    /// - GET /metadata/query/documents/relationships/document_signature__sysr
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/metadata/query/documents/relationships/document_signature__sysr"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Object Collection
    /// - GET /metadata/vobjects
    /// - parameter loc: (query) To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataVobjectsGet(loc: Bool? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/metadata/vobjects"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let loc = loc { queryItems.append(URLQueryItem(name: "loc", value: loc ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Cancel Raw Object Deployment
    /// - POST /metadata/vobjects/{object_name}/actions/canceldeployment
    /// - parameter objectName: (path)  
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataVobjectsObjectNameActionsCanceldeploymentPost(objectName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/metadata/vobjects/{object_name}/actions/canceldeployment"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Object Field Metadata
    /// - GET /metadata/vobjects/{object_name}/fields/{object_field_name}
    /// - parameter objectName: (path) The object name__v field value (product__v, country__v, custom_object__c, etc.). 
    /// - parameter objectFieldName: (path) The object field name value (id, name__v, external_id__v, etc.). 
    /// - parameter loc: (query) To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataVobjectsObjectNameFieldsObjectFieldNameGet(objectName: String, objectFieldName: String, loc: Bool? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/metadata/vobjects/{object_name}/fields/{object_field_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{object_field_name}", with: objectFieldName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let loc = loc { queryItems.append(URLQueryItem(name: "loc", value: loc ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Object Metadata
    /// - GET /metadata/vobjects/{object_name}
    /// - parameter objectName: (path) The object name__v field value (product__v, country__v, custom_object__c, etc.). 
    /// - parameter loc: (query) To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataVobjectsObjectNameGet(objectName: String, loc: Bool? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/metadata/vobjects/{object_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let loc = loc { queryItems.append(URLQueryItem(name: "loc", value: loc ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Page Layouts
    /// - GET /metadata/vobjects/{object_name}/page_layouts
    /// - parameter objectName: (path)  
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataVobjectsObjectNamePageLayoutsGet(objectName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/metadata/vobjects/{object_name}/page_layouts"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Page Layout Metadata
    /// - GET /metadata/vobjects/{object_name}/page_layouts/{layout_name}
    /// - parameter objectName: (path) The name of the object from which to retrieve page layout metadata. 
    /// - parameter layoutName: (path) The name of the page layout from which to retrieve metadata. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func metadataVobjectsObjectNamePageLayoutsLayoutNameGet(objectName: String, layoutName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/metadata/vobjects/{object_name}/page_layouts/{layout_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{layout_name}", with: layoutName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Email Notification Histories
    /// - GET /notifications/histories
    /// - parameter startDate: (query) Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date. (optional)
    /// - parameter endDate: (query) Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date. (optional)
    /// - parameter allDates: (query) Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours. (optional)
    /// - parameter formatResult: (query) To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv. (optional)
    /// - parameter limit: (query) Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
    /// - parameter offset: (query) Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func notificationsHistoriesGet(startDate: String? = nil, endDate: String? = nil, allDates: Bool? = nil, formatResult: String? = nil, limit: String? = nil, offset: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/notifications/histories"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let startDate = startDate { queryItems.append(URLQueryItem(name: "start_date", value: startDate)) } 
                if let endDate = endDate { queryItems.append(URLQueryItem(name: "end_date", value: endDate)) } 
                if let allDates = allDates { queryItems.append(URLQueryItem(name: "all_dates", value: allDates ? "true" : "false")) } 
                if let formatResult = formatResult { queryItems.append(URLQueryItem(name: "format_result", value: formatResult)) } 
                if let limit = limit { queryItems.append(URLQueryItem(name: "limit", value: limit)) } 
                if let offset = offset { queryItems.append(URLQueryItem(name: "offset", value: offset)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Bulk Workflow Action Details
    /// - GET /object/workflow/actions/{action}
    /// - parameter action: (path)  
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectWorkflowActionsActionGet(action: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/object/workflow/actions/{action}"
                localVarPath = localVarPath.replacingOccurrences(of: "{action}", with: action)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Initiate Workflow Actions on Multiple Workflows
    /// - POST /object/workflow/actions/{action}
    /// - parameter action: (path)  
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectWorkflowActionsActionPost(action: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/object/workflow/actions/{action}"
                localVarPath = localVarPath.replacingOccurrences(of: "{action}", with: action)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Cancel Workflow Tasks
    /// - POST /object/workflow/actions/canceltasks
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectWorkflowActionsCanceltasksPost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/object/workflow/actions/canceltasks"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Cancel Workflows
    /// - POST /object/workflow/actions/cancelworkflows
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectWorkflowActionsCancelworkflowsPost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/object/workflow/actions/cancelworkflows"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Bulk Workflow Actions
    /// - GET /object/workflow/actions
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectWorkflowActionsGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/object/workflow/actions"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Reassign Workflow Tasks
    /// - POST /object/workflow/actions/reassigntasks
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectWorkflowActionsReassigntasksPost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/object/workflow/actions/reassigntasks"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Replace Workflow Owner
    /// - POST /object/workflow/actions/replaceworkflowowner
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectWorkflowActionsReplaceworkflowownerPost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/object/workflow/actions/replaceworkflowowner"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Binder Export Results
    /// - GET /objects/binders/actions/export/{job_id}/results
    /// - parameter jobId: (path) The id value of the requested export job. This is returned with the export binder requests above. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersActionsExportJobIdResultsGet(jobId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/actions/export/{job_id}/results"
                localVarPath = localVarPath.replacingOccurrences(of: "{job_id}", with: jobId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Export Binder (Latest Version)
    /// - POST /objects/binders/{binder_id}/actions/export
    /// - parameter binderId: (path) The binder id field value. 
    /// - parameter source: (query) to include source content or not (optional)
    /// - parameter renditiontype: (query) to include viewable renditions (optional)
    /// - parameter docversion: (query) to include all major versions (optional)
    /// - parameter attachments: (query) to include all versions of attachments (optional)
    /// - parameter export: (query) configurable filename metadata (optional)
    /// - parameter docfield: (query) to exclude document metadata csv (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersBinderIdActionsExportPost(binderId: String, source: Bool? = nil, renditiontype: String? = nil, docversion: String? = nil, attachments: String? = nil, export: String? = nil, docfield: Bool? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{binder_id}/actions/export"
                localVarPath = localVarPath.replacingOccurrences(of: "{binder_id}", with: binderId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let source = source { queryItems.append(URLQueryItem(name: "source", value: source ? "true" : "false")) } 
                if let renditiontype = renditiontype { queryItems.append(URLQueryItem(name: "renditiontype", value: renditiontype)) } 
                if let docversion = docversion { queryItems.append(URLQueryItem(name: "docversion", value: docversion)) } 
                if let attachments = attachments { queryItems.append(URLQueryItem(name: "attachments", value: attachments)) } 
                if let export = export { queryItems.append(URLQueryItem(name: "export", value: export)) } 
                if let docfield = docfield { queryItems.append(URLQueryItem(name: "docfield", value: docfield ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Refresh Binder Auto-Filing
    /// - POST /objects/binders/{binder_id}/actions
    /// - parameter binderId: (path) The binder id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersBinderIdActionsPost(binderId: String, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{binder_id}/actions"
                localVarPath = localVarPath.replacingOccurrences(of: "{binder_id}", with: binderId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Binding Rule
    /// - PUT /objects/binders/{binder_id}/binding_rule
    /// - parameter binderId: (path) The binder id field value. 
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersBinderIdBindingRulePut(binderId: String, contentType: String? = nil, accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{binder_id}/binding_rule"
                localVarPath = localVarPath.replacingOccurrences(of: "{binder_id}", with: binderId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Binder
    /// - DELETE /objects/binders/{binder_id}
    /// - parameter binderId: (path) The binder id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersBinderIdDelete(binderId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{binder_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{binder_id}", with: binderId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Binder Document Binding Rule
    /// - PUT /objects/binders/{binder_id}/documents/{node_id}/binding_rule
    /// - parameter binderId: (path) The binder id field value. 
    /// - parameter nodeId: (path) The binder node id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersBinderIdDocumentsNodeIdBindingRulePut(binderId: String, nodeId: String, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{binder_id}/documents/{node_id}/binding_rule"
                localVarPath = localVarPath.replacingOccurrences(of: "{binder_id}", with: binderId)
                localVarPath = localVarPath.replacingOccurrences(of: "{node_id}", with: nodeId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Add Document to Binder
    /// - POST /objects/binders/{binder_id}/documents
    /// - parameter binderId: (path) The binder id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersBinderIdDocumentsPost(binderId: String, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{binder_id}/documents"
                localVarPath = localVarPath.replacingOccurrences(of: "{binder_id}", with: binderId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Remove Document from Binder
    /// - DELETE /objects/binders/{binder_id}/documents/{section_id}
    /// - parameter binderId: (path) The binder id field value. 
    /// - parameter sectionId: (path) The binder node id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersBinderIdDocumentsSectionIdDelete(binderId: String, sectionId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{binder_id}/documents/{section_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{binder_id}", with: binderId)
                localVarPath = localVarPath.replacingOccurrences(of: "{section_id}", with: sectionId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Move Document in Binder
    /// - PUT /objects/binders/{binder_id}/documents/{section_id}
    /// - parameter binderId: (path) The binder id field value. 
    /// - parameter sectionId: (path) The binder node id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersBinderIdDocumentsSectionIdPut(binderId: String, sectionId: String, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{binder_id}/documents/{section_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{binder_id}", with: binderId)
                localVarPath = localVarPath.replacingOccurrences(of: "{section_id}", with: sectionId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Binder
    /// - GET /objects/binders/{binder_id}
    /// - parameter binderId: (path) The binder id field value. 
    /// - parameter depth: (query) To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersBinderIdGet(binderId: String, depth: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{binder_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{binder_id}", with: binderId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let depth = depth { queryItems.append(URLQueryItem(name: "depth", value: depth)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Binder Version
    /// - POST /objects/binders/{binder_id}
    /// - parameter binderId: (path) The binder id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersBinderIdPost(binderId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{binder_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{binder_id}", with: binderId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Binder
    /// - PUT /objects/binders/{binder_id}
    /// - parameter binderId: (path) The binder id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersBinderIdPut(binderId: String, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{binder_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{binder_id}", with: binderId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Remove Users & Groups from Roles on a Single Binder
    /// - DELETE /objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}
    /// - parameter binderId: (path) The id value of the binder from which to remove roles. 
    /// - parameter roleNameAndUserOrGroup: (path) The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;. 
    /// - parameter id: (path) The id value of the user or group to remove from the role. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(binderId: String, roleNameAndUserOrGroup: String, id: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{binder_id}", with: binderId)
                localVarPath = localVarPath.replacingOccurrences(of: "{role_name_and_user_or_group}", with: roleNameAndUserOrGroup)
                localVarPath = localVarPath.replacingOccurrences(of: "{id}", with: id)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Binder Section Binding Rule
    /// - PUT /objects/binders/{binder_id}/sections/{node_id}/binding_rule
    /// - parameter binderId: (path) The binder id field value. 
    /// - parameter nodeId: (path) The binder node id field value. 
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersBinderIdSectionsNodeIdBindingRulePut(binderId: String, nodeId: String, contentType: String? = nil, accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{binder_id}/sections/{node_id}/binding_rule"
                localVarPath = localVarPath.replacingOccurrences(of: "{binder_id}", with: binderId)
                localVarPath = localVarPath.replacingOccurrences(of: "{node_id}", with: nodeId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Binder Section
    /// - PUT /objects/binders/{binder_id}/sections/{node_id}
    /// - parameter binderId: (path) The binder id field value. 
    /// - parameter nodeId: (path) The binder node id of the section. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersBinderIdSectionsNodeIdPut(binderId: String, nodeId: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{binder_id}/sections/{node_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{binder_id}", with: binderId)
                localVarPath = localVarPath.replacingOccurrences(of: "{node_id}", with: nodeId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Binder Section
    /// - POST /objects/binders/{binder_id}/sections
    /// - parameter binderId: (path) The binder id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersBinderIdSectionsPost(binderId: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{binder_id}/sections"
                localVarPath = localVarPath.replacingOccurrences(of: "{binder_id}", with: binderId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Binder Section
    /// - DELETE /objects/binders/{binder_id}/sections/{section_id}
    /// - parameter binderId: (path) The binder id field value. 
    /// - parameter sectionId: (path) The binder node id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersBinderIdSectionsSectionIdDelete(binderId: String, sectionId: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{binder_id}/sections/{section_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{binder_id}", with: binderId)
                localVarPath = localVarPath.replacingOccurrences(of: "{section_id}", with: sectionId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Binder Sections
    /// - GET /objects/binders/{binder_id}/sections/{section_id}
    /// - parameter binderId: (path) The binder id field value. 
    /// - parameter sectionId: (path) The binder node id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersBinderIdSectionsSectionIdGet(binderId: String, sectionId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{binder_id}/sections/{section_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{binder_id}", with: binderId)
                localVarPath = localVarPath.replacingOccurrences(of: "{section_id}", with: sectionId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve All Binder Versions
    /// - GET /objects/binders/{binder_id}/versions
    /// - parameter binderId: (path) The binder id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersBinderIdVersionsGet(binderId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{binder_id}/versions"
                localVarPath = localVarPath.replacingOccurrences(of: "{binder_id}", with: binderId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Export Binder (Specific Version)
    /// - POST /objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export
    /// - parameter binderId: (path) The binder id field value. 
    /// - parameter majorVersion: (path) The binder major_version_number__v field value. 
    /// - parameter minorVersion: (path) The binder minor_version_number__v field value. 
    /// - parameter source: (query) to include source content or not (optional)
    /// - parameter renditiontype: (query) to include viewable renditions (optional)
    /// - parameter docversion: (query) to include all major versions (optional)
    /// - parameter attachments: (query) to include all versions of attachments (optional)
    /// - parameter export: (query) configurable filename metadata (optional)
    /// - parameter docfield: (query) to exclude document metadata csv (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(binderId: String, majorVersion: String, minorVersion: String, source: Bool? = nil, renditiontype: String? = nil, docversion: String? = nil, attachments: String? = nil, export: String? = nil, docfield: Bool? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export"
                localVarPath = localVarPath.replacingOccurrences(of: "{binder_id}", with: binderId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let source = source { queryItems.append(URLQueryItem(name: "source", value: source ? "true" : "false")) } 
                if let renditiontype = renditiontype { queryItems.append(URLQueryItem(name: "renditiontype", value: renditiontype)) } 
                if let docversion = docversion { queryItems.append(URLQueryItem(name: "docversion", value: docversion)) } 
                if let attachments = attachments { queryItems.append(URLQueryItem(name: "attachments", value: attachments)) } 
                if let export = export { queryItems.append(URLQueryItem(name: "export", value: export)) } 
                if let docfield = docfield { queryItems.append(URLQueryItem(name: "docfield", value: docfield ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Binder Version
    /// - DELETE /objects/binders/{binder_id}/versions/{major_version}/{minor_version}
    /// - parameter binderId: (path) The binder id field value. 
    /// - parameter majorVersion: (path) The binder major_version_number__v field value. 
    /// - parameter minorVersion: (path) The binder minor_version_number__v field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(binderId: String, majorVersion: String, minorVersion: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}"
                localVarPath = localVarPath.replacingOccurrences(of: "{binder_id}", with: binderId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Binder Version
    /// - GET /objects/binders/{binder_id}/versions/{major_version}/{minor_version}
    /// - parameter binderId: (path) The binder id field value. 
    /// - parameter majorVersion: (path) The binder major_version_number__v field value. 
    /// - parameter minorVersion: (path) The binder minor_version_number__v field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(binderId: String, majorVersion: String, minorVersion: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}"
                localVarPath = localVarPath.replacingOccurrences(of: "{binder_id}", with: binderId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Binder Version
    /// - PUT /objects/binders/{binder_id}/versions/{major_version}/{minor_version}
    /// - parameter binderId: (path) The binder id field value. 
    /// - parameter majorVersion: (path) The binder major_version_number__v field value. 
    /// - parameter minorVersion: (path) The binder minor_version_number__v field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(binderId: String, majorVersion: String, minorVersion: String, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}"
                localVarPath = localVarPath.replacingOccurrences(of: "{binder_id}", with: binderId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Binder Relationship
    /// - POST /objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships
    /// - parameter binderId: (path) The binder id field value. 
    /// - parameter majorVersion: (path) The binder major_version_number__v field value. 
    /// - parameter minorVersion: (path) The binder minor_version_number__v field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(binderId: String, majorVersion: String, minorVersion: String, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships"
                localVarPath = localVarPath.replacingOccurrences(of: "{binder_id}", with: binderId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Binder Relationship
    /// - DELETE /objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}
    /// - parameter binderId: (path) The binder id field value. 
    /// - parameter majorVersion: (path) The binder major_version_number__v field value. 
    /// - parameter minorVersion: (path) The binder minor_version_number__v field value. 
    /// - parameter relationshipId: (path) The binder relationship id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(binderId: String, majorVersion: String, minorVersion: String, relationshipId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{binder_id}", with: binderId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{relationship_id}", with: relationshipId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Binder Relationship
    /// - GET /objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}
    /// - parameter binderId: (path) The binder id field value. 
    /// - parameter majorVersion: (path) The binder major_version_number__v field value. 
    /// - parameter minorVersion: (path) The binder minor_version_number__v field value. 
    /// - parameter relationshipId: (path) The binder relationship id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(binderId: String, majorVersion: String, minorVersion: String, relationshipId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{binder_id}", with: binderId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{relationship_id}", with: relationshipId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Binder Version Section
    /// - GET /objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}
    /// - parameter binderId: (path) The binder id field value. 
    /// - parameter majorVersion: (path) The binder major_version_number__v field value. 
    /// - parameter minorVersion: (path) The binder minor_version_number__v field value. 
    /// - parameter sectionId: (path) Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(binderId: String, majorVersion: String, minorVersion: String, sectionId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{binder_id}", with: binderId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{section_id}", with: sectionId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve All Binder Roles
    /// - GET /objects/binders/{id}/roles
    /// - parameter id: (path)  
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersIdRolesGet(id: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{id}/roles"
                localVarPath = localVarPath.replacingOccurrences(of: "{id}", with: id)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Assign Users & Groups to Roles on a Single Binder
    /// - POST /objects/binders/{id}/roles
    /// - parameter id: (path)  
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersIdRolesPost(id: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{id}/roles"
                localVarPath = localVarPath.replacingOccurrences(of: "{id}", with: id)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Role
    /// - GET /objects/binders/{id}/roles/{role_name}
    /// - parameter id: (path) The binder &#x60;id&#x60;. 
    /// - parameter roleName: (path) The name of the role to retrieve. For example, &#x60;owner__v&#x60;. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersIdRolesRoleNameGet(id: String, roleName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{id}/roles/{role_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{id}", with: id)
                localVarPath = localVarPath.replacingOccurrences(of: "{role_name}", with: roleName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Binder User Actions
    /// - GET /objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions
    /// - parameter id: (path) The binder id field value from which to retrieve available user actions. 
    /// - parameter majorVersion: (path) The major version number of the binder. 
    /// - parameter minorVersion: (path) The minor version number of the binder. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id: String, majorVersion: String, minorVersion: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions"
                localVarPath = localVarPath.replacingOccurrences(of: "{id}", with: id)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Binder Entry Criteria
    /// - GET /objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements
    /// - parameter id: (path) The binder id field value from which to retrieve available user actions. 
    /// - parameter majorVersion: (path) The major version number of the binder. 
    /// - parameter minorVersion: (path) The minor version number of the binder. 
    /// - parameter nameV: (path) The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id: String, majorVersion: String, minorVersion: String, nameV: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements"
                localVarPath = localVarPath.replacingOccurrences(of: "{id}", with: id)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{name__v}", with: nameV)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Initiate Binder User Action
    /// - PUT /objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}
    /// - parameter id: (path) The binder id field value from which to retrieve available user actions. 
    /// - parameter majorVersion: (path) The major version number of the binder. 
    /// - parameter minorVersion: (path) The minor version number of the binder. 
    /// - parameter nameV: (path) The action name__v field value to initiate. This is retrieved from the Retrieve User Action request. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id: String, majorVersion: String, minorVersion: String, nameV: String, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}"
                localVarPath = localVarPath.replacingOccurrences(of: "{id}", with: id)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{name__v}", with: nameV)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve User Actions on Multiple Binders
    /// - POST /objects/binders/lifecycle_actions
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersLifecycleActionsPost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/binders/lifecycle_actions"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Initiate Bulk Binder User Actions
    /// - PUT /objects/binders/lifecycle_actions/{user_action_name}
    /// - parameter userActionName: (path) The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersLifecycleActionsUserActionNamePut(userActionName: String, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/lifecycle_actions/{user_action_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{user_action_name}", with: userActionName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Binder
    /// - POST /objects/binders
    /// - parameter async: (query) When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async&#x3D;true). This helps speed up the response time from Vault when processing large amounts of data.  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersPost(async: Bool? = nil, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/binders"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let async = async { queryItems.append(URLQueryItem(name: "async", value: async ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Binder Template Collection
    /// - GET /objects/binders/templates
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersTemplatesGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/binders/templates"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Binder Template
    /// - POST /objects/binders/templates
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersTemplatesPost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/binders/templates"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Binder Template
    /// - PUT /objects/binders/templates
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersTemplatesPut(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/binders/templates"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Binder Template Node Attributes
    /// - GET /objects/binders/templates/{template_name}/bindernodes
    /// - parameter templateName: (path) The binder template name__v field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersTemplatesTemplateNameBindernodesGet(templateName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/templates/{template_name}/bindernodes"
                localVarPath = localVarPath.replacingOccurrences(of: "{template_name}", with: templateName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Binder Template Node
    /// - POST /objects/binders/templates/{template_name}/bindernodes
    /// - parameter templateName: (path) The binder template name__v field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersTemplatesTemplateNameBindernodesPost(templateName: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/templates/{template_name}/bindernodes"
                localVarPath = localVarPath.replacingOccurrences(of: "{template_name}", with: templateName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Replace Binder Template Nodes
    /// - PUT /objects/binders/templates/{template_name}/bindernodes
    /// - parameter templateName: (path) The binder template name__v field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersTemplatesTemplateNameBindernodesPut(templateName: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/templates/{template_name}/bindernodes"
                localVarPath = localVarPath.replacingOccurrences(of: "{template_name}", with: templateName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Binder Template
    /// - DELETE /objects/binders/templates/{template_name}
    /// - parameter templateName: (path) The binder template name__v field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersTemplatesTemplateNameDelete(templateName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/templates/{template_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{template_name}", with: templateName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Binder Template Attributes
    /// - GET /objects/binders/templates/{template_name}
    /// - parameter templateName: (path) The binder template name__v field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsBindersTemplatesTemplateNameGet(templateName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/binders/templates/{template_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{template_name}", with: templateName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Deleted Document IDs
    /// - GET /objects/deletions/documents
    /// - parameter startDate: (query) Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z (optional)
    /// - parameter endDate: (query) Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDeletionsDocumentsGet(startDate: String? = nil, endDate: String? = nil, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/deletions/documents"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let startDate = startDate { queryItems.append(URLQueryItem(name: "start_date", value: startDate)) } 
                if let endDate = endDate { queryItems.append(URLQueryItem(name: "end_date", value: endDate)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Deleted Object Record ID
    /// - GET /objects/deletions/vobjects/{object_name}
    /// - parameter objectName: (path) The object name__v field value (product__v, country__v, custom_object__c, etc.). 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDeletionsVobjectsObjectNameGet(objectName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/deletions/vobjects/{object_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve All Document Workflows
    /// - GET /objects/documents/actions
    /// - parameter loc: (query) When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsActionsGet(loc: Bool? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/actions"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let loc = loc { queryItems.append(URLQueryItem(name: "loc", value: loc ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Download Controlled Copy Job Results
    /// - GET /objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results
    /// - parameter lifecycleAndStateAndAction: (path) The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link. 
    /// - parameter jobId: (path)  
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(lifecycleAndStateAndAction: String, jobId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results"
                localVarPath = localVarPath.replacingOccurrences(of: "{lifecycle_and_state_and_action}", with: lifecycleAndStateAndAction)
                localVarPath = localVarPath.replacingOccurrences(of: "{job_id}", with: jobId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Workflow Details
    /// - GET /objects/documents/actions/{workflow_name}
    /// - parameter workflowName: (path) The document workflow name value. 
    /// - parameter loc: (query) When localized (translated) strings are available, retrieve them by setting loc to true. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsActionsWorkflowNameGet(workflowName: String, loc: Bool? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/actions/{workflow_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{workflow_name}", with: workflowName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let loc = loc { queryItems.append(URLQueryItem(name: "loc", value: loc ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Initiate Document Workflow
    /// - POST /objects/documents/actions/{workflow_name}
    /// - parameter workflowName: (path) The document workflow name value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsActionsWorkflowNamePost(workflowName: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/actions/{workflow_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{workflow_name}", with: workflowName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Annotations
    /// - DELETE /objects/documents/annotations/batch
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsAnnotationsBatchDelete(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/annotations/batch"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Multiple Annotations
    /// - POST /objects/documents/annotations/batch
    /// - parameter authorization: (header)  
    /// - parameter contentType: (header)  
    /// - parameter accept: (header)  
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. 
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsAnnotationsBatchPost(authorization: String, contentType: String, accept: String, xVaultAPIClientID: String) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/annotations/batch"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                headers["Authorization"] = authorization
                headers["Content-Type"] = contentType
                headers["Accept"] = accept
                headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Annotations
    /// - PUT /objects/documents/annotations/batch
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsAnnotationsBatchPut(authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/annotations/batch"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Add Annotation Replies
    /// - POST /objects/documents/annotations/replies/batch
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsAnnotationsRepliesBatchPost(authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/annotations/replies/batch"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Multiple Document Attachments
    /// - DELETE /objects/documents/attachments/batch
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsAttachmentsBatchDelete(accept: String? = nil, authorization: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/attachments/batch"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Multiple Document Attachments
    /// - POST /objects/documents/attachments/batch
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsAttachmentsBatchPost(accept: String? = nil, authorization: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/attachments/batch"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Multiple Document Attachment Descriptions
    /// - PUT /objects/documents/attachments/batch
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsAttachmentsBatchPut(accept: String? = nil, authorization: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/attachments/batch"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Export Results
    /// - GET /objects/documents/batch/actions/fileextract/{job_id}/results
    /// - parameter jobId: (path) The id value of the requested export job. This is returned with the export document requests. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsBatchActionsFileextractJobIdResultsGet(jobId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/batch/actions/fileextract/{job_id}/results"
                localVarPath = localVarPath.replacingOccurrences(of: "{job_id}", with: jobId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Export Documents
    /// - POST /objects/documents/batch/actions/fileextract
    /// - parameter source: (query) Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true. (optional)
    /// - parameter renditions: (query) Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false. (optional)
    /// - parameter allversions: (query) Optional: To include all versions or latest version, include a query parameter allversions&#x3D;true. If omitted, defaults to false. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsBatchActionsFileextractPost(source: Bool? = nil, renditions: Bool? = nil, allversions: Bool? = nil, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/batch/actions/fileextract"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let source = source { queryItems.append(URLQueryItem(name: "source", value: source ? "true" : "false")) } 
                if let renditions = renditions { queryItems.append(URLQueryItem(name: "renditions", value: renditions ? "true" : "false")) } 
                if let allversions = allversions { queryItems.append(URLQueryItem(name: "allversions", value: allversions ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Reclassify Multiple Documents
    /// - PUT /objects/documents/batch/actions/reclassify
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIMigrationMode: (header) When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsBatchActionsReclassifyPut(authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIMigrationMode: Bool? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/batch/actions/reclassify"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIMigrationMode = xVaultAPIMigrationMode { headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode ? "true" : "false" }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Multiple Document Renditions
    /// - POST /objects/documents/batch/actions/rerender
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsBatchActionsRerenderPost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/batch/actions/rerender"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Multiple Documents
    /// - DELETE /objects/documents/batch
    /// - parameter idParam: (query) If you’re identifying documents in your input by their external ID (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsBatchDelete(idParam: String? = nil, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/batch"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let idParam = idParam { queryItems.append(URLQueryItem(name: "idParam", value: idParam)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Undo Collaborative Authoring Checkout
    /// - DELETE /objects/documents/batch/lock
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsBatchLockDelete(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/batch/lock"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Multiple Documents
    /// - POST /objects/documents/batch
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIMigrationMode: (header) When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsBatchPost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIMigrationMode: Bool? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/batch"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIMigrationMode = xVaultAPIMigrationMode { headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode ? "true" : "false" }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Multiple Documents
    /// - PUT /objects/documents/batch
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIMigrationMode: (header) When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsBatchPut(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIMigrationMode: Bool? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/batch"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIMigrationMode = xVaultAPIMigrationMode { headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode ? "true" : "false" }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Anchor IDs
    /// - GET /objects/documents/{doc_id}/anchors
    /// - parameter docId: (path) The document id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdAnchorsGet(docId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/anchors"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Export Document Annotations to PDF
    /// - GET /objects/documents/{doc_id}/annotations/file
    /// - parameter docId: (path) The document id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdAnnotationsFileGet(docId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/annotations/file"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Import Document Annotations from PDF
    /// - POST /objects/documents/{doc_id}/annotations/file
    /// - parameter docId: (path) The document id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdAnnotationsFilePost(docId: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/annotations/file"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Single Document Attachment
    /// - DELETE /objects/documents/{doc_id}/attachments/{attachment_id}
    /// - parameter docId: (path) The document id field value. 
    /// - parameter attachmentId: (path) The attachment id field value. 
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdAttachmentsAttachmentIdDelete(docId: String, attachmentId: String, accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/attachments/{attachment_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_id}", with: attachmentId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Download Document Attachment
    /// - GET /objects/documents/{doc_id}/attachments/{attachment_id}/file
    /// - parameter docId: (path) The document id field value. 
    /// - parameter attachmentId: (path) The attachment id field value. 
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(docId: String, attachmentId: String, accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/attachments/{attachment_id}/file"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_id}", with: attachmentId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Attachment Metadata
    /// - GET /objects/documents/{doc_id}/attachments/{attachment_id}
    /// - parameter docId: (path) The document id field value. 
    /// - parameter attachmentId: (path) The attachment id field value. 
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdAttachmentsAttachmentIdGet(docId: String, attachmentId: String, accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/attachments/{attachment_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_id}", with: attachmentId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Document Attachment Description
    /// - PUT /objects/documents/{doc_id}/attachments/{attachment_id}
    /// - parameter docId: (path) The document id field value. 
    /// - parameter attachmentId: (path) The attachment id field value. 
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdAttachmentsAttachmentIdPut(docId: String, attachmentId: String, accept: String? = nil, authorization: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/attachments/{attachment_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_id}", with: attachmentId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Single Document Attachment Version
    /// - DELETE /objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}
    /// - parameter docId: (path) The document id field value. 
    /// - parameter attachmentId: (path) The attachment id field value. 
    /// - parameter attachmentVersion: (path) The attachment version__v field value. 
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(docId: String, attachmentId: String, attachmentVersion: String, accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_id}", with: attachmentId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_version}", with: attachmentVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Download Document Attachment Version
    /// - GET /objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file
    /// - parameter docId: (path) The document id field value. 
    /// - parameter attachmentId: (path) The attachment id field value. 
    /// - parameter attachmentVersion: (path) The attachment version__v field value. 
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId: String, attachmentId: String, attachmentVersion: String, accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_id}", with: attachmentId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_version}", with: attachmentVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Attachment Version Metadata
    /// - GET /objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}
    /// - parameter docId: (path) The document id field value. 
    /// - parameter attachmentId: (path) The attachment id field value. 
    /// - parameter attachmentVersion: (path) The attachment version__v field value. 
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId: String, attachmentId: String, attachmentVersion: String, accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_id}", with: attachmentId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_version}", with: attachmentVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Restore Document Attachment Version
    /// - POST /objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}
    /// - parameter docId: (path) The document id field value. 
    /// - parameter attachmentId: (path) The attachment id field value. 
    /// - parameter attachmentVersion: (path) The attachment version__v field value. 
    /// - parameter restore: (query) The parameter restore must be set to true.  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(docId: String, attachmentId: String, attachmentVersion: String, restore: Bool? = nil, accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_id}", with: attachmentId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_version}", with: attachmentVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let restore = restore { queryItems.append(URLQueryItem(name: "restore", value: restore ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Attachment Versions
    /// - GET /objects/documents/{doc_id}/attachments/{attachment_id}/versions
    /// - parameter docId: (path) The document id field value. 
    /// - parameter attachmentId: (path) The attachment id field value. 
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(docId: String, attachmentId: String, accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_id}", with: attachmentId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Download All Document Attachments
    /// - GET /objects/documents/{doc_id}/attachments/file
    /// - parameter docId: (path) The document id field value. 
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdAttachmentsFileGet(docId: String, accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/attachments/file"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Attachments
    /// - GET /objects/documents/{doc_id}/attachments
    /// - parameter docId: (path) The document id field value. 
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdAttachmentsGet(docId: String, accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/attachments"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Document Attachment
    /// - POST /objects/documents/{doc_id}/attachments
    /// - parameter docId: (path) The document id field value. 
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdAttachmentsPost(docId: String, accept: String? = nil, authorization: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/attachments"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Complete Audit History for a Single Document
    /// - GET /objects/documents/{doc_id}/audittrail
    /// - parameter docId: (path) The document ID for which to retrieve audit history. 
    /// - parameter startDate: (query) Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date.  (optional)
    /// - parameter endDate: (query) Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date.  (optional)
    /// - parameter formatResult: (query) To request a CSV file of your audit history, use csv.  (optional)
    /// - parameter limit: (query) Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
    /// - parameter offset: (query) Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
    /// - parameter events: (query) Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdAudittrailGet(docId: String, startDate: String? = nil, endDate: String? = nil, formatResult: String? = nil, limit: String? = nil, offset: String? = nil, events: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/audittrail"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let startDate = startDate { queryItems.append(URLQueryItem(name: "start_date", value: startDate)) } 
                if let endDate = endDate { queryItems.append(URLQueryItem(name: "end_date", value: endDate)) } 
                if let formatResult = formatResult { queryItems.append(URLQueryItem(name: "format_result", value: formatResult)) } 
                if let limit = limit { queryItems.append(URLQueryItem(name: "limit", value: limit)) } 
                if let offset = offset { queryItems.append(URLQueryItem(name: "offset", value: offset)) } 
                if let events = events { queryItems.append(URLQueryItem(name: "events", value: events)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Single Document
    /// - DELETE /objects/documents/{doc_id}
    /// - parameter docId: (path) The document id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdDelete(docId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Events
    /// - GET /objects/documents/{doc_id}/events
    /// - parameter docId: (path) The document id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdEventsGet(docId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/events"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Download Document File
    /// - GET /objects/documents/{doc_id}/file
    /// - parameter docId: (path) The document id field value. 
    /// - parameter lockDocument: (query) Set to true to Check Out this document before retrieval. If omitted, defaults to false. (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdFileGet(docId: String, lockDocument: Bool? = nil, accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/file"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let lockDocument = lockDocument { queryItems.append(URLQueryItem(name: "lockDocument", value: lockDocument ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document
    /// - GET /objects/documents/{doc_id}
    /// - parameter docId: (path) The document id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdGet(docId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Document Lock
    /// - DELETE /objects/documents/{doc_id}/lock
    /// - parameter docId: (path) The document id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdLockDelete(docId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/lock"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Lock
    /// - GET /objects/documents/{doc_id}/lock
    /// - parameter docId: (path) The document id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdLockGet(docId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/lock"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Document Lock
    /// - POST /objects/documents/{doc_id}/lock
    /// - parameter docId: (path) The document id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdLockPost(docId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/lock"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Download All Document Version Attachments
    /// - GET /objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file
    /// - parameter docId: (path) The document id field value. 
    /// - parameter majorVersion: (path) The document major_version_number__v field value. 
    /// - parameter minorVersion: (path) The document minor_version_number__v field value. 
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(docId: String, majorVersion: String, minorVersion: String, accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Single Document Version
    /// - POST /objects/documents/{doc_id}
    /// - parameter docId: (path) The document id field value. 
    /// - parameter suppressRendition: (query) Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdPost(docId: String, suppressRendition: String? = nil, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let suppressRendition = suppressRendition { queryItems.append(URLQueryItem(name: "suppressRendition", value: suppressRendition)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Single Document
    /// - PUT /objects/documents/{doc_id}
    /// - parameter docId: (path) The document id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIMigrationMode: (header) When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdPut(docId: String, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIMigrationMode: Bool? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIMigrationMode = xVaultAPIMigrationMode { headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode ? "true" : "false" }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Renditions
    /// - GET /objects/documents/{doc_id}/renditions
    /// - parameter docId: (path) The document id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdRenditionsGet(docId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/renditions"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Single Document Rendition
    /// - DELETE /objects/documents/{doc_id}/renditions/{rendition_type}
    /// - parameter docId: (path) The document id field value. 
    /// - parameter renditionType: (path) The document rendition type. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdRenditionsRenditionTypeDelete(docId: String, renditionType: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/renditions/{rendition_type}"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{rendition_type}", with: renditionType)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Download Document Rendition File
    /// - GET /objects/documents/{doc_id}/renditions/{rendition_type}
    /// - parameter docId: (path) The document id field value. 
    /// - parameter renditionType: (path) The document rendition type. 
    /// - parameter steadyState: (query) Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document.  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdRenditionsRenditionTypeGet(docId: String, renditionType: String, steadyState: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/renditions/{rendition_type}"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{rendition_type}", with: renditionType)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let steadyState = steadyState { queryItems.append(URLQueryItem(name: "steadyState", value: steadyState)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Add Single Document Rendition
    /// - POST /objects/documents/{doc_id}/renditions/{rendition_type}
    /// - parameter docId: (path) The document id field value. 
    /// - parameter renditionType: (path) The document rendition type. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdRenditionsRenditionTypePost(docId: String, renditionType: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/renditions/{rendition_type}"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{rendition_type}", with: renditionType)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Replace Document Rendition
    /// - PUT /objects/documents/{doc_id}/renditions/{rendition_type}
    /// - parameter docId: (path) The document id field value. 
    /// - parameter renditionType: (path) The document rendition type. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdRenditionsRenditionTypePut(docId: String, renditionType: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/renditions/{rendition_type}"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{rendition_type}", with: renditionType)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Remove Users & Groups from Roles on a Single Document
    /// - DELETE /objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}
    /// - parameter docId: (path) The id value of the document from which to remove roles. 
    /// - parameter roleNameAndUserOrGroup: (path) The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;. 
    /// - parameter id: (path) The id value of the user or group to remove from the role. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(docId: String, roleNameAndUserOrGroup: String, id: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{role_name_and_user_or_group}", with: roleNameAndUserOrGroup)
                localVarPath = localVarPath.replacingOccurrences(of: "{id}", with: id)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Version Attachments
    /// - GET /objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments
    /// - parameter docId: (path) The document id field value. 
    /// - parameter majorVersion: (path) The document major_version_number__v field value. 
    /// - parameter minorVersion: (path) The document minor_version_number__v field value. 
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(docId: String, majorVersion: String, minorVersion: String, accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Versions
    /// - GET /objects/documents/{doc_id}/versions
    /// - parameter docId: (path) The document id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdVersionsGet(docId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/versions"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Read Annotations by ID
    /// - GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}
    /// - parameter docId: (path) The document id field value. 
    /// - parameter majorVersion: (path) The document major_version_number__v field value. 
    /// - parameter minorVersion: (path) The document minor_version_number__v field value. 
    /// - parameter annotationId: (path) The annotation ID, which can be retrieved with Read Annotations by Document Version and Type. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(docId: String, majorVersion: String, minorVersion: String, annotationId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{annotation_id}", with: annotationId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Read Replies of Parent Annotation
    /// - GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies
    /// - parameter docId: (path) The document id field value. 
    /// - parameter majorVersion: (path) The document major_version_number__v field value. 
    /// - parameter minorVersion: (path) The document minor_version_number__v field value. 
    /// - parameter annotationId: (path) The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(docId: String, majorVersion: String, minorVersion: String, annotationId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{annotation_id}", with: annotationId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Export Document Version Annotations to PDF
    /// - GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file
    /// - parameter docId: (path) The document id field value. 
    /// - parameter majorVersion: (path) The document major_version_number__v field value. 
    /// - parameter minorVersion: (path) The document minor_version_number__v field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(docId: String, majorVersion: String, minorVersion: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Import Document Version Annotations from PDF
    /// - POST /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file
    /// - parameter docId: (path) The document id field value. 
    /// - parameter majorVersion: (path) The document major_version_number__v field value. 
    /// - parameter minorVersion: (path) The document minor_version_number__v field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(docId: String, majorVersion: String, minorVersion: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Read Annotations by Document Version and Type
    /// - GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations
    /// - parameter docId: (path) The document id field value. 
    /// - parameter majorVersion: (path) The document major_version_number__v field value. 
    /// - parameter minorVersion: (path) The document minor_version_number__v field value. 
    /// - parameter limit: (query) Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored. (optional)
    /// - parameter offset: (query) This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset&#x3D;201. (optional)
    /// - parameter annotationTypes: (query) The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;  (optional)
    /// - parameter paginationId: (query) A unique identifier used to load requests with paginated results. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(docId: String, majorVersion: String, minorVersion: String, limit: String? = nil, offset: String? = nil, annotationTypes: String? = nil, paginationId: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let limit = limit { queryItems.append(URLQueryItem(name: "limit", value: limit)) } 
                if let offset = offset { queryItems.append(URLQueryItem(name: "offset", value: offset)) } 
                if let annotationTypes = annotationTypes { queryItems.append(URLQueryItem(name: "annotation_types", value: annotationTypes)) } 
                if let paginationId = paginationId { queryItems.append(URLQueryItem(name: "pagination_id", value: paginationId)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Download Document Version Attachment Version
    /// - GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file
    /// - parameter docId: (path) The document id field value. 
    /// - parameter majorVersion: (path) The document major_version_number__v field value. 
    /// - parameter minorVersion: (path) The document minor_version_number__v field value. 
    /// - parameter attachmentId: (path) The id field value of the attachment. 
    /// - parameter attachmentVersion: (path) The version of the attachment. 
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId: String, majorVersion: String, minorVersion: String, attachmentId: String, attachmentVersion: String, accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_id}", with: attachmentId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_version}", with: attachmentVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Version Attachment Versions
    /// - GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}
    /// - parameter docId: (path) The document id field value. 
    /// - parameter majorVersion: (path) The document major_version_number__v field value. 
    /// - parameter minorVersion: (path) The document minor_version_number__v field value. 
    /// - parameter attachmentId: (path) The id of the document attachment to retrieve. 
    /// - parameter attachmentVersion: (path) Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment. 
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId: String, majorVersion: String, minorVersion: String, attachmentId: String, attachmentVersion: String, accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_id}", with: attachmentId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_version}", with: attachmentVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Single Document Version
    /// - DELETE /objects/documents/{doc_id}/versions/{major_version}/{minor_version}
    /// - parameter docId: (path) The document id field value. 
    /// - parameter majorVersion: (path) The document major_version_number__v field value. 
    /// - parameter minorVersion: (path) The document minor_version_number__v field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(docId: String, majorVersion: String, minorVersion: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Version Notes as CSV
    /// - GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv
    /// - parameter docId: (path) The document id field value. 
    /// - parameter majorVersion: (path) The document major_version_number__v field value. 
    /// - parameter minorVersion: (path) The document minor_version_number__v field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(docId: String, majorVersion: String, minorVersion: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Document Event
    /// - POST /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events
    /// - parameter docId: (path) The document id field value. 
    /// - parameter majorVersion: (path) The document major_version_number__v field value. 
    /// - parameter minorVersion: (path) The document minor_version_number__v field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(docId: String, majorVersion: String, minorVersion: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Video Annotations
    /// - GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations
    /// - parameter docId: (path) The video document id field value. 
    /// - parameter majorVersion: (path) The video document major_version_number__v field value. 
    /// - parameter minorVersion: (path) The video document minor_version_number__v field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header) This &#x60;Accept&#x60; header only changes the format of the response in the case of an error. On &#x60;SUCCESS&#x60;, the HTTP Response Header &#x60;Content-Type&#x60; is set to &#x60;text/plain;charset&#x3D;UnicodeLittle&#x60;. (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(docId: String, majorVersion: String, minorVersion: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Download Document Version File
    /// - GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file
    /// - parameter docId: (path) The document id field value. 
    /// - parameter majorVersion: (path) The document major_version_number__v field value. 
    /// - parameter minorVersion: (path) The document minor_version_number__v field value. 
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(docId: String, majorVersion: String, minorVersion: String, accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Version
    /// - GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}
    /// - parameter docId: (path) The document id field value. 
    /// - parameter majorVersion: (path) The document major_version_number__v field value. 
    /// - parameter minorVersion: (path) The document minor_version_number__v field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(docId: String, majorVersion: String, minorVersion: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Document Version
    /// - PUT /objects/documents/{doc_id}/versions/{major_version}/{minor_version}
    /// - parameter docId: (path) The document id field value. 
    /// - parameter majorVersion: (path) The document major_version_number__v field value. 
    /// - parameter minorVersion: (path) The document minor_version_number__v field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIMigrationMode: (header) When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(docId: String, majorVersion: String, minorVersion: String, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIMigrationMode: Bool? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIMigrationMode = xVaultAPIMigrationMode { headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode ? "true" : "false" }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Relationships
    /// - GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships
    /// - parameter docId: (path) The document id field value. 
    /// - parameter majorVersion: (path) The document major_version_number__v field value. 
    /// - parameter minorVersion: (path) The document minor_version_number__v field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(docId: String, majorVersion: String, minorVersion: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Single Document Relationship
    /// - POST /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships
    /// - parameter docId: (path) The document id field value. 
    /// - parameter majorVersion: (path) The document major_version_number__v field value. 
    /// - parameter minorVersion: (path) The document minor_version_number__v field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(docId: String, majorVersion: String, minorVersion: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Single Document Relationship
    /// - DELETE /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}
    /// - parameter docId: (path) The document id field value. 
    /// - parameter majorVersion: (path) The document major_version_number__v field value. 
    /// - parameter minorVersion: (path) The document minor_version_number__v field value. 
    /// - parameter relationshipId: (path) The relationship id field value. See Retrieve Document Relationships. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(docId: String, majorVersion: String, minorVersion: String, relationshipId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{relationship_id}", with: relationshipId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Relationship
    /// - GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}
    /// - parameter docId: (path) The document id field value. 
    /// - parameter majorVersion: (path) The document major_version_number__v field value. 
    /// - parameter minorVersion: (path) The document minor_version_number__v field value. 
    /// - parameter relationshipId: (path) The relationship id field value. See Retrieve Document Relationships. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(docId: String, majorVersion: String, minorVersion: String, relationshipId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{relationship_id}", with: relationshipId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Version Renditions
    /// - GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions
    /// - parameter docId: (path) The document id field value. 
    /// - parameter majorVersion: (path) The document major_version_number__v field value. 
    /// - parameter minorVersion: (path) The document minor_version_number__v field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(docId: String, majorVersion: String, minorVersion: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Document Version Rendition
    /// - DELETE /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}
    /// - parameter docId: (path) The document id field value. 
    /// - parameter majorVersion: (path) The document major_version_number__v field value. 
    /// - parameter minorVersion: (path) The document minor_version_number__v field value. 
    /// - parameter renditionType: (path) The document rendition type. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(docId: String, majorVersion: String, minorVersion: String, renditionType: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{rendition_type}", with: renditionType)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Download Document Version Rendition File
    /// - GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}
    /// - parameter docId: (path) The document id field value. 
    /// - parameter majorVersion: (path) The document major_version_number__v field value. 
    /// - parameter minorVersion: (path) The document minor_version_number__v field value. 
    /// - parameter renditionType: (path) The document rendition type. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(docId: String, majorVersion: String, minorVersion: String, renditionType: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{rendition_type}", with: renditionType)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Upload Document Version Rendition
    /// - POST /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}
    /// - parameter docId: (path) The document id field value. 
    /// - parameter majorVersion: (path) The document major_version_number__v field value. 
    /// - parameter minorVersion: (path) The document minor_version_number__v field value. 
    /// - parameter renditionType: (path) The document rendition type. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(docId: String, majorVersion: String, minorVersion: String, renditionType: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{rendition_type}", with: renditionType)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Replace Document Version Rendition
    /// - PUT /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}
    /// - parameter docId: (path) The document id field value. 
    /// - parameter majorVersion: (path) The document major_version_number__v field value. 
    /// - parameter minorVersion: (path) The document minor_version_number__v field value. 
    /// - parameter renditionType: (path) The document rendition type. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(docId: String, majorVersion: String, minorVersion: String, renditionType: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{rendition_type}", with: renditionType)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Download Document Version Thumbnail File
    /// - GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail
    /// - parameter docId: (path) The document id field value. 
    /// - parameter majorVersion: (path) The document major_version_number__v field value. 
    /// - parameter minorVersion: (path) The document minor_version_number__v field value. 
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(docId: String, majorVersion: String, minorVersion: String, accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail"
                localVarPath = localVarPath.replacingOccurrences(of: "{doc_id}", with: docId)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve All Documents
    /// - GET /objects/documents
    /// - parameter namedFilter: (query) Retrieves only documents which you have created. (optional)
    /// - parameter scope: (query) Searches only within the document content. (optional)
    /// - parameter versionscope: (query) Retrieves all document versions, rather than only the latest version. (optional)
    /// - parameter search: (query) Search for documents based on a {keyword} in searchable document fields. (optional)
    /// - parameter limit: (query) See VQL documentation for more information. (optional)
    /// - parameter sort: (query) See VQL documentation for more information. (optional)
    /// - parameter start: (query) See VQL documentation for more information. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsGet(namedFilter: String? = nil, scope: String? = nil, versionscope: String? = nil, search: String? = nil, limit: String? = nil, sort: String? = nil, start: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let namedFilter = namedFilter { queryItems.append(URLQueryItem(name: "named_filter", value: namedFilter)) } 
                if let scope = scope { queryItems.append(URLQueryItem(name: "scope", value: scope)) } 
                if let versionscope = versionscope { queryItems.append(URLQueryItem(name: "versionscope", value: versionscope)) } 
                if let search = search { queryItems.append(URLQueryItem(name: "search", value: search)) } 
                if let limit = limit { queryItems.append(URLQueryItem(name: "limit", value: limit)) } 
                if let sort = sort { queryItems.append(URLQueryItem(name: "sort", value: sort)) } 
                if let start = start { queryItems.append(URLQueryItem(name: "start", value: start)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve All Document Roles
    /// - GET /objects/documents/{id}/roles
    /// - parameter id: (path)  
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsIdRolesGet(id: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{id}/roles"
                localVarPath = localVarPath.replacingOccurrences(of: "{id}", with: id)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Assign Users & Groups to Roles on a Single Document
    /// - POST /objects/documents/{id}/roles
    /// - parameter id: (path)  
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsIdRolesPost(id: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{id}/roles"
                localVarPath = localVarPath.replacingOccurrences(of: "{id}", with: id)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Role
    /// - GET /objects/documents/{id}/roles/{role_name}
    /// - parameter id: (path) The document &#x60;id&#x60;. 
    /// - parameter roleName: (path) The name of the role to retrieve. For example, &#x60;owner__v&#x60;. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsIdRolesRoleNameGet(id: String, roleName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{id}/roles/{role_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{id}", with: id)
                localVarPath = localVarPath.replacingOccurrences(of: "{role_name}", with: roleName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document User Actions
    /// - GET /objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions
    /// - parameter id: (path) The document id field value from which to retrieve available user actions. 
    /// - parameter majorVersion: (path) The major version number of the document. 
    /// - parameter minorVersion: (path) The minor version number of the document. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id: String, majorVersion: String, minorVersion: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions"
                localVarPath = localVarPath.replacingOccurrences(of: "{id}", with: id)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Entry Criteria
    /// - GET /objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements
    /// - parameter id: (path) The document id field value from which to retrieve available user actions. 
    /// - parameter majorVersion: (path) The major version number of the document. 
    /// - parameter minorVersion: (path) The minor version number of the document. 
    /// - parameter nameV: (path) The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id: String, majorVersion: String, minorVersion: String, nameV: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements"
                localVarPath = localVarPath.replacingOccurrences(of: "{id}", with: id)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{name__v}", with: nameV)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Initiate Document User Action
    /// - PUT /objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}
    /// - parameter id: (path) The document id field value from which to retrieve available user actions. 
    /// - parameter majorVersion: (path) The major version number of the document. 
    /// - parameter minorVersion: (path) The minor version number of the document. 
    /// - parameter nameV: (path) The action name__v field value to initiate. This is retrieved from the Retrieve User Action request. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id: String, majorVersion: String, minorVersion: String, nameV: String, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}"
                localVarPath = localVarPath.replacingOccurrences(of: "{id}", with: id)
                localVarPath = localVarPath.replacingOccurrences(of: "{major_version}", with: majorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{minor_version}", with: minorVersion)
                localVarPath = localVarPath.replacingOccurrences(of: "{name__v}", with: nameV)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve User Actions on Multiple Documents
    /// - POST /objects/documents/lifecycle_actions
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsLifecycleActionsPost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/lifecycle_actions"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Initiate Bulk Document User Actions
    /// - PUT /objects/documents/lifecycle_actions/{user_action_name}
    /// - parameter userActionName: (path) The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsLifecycleActionsUserActionNamePut(userActionName: String, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/lifecycle_actions/{user_action_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{user_action_name}", with: userActionName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Single Document
    /// - POST /objects/documents
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIMigrationMode: (header) When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsPost(authorization: String? = nil, accept: String? = nil, xVaultAPIMigrationMode: Bool? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIMigrationMode = xVaultAPIMigrationMode { headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode ? "true" : "false" }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Multiple Document Relationships
    /// - DELETE /objects/documents/relationships/batch
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsRelationshipsBatchDelete(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/relationships/batch"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Multiple Document Relationships
    /// - POST /objects/documents/relationships/batch
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsRelationshipsBatchPost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/relationships/batch"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Multiple Document Renditions
    /// - DELETE /objects/documents/renditions/batch
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsRenditionsBatchDelete(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/renditions/batch"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Add Multiple Document Renditions
    /// - POST /objects/documents/renditions/batch
    /// - parameter idParam: (query) If you’re identifying documents in your input by their external ID (optional)
    /// - parameter largeSizeAsset: (query) If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIMigrationMode: (header) Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsRenditionsBatchPost(idParam: String? = nil, largeSizeAsset: String? = nil, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIMigrationMode: Bool? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/renditions/batch"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let idParam = idParam { queryItems.append(URLQueryItem(name: "idParam", value: idParam)) } 
                if let largeSizeAsset = largeSizeAsset { queryItems.append(URLQueryItem(name: "largeSizeAsset", value: largeSizeAsset)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIMigrationMode = xVaultAPIMigrationMode { headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode ? "true" : "false" }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Remove Users and Groups from Roles on Multiple Documents & Binders
    /// - DELETE /objects/documents/roles/batch
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsRolesBatchDelete(authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/roles/batch"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Assign Users & Groups to Roles on Multiple Documents & Binders
    /// - POST /objects/documents/roles/batch
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsRolesBatchPost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/roles/batch"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Template Collection
    /// - GET /objects/documents/templates
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsTemplatesGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/templates"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Single Document Template
    /// - POST /objects/documents/templates
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsTemplatesPost(authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/templates"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Multiple Document Templates
    /// - PUT /objects/documents/templates
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsTemplatesPut(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/templates"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Basic Document Template
    /// - DELETE /objects/documents/templates/{template_name}
    /// - parameter templateName: (path) The document template name__v field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsTemplatesTemplateNameDelete(templateName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/templates/{template_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{template_name}", with: templateName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Download Document Template File
    /// - GET /objects/documents/templates/{template_name}/file
    /// - parameter templateName: (path) The document template name__v field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsTemplatesTemplateNameFileGet(templateName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/templates/{template_name}/file"
                localVarPath = localVarPath.replacingOccurrences(of: "{template_name}", with: templateName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Document Template Attributes
    /// - GET /objects/documents/templates/{template_name}
    /// - parameter templateName: (path) The document template name__v field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsTemplatesTemplateNameGet(templateName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/templates/{template_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{template_name}", with: templateName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Single Document Template
    /// - PUT /objects/documents/templates/{template_name}
    /// - parameter templateName: (path) The document template name__v field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsTemplatesTemplateNamePut(templateName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/documents/templates/{template_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{template_name}", with: templateName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Document Tokens
    /// - POST /objects/documents/tokens
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsTokensPost(authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/tokens"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Export Document Versions
    /// - POST /objects/documents/versions/batch/actions/fileextract
    /// - parameter source: (query) Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true. (optional)
    /// - parameter renditions: (query) Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsVersionsBatchActionsFileextractPost(source: Bool? = nil, renditions: Bool? = nil, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/versions/batch/actions/fileextract"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let source = source { queryItems.append(URLQueryItem(name: "source", value: source ? "true" : "false")) } 
                if let renditions = renditions { queryItems.append(URLQueryItem(name: "renditions", value: renditions ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Multiple Document Versions
    /// - DELETE /objects/documents/versions/batch
    /// - parameter idParam: (query) If you’re identifying documents in your input by their external ID (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsVersionsBatchDelete(idParam: String? = nil, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/versions/batch"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let idParam = idParam { queryItems.append(URLQueryItem(name: "idParam", value: idParam)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Multiple Document Versions
    /// - POST /objects/documents/versions/batch
    /// - parameter idParam: (query) If you’re identifying documents in your input by their external ID (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIMigrationMode: (header) Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the &#x60;status__v&#x60; field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt; (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDocumentsVersionsBatchPost(idParam: String? = nil, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIMigrationMode: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/documents/versions/batch"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let idParam = idParam { queryItems.append(URLQueryItem(name: "idParam", value: idParam)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIMigrationMode = xVaultAPIMigrationMode { headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Domain Information
    /// - GET /objects/domain
    /// - parameter includeApplication: (query) To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDomainGet(includeApplication: Bool? = nil, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/domain"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let includeApplication = includeApplication { queryItems.append(URLQueryItem(name: "include_application", value: includeApplication ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Domains
    /// - GET /objects/domains
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsDomainsGet(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/domains"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Add EDL Matched Documents
    /// - POST /objects/edl_matched_documents/batch/actions/add
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsEdlMatchedDocumentsBatchActionsAddPost(authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/edl_matched_documents/batch/actions/add"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Remove EDL Matched Documents
    /// - POST /objects/edl_matched_documents/batch/actions/remove
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsEdlMatchedDocumentsBatchActionsRemovePost(authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/edl_matched_documents/batch/actions/remove"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Auto Managed Groups
    /// - GET /objects/groups/auto
    /// - parameter limit: (query) Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000.  (optional)
    /// - parameter offset: (query) Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsGroupsAutoGet(limit: String? = nil, offset: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/groups/auto"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let limit = limit { queryItems.append(URLQueryItem(name: "limit", value: limit)) } 
                if let offset = offset { queryItems.append(URLQueryItem(name: "offset", value: offset)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve All Groups
    /// - GET /objects/groups
    /// - parameter includeImplied: (query) When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsGroupsGet(includeImplied: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/groups"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let includeImplied = includeImplied { queryItems.append(URLQueryItem(name: "includeImplied", value: includeImplied)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Group
    /// - DELETE /objects/groups/{group_id}
    /// - parameter groupId: (path) The group id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsGroupsGroupIdDelete(groupId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/groups/{group_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{group_id}", with: groupId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Group
    /// - GET /objects/groups/{group_id}
    /// - parameter groupId: (path) The group id field value. 
    /// - parameter includeImplied: (query) When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsGroupsGroupIdGet(groupId: String, includeImplied: Bool? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/groups/{group_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{group_id}", with: groupId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let includeImplied = includeImplied { queryItems.append(URLQueryItem(name: "includeImplied", value: includeImplied ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Group
    /// - PUT /objects/groups/{group_id}
    /// - parameter groupId: (path) The group id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsGroupsGroupIdPut(groupId: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/groups/{group_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{group_id}", with: groupId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Group 
    /// - POST /objects/groups
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsGroupsPost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/groups"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Application License Usage
    /// - GET /objects/licenses
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsLicensesGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/licenses"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve All Multi-Record Workflows
    /// - GET /objects/objectworkflows/actions
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsObjectworkflowsActionsGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/objectworkflows/actions"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Multi-Record Workflow Details
    /// - GET /objects/objectworkflows/actions/{workflow_name}
    /// - parameter workflowName: (path)  
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsObjectworkflowsActionsWorkflowNameGet(workflowName: String, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/objectworkflows/actions/{workflow_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{workflow_name}", with: workflowName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Initiate Multi-Record Workflow
    /// - POST /objects/objectworkflows/actions/{workflow_name}
    /// - parameter workflowName: (path)  
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsObjectworkflowsActionsWorkflowNamePost(workflowName: String, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/objectworkflows/actions/{workflow_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{workflow_name}", with: workflowName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Workflows
    /// - GET /objects/objectworkflows
    /// - parameter objectV: (query) To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used.  (optional)
    /// - parameter recordIdV: (query) To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used.  (optional)
    /// - parameter participant: (query) To retrieve all workflows available to a particular user, include the user id field value as ?participant&#x3D;{id}. To retrieve your own workflows, set this value to ?participant&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used.  (optional)
    /// - parameter statusV: (query) To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v&#x3D;active__v, status__v&#x3D;active__v,completed__v. Workflows with &#x60;status__v&#x3D;active__v&#x60; are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v (optional)
    /// - parameter offset: (query) This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201.  (optional)
    /// - parameter pageSize: (query) This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000.  (optional)
    /// - parameter loc: (query) When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true.  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsObjectworkflowsGet(objectV: String? = nil, recordIdV: String? = nil, participant: String? = nil, statusV: String? = nil, offset: String? = nil, pageSize: String? = nil, loc: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/objectworkflows"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let objectV = objectV { queryItems.append(URLQueryItem(name: "object__v", value: objectV)) } 
                if let recordIdV = recordIdV { queryItems.append(URLQueryItem(name: "record_id__v", value: recordIdV)) } 
                if let participant = participant { queryItems.append(URLQueryItem(name: "participant", value: participant)) } 
                if let statusV = statusV { queryItems.append(URLQueryItem(name: "status__v", value: statusV)) } 
                if let offset = offset { queryItems.append(URLQueryItem(name: "offset", value: offset)) } 
                if let pageSize = pageSize { queryItems.append(URLQueryItem(name: "page_size", value: pageSize)) } 
                if let loc = loc { queryItems.append(URLQueryItem(name: "loc", value: loc)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Workflow Tasks
    /// - GET /objects/objectworkflows/tasks
    /// - parameter objectV: (query) To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used. (optional)
    /// - parameter recordIdV: (query) To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used. (optional)
    /// - parameter assigneeV: (query) To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v&#x3D;{id}. To retrieve your own workflow tasks, set this value to ?assignee__v&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used.  (optional)
    /// - parameter statusV: (query) To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v&#x3D;available__v or ?status__v&#x3D;available__v,completed__v.  (optional)
    /// - parameter offset: (query) This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201.  (optional)
    /// - parameter pageSize: (query) This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000.  (optional)
    /// - parameter loc: (query) When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true.  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsObjectworkflowsTasksGet(objectV: String? = nil, recordIdV: String? = nil, assigneeV: String? = nil, statusV: String? = nil, offset: String? = nil, pageSize: String? = nil, loc: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/objectworkflows/tasks"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let objectV = objectV { queryItems.append(URLQueryItem(name: "object__v", value: objectV)) } 
                if let recordIdV = recordIdV { queryItems.append(URLQueryItem(name: "record_id__v", value: recordIdV)) } 
                if let assigneeV = assigneeV { queryItems.append(URLQueryItem(name: "assignee__v", value: assigneeV)) } 
                if let statusV = statusV { queryItems.append(URLQueryItem(name: "status__v", value: statusV)) } 
                if let offset = offset { queryItems.append(URLQueryItem(name: "offset", value: offset)) } 
                if let pageSize = pageSize { queryItems.append(URLQueryItem(name: "page_size", value: pageSize)) } 
                if let loc = loc { queryItems.append(URLQueryItem(name: "loc", value: loc)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Accept Single Record Workflow Task
    /// - POST /objects/objectworkflows/tasks/{task_id}/actions/accept
    /// - parameter taskId: (path) The task id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsObjectworkflowsTasksTaskIdActionsAcceptPost(taskId: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/objectworkflows/tasks/{task_id}/actions/accept"
                localVarPath = localVarPath.replacingOccurrences(of: "{task_id}", with: taskId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Cancel Workflow Task
    /// - POST /objects/objectworkflows/tasks/{task_id}/actions/cancel
    /// - parameter taskId: (path) The task id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsObjectworkflowsTasksTaskIdActionsCancelPost(taskId: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/objectworkflows/tasks/{task_id}/actions/cancel"
                localVarPath = localVarPath.replacingOccurrences(of: "{task_id}", with: taskId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Complete Single Record Workflow Task
    /// - POST /objects/objectworkflows/tasks/{task_id}/actions/complete
    /// - parameter taskId: (path) The task id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsObjectworkflowsTasksTaskIdActionsCompletePost(taskId: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/objectworkflows/tasks/{task_id}/actions/complete"
                localVarPath = localVarPath.replacingOccurrences(of: "{task_id}", with: taskId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Workflow Task Actions
    /// - GET /objects/objectworkflows/tasks/{task_id}/actions
    /// - parameter taskId: (path) The task id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsObjectworkflowsTasksTaskIdActionsGet(taskId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/objectworkflows/tasks/{task_id}/actions"
                localVarPath = localVarPath.replacingOccurrences(of: "{task_id}", with: taskId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Accept Multi-item Workflow Task
    /// - POST /objects/objectworkflows/tasks/{task_id}/actions/mdwaccept
    /// - parameter taskId: (path) The task id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(taskId: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/objectworkflows/tasks/{task_id}/actions/mdwaccept"
                localVarPath = localVarPath.replacingOccurrences(of: "{task_id}", with: taskId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Complete Multi-item Workflow Task
    /// - POST /objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete
    /// - parameter taskId: (path) The task id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(taskId: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete"
                localVarPath = localVarPath.replacingOccurrences(of: "{task_id}", with: taskId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Manage Multi-Item Workflow Content
    /// - POST /objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent
    /// - parameter taskId: (path) The task id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(taskId: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent"
                localVarPath = localVarPath.replacingOccurrences(of: "{task_id}", with: taskId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Reassign Multi-item Workflow Task
    /// - POST /objects/objectworkflows/tasks/{task_id}/actions/mdwreassign
    /// - parameter taskId: (path) The id of the task to reassign. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(taskId: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/objectworkflows/tasks/{task_id}/actions/mdwreassign"
                localVarPath = localVarPath.replacingOccurrences(of: "{task_id}", with: taskId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Reassign Single Record Workflow Task
    /// - POST /objects/objectworkflows/tasks/{task_id}/actions/reassign
    /// - parameter taskId: (path) The id of the task to reassign. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsObjectworkflowsTasksTaskIdActionsReassignPost(taskId: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/objectworkflows/tasks/{task_id}/actions/reassign"
                localVarPath = localVarPath.replacingOccurrences(of: "{task_id}", with: taskId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Workflow Task Action Details
    /// - GET /objects/objectworkflows/tasks/{task_id}/actions/{task_action}
    /// - parameter taskId: (path) The task id field value. 
    /// - parameter taskAction: (path) The name of the task action retrieved from Retrieve Workflow Task Actions. 
    /// - parameter loc: (query) When localized (translated) strings are available, retrieve them by including loc&#x3D;true.  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(taskId: String, taskAction: String, loc: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/objectworkflows/tasks/{task_id}/actions/{task_action}"
                localVarPath = localVarPath.replacingOccurrences(of: "{task_id}", with: taskId)
                localVarPath = localVarPath.replacingOccurrences(of: "{task_action}", with: taskAction)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let loc = loc { queryItems.append(URLQueryItem(name: "loc", value: loc)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Undo Workflow Task Acceptance
    /// - POST /objects/objectworkflows/tasks/{task_id}/actions/undoaccept
    /// - parameter taskId: (path) The task id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(taskId: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/objectworkflows/tasks/{task_id}/actions/undoaccept"
                localVarPath = localVarPath.replacingOccurrences(of: "{task_id}", with: taskId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Workflow Task Due Date
    /// - POST /objects/objectworkflows/tasks/{task_id}/actions/updateduedate
    /// - parameter taskId: (path) The id of the task. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(taskId: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/objectworkflows/tasks/{task_id}/actions/updateduedate"
                localVarPath = localVarPath.replacingOccurrences(of: "{task_id}", with: taskId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Workflow Task Details
    /// - GET /objects/objectworkflows/tasks/{task_id}
    /// - parameter taskId: (path) The task id field value. 
    /// - parameter loc: (query) When localized (translated) strings are available, retrieve them by including loc&#x3D;true. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsObjectworkflowsTasksTaskIdGet(taskId: String, loc: Bool? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/objectworkflows/tasks/{task_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{task_id}", with: taskId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let loc = loc { queryItems.append(URLQueryItem(name: "loc", value: loc ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Workflow Actions
    /// - GET /objects/objectworkflows/{workflow_id}/actions
    /// - parameter workflowId: (path) The workflow id field value. 
    /// - parameter loc: (query) When localized (translated) strings are available, retrieve them by including loc&#x3D;true.  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsObjectworkflowsWorkflowIdActionsGet(workflowId: String, loc: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/objectworkflows/{workflow_id}/actions"
                localVarPath = localVarPath.replacingOccurrences(of: "{workflow_id}", with: workflowId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let loc = loc { queryItems.append(URLQueryItem(name: "loc", value: loc)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Workflow Action Details
    /// - GET /objects/objectworkflows/{workflow_id}/actions/{workflow_action}
    /// - parameter workflowId: (path) The workflow id field value. 
    /// - parameter workflowAction: (path) The workflow action name retrieved from Retrieve Workflow Actions. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(workflowId: String, workflowAction: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/objectworkflows/{workflow_id}/actions/{workflow_action}"
                localVarPath = localVarPath.replacingOccurrences(of: "{workflow_id}", with: workflowId)
                localVarPath = localVarPath.replacingOccurrences(of: "{workflow_action}", with: workflowAction)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Initiate Workflow Action
    /// - POST /objects/objectworkflows/{workflow_id}/actions/{workflow_action}
    /// - parameter workflowId: (path) The workflow id field value. 
    /// - parameter workflowAction: (path) The workflow action name retrieved from Retrieve Workflow Actions. 
    /// - parameter documentsSys: (query) Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(workflowId: String, workflowAction: String, documentsSys: String? = nil, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/objectworkflows/{workflow_id}/actions/{workflow_action}"
                localVarPath = localVarPath.replacingOccurrences(of: "{workflow_id}", with: workflowId)
                localVarPath = localVarPath.replacingOccurrences(of: "{workflow_action}", with: workflowAction)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let documentsSys = documentsSys { queryItems.append(URLQueryItem(name: "documents__sys", value: documentsSys)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Workflow Details
    /// - GET /objects/objectworkflows/{workflow_id}
    /// - parameter workflowId: (path) The workflow id field value. 
    /// - parameter loc: (query) When localized (translated) strings are available, retrieve them by including loc&#x3D;true. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsObjectworkflowsWorkflowIdGet(workflowId: String, loc: Bool? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/objectworkflows/{workflow_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{workflow_id}", with: workflowId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let loc = loc { queryItems.append(URLQueryItem(name: "loc", value: loc ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve All Picklists
    /// - GET /objects/picklists
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsPicklistsGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/picklists"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Picklist Values
    /// - GET /objects/picklists/{picklist_name}
    /// - parameter picklistName: (path) The picklist name field value (license_type__v, product_family__c, region__c, etc.) 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsPicklistsPicklistNameGet(picklistName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/picklists/{picklist_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{picklist_name}", with: picklistName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Inactivate Picklist Value
    /// - DELETE /objects/picklists/{picklist_name}/{picklist_value_name}
    /// - parameter picklistName: (path) The picklist name field value (license_type__v, product_family__c, region__c, etc.) 
    /// - parameter picklistValueName: (path) The picklist value name field value (north_america__c, south_america__c, etc.) 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsPicklistsPicklistNamePicklistValueNameDelete(picklistName: String, picklistValueName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/picklists/{picklist_name}/{picklist_value_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{picklist_name}", with: picklistName)
                localVarPath = localVarPath.replacingOccurrences(of: "{picklist_value_name}", with: picklistValueName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Picklist Value
    /// - PUT /objects/picklists/{picklist_name}/{picklist_value_name}
    /// - parameter picklistName: (path) The picklist name field value (license_type__v, product_family__c, region__c, etc.) 
    /// - parameter picklistValueName: (path) The picklist value name field value (north_america__c, south_america__c, etc.) 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsPicklistsPicklistNamePicklistValueNamePut(picklistName: String, picklistValueName: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/picklists/{picklist_name}/{picklist_value_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{picklist_name}", with: picklistName)
                localVarPath = localVarPath.replacingOccurrences(of: "{picklist_value_name}", with: picklistValueName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Picklist Values
    /// - POST /objects/picklists/{picklist_name}
    /// - parameter picklistName: (path) The picklist name field value (license_type__v, product_family__c, region__c, etc.) 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsPicklistsPicklistNamePost(picklistName: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/picklists/{picklist_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{picklist_name}", with: picklistName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Picklist Value Label
    /// - PUT /objects/picklists/{picklist_name}
    /// - parameter picklistName: (path) The picklist name field value (license_type__v, product_family__c, region__c, etc.) 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsPicklistsPicklistNamePut(picklistName: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/picklists/{picklist_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{picklist_name}", with: picklistName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Build Production Vault
    /// - POST /objects/sandbox/actions/buildproduction
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsSandboxActionsBuildproductionPost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/sandbox/actions/buildproduction"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Promote to Production
    /// - POST /objects/sandbox/actions/promoteproduction
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsSandboxActionsPromoteproductionPost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/sandbox/actions/promoteproduction"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Recheck Sandbox Usage Limit
    /// - POST /objects/sandbox/actions/recheckusage
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsSandboxActionsRecheckusagePost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/sandbox/actions/recheckusage"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Change Sandbox Size
    /// - POST /objects/sandbox/batch/changesize
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsSandboxBatchChangesizePost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/sandbox/batch/changesize"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Set Sandbox Entitlements
    /// - POST /objects/sandbox/entitlements/set
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsSandboxEntitlementsSetPost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/sandbox/entitlements/set"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Sandboxes
    /// - GET /objects/sandbox
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsSandboxGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/sandbox"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Sandbox
    /// - DELETE /objects/sandbox/{name}
    /// - parameter name: (path) The name of the sandbox vault to delete. This is the name which appears on the My Vaults page. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsSandboxNameDelete(name: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/sandbox/{name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{name}", with: name)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create or Refresh Sandbox
    /// - POST /objects/sandbox
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsSandboxPost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/sandbox"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Sandbox Snapshot
    /// - POST /objects/sandbox/snapshot/{api_name}/actions/update
    /// - parameter apiName: (path) The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsSandboxSnapshotApiNameActionsUpdatePost(apiName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/sandbox/snapshot/{api_name}/actions/update"
                localVarPath = localVarPath.replacingOccurrences(of: "{api_name}", with: apiName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Upgrade Sandbox Snapshot
    /// - POST /objects/sandbox/snapshot/{api_name}/actions/upgrade
    /// - parameter apiName: (path) The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsSandboxSnapshotApiNameActionsUpgradePost(apiName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/sandbox/snapshot/{api_name}/actions/upgrade"
                localVarPath = localVarPath.replacingOccurrences(of: "{api_name}", with: apiName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Sandbox Snapshot
    /// - DELETE /objects/sandbox/snapshot/{api_name}
    /// - parameter apiName: (path) The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsSandboxSnapshotApiNameDelete(apiName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/sandbox/snapshot/{api_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{api_name}", with: apiName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Sandbox Snapshots
    /// - GET /objects/sandbox/snapshot
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsSandboxSnapshotGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/sandbox/snapshot"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Sandbox Snapshot
    /// - POST /objects/sandbox/snapshot
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsSandboxSnapshotPost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/sandbox/snapshot"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Refresh Sandbox from Snapshot
    /// - POST /objects/sandbox/{vault_id}/actions/refresh
    /// - parameter vaultId: (path) The Vault ID of the sandbox to be refreshed. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsSandboxVaultIdActionsRefreshPost(vaultId: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/sandbox/{vault_id}/actions/refresh"
                localVarPath = localVarPath.replacingOccurrences(of: "{vault_id}", with: vaultId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Sandbox Details by ID
    /// - GET /objects/sandbox/{vault_id}
    /// - parameter vaultId: (path)  
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsSandboxVaultIdGet(vaultId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/sandbox/{vault_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{vault_id}", with: vaultId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve All Security Policies
    /// - GET /objects/securitypolicies
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsSecuritypoliciesGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/securitypolicies"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Security Policy
    /// - GET /objects/securitypolicies/{security_policy_name}
    /// - parameter securityPolicyName: (path) Security policy name__v field value (retrieved from previous request). This is typically a numeric value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsSecuritypoliciesSecurityPolicyNameGet(securityPolicyName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/securitypolicies/{security_policy_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{security_policy_name}", with: securityPolicyName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve All Users
    /// - GET /objects/users/
    /// - parameter vaults: (query) Retrieve all users assigned to all Vaults in your domain. (optional)
    /// - parameter excludeVaultMembership: (query) Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response. (optional)
    /// - parameter excludeAppLicensing: (query) Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsUsersGet(vaults: String? = nil, excludeVaultMembership: String? = nil, excludeAppLicensing: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/users/"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let vaults = vaults { queryItems.append(URLQueryItem(name: "vaults", value: vaults)) } 
                if let excludeVaultMembership = excludeVaultMembership { queryItems.append(URLQueryItem(name: "exclude_vault_membership", value: excludeVaultMembership)) } 
                if let excludeAppLicensing = excludeAppLicensing { queryItems.append(URLQueryItem(name: "exclude_app_licensing", value: excludeAppLicensing)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve User
    /// - GET /objects/users/{id}
    /// - parameter id: (path) The user id field value. Use the value me to get information for the currently authenticated user. 
    /// - parameter excludeVaultMembership: (query) Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response. (optional)
    /// - parameter excludeAppLicensing: (query) Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsUsersIdGet(id: String, excludeVaultMembership: String? = nil, excludeAppLicensing: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/users/{id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{id}", with: id)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let excludeVaultMembership = excludeVaultMembership { queryItems.append(URLQueryItem(name: "exclude_vault_membership", value: excludeVaultMembership)) } 
                if let excludeAppLicensing = excludeAppLicensing { queryItems.append(URLQueryItem(name: "exclude_app_licensing", value: excludeAppLicensing)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve User Permissions
    /// - GET /objects/users/{id}/permissions
    /// - parameter id: (path) The ID of the user. Use the value me to retrieve information for the currently authenticated user. 
    /// - parameter filter: (query) Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsUsersIdPermissionsGet(id: String, filter: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/users/{id}/permissions"
                localVarPath = localVarPath.replacingOccurrences(of: "{id}", with: id)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let filter = filter { queryItems.append(URLQueryItem(name: "filter", value: filter)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Single User
    /// - PUT /objects/users/{id}
    /// - parameter id: (path) The user id field value. Use the value me to get information for the currently authenticated user. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsUsersIdPut(id: String, authorization: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/users/{id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{id}", with: id)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Validate Session User
    /// - GET /objects/users/me
    /// - parameter excludeVaultMembership: (query) Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response. (optional)
    /// - parameter excludeAppLicensing: (query) Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsUsersMeGet(excludeVaultMembership: String? = nil, excludeAppLicensing: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/users/me"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let excludeVaultMembership = excludeVaultMembership { queryItems.append(URLQueryItem(name: "exclude_vault_membership", value: excludeVaultMembership)) } 
                if let excludeAppLicensing = excludeAppLicensing { queryItems.append(URLQueryItem(name: "exclude_app_licensing", value: excludeAppLicensing)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Change My Password
    /// - POST /objects/users/me/password
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsUsersMePasswordPost(authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/users/me/password"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve My User Permissions
    /// - GET /objects/users/me/permissions
    /// - parameter filter: (query) Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsUsersMePermissionsGet(filter: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/users/me/permissions"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let filter = filter { queryItems.append(URLQueryItem(name: "filter", value: filter)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update My User
    /// - PUT /objects/users/me
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsUsersMePut(authorization: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/users/me"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Single User
    /// - POST /objects/users
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsUsersPost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/users"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Multiple Users
    /// - PUT /objects/users
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsUsersPut(authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/users"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Disable User
    /// - DELETE /objects/users/{user_id}
    /// - parameter userId: (path) The user id field value.  
    /// - parameter domain: (query) When true, this disables the user account in all vaults in the domain. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsUsersUserIdDelete(userId: String, domain: Bool? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/users/{user_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{user_id}", with: userId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let domain = domain { queryItems.append(URLQueryItem(name: "domain", value: domain ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Vault Membership
    /// - PUT /objects/users/{user_id}/vault_membership/{vault_id}
    /// - parameter userId: (path) The user id field value. 
    /// - parameter vaultId: (path) The system-managed id field value assigned to each vault in the domain. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsUsersUserIdVaultMembershipVaultIdPut(userId: String, vaultId: String, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/objects/users/{user_id}/vault_membership/{vault_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{user_id}", with: userId)
                localVarPath = localVarPath.replacingOccurrences(of: "{vault_id}", with: vaultId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Vault Compare
    /// - POST /objects/vault/actions/compare
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsVaultActionsComparePost(authorization: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/vault/actions/compare"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Vault Configuration Report
    /// - POST /objects/vault/actions/configreport
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func objectsVaultActionsConfigreportPost(authorization: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/objects/vault/actions/configreport"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Component Definition Query
    /// - POST /query/components
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func queryComponentsPost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/query/components"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Next Page URL
    /// - POST /query/{next_page}
    /// - parameter nextPage: (path)  
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIDescribeQuery: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func queryNextPagePost(nextPage: String, authorization: String? = nil, accept: String? = nil, xVaultAPIDescribeQuery: Bool? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/query/{next_page}"
                localVarPath = localVarPath.replacingOccurrences(of: "{next_page}", with: nextPage)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIDescribeQuery = xVaultAPIDescribeQuery { headers["X-VaultAPI-DescribeQuery"] = xVaultAPIDescribeQuery ? "true" : "false" }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Submitting a Query
    /// - POST /query
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIDescribeQuery: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func queryPost(authorization: String? = nil, accept: String? = nil, xVaultAPIDescribeQuery: Bool? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/query"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIDescribeQuery = xVaultAPIDescribeQuery { headers["X-VaultAPI-DescribeQuery"] = xVaultAPIDescribeQuery ? "true" : "false" }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Previous Page URL
    /// - POST /query/{previous_page}
    /// - parameter previousPage: (path)  
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIDescribeQuery: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func queryPreviousPagePost(previousPage: String, authorization: String? = nil, accept: String? = nil, xVaultAPIDescribeQuery: Bool? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/query/{previous_page}"
                localVarPath = localVarPath.replacingOccurrences(of: "{previous_page}", with: previousPage)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIDescribeQuery = xVaultAPIDescribeQuery { headers["X-VaultAPI-DescribeQuery"] = xVaultAPIDescribeQuery ? "true" : "false" }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Current User with SCIM
    /// - GET /scim/v2/Me
    /// - parameter attributes: (query) Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
    /// - parameter excludedAttributes: (query) Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func scimV2MeGet(attributes: String? = nil, excludedAttributes: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/scim/v2/Me"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let attributes = attributes { queryItems.append(URLQueryItem(name: "attributes", value: attributes)) } 
                if let excludedAttributes = excludedAttributes { queryItems.append(URLQueryItem(name: "excludedAttributes", value: excludedAttributes)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Current User with SCIM
    /// - PUT /scim/v2/Me
    /// - parameter attributes: (query) Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
    /// - parameter excludedAttributes: (query) Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func scimV2MePut(attributes: String? = nil, excludedAttributes: String? = nil, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/scim/v2/Me"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let attributes = attributes { queryItems.append(URLQueryItem(name: "attributes", value: attributes)) } 
                if let excludedAttributes = excludedAttributes { queryItems.append(URLQueryItem(name: "excludedAttributes", value: excludedAttributes)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve All SCIM Resource Types
    /// - GET /scim/v2/ResourceTypes
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func scimV2ResourceTypesGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/scim/v2/ResourceTypes"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Single SCIM Resource Type
    /// - GET /scim/v2/ResourceTypes/{type}
    /// - parameter type: (path) A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func scimV2ResourceTypesTypeGet(type: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/scim/v2/ResourceTypes/{type}"
                localVarPath = localVarPath.replacingOccurrences(of: "{type}", with: type)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve All SCIM Schema Information
    /// - GET /scim/v2/Schemas
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func scimV2SchemasGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/scim/v2/Schemas"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Single SCIM Schema Information
    /// - GET /scim/v2/Schemas/{id}
    /// - parameter id: (path) The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func scimV2SchemasIdGet(id: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/scim/v2/Schemas/{id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{id}", with: id)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve SCIM Provider
    /// - GET /scim/v2/ServiceProviderConfig
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func scimV2ServiceProviderConfigGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/scim/v2/ServiceProviderConfig"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve SCIM Resources
    /// - GET /scim/v2/{type}
    /// - parameter type: (path) The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value. 
    /// - parameter filter: (query) Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
    /// - parameter attributes: (query) Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
    /// - parameter excludedAttributes: (query) Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
    /// - parameter sortBy: (query) Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage (optional)
    /// - parameter sortOrder: (query) Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000. (optional)
    /// - parameter startIndex: (query) Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func scimV2TypeGet(type: String, filter: String? = nil, attributes: String? = nil, excludedAttributes: String? = nil, sortBy: String? = nil, sortOrder: String? = nil, startIndex: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/scim/v2/{type}"
                localVarPath = localVarPath.replacingOccurrences(of: "{type}", with: type)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let filter = filter { queryItems.append(URLQueryItem(name: "filter", value: filter)) } 
                if let attributes = attributes { queryItems.append(URLQueryItem(name: "attributes", value: attributes)) } 
                if let excludedAttributes = excludedAttributes { queryItems.append(URLQueryItem(name: "excludedAttributes", value: excludedAttributes)) } 
                if let sortBy = sortBy { queryItems.append(URLQueryItem(name: "sortBy", value: sortBy)) } 
                if let sortOrder = sortOrder { queryItems.append(URLQueryItem(name: "sortOrder", value: sortOrder)) } 
                if let startIndex = startIndex { queryItems.append(URLQueryItem(name: "startIndex", value: startIndex)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Single SCIM Resource
    /// - GET /scim/v2/{type}/{id}
    /// - parameter type: (path) The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value. 
    /// - parameter id: (path) The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v. 
    /// - parameter attributes: (query) Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
    /// - parameter excludedAttributes: (query) Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func scimV2TypeIdGet(type: String, id: String, attributes: String? = nil, excludedAttributes: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/scim/v2/{type}/{id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{type}", with: type)
                localVarPath = localVarPath.replacingOccurrences(of: "{id}", with: id)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let attributes = attributes { queryItems.append(URLQueryItem(name: "attributes", value: attributes)) } 
                if let excludedAttributes = excludedAttributes { queryItems.append(URLQueryItem(name: "excludedAttributes", value: excludedAttributes)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve All Users with SCIM
    /// - GET /scim/v2/Users
    /// - parameter filter: (query) Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
    /// - parameter attributes: (query) Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
    /// - parameter excludedAttributes: (query) Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
    /// - parameter sortBy: (query) Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage (optional)
    /// - parameter sortOrder: (query) Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending. (optional)
    /// - parameter count: (query) Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000. (optional)
    /// - parameter startIndex: (query) Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func scimV2UsersGet(filter: String? = nil, attributes: String? = nil, excludedAttributes: String? = nil, sortBy: String? = nil, sortOrder: String? = nil, count: String? = nil, startIndex: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/scim/v2/Users"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let filter = filter { queryItems.append(URLQueryItem(name: "filter", value: filter)) } 
                if let attributes = attributes { queryItems.append(URLQueryItem(name: "attributes", value: attributes)) } 
                if let excludedAttributes = excludedAttributes { queryItems.append(URLQueryItem(name: "excludedAttributes", value: excludedAttributes)) } 
                if let sortBy = sortBy { queryItems.append(URLQueryItem(name: "sortBy", value: sortBy)) } 
                if let sortOrder = sortOrder { queryItems.append(URLQueryItem(name: "sortOrder", value: sortOrder)) } 
                if let count = count { queryItems.append(URLQueryItem(name: "count", value: count)) } 
                if let startIndex = startIndex { queryItems.append(URLQueryItem(name: "startIndex", value: startIndex)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Single User with SCIM
    /// - GET /scim/v2/Users/{id}
    /// - parameter id: (path) The id of the user you wish to update. 
    /// - parameter filter: (query) Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator. (optional)
    /// - parameter attributes: (query) Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned. (optional)
    /// - parameter excludedAttributes: (query) Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func scimV2UsersIdGet(id: String, filter: String? = nil, attributes: String? = nil, excludedAttributes: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/scim/v2/Users/{id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{id}", with: id)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let filter = filter { queryItems.append(URLQueryItem(name: "filter", value: filter)) } 
                if let attributes = attributes { queryItems.append(URLQueryItem(name: "attributes", value: attributes)) } 
                if let excludedAttributes = excludedAttributes { queryItems.append(URLQueryItem(name: "excludedAttributes", value: excludedAttributes)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update User with SCIM
    /// - PUT /scim/v2/Users/{id}
    /// - parameter id: (path) The id of the user you wish to update. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func scimV2UsersIdPut(id: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/scim/v2/Users/{id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{id}", with: id)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create User with SCIM
    /// - POST /scim/v2/Users
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func scimV2UsersPost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/scim/v2/Users"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Signing Certificate
    /// - GET /services/certificate/{cert_id}
    /// - parameter certId: (path) The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesCertificateCertIdGet(certId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/services/certificate/{cert_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{cert_id}", with: certId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Disable Configuration Mode
    /// - POST /services/configuration_mode/actions/disable
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesConfigurationModeActionsDisablePost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/services/configuration_mode/actions/disable"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Enable Configuration Mode
    /// - POST /services/configuration_mode/actions/enable
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesConfigurationModeActionsEnablePost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/services/configuration_mode/actions/enable"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Available Direct Data Files
    /// - GET /services/directdata/files
    /// - parameter extractType: (query) The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files. (optional)
    /// - parameter startTime: (query) Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time. (optional)
    /// - parameter stopTime: (query) Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time. (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesDirectdataFilesGet(extractType: String? = nil, startTime: Int? = nil, stopTime: Int? = nil, accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/services/directdata/files"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let extractType = extractType { queryItems.append(URLQueryItem(name: "extract_type", value: extractType)) } 
                if let startTime = startTime { queryItems.append(URLQueryItem(name: "start_time", value: "\(startTime)")) } 
                if let stopTime = stopTime { queryItems.append(URLQueryItem(name: "stop_time", value: "\(stopTime)")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Download Direct Data File
    /// - GET /services/directdata/files/{name}
    /// - parameter name: (path) The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001. 
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesDirectdataFilesNameGet(name: String, accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/services/directdata/files/{name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{name}", with: name)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Download Item Content
    /// - GET /services/file_staging/items/content/{item}
    /// - parameter item: (path) The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter range: (header) Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format &#x60;bytes&#x3D;{min}-{max}&#x60;. For example, &#x60;bytes&#x3D;0-1000&#x60;. (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesFileStagingItemsContentItemGet(item: String, authorization: String? = nil, accept: String? = nil, range: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/services/file_staging/items/content/{item}"
                localVarPath = localVarPath.replacingOccurrences(of: "{item}", with: item)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let range = range { headers["Range"] = range }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete File or Folder
    /// - DELETE /services/file_staging/items/{item}
    /// - parameter item: (path) The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. 
    /// - parameter recursive: (query) Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesFileStagingItemsItemDelete(item: String, recursive: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/services/file_staging/items/{item}"
                localVarPath = localVarPath.replacingOccurrences(of: "{item}", with: item)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let recursive = recursive { queryItems.append(URLQueryItem(name: "recursive", value: recursive)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// List Items at a Path
    /// - GET /services/file_staging/items/{item}
    /// - parameter item: (path) The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. 
    /// - parameter recursive: (query) If true, the response will contain the contents of all subfolders. If not specified, the default value is false. (optional)
    /// - parameter limit: (query) Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000. (optional)
    /// - parameter formatResult: (query) If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesFileStagingItemsItemGet(item: String, recursive: String? = nil, limit: String? = nil, formatResult: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/services/file_staging/items/{item}"
                localVarPath = localVarPath.replacingOccurrences(of: "{item}", with: item)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let recursive = recursive { queryItems.append(URLQueryItem(name: "recursive", value: recursive)) } 
                if let limit = limit { queryItems.append(URLQueryItem(name: "limit", value: limit)) } 
                if let formatResult = formatResult { queryItems.append(URLQueryItem(name: "format_result", value: formatResult)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Folder or File
    /// - PUT /services/file_staging/items/{item}
    /// - parameter item: (path) The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesFileStagingItemsItemPut(item: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/services/file_staging/items/{item}"
                localVarPath = localVarPath.replacingOccurrences(of: "{item}", with: item)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Folder or File
    /// - POST /services/file_staging/items
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentMD5: (header) Optional: The MD5 checksum of the file being uploaded. (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesFileStagingItemsPost(authorization: String? = nil, accept: String? = nil, contentMD5: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/services/file_staging/items"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentMD5 = contentMD5 { headers["Content-MD5"] = contentMD5 }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// List Upload Sessions
    /// - GET /services/file_staging/upload/
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesFileStagingUploadGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/services/file_staging/upload/"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Resumable Upload Session
    /// - POST /services/file_staging/upload
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesFileStagingUploadPost(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/services/file_staging/upload"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Abort Upload Session
    /// - DELETE /services/file_staging/upload/{upload_session_id}
    /// - parameter uploadSessionId: (path)  
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesFileStagingUploadUploadSessionIdDelete(uploadSessionId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/services/file_staging/upload/{upload_session_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{upload_session_id}", with: uploadSessionId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Get Upload Session Details
    /// - GET /services/file_staging/upload/{upload_session_id}
    /// - parameter uploadSessionId: (path)  
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesFileStagingUploadUploadSessionIdGet(uploadSessionId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/services/file_staging/upload/{upload_session_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{upload_session_id}", with: uploadSessionId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// List File Parts Uploaded to Session
    /// - GET /services/file_staging/upload/{upload_session_id}/parts
    /// - parameter uploadSessionId: (path)  
    /// - parameter limit: (query) Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesFileStagingUploadUploadSessionIdPartsGet(uploadSessionId: String, limit: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/services/file_staging/upload/{upload_session_id}/parts"
                localVarPath = localVarPath.replacingOccurrences(of: "{upload_session_id}", with: uploadSessionId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let limit = limit { queryItems.append(URLQueryItem(name: "limit", value: limit)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Commit Upload Session
    /// - POST /services/file_staging/upload/{upload_session_id}
    /// - parameter uploadSessionId: (path)  
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesFileStagingUploadUploadSessionIdPost(uploadSessionId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/services/file_staging/upload/{upload_session_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{upload_session_id}", with: uploadSessionId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Upload to a Session
    /// - PUT /services/file_staging/upload/{upload_session_id}
    /// - parameter uploadSessionId: (path)  
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIFilePartNumber: (header) The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2. (optional)
    /// - parameter contentMD5: (header) Optional: The MD5 checksum of the file part being uploaded. (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesFileStagingUploadUploadSessionIdPut(uploadSessionId: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIFilePartNumber: String? = nil, contentMD5: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/services/file_staging/upload/{upload_session_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{upload_session_id}", with: uploadSessionId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIFilePartNumber = xVaultAPIFilePartNumber { headers["X-VaultAPI-FilePartNumber"] = xVaultAPIFilePartNumber }
                if let contentMD5 = contentMD5 { headers["Content-MD5"] = contentMD5 }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Job Histories
    /// - GET /services/jobs/histories
    /// - parameter startDate: (query) Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job. (optional)
    /// - parameter endDate: (query) Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time. (optional)
    /// - parameter status: (query) Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses. (optional)
    /// - parameter limit: (query) Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50. (optional)
    /// - parameter offset: (query) Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesJobsHistoriesGet(startDate: String? = nil, endDate: String? = nil, status: String? = nil, limit: String? = nil, offset: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/services/jobs/histories"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let startDate = startDate { queryItems.append(URLQueryItem(name: "start_date", value: startDate)) } 
                if let endDate = endDate { queryItems.append(URLQueryItem(name: "end_date", value: endDate)) } 
                if let status = status { queryItems.append(URLQueryItem(name: "status", value: status)) } 
                if let limit = limit { queryItems.append(URLQueryItem(name: "limit", value: limit)) } 
                if let offset = offset { queryItems.append(URLQueryItem(name: "offset", value: offset)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Import Bulk Translation File Job Errors
    /// - GET /services/jobs/{job_id}/errors
    /// - parameter jobId: (path) The id value of the requested import job. This was returned from the Import Bulk Translation File request. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesJobsJobIdErrorsGet(jobId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/services/jobs/{job_id}/errors"
                localVarPath = localVarPath.replacingOccurrences(of: "{job_id}", with: jobId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Job Status
    /// - GET /services/jobs/{job_id}
    /// - parameter jobId: (path) The ID of the job, returned from the original job request. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesJobsJobIdGet(jobId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/services/jobs/{job_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{job_id}", with: jobId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Import Bulk Translation File Job Summary
    /// - GET /services/jobs/{job_id}/summary
    /// - parameter jobId: (path) The id value of the requested import job. This was returned from the Import Bulk Translation File request. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesJobsJobIdSummaryGet(jobId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/services/jobs/{job_id}/summary"
                localVarPath = localVarPath.replacingOccurrences(of: "{job_id}", with: jobId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve SDK Job Tasks
    /// - GET /services/jobs/{job_id}/tasks
    /// - parameter jobId: (path) The ID of the SDK job, returned from the original job request. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesJobsJobIdTasksGet(jobId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/services/jobs/{job_id}/tasks"
                localVarPath = localVarPath.replacingOccurrences(of: "{job_id}", with: jobId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Job Monitors
    /// - GET /services/jobs/monitors
    /// - parameter startDate: (query) Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job. (optional)
    /// - parameter endDate: (query) Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time. (optional)
    /// - parameter status: (query) Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses. (optional)
    /// - parameter limit: (query) Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50. (optional)
    /// - parameter offset: (query) Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesJobsMonitorsGet(startDate: String? = nil, endDate: String? = nil, status: String? = nil, limit: String? = nil, offset: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/services/jobs/monitors"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let startDate = startDate { queryItems.append(URLQueryItem(name: "start_date", value: startDate)) } 
                if let endDate = endDate { queryItems.append(URLQueryItem(name: "end_date", value: endDate)) } 
                if let status = status { queryItems.append(URLQueryItem(name: "status", value: status)) } 
                if let limit = limit { queryItems.append(URLQueryItem(name: "limit", value: limit)) } 
                if let offset = offset { queryItems.append(URLQueryItem(name: "offset", value: offset)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Start Job
    /// - POST /services/jobs/start_now/{job_id}
    /// - parameter jobId: (path) The ID of the scheduled job instance to start. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesJobsStartNowJobIdPost(jobId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/services/jobs/start_now/{job_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{job_id}", with: jobId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Extract Data Files
    /// - POST /services/loader/extract
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesLoaderExtractPost(authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/services/loader/extract"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Load Failure Log Results
    /// - GET /services/loader/{job_id}/tasks/{task_id}/failurelog
    /// - parameter jobId: (path) The id value of the requested extract job. 
    /// - parameter taskId: (path) The id value of the requested extract task. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesLoaderJobIdTasksTaskIdFailurelogGet(jobId: String, taskId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/services/loader/{job_id}/tasks/{task_id}/failurelog"
                localVarPath = localVarPath.replacingOccurrences(of: "{job_id}", with: jobId)
                localVarPath = localVarPath.replacingOccurrences(of: "{task_id}", with: taskId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Loader Extract Results
    /// - GET /services/loader/{job_id}/tasks/{task_id}/results
    /// - parameter jobId: (path) The id value of the requested extract job. 
    /// - parameter taskId: (path) The id value of the requested extract task. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesLoaderJobIdTasksTaskIdResultsGet(jobId: String, taskId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/services/loader/{job_id}/tasks/{task_id}/results"
                localVarPath = localVarPath.replacingOccurrences(of: "{job_id}", with: jobId)
                localVarPath = localVarPath.replacingOccurrences(of: "{task_id}", with: taskId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Loader Extract Renditions Results
    /// - GET /services/loader/{job_id}/tasks/{task_id}/results/renditions
    /// - parameter jobId: (path) The id value of the requested extract job. 
    /// - parameter taskId: (path) The id value of the requested extract task. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(jobId: String, taskId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/services/loader/{job_id}/tasks/{task_id}/results/renditions"
                localVarPath = localVarPath.replacingOccurrences(of: "{job_id}", with: jobId)
                localVarPath = localVarPath.replacingOccurrences(of: "{task_id}", with: taskId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Load Success Log Results
    /// - GET /services/loader/{job_id}/tasks/{task_id}/successlog
    /// - parameter jobId: (path) The id value of the requested extract job. 
    /// - parameter taskId: (path) The id value of the requested extract task. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesLoaderJobIdTasksTaskIdSuccesslogGet(jobId: String, taskId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/services/loader/{job_id}/tasks/{task_id}/successlog"
                localVarPath = localVarPath.replacingOccurrences(of: "{job_id}", with: jobId)
                localVarPath = localVarPath.replacingOccurrences(of: "{task_id}", with: taskId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Load Data Objects
    /// - POST /services/loader/load
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesLoaderLoadPost(authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/services/loader/load"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Validate Package
    /// - POST /services/package/actions/validate
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesPackageActionsValidatePost(authorization: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/services/package/actions/validate"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Export Package
    /// - POST /services/package
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesPackagePost(authorization: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/services/package"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Import Package
    /// - PUT /services/package
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesPackagePut(authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/services/package"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve All Queues
    /// - GET /services/queues
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesQueuesGet(authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/services/queues"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Disable Delivery
    /// - PUT /services/queues/{queue_name}/actions/disable_delivery
    /// - parameter queueName: (path) The name of a specific Queue. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesQueuesQueueNameActionsDisableDeliveryPut(queueName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/services/queues/{queue_name}/actions/disable_delivery"
                localVarPath = localVarPath.replacingOccurrences(of: "{queue_name}", with: queueName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Enable Delivery
    /// - PUT /services/queues/{queue_name}/actions/enable_delivery
    /// - parameter queueName: (path) The name of a specific Queue. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesQueuesQueueNameActionsEnableDeliveryPut(queueName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/services/queues/{queue_name}/actions/enable_delivery"
                localVarPath = localVarPath.replacingOccurrences(of: "{queue_name}", with: queueName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Reset Queue
    /// - PUT /services/queues/{queue_name}/actions/reset
    /// - parameter queueName: (path) The name of a specific Queue. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesQueuesQueueNameActionsResetPut(queueName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/services/queues/{queue_name}/actions/reset"
                localVarPath = localVarPath.replacingOccurrences(of: "{queue_name}", with: queueName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Queue Status
    /// - GET /services/queues/{queue_name}
    /// - parameter queueName: (path) The name of a specific queue. For example, queue__c. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesQueuesQueueNameGet(queueName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/services/queues/{queue_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{queue_name}", with: queueName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Validate Imported Package
    /// - POST /services/vobject/vault_package__v/{package_id}/actions/validate
    /// - parameter packageId: (path) The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func servicesVobjectVaultPackageVPackageIdActionsValidatePost(packageId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/services/vobject/vault_package__v/{package_id}/actions/validate"
                localVarPath = localVarPath.replacingOccurrences(of: "{package_id}", with: packageId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// End Session
    /// - DELETE /session
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header) The Vault sessionId to end. (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func sessionDelete(accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/session"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Download Single Client Code Distribution
    /// - GET /uicode/distributions/{distribution_name}/code
    /// - parameter distributionName: (path) The name attribute of the client code distribution to download. 
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func uicodeDistributionsDistributionNameCodeGet(distributionName: String, accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/uicode/distributions/{distribution_name}/code"
                localVarPath = localVarPath.replacingOccurrences(of: "{distribution_name}", with: distributionName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Single Client Code Distribution
    /// - DELETE /uicode/distributions/{distribution_name}
    /// - parameter distributionName: (path) The name attribute of the client code distribution to delete. 
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func uicodeDistributionsDistributionNameDelete(distributionName: String, accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/uicode/distributions/{distribution_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{distribution_name}", with: distributionName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Single Client Code Distribution Metadata
    /// - GET /uicode/distributions/{distribution_name}
    /// - parameter distributionName: (path) The name attribute of the client code distribution to delete. 
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func uicodeDistributionsDistributionNameGet(distributionName: String, accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/uicode/distributions/{distribution_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{distribution_name}", with: distributionName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve All Client Code Distribution Metadata
    /// - GET /uicode/distributions
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func uicodeDistributionsGet(accept: String? = nil, authorization: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/uicode/distributions"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Add or Replace Single Client Code Distribution
    /// - POST /uicode/distributions
    /// - parameter accept: (header)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func uicodeDistributionsPost(accept: String? = nil, authorization: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/uicode/distributions"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let accept = accept { headers["Accept"] = accept }
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Deploy Package
    /// - POST /vobject/vault_package__v/{package_id}/actions/deploy
    /// - parameter packageId: (path) The id field value of the vault_package__v object record used for deployment. See Import Package. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectVaultPackageVPackageIdActionsDeployPost(packageId: String, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobject/vault_package__v/{package_id}/actions/deploy"
                localVarPath = localVarPath.replacingOccurrences(of: "{package_id}", with: packageId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Package Deploy Results
    /// - GET /vobject/vault_package__v/{package_id}/actions/deploy/results
    /// - parameter packageId: (path) The id field value of the vault_package__v object record used for deployment. See Deploy Package. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectVaultPackageVPackageIdActionsDeployResultsGet(packageId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobject/vault_package__v/{package_id}/actions/deploy/results"
                localVarPath = localVarPath.replacingOccurrences(of: "{package_id}", with: packageId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Results of Cascade Delete Job
    /// - GET /vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}
    /// - parameter objectName: (path) The object name__v field value (product__v, country__v, custom_object__c, etc.). 
    /// - parameter jobStatus: (path)  
    /// - parameter jobId: (path)  
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(objectName: String, jobStatus: String, jobId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{job_status}", with: jobStatus)
                localVarPath = localVarPath.replacingOccurrences(of: "{job_id}", with: jobId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Results of Deep Copy Job
    /// - GET /vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}
    /// - parameter objectName: (path) The object name__v field value (product__v, country__v, custom_object__c, etc.). 
    /// - parameter jobStatus: (path) The ID of the job, retrieved from the response of the job request. 
    /// - parameter jobId: (path) Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(objectName: String, jobStatus: String, jobId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{job_status}", with: jobStatus)
                localVarPath = localVarPath.replacingOccurrences(of: "{job_id}", with: jobId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create a Placeholder from an EDL Item
    /// - POST /vobjects/edl_item__v/actions/createplaceholder
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsEdlItemVActionsCreateplaceholderPost(authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/vobjects/edl_item__v/actions/createplaceholder"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Download Merge Records Job Log
    /// - GET /vobjects/merges/{job_id}/log
    /// - parameter jobId: (path) The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsMergesJobIdLogGet(jobId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/merges/{job_id}/log"
                localVarPath = localVarPath.replacingOccurrences(of: "{job_id}", with: jobId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Record Merge Results
    /// - GET /vobjects/merges/{job_id}/results
    /// - parameter jobId: (path) The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsMergesJobIdResultsGet(jobId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/merges/{job_id}/results"
                localVarPath = localVarPath.replacingOccurrences(of: "{job_id}", with: jobId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Record Merge Status
    /// - GET /vobjects/merges/{job_id}/status
    /// - parameter jobId: (path) The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsMergesJobIdStatusGet(jobId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/merges/{job_id}/status"
                localVarPath = localVarPath.replacingOccurrences(of: "{job_id}", with: jobId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Initiate Object Action on Multiple Records
    /// - POST /vobjects/{object_name}/actions/{action_name}
    /// - parameter objectName: (path) The object name__v field value. 
    /// - parameter actionName: (path) Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameActionsActionNamePost(objectName: String, actionName: String, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/actions/{action_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{action_name}", with: actionName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Change Object Type
    /// - POST /vobjects/{object_name}/actions/changetype
    /// - parameter objectName: (path) The name of the object. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameActionsChangetypePost(objectName: String, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/actions/changetype"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Initiate Record Merge
    /// - POST /vobjects/{object_name}/actions/merge
    /// - parameter objectName: (path) The object name__v field value. For example, account__v. This object must have Enable Merges configured. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - parameter vobjectsObjectNameActionsMergePostRequestInner: (body)  (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameActionsMergePost(objectName: String, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil, vobjectsObjectNameActionsMergePostRequestInner: [VobjectsObjectNameActionsMergePostRequestInner]? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/actions/merge"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                request.httpBody = try self.encoder.encode(vobjectsObjectNameActionsMergePostRequestInner)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Roll-up Field Recalculation Status
    /// - GET /vobjects/{object_name}/actions/recalculaterollups
    /// - parameter objectName: (path) The name of the object for which to check the status of a Roll-up field recalculation. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameActionsRecalculaterollupsGet(objectName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/actions/recalculaterollups"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Recalculate Roll-up Fields
    /// - POST /vobjects/{object_name}/actions/recalculaterollups
    /// - parameter objectName: (path) The name of the object for which to check the status of a Roll-up field recalculation. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameActionsRecalculaterollupsPost(objectName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/actions/recalculaterollups"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Corporate Currency Fields
    /// - PUT /vobjects/{object_name}/actions/updatecorporatecurrency
    /// - parameter objectName: (path) The object name__v field value (product__v, country__v, custom_object__c, etc.). 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameActionsUpdatecorporatecurrencyPut(objectName: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/actions/updatecorporatecurrency"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Multiple Object Record Attachments
    /// - DELETE /vobjects/{object_name}/attachments/batch
    /// - parameter objectName: (path) The object name__v field value (product__v, country__v, custom_object__c, etc.). 
    /// - parameter idParam: (query)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameAttachmentsBatchDelete(objectName: String, idParam: String? = nil, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/attachments/batch"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let idParam = idParam { queryItems.append(URLQueryItem(name: "idParam", value: idParam)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Multiple Object Record Attachments
    /// - POST /vobjects/{object_name}/attachments/batch
    /// - parameter objectName: (path) The object name__v field value (product__v, country__v, custom_object__c, etc.). 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameAttachmentsBatchPost(objectName: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/attachments/batch"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Multiple Object Record Attachment Descriptions
    /// - PUT /vobjects/{object_name}/attachments/batch
    /// - parameter objectName: (path) The object name__v field value (product__v, country__v, custom_object__c, etc.). 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameAttachmentsBatchPut(objectName: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/attachments/batch"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Object Records
    /// - DELETE /vobjects/{object_name}
    /// - parameter objectName: (path) The object name__v field value (product__v, country__v, custom_object__c, etc.). 
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header) Can be text/csv or application/json (optional)
    /// - parameter accept: (header) Can be text/csv or application/json (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameDelete(objectName: String, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Object Record Roles
    /// - GET /vobjects/{object_name}/{id}/roles/{role_name}
    /// - parameter objectName: (path) The object name. 
    /// - parameter id: (path) The id of the document, binder, or object record. 
    /// - parameter roleName: (path) Optional: Include a role name to filter for a specific role. For example, owner__v. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameIdRolesRoleNameGet(objectName: String, id: String, roleName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/{id}/roles/{role_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{id}", with: id)
                localVarPath = localVarPath.replacingOccurrences(of: "{role_name}", with: roleName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Object User Actions Details
    /// - GET /vobjects/{object_name}/{object_record_id}/actions/{action_name}
    /// - parameter objectName: (path) The object name__v field value. 
    /// - parameter objectRecordId: (path) The object record id field value from which to retrieve user actions. 
    /// - parameter actionName: (path) The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameObjectRecordIdActionsActionNameGet(objectName: String, objectRecordId: String, actionName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/{object_record_id}/actions/{action_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{object_record_id}", with: objectRecordId)
                localVarPath = localVarPath.replacingOccurrences(of: "{action_name}", with: actionName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Initiate Object Action on a Single Record
    /// - POST /vobjects/{object_name}/{object_record_id}/actions/{action_name}
    /// - parameter objectName: (path) The object name__v field value. 
    /// - parameter objectRecordId: (path) The object record id field value from which to retrieve user actions. 
    /// - parameter actionName: (path) The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameObjectRecordIdActionsActionNamePost(objectName: String, objectRecordId: String, actionName: String, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/{object_record_id}/actions/{action_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{object_record_id}", with: objectRecordId)
                localVarPath = localVarPath.replacingOccurrences(of: "{action_name}", with: actionName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Cascade Delete Object Record
    /// - POST /vobjects/{object_name}/{object_record_id}/actions/cascadedelete
    /// - parameter objectName: (path) The object name__v field value (product__v, country__v, custom_object__c, etc.). 
    /// - parameter objectRecordId: (path) The object record id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(objectName: String, objectRecordId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/{object_record_id}/actions/cascadedelete"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{object_record_id}", with: objectRecordId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Deep Copy Object Record
    /// - POST /vobjects/{object_name}/{object_record_id}/actions/deepcopy
    /// - parameter objectName: (path) The object name__v field value (product__v, country__v, custom_object__c, etc.). 
    /// - parameter objectRecordId: (path) The object record id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(objectName: String, objectRecordId: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/{object_record_id}/actions/deepcopy"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{object_record_id}", with: objectRecordId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Object Record User Actions
    /// - GET /vobjects/{object_name}/{object_record_id}/actions
    /// - parameter objectName: (path) The object name__v field value. 
    /// - parameter objectRecordId: (path) The object record id field value. 
    /// - parameter loc: (query) Optional: When true, retrieves localized (translated) strings for the label.  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameObjectRecordIdActionsGet(objectName: String, objectRecordId: String, loc: Bool? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/{object_record_id}/actions"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{object_record_id}", with: objectRecordId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let loc = loc { queryItems.append(URLQueryItem(name: "loc", value: loc ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Download Attachment Field File
    /// - GET /vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file
    /// - parameter objectName: (path) The object name__v field value. For example, product__v. 
    /// - parameter objectRecordId: (path) The object record id field value. 
    /// - parameter attachmentFieldName: (path) The name of the Attachment field to update. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(objectName: String, objectRecordId: String, attachmentFieldName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{object_record_id}", with: objectRecordId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_field_name}", with: attachmentFieldName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Attachment Field File
    /// - POST /vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file
    /// - parameter objectName: (path) The object name__v field value. For example, product__v. 
    /// - parameter objectRecordId: (path) The object record id field value. 
    /// - parameter attachmentFieldName: (path) The name of the Attachment field to update. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(objectName: String, objectRecordId: String, attachmentFieldName: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{object_record_id}", with: objectRecordId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_field_name}", with: attachmentFieldName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Download All Attachment Field Files
    /// - GET /vobjects/{object_name}/{object_record_id}/attachment_fields/file
    /// - parameter objectName: (path) The object name__v field value. For example, product__v. 
    /// - parameter objectRecordId: (path) The object record id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(objectName: String, objectRecordId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/{object_record_id}/attachment_fields/file"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{object_record_id}", with: objectRecordId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Object Record Attachment
    /// - DELETE /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}
    /// - parameter objectName: (path) The object name__v field value (product__v, country__v, custom_object__c, etc.). 
    /// - parameter objectRecordId: (path) The object record id field value. 
    /// - parameter attachmentId: (path) The attachment id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(objectName: String, objectRecordId: String, attachmentId: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{object_record_id}", with: objectRecordId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_id}", with: attachmentId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Object Record Attachment Metadata
    /// - GET /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}
    /// - parameter objectName: (path) The object name__v field value (product__v, country__v, custom_object__c, etc.). 
    /// - parameter objectRecordId: (path) The object record id field value. 
    /// - parameter attachmentId: (path) The attachment id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(objectName: String, objectRecordId: String, attachmentId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{object_record_id}", with: objectRecordId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_id}", with: attachmentId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Object Record Attachment Description
    /// - PUT /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}
    /// - parameter objectName: (path) The object name__v field value (product__v, country__v, custom_object__c, etc.). 
    /// - parameter objectRecordId: (path) The object record id field value. 
    /// - parameter attachmentId: (path) The attachment id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(objectName: String, objectRecordId: String, attachmentId: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{object_record_id}", with: objectRecordId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_id}", with: attachmentId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete Object Record Attachment Version
    /// - DELETE /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}
    /// - parameter objectName: (path) The object name__v field value (product__v, country__v, custom_object__c, etc.). 
    /// - parameter objectRecordId: (path) The object record id field value. 
    /// - parameter attachmentId: (path) The attachment id field value. 
    /// - parameter attachmentVersion: (path) The attachment version__v field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(objectName: String, objectRecordId: String, attachmentId: String, attachmentVersion: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{object_record_id}", with: objectRecordId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_id}", with: attachmentId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_version}", with: attachmentVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Download Object Record Attachment File
    /// - GET /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file
    /// - parameter objectName: (path) The object name__v field value (product__v, country__v, custom_object__c, etc.). 
    /// - parameter objectRecordId: (path) The object record id field value. 
    /// - parameter attachmentId: (path) The attachment id field value. 
    /// - parameter attachmentVersion: (path)  
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(objectName: String, objectRecordId: String, attachmentId: String, attachmentVersion: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{object_record_id}", with: objectRecordId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_id}", with: attachmentId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_version}", with: attachmentVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Object Record Attachment Version Metadata
    /// - GET /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}
    /// - parameter objectName: (path) The object name__v field value (product__v, country__v, custom_object__c, etc.). 
    /// - parameter objectRecordId: (path) The object record id field value. 
    /// - parameter attachmentId: (path) The attachment id field value. 
    /// - parameter attachmentVersion: (path) The attachment version__v field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(objectName: String, objectRecordId: String, attachmentId: String, attachmentVersion: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{object_record_id}", with: objectRecordId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_id}", with: attachmentId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_version}", with: attachmentVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Restore Object Record Attachment Version
    /// - POST /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}
    /// - parameter objectName: (path) The object name__v field value (product__v, country__v, custom_object__c, etc.). 
    /// - parameter objectRecordId: (path) The object record id field value. 
    /// - parameter attachmentId: (path) The attachment id field value. 
    /// - parameter attachmentVersion: (path) The attachment version__v field value. 
    /// - parameter restore: (query)  (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(objectName: String, objectRecordId: String, attachmentId: String, attachmentVersion: String, restore: Bool? = nil, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{object_record_id}", with: objectRecordId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_id}", with: attachmentId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_version}", with: attachmentVersion)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let restore = restore { queryItems.append(URLQueryItem(name: "restore", value: restore ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Object Record Attachment Versions
    /// - GET /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions
    /// - parameter objectName: (path) The object name__v field value (product__v, country__v, custom_object__c, etc.). 
    /// - parameter objectRecordId: (path) The object record id field value. 
    /// - parameter attachmentId: (path) The attachment id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(objectName: String, objectRecordId: String, attachmentId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{object_record_id}", with: objectRecordId)
                localVarPath = localVarPath.replacingOccurrences(of: "{attachment_id}", with: attachmentId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Download All Object Record Attachment Files
    /// - GET /vobjects/{object_name}/{object_record_id}/attachments/file
    /// - parameter objectName: (path) The object name__v field value (product__v, country__v, custom_object__c, etc.). 
    /// - parameter objectRecordId: (path) The object record id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameObjectRecordIdAttachmentsFileGet(objectName: String, objectRecordId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/{object_record_id}/attachments/file"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{object_record_id}", with: objectRecordId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Object Record Attachments
    /// - GET /vobjects/{object_name}/{object_record_id}/attachments
    /// - parameter objectName: (path) The object name__v field value (product__v, country__v, custom_object__c, etc.). 
    /// - parameter objectRecordId: (path) The object record id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameObjectRecordIdAttachmentsGet(objectName: String, objectRecordId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/{object_record_id}/attachments"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{object_record_id}", with: objectRecordId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create Object Record Attachment
    /// - POST /vobjects/{object_name}/{object_record_id}/attachments
    /// - parameter objectName: (path) The object name__v field value (product__v, country__v, custom_object__c, etc.). 
    /// - parameter objectRecordId: (path) The object record id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameObjectRecordIdAttachmentsPost(objectName: String, objectRecordId: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/{object_record_id}/attachments"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{object_record_id}", with: objectRecordId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Complete Audit History for a Single Object Record
    /// - GET /vobjects/{object_name}/{object_record_id}/audittrail
    /// - parameter objectName: (path) The object name__v field value. 
    /// - parameter objectRecordId: (path) The object record id field value from which to retrieve user actions. 
    /// - parameter startDate: (query) Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date.  (optional)
    /// - parameter endDate: (query) Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date.  (optional)
    /// - parameter formatResult: (query) To request a CSV file of your audit history, use csv.  (optional)
    /// - parameter limit: (query) Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200. (optional)
    /// - parameter offset: (query) Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0. (optional)
    /// - parameter events: (query) Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;Copy,Edit,Delete. If omitted, defaults to all audit events. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameObjectRecordIdAudittrailGet(objectName: String, objectRecordId: String, startDate: String? = nil, endDate: String? = nil, formatResult: String? = nil, limit: String? = nil, offset: String? = nil, events: String? = nil, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/{object_record_id}/audittrail"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{object_record_id}", with: objectRecordId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let startDate = startDate { queryItems.append(URLQueryItem(name: "start_date", value: startDate)) } 
                if let endDate = endDate { queryItems.append(URLQueryItem(name: "end_date", value: endDate)) } 
                if let formatResult = formatResult { queryItems.append(URLQueryItem(name: "format_result", value: formatResult)) } 
                if let limit = limit { queryItems.append(URLQueryItem(name: "limit", value: limit)) } 
                if let offset = offset { queryItems.append(URLQueryItem(name: "offset", value: offset)) } 
                if let events = events { queryItems.append(URLQueryItem(name: "events", value: events)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Object Record
    /// - GET /vobjects/{object_name}/{object_record_id}
    /// - parameter objectName: (path) The object name__v field value (product__v, country__v, custom_object__c, etc.). 
    /// - parameter objectRecordId: (path) The object record id field value. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameObjectRecordIdGet(objectName: String, objectRecordId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/{object_record_id}"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                localVarPath = localVarPath.replacingOccurrences(of: "{object_record_id}", with: objectRecordId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Create & Upsert Object Records
    /// - POST /vobjects/{object_name}
    /// - parameter objectName: (path) The object name__v field value (product__v, country__v, custom_object__c, etc.). 
    /// - parameter idParam: (query) To upsert object records, add &#x60;idParam&#x3D;{field_name}&#x60; to the request endpoint. You can use any object field which has &#x60;unique&#x60; set to &#x60;true&#x60; in the object metadata. For example, &#x60;idParam&#x3D;external_id__v&#x60;. (optional)
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header) Can be text/csv or application/json (optional)
    /// - parameter accept: (header) Can be text/csv or application/json (optional)
    /// - parameter xVaultAPIMigrationMode: (header) If set to &#x60;true&#x60;, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header. (optional)
    /// - parameter xVaultAPINoTriggers: (header) If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers. (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNamePost(objectName: String, idParam: String? = nil, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIMigrationMode: Bool? = nil, xVaultAPINoTriggers: Bool? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let idParam = idParam { queryItems.append(URLQueryItem(name: "idParam", value: idParam)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIMigrationMode = xVaultAPIMigrationMode { headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode ? "true" : "false" }
                if let xVaultAPINoTriggers = xVaultAPINoTriggers { headers["X-VaultAPI-NoTriggers"] = xVaultAPINoTriggers ? "true" : "false" }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update Object Records
    /// - PUT /vobjects/{object_name}
    /// - parameter objectName: (path) The object name__v field value (product__v, country__v, custom_object__c, etc.). 
    /// - parameter authorization: (header)  (optional)
    /// - parameter contentType: (header) Can be text/csv or application/json (optional)
    /// - parameter accept: (header) Can be text/csv or application/json (optional)
    /// - parameter xVaultAPIMigrationMode: (header) If set to &#x60;true&#x60;, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header. (optional)
    /// - parameter xVaultAPINoTriggers: (header) If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers. (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNamePut(objectName: String, authorization: String? = nil, contentType: String? = nil, accept: String? = nil, xVaultAPIMigrationMode: Bool? = nil, xVaultAPINoTriggers: Bool? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIMigrationMode = xVaultAPIMigrationMode { headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode ? "true" : "false" }
                if let xVaultAPINoTriggers = xVaultAPINoTriggers { headers["X-VaultAPI-NoTriggers"] = xVaultAPINoTriggers ? "true" : "false" }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Remove Users & Groups from Roles on Object Records
    /// - DELETE /vobjects/{object_name}/roles
    /// - parameter objectName: (path) The name of the object where you want to remove roles. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameRolesDelete(objectName: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/roles"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Assign Users & Groups to Roles on Object Records
    /// - POST /vobjects/{object_name}/roles
    /// - parameter objectName: (path) The name of the object where you want to remove roles. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter contentType: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsObjectNameRolesPost(objectName: String, authorization: String? = nil, accept: String? = nil, contentType: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/{object_name}/roles"
                localVarPath = localVarPath.replacingOccurrences(of: "{object_name}", with: objectName)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let contentType = contentType { headers["Content-Type"] = contentType }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Retrieve Outbound Package Dependencies
    /// - GET /vobjects/outbound_package__v/{package_id}/dependencies
    /// - parameter packageId: (path) The ID of the outbound_package__v record from which to retrieve dependencies. 
    /// - parameter authorization: (header)  (optional)
    /// - parameter accept: (header)  (optional)
    /// - parameter xVaultAPIClientID: (header) Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func vobjectsOutboundPackageVPackageIdDependenciesGet(packageId: String, authorization: String? = nil, accept: String? = nil, xVaultAPIClientID: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/vobjects/outbound_package__v/{package_id}/dependencies"
                localVarPath = localVarPath.replacingOccurrences(of: "{package_id}", with: packageId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let authorization = authorization { headers["Authorization"] = authorization }
                if let accept = accept { headers["Accept"] = accept }
                if let xVaultAPIClientID = xVaultAPIClientID { headers["X-VaultAPI-ClientID"] = xVaultAPIClientID }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
