// TODO: better import syntax?
import {BaseAPIRequestFactory, RequiredError, COLLECTION_FORMATS} from './baseapi';
import {Configuration} from '../configuration';
import {RequestContext, HttpMethod, ResponseContext, HttpFile, HttpInfo} from '../http/http';
import {ObjectSerializer} from '../models/ObjectSerializer';
import {ApiException} from './exception';
import {canConsumeForm, isCodeInRange} from '../util';
import {SecurityAuthentication} from '../auth/auth';


import { VobjectsObjectNameActionsMergePostRequestInner } from '../models/VobjectsObjectNameActionsMergePostRequestInner';

/**
 * no description
 */
export class DefaultApiRequestFactory extends BaseAPIRequestFactory {

    /**
     * Retrieve API Versions
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async apiGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/api/';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Content File
     * @param componentTypeAndRecordName The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async apiMdlComponentsComponentTypeAndRecordNameFilesGet(componentTypeAndRecordName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'componentTypeAndRecordName' is not null or undefined
        if (componentTypeAndRecordName === null || componentTypeAndRecordName === undefined) {
            throw new RequiredError("DefaultApi", "apiMdlComponentsComponentTypeAndRecordNameFilesGet", "componentTypeAndRecordName");
        }





        // Path Params
        const localVarPath = '/api/mdl/components/{component_type_and_record_name}/files'
            .replace('{' + 'component_type_and_record_name' + '}', encodeURIComponent(String(componentTypeAndRecordName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Component Record (MDL)
     * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async apiMdlComponentsComponentTypeAndRecordNameGet(componentTypeAndRecordName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'componentTypeAndRecordName' is not null or undefined
        if (componentTypeAndRecordName === null || componentTypeAndRecordName === undefined) {
            throw new RequiredError("DefaultApi", "apiMdlComponentsComponentTypeAndRecordNameGet", "componentTypeAndRecordName");
        }





        // Path Params
        const localVarPath = '/api/mdl/components/{component_type_and_record_name}'
            .replace('{' + 'component_type_and_record_name' + '}', encodeURIComponent(String(componentTypeAndRecordName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Asynchronous MDL Script Results
     * @param jobId 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async apiMdlExecuteAsyncJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'jobId' is not null or undefined
        if (jobId === null || jobId === undefined) {
            throw new RequiredError("DefaultApi", "apiMdlExecuteAsyncJobIdResultsGet", "jobId");
        }





        // Path Params
        const localVarPath = '/api/mdl/execute_async/{job_id}/results'
            .replace('{' + 'job_id' + '}', encodeURIComponent(String(jobId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Execute MDL Script Asynchronously
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async apiMdlExecuteAsyncPost(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/api/mdl/execute_async';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Execute MDL Script
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async apiMdlExecutePost(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/api/mdl/execute';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Upload Content File
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async apiMdlFilesPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/api/mdl/files';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Audit Details
     * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.
     * @param startDate Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
     * @param endDate Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
     * @param allDates Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.
     * @param formatResult To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
     * @param objects This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects&#x3D;product__v,country__v. If omitted, defaults to all objects.
     * @param events This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events&#x3D;Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async audittrailAuditTrailTypeGet(auditTrailType: string, startDate?: string, endDate?: string, allDates?: string, formatResult?: string, limit?: string, offset?: string, objects?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'auditTrailType' is not null or undefined
        if (auditTrailType === null || auditTrailType === undefined) {
            throw new RequiredError("DefaultApi", "audittrailAuditTrailTypeGet", "auditTrailType");
        }













        // Path Params
        const localVarPath = '/audittrail/{audit_trail_type}'
            .replace('{' + 'audit_trail_type' + '}', encodeURIComponent(String(auditTrailType)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (startDate !== undefined) {
            requestContext.setQueryParam("start_date", ObjectSerializer.serialize(startDate, "string", ""));
        }

        // Query Params
        if (endDate !== undefined) {
            requestContext.setQueryParam("end_date", ObjectSerializer.serialize(endDate, "string", ""));
        }

        // Query Params
        if (allDates !== undefined) {
            requestContext.setQueryParam("all_dates", ObjectSerializer.serialize(allDates, "string", ""));
        }

        // Query Params
        if (formatResult !== undefined) {
            requestContext.setQueryParam("format_result", ObjectSerializer.serialize(formatResult, "string", ""));
        }

        // Query Params
        if (limit !== undefined) {
            requestContext.setQueryParam("limit", ObjectSerializer.serialize(limit, "string", ""));
        }

        // Query Params
        if (offset !== undefined) {
            requestContext.setQueryParam("offset", ObjectSerializer.serialize(offset, "string", ""));
        }

        // Query Params
        if (objects !== undefined) {
            requestContext.setQueryParam("objects", ObjectSerializer.serialize(objects, "string", ""));
        }

        // Query Params
        if (events !== undefined) {
            requestContext.setQueryParam("events", ObjectSerializer.serialize(events, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Authentication Type Discovery
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async authDiscoveryPost(accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;



        // Path Params
        const localVarPath = '/auth/discovery';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * OAuth 2.0 / OpenID Connect
     * @param oathOidcProfileId 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async authOauthSessionOathOidcProfileIdPost(oathOidcProfileId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'oathOidcProfileId' is not null or undefined
        if (oathOidcProfileId === null || oathOidcProfileId === undefined) {
            throw new RequiredError("DefaultApi", "authOauthSessionOathOidcProfileIdPost", "oathOidcProfileId");
        }





        // Path Params
        const localVarPath = '/auth/oauth/session/{oath_oidc_profile_id}'
            .replace('{' + 'oath_oidc_profile_id' + '}', encodeURIComponent(String(oathOidcProfileId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * User Name and Password
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async authPost(contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/auth';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Single Source Code File
     * @param className The fully qualified class name of your file.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async codeClassNameDelete(className: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'className' is not null or undefined
        if (className === null || className === undefined) {
            throw new RequiredError("DefaultApi", "codeClassNameDelete", "className");
        }





        // Path Params
        const localVarPath = '/code/{class_name}'
            .replace('{' + 'class_name' + '}', encodeURIComponent(String(className)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Disable Vault Extension
     * @param className The fully qualified class name of your file.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async codeClassNameDisablePut(className: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'className' is not null or undefined
        if (className === null || className === undefined) {
            throw new RequiredError("DefaultApi", "codeClassNameDisablePut", "className");
        }






        // Path Params
        const localVarPath = '/code/{class_name}/disable'
            .replace('{' + 'class_name' + '}', encodeURIComponent(String(className)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Enable Vault Extension
     * @param className The fully qualified class name of your file.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async codeClassNameEnablePut(className: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'className' is not null or undefined
        if (className === null || className === undefined) {
            throw new RequiredError("DefaultApi", "codeClassNameEnablePut", "className");
        }






        // Path Params
        const localVarPath = '/code/{class_name}/enable'
            .replace('{' + 'class_name' + '}', encodeURIComponent(String(className)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Single Source Code File
     * @param className The fully qualified class name of your file.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async codeClassNameGet(className: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'className' is not null or undefined
        if (className === null || className === undefined) {
            throw new RequiredError("DefaultApi", "codeClassNameGet", "className");
        }





        // Path Params
        const localVarPath = '/code/{class_name}'
            .replace('{' + 'class_name' + '}', encodeURIComponent(String(className)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve All Profiling Sessions
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async codeProfilerGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/code/profiler';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Profiling Session
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async codeProfilerPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/code/profiler';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * End Profiling Session
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async codeProfilerSessionNameActionsEndPost(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'sessionName' is not null or undefined
        if (sessionName === null || sessionName === undefined) {
            throw new RequiredError("DefaultApi", "codeProfilerSessionNameActionsEndPost", "sessionName");
        }





        // Path Params
        const localVarPath = '/code/profiler/{session_name}/actions/end'
            .replace('{' + 'session_name' + '}', encodeURIComponent(String(sessionName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Profiling Session
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async codeProfilerSessionNameDelete(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'sessionName' is not null or undefined
        if (sessionName === null || sessionName === undefined) {
            throw new RequiredError("DefaultApi", "codeProfilerSessionNameDelete", "sessionName");
        }





        // Path Params
        const localVarPath = '/code/profiler/{session_name}'
            .replace('{' + 'session_name' + '}', encodeURIComponent(String(sessionName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Profiling Session
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async codeProfilerSessionNameGet(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'sessionName' is not null or undefined
        if (sessionName === null || sessionName === undefined) {
            throw new RequiredError("DefaultApi", "codeProfilerSessionNameGet", "sessionName");
        }





        // Path Params
        const localVarPath = '/code/profiler/{session_name}'
            .replace('{' + 'session_name' + '}', encodeURIComponent(String(sessionName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Download Profiling Session Results
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async codeProfilerSessionNameResultsGet(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'sessionName' is not null or undefined
        if (sessionName === null || sessionName === undefined) {
            throw new RequiredError("DefaultApi", "codeProfilerSessionNameResultsGet", "sessionName");
        }





        // Path Params
        const localVarPath = '/code/profiler/{session_name}/results'
            .replace('{' + 'session_name' + '}', encodeURIComponent(String(sessionName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Add or Replace Single Source Code File
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async codePut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/code';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Specific Root Nodes
     * @param edlHierarchyOrTemplate Choose to retrieve either edl_hierarchy__v or edl_template__v
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(edlHierarchyOrTemplate: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'edlHierarchyOrTemplate' is not null or undefined
        if (edlHierarchyOrTemplate === null || edlHierarchyOrTemplate === undefined) {
            throw new RequiredError("DefaultApi", "compositesTreesEdlHierarchyOrTemplateActionsListnodesPost", "edlHierarchyOrTemplate");
        }






        // Path Params
        const localVarPath = '/composites/trees/{edl_hierarchy_or_template}/actions/listnodes'
            .replace('{' + 'edl_hierarchy_or_template' + '}', encodeURIComponent(String(edlHierarchyOrTemplate)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve All Root Nodes
     * @param edlHierarchyOrTemplate 
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async compositesTreesEdlHierarchyOrTemplateGet(edlHierarchyOrTemplate: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'edlHierarchyOrTemplate' is not null or undefined
        if (edlHierarchyOrTemplate === null || edlHierarchyOrTemplate === undefined) {
            throw new RequiredError("DefaultApi", "compositesTreesEdlHierarchyOrTemplateGet", "edlHierarchyOrTemplate");
        }






        // Path Params
        const localVarPath = '/composites/trees/{edl_hierarchy_or_template}'
            .replace('{' + 'edl_hierarchy_or_template' + '}', encodeURIComponent(String(edlHierarchyOrTemplate)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve a Node\'s Children
     * @param parentNodeId The ID of a parent node in the hierarchy.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async compositesTreesEdlHierarchyVParentNodeIdChildrenGet(parentNodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'parentNodeId' is not null or undefined
        if (parentNodeId === null || parentNodeId === undefined) {
            throw new RequiredError("DefaultApi", "compositesTreesEdlHierarchyVParentNodeIdChildrenGet", "parentNodeId");
        }






        // Path Params
        const localVarPath = '/composites/trees/edl_hierarchy__v/{parent_node_id}/children'
            .replace('{' + 'parent_node_id' + '}', encodeURIComponent(String(parentNodeId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Node Order
     * @param parentNodeId The ID of a parent node in the hierarchy.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async compositesTreesEdlHierarchyVParentNodeIdChildrenPut(parentNodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'parentNodeId' is not null or undefined
        if (parentNodeId === null || parentNodeId === undefined) {
            throw new RequiredError("DefaultApi", "compositesTreesEdlHierarchyVParentNodeIdChildrenPut", "parentNodeId");
        }






        // Path Params
        const localVarPath = '/composites/trees/edl_hierarchy__v/{parent_node_id}/children'
            .replace('{' + 'parent_node_id' + '}', encodeURIComponent(String(parentNodeId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Component Record (XML/JSON)
     * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async configurationComponentTypeAndRecordNameGet(componentTypeAndRecordName: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'componentTypeAndRecordName' is not null or undefined
        if (componentTypeAndRecordName === null || componentTypeAndRecordName === undefined) {
            throw new RequiredError("DefaultApi", "configurationComponentTypeAndRecordNameGet", "componentTypeAndRecordName");
        }






        // Path Params
        const localVarPath = '/configuration/{component_type_and_record_name}'
            .replace('{' + 'component_type_and_record_name' + '}', encodeURIComponent(String(componentTypeAndRecordName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (loc !== undefined) {
            requestContext.setQueryParam("loc", ObjectSerializer.serialize(loc, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Component Record Collection
     * @param componentType 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async configurationComponentTypeGet(componentType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'componentType' is not null or undefined
        if (componentType === null || componentType === undefined) {
            throw new RequiredError("DefaultApi", "configurationComponentTypeGet", "componentType");
        }





        // Path Params
        const localVarPath = '/configuration/{component_type}'
            .replace('{' + 'component_type' + '}', encodeURIComponent(String(componentType)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Details from a Specific Object
     * @param objectNameAndObjectType The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;.
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async configurationObjectNameAndObjectTypeGet(objectNameAndObjectType: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectNameAndObjectType' is not null or undefined
        if (objectNameAndObjectType === null || objectNameAndObjectType === undefined) {
            throw new RequiredError("DefaultApi", "configurationObjectNameAndObjectTypeGet", "objectNameAndObjectType");
        }






        // Path Params
        const localVarPath = '/configuration/{object_name_and_object_type}'
            .replace('{' + 'object_name_and_object_type' + '}', encodeURIComponent(String(objectNameAndObjectType)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (loc !== undefined) {
            requestContext.setQueryParam("loc", ObjectSerializer.serialize(loc, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Details from All Object Types
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async configurationObjecttypeGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/configuration/Objecttype';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Lifecycle Role Assignment Override Rules
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async configurationRoleAssignmentRuleDelete(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/configuration/role_assignment_rule';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Lifecycle Role Assignment Rules (Default & Override)
     * @param lifecycleV Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v&#x3D;general_lifecycle__c
     * @param roleV Include the name of the role from which to retrieve information. For example: role__v&#x3D;editor__c
     * @param productV Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v&#x3D;0PR0011001 or product__v.name__v&#x3D;CholeCap
     * @param countryV Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v&#x3D;0CR0022002 or country__v.name__v&#x3D;United States
     * @param studyV In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v&#x3D;0ST0021J01 or study__v.name__v&#x3D;CholeCap Study
     * @param studyCountryV In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v&#x3D;0SC0001001 or study_country__v.name__v&#x3D;Germany
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async configurationRoleAssignmentRuleGet(lifecycleV?: string, roleV?: string, productV?: string, countryV?: string, studyV?: string, studyCountryV?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;










        // Path Params
        const localVarPath = '/configuration/role_assignment_rule';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (lifecycleV !== undefined) {
            requestContext.setQueryParam("lifecycle__v", ObjectSerializer.serialize(lifecycleV, "string", ""));
        }

        // Query Params
        if (roleV !== undefined) {
            requestContext.setQueryParam("role__v", ObjectSerializer.serialize(roleV, "string", ""));
        }

        // Query Params
        if (productV !== undefined) {
            requestContext.setQueryParam("product__v", ObjectSerializer.serialize(productV, "string", ""));
        }

        // Query Params
        if (countryV !== undefined) {
            requestContext.setQueryParam("country__v", ObjectSerializer.serialize(countryV, "string", ""));
        }

        // Query Params
        if (studyV !== undefined) {
            requestContext.setQueryParam("study__v", ObjectSerializer.serialize(studyV, "string", ""));
        }

        // Query Params
        if (studyCountryV !== undefined) {
            requestContext.setQueryParam("study_country__v", ObjectSerializer.serialize(studyCountryV, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Lifecycle Role Assignment Override Rules
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async configurationRoleAssignmentRulePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/configuration/role_assignment_rule';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Lifecycle Role Assignment Rules (Default & Override)
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async configurationRoleAssignmentRulePut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/configuration/role_assignment_rule';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Initiate Delegated Session
     * @param authorization The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async delegationLoginPost(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/delegation/login';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Delegations
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async delegationVaultsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/delegation/vaults';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Session Keep Alive
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async keepAlivePost(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/keep-alive';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Limits on Objects
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async limitsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/limits';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Download Daily API Usage
     * @param date The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.
     * @param logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async logsApiUsageGet(date?: string, logFormat?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;






        // Path Params
        const localVarPath = '/logs/api_usage';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (date !== undefined) {
            requestContext.setQueryParam("date", ObjectSerializer.serialize(date, "string", ""));
        }

        // Query Params
        if (logFormat !== undefined) {
            requestContext.setQueryParam("log_format", ObjectSerializer.serialize(logFormat, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve All Debug Logs
     * @param userId Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.
     * @param includeInactive Set to &#x60;true&#x60; to include debug log sessions with a status of &#x60;inactive__sys&#x60; in the response. If omitted, defaults to &#x60;false&#x60; and inactive sessions are not included in the response.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async logsCodeDebugGet(userId?: string, includeInactive?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;






        // Path Params
        const localVarPath = '/logs/code/debug';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (userId !== undefined) {
            requestContext.setQueryParam("user_id", ObjectSerializer.serialize(userId, "string", ""));
        }

        // Query Params
        if (includeInactive !== undefined) {
            requestContext.setQueryParam("include_inactive", ObjectSerializer.serialize(includeInactive, "boolean", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Debug Log
     * @param id The ID of the debug log to delete.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async logsCodeDebugIdActionsResetDelete(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new RequiredError("DefaultApi", "logsCodeDebugIdActionsResetDelete", "id");
        }





        // Path Params
        const localVarPath = '/logs/code/debug/{id}/actions/reset'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Reset Debug Log
     * @param id The ID of the debug log to delete.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async logsCodeDebugIdActionsResetPost(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new RequiredError("DefaultApi", "logsCodeDebugIdActionsResetPost", "id");
        }





        // Path Params
        const localVarPath = '/logs/code/debug/{id}/actions/reset'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Download Debug Log Files
     * @param id The ID of the debug log to download.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async logsCodeDebugIdFilesGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new RequiredError("DefaultApi", "logsCodeDebugIdFilesGet", "id");
        }





        // Path Params
        const localVarPath = '/logs/code/debug/{id}/files'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Single Debug Log
     * @param id The ID of the debug log to retrieve.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async logsCodeDebugIdGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new RequiredError("DefaultApi", "logsCodeDebugIdGet", "id");
        }





        // Path Params
        const localVarPath = '/logs/code/debug/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Debug Log
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async logsCodeDebugPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/logs/code/debug';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Download SDK Runtime Log
     * @param date 
     * @param logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async logsCodeRuntimeGet(date?: string, logFormat?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;






        // Path Params
        const localVarPath = '/logs/code/runtime';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (date !== undefined) {
            requestContext.setQueryParam("date", ObjectSerializer.serialize(date, "string", ""));
        }

        // Query Params
        if (logFormat !== undefined) {
            requestContext.setQueryParam("log_format", ObjectSerializer.serialize(logFormat, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Import Bulk Translation File
     * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async messagesMessageTypeActionsImportPost(messageType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'messageType' is not null or undefined
        if (messageType === null || messageType === undefined) {
            throw new RequiredError("DefaultApi", "messagesMessageTypeActionsImportPost", "messageType");
        }





        // Path Params
        const localVarPath = '/messages/{message_type}/actions/import'
            .replace('{' + 'message_type' + '}', encodeURIComponent(String(messageType)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Export Bulk Translation File
     * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
     * @param lang A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async messagesMessageTypeLanguageLangActionsExportPost(messageType: string, lang: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'messageType' is not null or undefined
        if (messageType === null || messageType === undefined) {
            throw new RequiredError("DefaultApi", "messagesMessageTypeLanguageLangActionsExportPost", "messageType");
        }


        // verify required parameter 'lang' is not null or undefined
        if (lang === null || lang === undefined) {
            throw new RequiredError("DefaultApi", "messagesMessageTypeLanguageLangActionsExportPost", "lang");
        }





        // Path Params
        const localVarPath = '/messages/{message_type}/language/{lang}/actions/export'
            .replace('{' + 'message_type' + '}', encodeURIComponent(String(messageType)))
            .replace('{' + 'lang' + '}', encodeURIComponent(String(lang)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Audit Metadata
     * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc).
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataAudittrailAuditTrailTypeGet(auditTrailType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'auditTrailType' is not null or undefined
        if (auditTrailType === null || auditTrailType === undefined) {
            throw new RequiredError("DefaultApi", "metadataAudittrailAuditTrailTypeGet", "auditTrailType");
        }





        // Path Params
        const localVarPath = '/metadata/audittrail/{audit_trail_type}'
            .replace('{' + 'audit_trail_type' + '}', encodeURIComponent(String(auditTrailType)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Audit Types
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataAudittrailGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/metadata/audittrail';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Component Type Metadata
     * @param componentType The component type name (Picklist, Docfield, Doctype, etc.).
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataComponentsComponentTypeGet(componentType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'componentType' is not null or undefined
        if (componentType === null || componentType === undefined) {
            throw new RequiredError("DefaultApi", "metadataComponentsComponentTypeGet", "componentType");
        }





        // Path Params
        const localVarPath = '/metadata/components/{component_type}'
            .replace('{' + 'component_type' + '}', encodeURIComponent(String(componentType)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve All Component Metadata
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataComponentsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/metadata/components';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Binder Template Node Metadata
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataObjectsBindersTemplatesBindernodesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/metadata/objects/binders/templates/bindernodes';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Binder Template Metadata
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataObjectsBindersTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/metadata/objects/binders/templates';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Annotation Placemark Type Metadata
     * @param placemarkType The name of the placemark type. For example, sticky__sys.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(placemarkType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'placemarkType' is not null or undefined
        if (placemarkType === null || placemarkType === undefined) {
            throw new RequiredError("DefaultApi", "metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet", "placemarkType");
        }





        // Path Params
        const localVarPath = '/metadata/objects/documents/annotations/placemarks/types/{placemark_type}'
            .replace('{' + 'placemark_type' + '}', encodeURIComponent(String(placemarkType)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Annotation Reference Type Metadata
     * @param referenceType 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(referenceType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'referenceType' is not null or undefined
        if (referenceType === null || referenceType === undefined) {
            throw new RequiredError("DefaultApi", "metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet", "referenceType");
        }





        // Path Params
        const localVarPath = '/metadata/objects/documents/annotations/references/types/{reference_type}'
            .replace('{' + 'reference_type' + '}', encodeURIComponent(String(referenceType)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Annotation Type Metadata
     * @param annotationType The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(annotationType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'annotationType' is not null or undefined
        if (annotationType === null || annotationType === undefined) {
            throw new RequiredError("DefaultApi", "metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet", "annotationType");
        }





        // Path Params
        const localVarPath = '/metadata/objects/documents/annotations/types/{annotation_type}'
            .replace('{' + 'annotation_type' + '}', encodeURIComponent(String(annotationType)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Event SubType Metadata
     * @param eventType The event type. For example, distribution__v.
     * @param eventSubtype The event subtype. For example, approved_email__v.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(eventType: string, eventSubtype: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'eventType' is not null or undefined
        if (eventType === null || eventType === undefined) {
            throw new RequiredError("DefaultApi", "metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet", "eventType");
        }


        // verify required parameter 'eventSubtype' is not null or undefined
        if (eventSubtype === null || eventSubtype === undefined) {
            throw new RequiredError("DefaultApi", "metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet", "eventSubtype");
        }





        // Path Params
        const localVarPath = '/metadata/objects/documents/events/{event_type}/types/{event_subtype}'
            .replace('{' + 'event_type' + '}', encodeURIComponent(String(eventType)))
            .replace('{' + 'event_subtype' + '}', encodeURIComponent(String(eventSubtype)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Event Types and Subtypes
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataObjectsDocumentsEventsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/metadata/objects/documents/events';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Lock Metadata
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataObjectsDocumentsLockGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/metadata/objects/documents/lock';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Common Document Fields
     * @param contentType 
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataObjectsDocumentsPropertiesFindCommonPost(contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/metadata/objects/documents/properties/find_common';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve All Document Fields
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataObjectsDocumentsPropertiesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/metadata/objects/documents/properties';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Template Metadata
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataObjectsDocumentsTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/metadata/objects/documents/templates';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve All Document Types
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataObjectsDocumentsTypesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/metadata/objects/documents/types';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Type
     * @param type The document type. See Retrieve Document Types.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataObjectsDocumentsTypesTypeGet(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new RequiredError("DefaultApi", "metadataObjectsDocumentsTypesTypeGet", "type");
        }





        // Path Params
        const localVarPath = '/metadata/objects/documents/types/{type}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Type Relationships
     * @param type The document type. See Retrieve Document Types.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataObjectsDocumentsTypesTypeRelationshipsGet(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new RequiredError("DefaultApi", "metadataObjectsDocumentsTypesTypeRelationshipsGet", "type");
        }





        // Path Params
        const localVarPath = '/metadata/objects/documents/types/{type}/relationships'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Classification
     * @param type The document type. See Retrieve Document Types.
     * @param subtype The document subtype. See Retrieve Document Types.
     * @param classification The document classification. See Retrieve Document Types.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(type: string, subtype: string, classification: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new RequiredError("DefaultApi", "metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet", "type");
        }


        // verify required parameter 'subtype' is not null or undefined
        if (subtype === null || subtype === undefined) {
            throw new RequiredError("DefaultApi", "metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet", "subtype");
        }


        // verify required parameter 'classification' is not null or undefined
        if (classification === null || classification === undefined) {
            throw new RequiredError("DefaultApi", "metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet", "classification");
        }





        // Path Params
        const localVarPath = '/metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'subtype' + '}', encodeURIComponent(String(subtype)))
            .replace('{' + 'classification' + '}', encodeURIComponent(String(classification)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Subtype
     * @param type The document type. See Retrieve Document Types.
     * @param subtype The document subtype. See Retrieve Document Types.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(type: string, subtype: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new RequiredError("DefaultApi", "metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet", "type");
        }


        // verify required parameter 'subtype' is not null or undefined
        if (subtype === null || subtype === undefined) {
            throw new RequiredError("DefaultApi", "metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet", "subtype");
        }





        // Path Params
        const localVarPath = '/metadata/objects/documents/types/{type}/subtypes/{subtype}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'subtype' + '}', encodeURIComponent(String(subtype)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Group Metadata
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataObjectsGroupsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/metadata/objects/groups';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Security Policy Metadata
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataObjectsSecuritypoliciesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/metadata/objects/securitypolicies';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve User Metadata
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataObjectsUsersGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/metadata/objects/users';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Archived Document Signature Metadata
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/metadata/query/archived_documents/relationships/document_signature__sysr';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Signature Metadata
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/metadata/query/documents/relationships/document_signature__sysr';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Object Collection
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataVobjectsGet(loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/metadata/vobjects';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (loc !== undefined) {
            requestContext.setQueryParam("loc", ObjectSerializer.serialize(loc, "boolean", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Cancel Raw Object Deployment
     * @param objectName 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataVobjectsObjectNameActionsCanceldeploymentPost(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "metadataVobjectsObjectNameActionsCanceldeploymentPost", "objectName");
        }





        // Path Params
        const localVarPath = '/metadata/vobjects/{object_name}/actions/canceldeployment'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Object Field Metadata
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectFieldName The object field name value (id, name__v, external_id__v, etc.).
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataVobjectsObjectNameFieldsObjectFieldNameGet(objectName: string, objectFieldName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "metadataVobjectsObjectNameFieldsObjectFieldNameGet", "objectName");
        }


        // verify required parameter 'objectFieldName' is not null or undefined
        if (objectFieldName === null || objectFieldName === undefined) {
            throw new RequiredError("DefaultApi", "metadataVobjectsObjectNameFieldsObjectFieldNameGet", "objectFieldName");
        }






        // Path Params
        const localVarPath = '/metadata/vobjects/{object_name}/fields/{object_field_name}'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'object_field_name' + '}', encodeURIComponent(String(objectFieldName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (loc !== undefined) {
            requestContext.setQueryParam("loc", ObjectSerializer.serialize(loc, "boolean", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Object Metadata
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataVobjectsObjectNameGet(objectName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "metadataVobjectsObjectNameGet", "objectName");
        }






        // Path Params
        const localVarPath = '/metadata/vobjects/{object_name}'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (loc !== undefined) {
            requestContext.setQueryParam("loc", ObjectSerializer.serialize(loc, "boolean", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Page Layouts
     * @param objectName 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataVobjectsObjectNamePageLayoutsGet(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "metadataVobjectsObjectNamePageLayoutsGet", "objectName");
        }





        // Path Params
        const localVarPath = '/metadata/vobjects/{object_name}/page_layouts'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Page Layout Metadata
     * @param objectName The name of the object from which to retrieve page layout metadata.
     * @param layoutName The name of the page layout from which to retrieve metadata.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async metadataVobjectsObjectNamePageLayoutsLayoutNameGet(objectName: string, layoutName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "metadataVobjectsObjectNamePageLayoutsLayoutNameGet", "objectName");
        }


        // verify required parameter 'layoutName' is not null or undefined
        if (layoutName === null || layoutName === undefined) {
            throw new RequiredError("DefaultApi", "metadataVobjectsObjectNamePageLayoutsLayoutNameGet", "layoutName");
        }





        // Path Params
        const localVarPath = '/metadata/vobjects/{object_name}/page_layouts/{layout_name}'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'layout_name' + '}', encodeURIComponent(String(layoutName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Email Notification Histories
     * @param startDate Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.
     * @param endDate Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.
     * @param allDates Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.
     * @param formatResult To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async notificationsHistoriesGet(startDate?: string, endDate?: string, allDates?: boolean, formatResult?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;










        // Path Params
        const localVarPath = '/notifications/histories';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (startDate !== undefined) {
            requestContext.setQueryParam("start_date", ObjectSerializer.serialize(startDate, "string", ""));
        }

        // Query Params
        if (endDate !== undefined) {
            requestContext.setQueryParam("end_date", ObjectSerializer.serialize(endDate, "string", ""));
        }

        // Query Params
        if (allDates !== undefined) {
            requestContext.setQueryParam("all_dates", ObjectSerializer.serialize(allDates, "boolean", ""));
        }

        // Query Params
        if (formatResult !== undefined) {
            requestContext.setQueryParam("format_result", ObjectSerializer.serialize(formatResult, "string", ""));
        }

        // Query Params
        if (limit !== undefined) {
            requestContext.setQueryParam("limit", ObjectSerializer.serialize(limit, "string", ""));
        }

        // Query Params
        if (offset !== undefined) {
            requestContext.setQueryParam("offset", ObjectSerializer.serialize(offset, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Bulk Workflow Action Details
     * @param action 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectWorkflowActionsActionGet(action: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'action' is not null or undefined
        if (action === null || action === undefined) {
            throw new RequiredError("DefaultApi", "objectWorkflowActionsActionGet", "action");
        }





        // Path Params
        const localVarPath = '/object/workflow/actions/{action}'
            .replace('{' + 'action' + '}', encodeURIComponent(String(action)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Initiate Workflow Actions on Multiple Workflows
     * @param action 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectWorkflowActionsActionPost(action: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'action' is not null or undefined
        if (action === null || action === undefined) {
            throw new RequiredError("DefaultApi", "objectWorkflowActionsActionPost", "action");
        }






        // Path Params
        const localVarPath = '/object/workflow/actions/{action}'
            .replace('{' + 'action' + '}', encodeURIComponent(String(action)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Cancel Workflow Tasks
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectWorkflowActionsCanceltasksPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/object/workflow/actions/canceltasks';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Cancel Workflows
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectWorkflowActionsCancelworkflowsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/object/workflow/actions/cancelworkflows';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Bulk Workflow Actions
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectWorkflowActionsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/object/workflow/actions';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Reassign Workflow Tasks
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectWorkflowActionsReassigntasksPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/object/workflow/actions/reassigntasks';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Replace Workflow Owner
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectWorkflowActionsReplaceworkflowownerPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/object/workflow/actions/replaceworkflowowner';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Binder Export Results
     * @param jobId The id value of the requested export job. This is returned with the export binder requests above.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersActionsExportJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'jobId' is not null or undefined
        if (jobId === null || jobId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersActionsExportJobIdResultsGet", "jobId");
        }





        // Path Params
        const localVarPath = '/objects/binders/actions/export/{job_id}/results'
            .replace('{' + 'job_id' + '}', encodeURIComponent(String(jobId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Export Binder (Latest Version)
     * @param binderId The binder id field value.
     * @param source to include source content or not
     * @param renditiontype to include viewable renditions
     * @param docversion to include all major versions
     * @param attachments to include all versions of attachments
     * @param _export configurable filename metadata
     * @param docfield to exclude document metadata csv
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersBinderIdActionsExportPost(binderId: string, source?: boolean, renditiontype?: string, docversion?: string, attachments?: string, _export?: string, docfield?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'binderId' is not null or undefined
        if (binderId === null || binderId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdActionsExportPost", "binderId");
        }











        // Path Params
        const localVarPath = '/objects/binders/{binder_id}/actions/export'
            .replace('{' + 'binder_id' + '}', encodeURIComponent(String(binderId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (source !== undefined) {
            requestContext.setQueryParam("source", ObjectSerializer.serialize(source, "boolean", ""));
        }

        // Query Params
        if (renditiontype !== undefined) {
            requestContext.setQueryParam("renditiontype", ObjectSerializer.serialize(renditiontype, "string", ""));
        }

        // Query Params
        if (docversion !== undefined) {
            requestContext.setQueryParam("docversion", ObjectSerializer.serialize(docversion, "string", ""));
        }

        // Query Params
        if (attachments !== undefined) {
            requestContext.setQueryParam("attachments", ObjectSerializer.serialize(attachments, "string", ""));
        }

        // Query Params
        if (_export !== undefined) {
            requestContext.setQueryParam("export", ObjectSerializer.serialize(_export, "string", ""));
        }

        // Query Params
        if (docfield !== undefined) {
            requestContext.setQueryParam("docfield", ObjectSerializer.serialize(docfield, "boolean", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Refresh Binder Auto-Filing
     * @param binderId The binder id field value.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersBinderIdActionsPost(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'binderId' is not null or undefined
        if (binderId === null || binderId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdActionsPost", "binderId");
        }






        // Path Params
        const localVarPath = '/objects/binders/{binder_id}/actions'
            .replace('{' + 'binder_id' + '}', encodeURIComponent(String(binderId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Binding Rule
     * @param binderId The binder id field value.
     * @param contentType 
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersBinderIdBindingRulePut(binderId: string, contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'binderId' is not null or undefined
        if (binderId === null || binderId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdBindingRulePut", "binderId");
        }






        // Path Params
        const localVarPath = '/objects/binders/{binder_id}/binding_rule'
            .replace('{' + 'binder_id' + '}', encodeURIComponent(String(binderId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Binder
     * @param binderId The binder id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersBinderIdDelete(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'binderId' is not null or undefined
        if (binderId === null || binderId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdDelete", "binderId");
        }





        // Path Params
        const localVarPath = '/objects/binders/{binder_id}'
            .replace('{' + 'binder_id' + '}', encodeURIComponent(String(binderId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Binder Document Binding Rule
     * @param binderId The binder id field value.
     * @param nodeId The binder node id field value.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersBinderIdDocumentsNodeIdBindingRulePut(binderId: string, nodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'binderId' is not null or undefined
        if (binderId === null || binderId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdDocumentsNodeIdBindingRulePut", "binderId");
        }


        // verify required parameter 'nodeId' is not null or undefined
        if (nodeId === null || nodeId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdDocumentsNodeIdBindingRulePut", "nodeId");
        }






        // Path Params
        const localVarPath = '/objects/binders/{binder_id}/documents/{node_id}/binding_rule'
            .replace('{' + 'binder_id' + '}', encodeURIComponent(String(binderId)))
            .replace('{' + 'node_id' + '}', encodeURIComponent(String(nodeId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Add Document to Binder
     * @param binderId The binder id field value.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersBinderIdDocumentsPost(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'binderId' is not null or undefined
        if (binderId === null || binderId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdDocumentsPost", "binderId");
        }






        // Path Params
        const localVarPath = '/objects/binders/{binder_id}/documents'
            .replace('{' + 'binder_id' + '}', encodeURIComponent(String(binderId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Remove Document from Binder
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersBinderIdDocumentsSectionIdDelete(binderId: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'binderId' is not null or undefined
        if (binderId === null || binderId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdDocumentsSectionIdDelete", "binderId");
        }


        // verify required parameter 'sectionId' is not null or undefined
        if (sectionId === null || sectionId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdDocumentsSectionIdDelete", "sectionId");
        }





        // Path Params
        const localVarPath = '/objects/binders/{binder_id}/documents/{section_id}'
            .replace('{' + 'binder_id' + '}', encodeURIComponent(String(binderId)))
            .replace('{' + 'section_id' + '}', encodeURIComponent(String(sectionId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Move Document in Binder
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersBinderIdDocumentsSectionIdPut(binderId: string, sectionId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'binderId' is not null or undefined
        if (binderId === null || binderId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdDocumentsSectionIdPut", "binderId");
        }


        // verify required parameter 'sectionId' is not null or undefined
        if (sectionId === null || sectionId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdDocumentsSectionIdPut", "sectionId");
        }






        // Path Params
        const localVarPath = '/objects/binders/{binder_id}/documents/{section_id}'
            .replace('{' + 'binder_id' + '}', encodeURIComponent(String(binderId)))
            .replace('{' + 'section_id' + '}', encodeURIComponent(String(sectionId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Binder
     * @param binderId The binder id field value.
     * @param depth To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersBinderIdGet(binderId: string, depth?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'binderId' is not null or undefined
        if (binderId === null || binderId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdGet", "binderId");
        }






        // Path Params
        const localVarPath = '/objects/binders/{binder_id}'
            .replace('{' + 'binder_id' + '}', encodeURIComponent(String(binderId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (depth !== undefined) {
            requestContext.setQueryParam("depth", ObjectSerializer.serialize(depth, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Binder Version
     * @param binderId The binder id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersBinderIdPost(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'binderId' is not null or undefined
        if (binderId === null || binderId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdPost", "binderId");
        }





        // Path Params
        const localVarPath = '/objects/binders/{binder_id}'
            .replace('{' + 'binder_id' + '}', encodeURIComponent(String(binderId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Binder
     * @param binderId The binder id field value.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersBinderIdPut(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'binderId' is not null or undefined
        if (binderId === null || binderId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdPut", "binderId");
        }






        // Path Params
        const localVarPath = '/objects/binders/{binder_id}'
            .replace('{' + 'binder_id' + '}', encodeURIComponent(String(binderId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Remove Users & Groups from Roles on a Single Binder
     * @param binderId The id value of the binder from which to remove roles.
     * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
     * @param id The id value of the user or group to remove from the role.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(binderId: string, roleNameAndUserOrGroup: string, id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'binderId' is not null or undefined
        if (binderId === null || binderId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete", "binderId");
        }


        // verify required parameter 'roleNameAndUserOrGroup' is not null or undefined
        if (roleNameAndUserOrGroup === null || roleNameAndUserOrGroup === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete", "roleNameAndUserOrGroup");
        }


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete", "id");
        }





        // Path Params
        const localVarPath = '/objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}'
            .replace('{' + 'binder_id' + '}', encodeURIComponent(String(binderId)))
            .replace('{' + 'role_name_and_user_or_group' + '}', encodeURIComponent(String(roleNameAndUserOrGroup)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Binder Section Binding Rule
     * @param binderId The binder id field value.
     * @param nodeId The binder node id field value.
     * @param contentType 
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersBinderIdSectionsNodeIdBindingRulePut(binderId: string, nodeId: string, contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'binderId' is not null or undefined
        if (binderId === null || binderId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdSectionsNodeIdBindingRulePut", "binderId");
        }


        // verify required parameter 'nodeId' is not null or undefined
        if (nodeId === null || nodeId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdSectionsNodeIdBindingRulePut", "nodeId");
        }






        // Path Params
        const localVarPath = '/objects/binders/{binder_id}/sections/{node_id}/binding_rule'
            .replace('{' + 'binder_id' + '}', encodeURIComponent(String(binderId)))
            .replace('{' + 'node_id' + '}', encodeURIComponent(String(nodeId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Binder Section
     * @param binderId The binder id field value.
     * @param nodeId The binder node id of the section.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersBinderIdSectionsNodeIdPut(binderId: string, nodeId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'binderId' is not null or undefined
        if (binderId === null || binderId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdSectionsNodeIdPut", "binderId");
        }


        // verify required parameter 'nodeId' is not null or undefined
        if (nodeId === null || nodeId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdSectionsNodeIdPut", "nodeId");
        }






        // Path Params
        const localVarPath = '/objects/binders/{binder_id}/sections/{node_id}'
            .replace('{' + 'binder_id' + '}', encodeURIComponent(String(binderId)))
            .replace('{' + 'node_id' + '}', encodeURIComponent(String(nodeId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Binder Section
     * @param binderId The binder id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersBinderIdSectionsPost(binderId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'binderId' is not null or undefined
        if (binderId === null || binderId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdSectionsPost", "binderId");
        }






        // Path Params
        const localVarPath = '/objects/binders/{binder_id}/sections'
            .replace('{' + 'binder_id' + '}', encodeURIComponent(String(binderId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Binder Section
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersBinderIdSectionsSectionIdDelete(binderId: string, sectionId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'binderId' is not null or undefined
        if (binderId === null || binderId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdSectionsSectionIdDelete", "binderId");
        }


        // verify required parameter 'sectionId' is not null or undefined
        if (sectionId === null || sectionId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdSectionsSectionIdDelete", "sectionId");
        }






        // Path Params
        const localVarPath = '/objects/binders/{binder_id}/sections/{section_id}'
            .replace('{' + 'binder_id' + '}', encodeURIComponent(String(binderId)))
            .replace('{' + 'section_id' + '}', encodeURIComponent(String(sectionId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Binder Sections
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersBinderIdSectionsSectionIdGet(binderId: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'binderId' is not null or undefined
        if (binderId === null || binderId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdSectionsSectionIdGet", "binderId");
        }


        // verify required parameter 'sectionId' is not null or undefined
        if (sectionId === null || sectionId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdSectionsSectionIdGet", "sectionId");
        }





        // Path Params
        const localVarPath = '/objects/binders/{binder_id}/sections/{section_id}'
            .replace('{' + 'binder_id' + '}', encodeURIComponent(String(binderId)))
            .replace('{' + 'section_id' + '}', encodeURIComponent(String(sectionId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve All Binder Versions
     * @param binderId The binder id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersBinderIdVersionsGet(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'binderId' is not null or undefined
        if (binderId === null || binderId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsGet", "binderId");
        }





        // Path Params
        const localVarPath = '/objects/binders/{binder_id}/versions'
            .replace('{' + 'binder_id' + '}', encodeURIComponent(String(binderId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Export Binder (Specific Version)
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param source to include source content or not
     * @param renditiontype to include viewable renditions
     * @param docversion to include all major versions
     * @param attachments to include all versions of attachments
     * @param _export configurable filename metadata
     * @param docfield to exclude document metadata csv
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(binderId: string, majorVersion: string, minorVersion: string, source?: boolean, renditiontype?: string, docversion?: string, attachments?: string, _export?: string, docfield?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'binderId' is not null or undefined
        if (binderId === null || binderId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost", "binderId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost", "minorVersion");
        }











        // Path Params
        const localVarPath = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export'
            .replace('{' + 'binder_id' + '}', encodeURIComponent(String(binderId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (source !== undefined) {
            requestContext.setQueryParam("source", ObjectSerializer.serialize(source, "boolean", ""));
        }

        // Query Params
        if (renditiontype !== undefined) {
            requestContext.setQueryParam("renditiontype", ObjectSerializer.serialize(renditiontype, "string", ""));
        }

        // Query Params
        if (docversion !== undefined) {
            requestContext.setQueryParam("docversion", ObjectSerializer.serialize(docversion, "string", ""));
        }

        // Query Params
        if (attachments !== undefined) {
            requestContext.setQueryParam("attachments", ObjectSerializer.serialize(attachments, "string", ""));
        }

        // Query Params
        if (_export !== undefined) {
            requestContext.setQueryParam("export", ObjectSerializer.serialize(_export, "string", ""));
        }

        // Query Params
        if (docfield !== undefined) {
            requestContext.setQueryParam("docfield", ObjectSerializer.serialize(docfield, "boolean", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Binder Version
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'binderId' is not null or undefined
        if (binderId === null || binderId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete", "binderId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete", "minorVersion");
        }





        // Path Params
        const localVarPath = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}'
            .replace('{' + 'binder_id' + '}', encodeURIComponent(String(binderId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Binder Version
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'binderId' is not null or undefined
        if (binderId === null || binderId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionGet", "binderId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionGet", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionGet", "minorVersion");
        }





        // Path Params
        const localVarPath = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}'
            .replace('{' + 'binder_id' + '}', encodeURIComponent(String(binderId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Binder Version
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'binderId' is not null or undefined
        if (binderId === null || binderId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionPut", "binderId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionPut", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionPut", "minorVersion");
        }






        // Path Params
        const localVarPath = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}'
            .replace('{' + 'binder_id' + '}', encodeURIComponent(String(binderId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Binder Relationship
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'binderId' is not null or undefined
        if (binderId === null || binderId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost", "binderId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost", "minorVersion");
        }






        // Path Params
        const localVarPath = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships'
            .replace('{' + 'binder_id' + '}', encodeURIComponent(String(binderId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Binder Relationship
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param relationshipId The binder relationship id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(binderId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'binderId' is not null or undefined
        if (binderId === null || binderId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete", "binderId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete", "minorVersion");
        }


        // verify required parameter 'relationshipId' is not null or undefined
        if (relationshipId === null || relationshipId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete", "relationshipId");
        }





        // Path Params
        const localVarPath = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'
            .replace('{' + 'binder_id' + '}', encodeURIComponent(String(binderId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)))
            .replace('{' + 'relationship_id' + '}', encodeURIComponent(String(relationshipId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Binder Relationship
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param relationshipId The binder relationship id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(binderId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'binderId' is not null or undefined
        if (binderId === null || binderId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet", "binderId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet", "minorVersion");
        }


        // verify required parameter 'relationshipId' is not null or undefined
        if (relationshipId === null || relationshipId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet", "relationshipId");
        }





        // Path Params
        const localVarPath = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'
            .replace('{' + 'binder_id' + '}', encodeURIComponent(String(binderId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)))
            .replace('{' + 'relationship_id' + '}', encodeURIComponent(String(relationshipId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Binder Version Section
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param sectionId Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(binderId: string, majorVersion: string, minorVersion: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'binderId' is not null or undefined
        if (binderId === null || binderId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet", "binderId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet", "minorVersion");
        }


        // verify required parameter 'sectionId' is not null or undefined
        if (sectionId === null || sectionId === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet", "sectionId");
        }





        // Path Params
        const localVarPath = '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}'
            .replace('{' + 'binder_id' + '}', encodeURIComponent(String(binderId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)))
            .replace('{' + 'section_id' + '}', encodeURIComponent(String(sectionId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve All Binder Roles
     * @param id 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersIdRolesGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersIdRolesGet", "id");
        }





        // Path Params
        const localVarPath = '/objects/binders/{id}/roles'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Assign Users & Groups to Roles on a Single Binder
     * @param id 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersIdRolesPost(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersIdRolesPost", "id");
        }






        // Path Params
        const localVarPath = '/objects/binders/{id}/roles'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Role
     * @param id The binder &#x60;id&#x60;.
     * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersIdRolesRoleNameGet(id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersIdRolesRoleNameGet", "id");
        }


        // verify required parameter 'roleName' is not null or undefined
        if (roleName === null || roleName === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersIdRolesRoleNameGet", "roleName");
        }





        // Path Params
        const localVarPath = '/objects/binders/{id}/roles/{role_name}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'role_name' + '}', encodeURIComponent(String(roleName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Binder User Actions
     * @param id The binder id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the binder.
     * @param minorVersion The minor version number of the binder.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet", "id");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet", "minorVersion");
        }





        // Path Params
        const localVarPath = '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Binder Entry Criteria
     * @param id The binder id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the binder.
     * @param minorVersion The minor version number of the binder.
     * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet", "id");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet", "minorVersion");
        }


        // verify required parameter 'nameV' is not null or undefined
        if (nameV === null || nameV === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet", "nameV");
        }





        // Path Params
        const localVarPath = '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)))
            .replace('{' + 'name__v' + '}', encodeURIComponent(String(nameV)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Initiate Binder User Action
     * @param id The binder id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the binder.
     * @param minorVersion The minor version number of the binder.
     * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut", "id");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut", "minorVersion");
        }


        // verify required parameter 'nameV' is not null or undefined
        if (nameV === null || nameV === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut", "nameV");
        }






        // Path Params
        const localVarPath = '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)))
            .replace('{' + 'name__v' + '}', encodeURIComponent(String(nameV)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve User Actions on Multiple Binders
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersLifecycleActionsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/binders/lifecycle_actions';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Initiate Bulk Binder User Actions
     * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersLifecycleActionsUserActionNamePut(userActionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'userActionName' is not null or undefined
        if (userActionName === null || userActionName === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersLifecycleActionsUserActionNamePut", "userActionName");
        }






        // Path Params
        const localVarPath = '/objects/binders/lifecycle_actions/{user_action_name}'
            .replace('{' + 'user_action_name' + '}', encodeURIComponent(String(userActionName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Binder
     * @param async When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async&#x3D;true). This helps speed up the response time from Vault when processing large amounts of data. 
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersPost(async?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;






        // Path Params
        const localVarPath = '/objects/binders';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (async !== undefined) {
            requestContext.setQueryParam("async", ObjectSerializer.serialize(async, "boolean", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Binder Template Collection
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/objects/binders/templates';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Binder Template
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersTemplatesPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/binders/templates';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Binder Template
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersTemplatesPut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/binders/templates';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Binder Template Node Attributes
     * @param templateName The binder template name__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersTemplatesTemplateNameBindernodesGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'templateName' is not null or undefined
        if (templateName === null || templateName === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersTemplatesTemplateNameBindernodesGet", "templateName");
        }





        // Path Params
        const localVarPath = '/objects/binders/templates/{template_name}/bindernodes'
            .replace('{' + 'template_name' + '}', encodeURIComponent(String(templateName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Binder Template Node
     * @param templateName The binder template name__v field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersTemplatesTemplateNameBindernodesPost(templateName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'templateName' is not null or undefined
        if (templateName === null || templateName === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersTemplatesTemplateNameBindernodesPost", "templateName");
        }






        // Path Params
        const localVarPath = '/objects/binders/templates/{template_name}/bindernodes'
            .replace('{' + 'template_name' + '}', encodeURIComponent(String(templateName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Replace Binder Template Nodes
     * @param templateName The binder template name__v field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersTemplatesTemplateNameBindernodesPut(templateName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'templateName' is not null or undefined
        if (templateName === null || templateName === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersTemplatesTemplateNameBindernodesPut", "templateName");
        }






        // Path Params
        const localVarPath = '/objects/binders/templates/{template_name}/bindernodes'
            .replace('{' + 'template_name' + '}', encodeURIComponent(String(templateName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Binder Template
     * @param templateName The binder template name__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersTemplatesTemplateNameDelete(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'templateName' is not null or undefined
        if (templateName === null || templateName === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersTemplatesTemplateNameDelete", "templateName");
        }





        // Path Params
        const localVarPath = '/objects/binders/templates/{template_name}'
            .replace('{' + 'template_name' + '}', encodeURIComponent(String(templateName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Binder Template Attributes
     * @param templateName The binder template name__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsBindersTemplatesTemplateNameGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'templateName' is not null or undefined
        if (templateName === null || templateName === undefined) {
            throw new RequiredError("DefaultApi", "objectsBindersTemplatesTemplateNameGet", "templateName");
        }





        // Path Params
        const localVarPath = '/objects/binders/templates/{template_name}'
            .replace('{' + 'template_name' + '}', encodeURIComponent(String(templateName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Deleted Document IDs
     * @param startDate Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z
     * @param endDate Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z 
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDeletionsDocumentsGet(startDate?: string, endDate?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;







        // Path Params
        const localVarPath = '/objects/deletions/documents';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (startDate !== undefined) {
            requestContext.setQueryParam("start_date", ObjectSerializer.serialize(startDate, "string", ""));
        }

        // Query Params
        if (endDate !== undefined) {
            requestContext.setQueryParam("end_date", ObjectSerializer.serialize(endDate, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Deleted Object Record ID
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDeletionsVobjectsObjectNameGet(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "objectsDeletionsVobjectsObjectNameGet", "objectName");
        }





        // Path Params
        const localVarPath = '/objects/deletions/vobjects/{object_name}'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve All Document Workflows
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsActionsGet(loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/documents/actions';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (loc !== undefined) {
            requestContext.setQueryParam("loc", ObjectSerializer.serialize(loc, "boolean", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Download Controlled Copy Job Results
     * @param lifecycleAndStateAndAction The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link.
     * @param jobId 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(lifecycleAndStateAndAction: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'lifecycleAndStateAndAction' is not null or undefined
        if (lifecycleAndStateAndAction === null || lifecycleAndStateAndAction === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet", "lifecycleAndStateAndAction");
        }


        // verify required parameter 'jobId' is not null or undefined
        if (jobId === null || jobId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet", "jobId");
        }





        // Path Params
        const localVarPath = '/objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results'
            .replace('{' + 'lifecycle_and_state_and_action' + '}', encodeURIComponent(String(lifecycleAndStateAndAction)))
            .replace('{' + 'job_id' + '}', encodeURIComponent(String(jobId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Workflow Details
     * @param workflowName The document workflow name value.
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsActionsWorkflowNameGet(workflowName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'workflowName' is not null or undefined
        if (workflowName === null || workflowName === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsActionsWorkflowNameGet", "workflowName");
        }






        // Path Params
        const localVarPath = '/objects/documents/actions/{workflow_name}'
            .replace('{' + 'workflow_name' + '}', encodeURIComponent(String(workflowName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (loc !== undefined) {
            requestContext.setQueryParam("loc", ObjectSerializer.serialize(loc, "boolean", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Initiate Document Workflow
     * @param workflowName The document workflow name value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsActionsWorkflowNamePost(workflowName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'workflowName' is not null or undefined
        if (workflowName === null || workflowName === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsActionsWorkflowNamePost", "workflowName");
        }






        // Path Params
        const localVarPath = '/objects/documents/actions/{workflow_name}'
            .replace('{' + 'workflow_name' + '}', encodeURIComponent(String(workflowName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Annotations
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsAnnotationsBatchDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/documents/annotations/batch';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Multiple Annotations
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsAnnotationsBatchPost(authorization: string, contentType: string, accept: string, xVaultAPIClientID: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsAnnotationsBatchPost", "authorization");
        }


        // verify required parameter 'contentType' is not null or undefined
        if (contentType === null || contentType === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsAnnotationsBatchPost", "contentType");
        }


        // verify required parameter 'accept' is not null or undefined
        if (accept === null || accept === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsAnnotationsBatchPost", "accept");
        }


        // verify required parameter 'xVaultAPIClientID' is not null or undefined
        if (xVaultAPIClientID === null || xVaultAPIClientID === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsAnnotationsBatchPost", "xVaultAPIClientID");
        }


        // Path Params
        const localVarPath = '/objects/documents/annotations/batch';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Annotations
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsAnnotationsBatchPut(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/documents/annotations/batch';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Add Annotation Replies
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsAnnotationsRepliesBatchPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/documents/annotations/replies/batch';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Multiple Document Attachments
     * @param accept 
     * @param authorization 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsAttachmentsBatchDelete(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/documents/attachments/batch';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Multiple Document Attachments
     * @param accept 
     * @param authorization 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsAttachmentsBatchPost(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/documents/attachments/batch';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Multiple Document Attachment Descriptions
     * @param accept 
     * @param authorization 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsAttachmentsBatchPut(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/documents/attachments/batch';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Export Results
     * @param jobId The id value of the requested export job. This is returned with the export document requests.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsBatchActionsFileextractJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'jobId' is not null or undefined
        if (jobId === null || jobId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsBatchActionsFileextractJobIdResultsGet", "jobId");
        }





        // Path Params
        const localVarPath = '/objects/documents/batch/actions/fileextract/{job_id}/results'
            .replace('{' + 'job_id' + '}', encodeURIComponent(String(jobId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Export Documents
     * @param source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
     * @param renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
     * @param allversions Optional: To include all versions or latest version, include a query parameter allversions&#x3D;true. If omitted, defaults to false.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsBatchActionsFileextractPost(source?: boolean, renditions?: boolean, allversions?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;








        // Path Params
        const localVarPath = '/objects/documents/batch/actions/fileextract';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (source !== undefined) {
            requestContext.setQueryParam("source", ObjectSerializer.serialize(source, "boolean", ""));
        }

        // Query Params
        if (renditions !== undefined) {
            requestContext.setQueryParam("renditions", ObjectSerializer.serialize(renditions, "boolean", ""));
        }

        // Query Params
        if (allversions !== undefined) {
            requestContext.setQueryParam("allversions", ObjectSerializer.serialize(allversions, "boolean", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Reclassify Multiple Documents
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsBatchActionsReclassifyPut(authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;






        // Path Params
        const localVarPath = '/objects/documents/batch/actions/reclassify';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-MigrationMode", ObjectSerializer.serialize(xVaultAPIMigrationMode, "boolean", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Multiple Document Renditions
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsBatchActionsRerenderPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/documents/batch/actions/rerender';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Multiple Documents
     * @param idParam If you’re identifying documents in your input by their external ID
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsBatchDelete(idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;






        // Path Params
        const localVarPath = '/objects/documents/batch';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (idParam !== undefined) {
            requestContext.setQueryParam("idParam", ObjectSerializer.serialize(idParam, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Undo Collaborative Authoring Checkout
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsBatchLockDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/documents/batch/lock';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Multiple Documents
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsBatchPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;






        // Path Params
        const localVarPath = '/objects/documents/batch';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-MigrationMode", ObjectSerializer.serialize(xVaultAPIMigrationMode, "boolean", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Multiple Documents
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsBatchPut(authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;






        // Path Params
        const localVarPath = '/objects/documents/batch';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-MigrationMode", ObjectSerializer.serialize(xVaultAPIMigrationMode, "boolean", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Anchor IDs
     * @param docId The document id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdAnchorsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAnchorsGet", "docId");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/anchors'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Export Document Annotations to PDF
     * @param docId The document id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdAnnotationsFileGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAnnotationsFileGet", "docId");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/annotations/file'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Import Document Annotations from PDF
     * @param docId The document id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdAnnotationsFilePost(docId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAnnotationsFilePost", "docId");
        }






        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/annotations/file'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Single Document Attachment
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdAttachmentsAttachmentIdDelete(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAttachmentsAttachmentIdDelete", "docId");
        }


        // verify required parameter 'attachmentId' is not null or undefined
        if (attachmentId === null || attachmentId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAttachmentsAttachmentIdDelete", "attachmentId");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/attachments/{attachment_id}'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'attachment_id' + '}', encodeURIComponent(String(attachmentId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Download Document Attachment
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAttachmentsAttachmentIdFileGet", "docId");
        }


        // verify required parameter 'attachmentId' is not null or undefined
        if (attachmentId === null || attachmentId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAttachmentsAttachmentIdFileGet", "attachmentId");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/attachments/{attachment_id}/file'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'attachment_id' + '}', encodeURIComponent(String(attachmentId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Attachment Metadata
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdAttachmentsAttachmentIdGet(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAttachmentsAttachmentIdGet", "docId");
        }


        // verify required parameter 'attachmentId' is not null or undefined
        if (attachmentId === null || attachmentId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAttachmentsAttachmentIdGet", "attachmentId");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/attachments/{attachment_id}'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'attachment_id' + '}', encodeURIComponent(String(attachmentId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Document Attachment Description
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param accept 
     * @param authorization 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdAttachmentsAttachmentIdPut(docId: string, attachmentId: string, accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAttachmentsAttachmentIdPut", "docId");
        }


        // verify required parameter 'attachmentId' is not null or undefined
        if (attachmentId === null || attachmentId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAttachmentsAttachmentIdPut", "attachmentId");
        }






        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/attachments/{attachment_id}'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'attachment_id' + '}', encodeURIComponent(String(attachmentId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Single Document Attachment Version
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete", "docId");
        }


        // verify required parameter 'attachmentId' is not null or undefined
        if (attachmentId === null || attachmentId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete", "attachmentId");
        }


        // verify required parameter 'attachmentVersion' is not null or undefined
        if (attachmentVersion === null || attachmentVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete", "attachmentVersion");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'attachment_id' + '}', encodeURIComponent(String(attachmentId)))
            .replace('{' + 'attachment_version' + '}', encodeURIComponent(String(attachmentVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Download Document Attachment Version
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet", "docId");
        }


        // verify required parameter 'attachmentId' is not null or undefined
        if (attachmentId === null || attachmentId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet", "attachmentId");
        }


        // verify required parameter 'attachmentVersion' is not null or undefined
        if (attachmentVersion === null || attachmentVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet", "attachmentVersion");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'attachment_id' + '}', encodeURIComponent(String(attachmentId)))
            .replace('{' + 'attachment_version' + '}', encodeURIComponent(String(attachmentVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Attachment Version Metadata
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet", "docId");
        }


        // verify required parameter 'attachmentId' is not null or undefined
        if (attachmentId === null || attachmentId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet", "attachmentId");
        }


        // verify required parameter 'attachmentVersion' is not null or undefined
        if (attachmentVersion === null || attachmentVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet", "attachmentVersion");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'attachment_id' + '}', encodeURIComponent(String(attachmentId)))
            .replace('{' + 'attachment_version' + '}', encodeURIComponent(String(attachmentVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Restore Document Attachment Version
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param restore The parameter restore must be set to true. 
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(docId: string, attachmentId: string, attachmentVersion: string, restore?: boolean, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost", "docId");
        }


        // verify required parameter 'attachmentId' is not null or undefined
        if (attachmentId === null || attachmentId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost", "attachmentId");
        }


        // verify required parameter 'attachmentVersion' is not null or undefined
        if (attachmentVersion === null || attachmentVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost", "attachmentVersion");
        }






        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'attachment_id' + '}', encodeURIComponent(String(attachmentId)))
            .replace('{' + 'attachment_version' + '}', encodeURIComponent(String(attachmentVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (restore !== undefined) {
            requestContext.setQueryParam("restore", ObjectSerializer.serialize(restore, "boolean", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Attachment Versions
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet", "docId");
        }


        // verify required parameter 'attachmentId' is not null or undefined
        if (attachmentId === null || attachmentId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet", "attachmentId");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/attachments/{attachment_id}/versions'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'attachment_id' + '}', encodeURIComponent(String(attachmentId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Download All Document Attachments
     * @param docId The document id field value.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdAttachmentsFileGet(docId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAttachmentsFileGet", "docId");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/attachments/file'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Attachments
     * @param docId The document id field value.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdAttachmentsGet(docId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAttachmentsGet", "docId");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/attachments'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Document Attachment
     * @param docId The document id field value.
     * @param accept 
     * @param authorization 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdAttachmentsPost(docId: string, accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAttachmentsPost", "docId");
        }






        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/attachments'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Complete Audit History for a Single Document
     * @param docId The document ID for which to retrieve audit history.
     * @param startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. 
     * @param endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
     * @param formatResult To request a CSV file of your audit history, use csv. 
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
     * @param events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdAudittrailGet(docId: string, startDate?: string, endDate?: string, formatResult?: string, limit?: string, offset?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdAudittrailGet", "docId");
        }











        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/audittrail'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (startDate !== undefined) {
            requestContext.setQueryParam("start_date", ObjectSerializer.serialize(startDate, "string", ""));
        }

        // Query Params
        if (endDate !== undefined) {
            requestContext.setQueryParam("end_date", ObjectSerializer.serialize(endDate, "string", ""));
        }

        // Query Params
        if (formatResult !== undefined) {
            requestContext.setQueryParam("format_result", ObjectSerializer.serialize(formatResult, "string", ""));
        }

        // Query Params
        if (limit !== undefined) {
            requestContext.setQueryParam("limit", ObjectSerializer.serialize(limit, "string", ""));
        }

        // Query Params
        if (offset !== undefined) {
            requestContext.setQueryParam("offset", ObjectSerializer.serialize(offset, "string", ""));
        }

        // Query Params
        if (events !== undefined) {
            requestContext.setQueryParam("events", ObjectSerializer.serialize(events, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Single Document
     * @param docId The document id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdDelete(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdDelete", "docId");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Events
     * @param docId The document id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdEventsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdEventsGet", "docId");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/events'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Download Document File
     * @param docId The document id field value.
     * @param lockDocument Set to true to Check Out this document before retrieval. If omitted, defaults to false.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdFileGet(docId: string, lockDocument?: boolean, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdFileGet", "docId");
        }






        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/file'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (lockDocument !== undefined) {
            requestContext.setQueryParam("lockDocument", ObjectSerializer.serialize(lockDocument, "boolean", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document
     * @param docId The document id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdGet", "docId");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Document Lock
     * @param docId The document id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdLockDelete(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdLockDelete", "docId");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/lock'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Lock
     * @param docId The document id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdLockGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdLockGet", "docId");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/lock'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Document Lock
     * @param docId The document id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdLockPost(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdLockPost", "docId");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/lock'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Download All Document Version Attachments
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet", "docId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet", "minorVersion");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Single Document Version
     * @param docId The document id field value.
     * @param suppressRendition Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdPost(docId: string, suppressRendition?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdPost", "docId");
        }







        // Path Params
        const localVarPath = '/objects/documents/{doc_id}'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (suppressRendition !== undefined) {
            requestContext.setQueryParam("suppressRendition", ObjectSerializer.serialize(suppressRendition, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Single Document
     * @param docId The document id field value.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdPut(docId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdPut", "docId");
        }







        // Path Params
        const localVarPath = '/objects/documents/{doc_id}'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-MigrationMode", ObjectSerializer.serialize(xVaultAPIMigrationMode, "boolean", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Renditions
     * @param docId The document id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdRenditionsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdRenditionsGet", "docId");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/renditions'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Single Document Rendition
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdRenditionsRenditionTypeDelete(docId: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdRenditionsRenditionTypeDelete", "docId");
        }


        // verify required parameter 'renditionType' is not null or undefined
        if (renditionType === null || renditionType === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdRenditionsRenditionTypeDelete", "renditionType");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/renditions/{rendition_type}'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'rendition_type' + '}', encodeURIComponent(String(renditionType)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Download Document Rendition File
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param steadyState Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdRenditionsRenditionTypeGet(docId: string, renditionType: string, steadyState?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdRenditionsRenditionTypeGet", "docId");
        }


        // verify required parameter 'renditionType' is not null or undefined
        if (renditionType === null || renditionType === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdRenditionsRenditionTypeGet", "renditionType");
        }






        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/renditions/{rendition_type}'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'rendition_type' + '}', encodeURIComponent(String(renditionType)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (steadyState !== undefined) {
            requestContext.setQueryParam("steadyState", ObjectSerializer.serialize(steadyState, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Add Single Document Rendition
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdRenditionsRenditionTypePost(docId: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdRenditionsRenditionTypePost", "docId");
        }


        // verify required parameter 'renditionType' is not null or undefined
        if (renditionType === null || renditionType === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdRenditionsRenditionTypePost", "renditionType");
        }






        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/renditions/{rendition_type}'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'rendition_type' + '}', encodeURIComponent(String(renditionType)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Replace Document Rendition
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdRenditionsRenditionTypePut(docId: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdRenditionsRenditionTypePut", "docId");
        }


        // verify required parameter 'renditionType' is not null or undefined
        if (renditionType === null || renditionType === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdRenditionsRenditionTypePut", "renditionType");
        }






        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/renditions/{rendition_type}'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'rendition_type' + '}', encodeURIComponent(String(renditionType)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Remove Users & Groups from Roles on a Single Document
     * @param docId The id value of the document from which to remove roles.
     * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
     * @param id The id value of the user or group to remove from the role.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(docId: string, roleNameAndUserOrGroup: string, id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete", "docId");
        }


        // verify required parameter 'roleNameAndUserOrGroup' is not null or undefined
        if (roleNameAndUserOrGroup === null || roleNameAndUserOrGroup === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete", "roleNameAndUserOrGroup");
        }


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete", "id");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'role_name_and_user_or_group' + '}', encodeURIComponent(String(roleNameAndUserOrGroup)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Version Attachments
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet", "docId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet", "minorVersion");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Versions
     * @param docId The document id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdVersionsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsGet", "docId");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/versions'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Read Annotations by ID
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param annotationId The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(docId: string, majorVersion: string, minorVersion: string, annotationId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet", "docId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet", "minorVersion");
        }


        // verify required parameter 'annotationId' is not null or undefined
        if (annotationId === null || annotationId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet", "annotationId");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)))
            .replace('{' + 'annotation_id' + '}', encodeURIComponent(String(annotationId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Read Replies of Parent Annotation
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param annotationId The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(docId: string, majorVersion: string, minorVersion: string, annotationId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet", "docId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet", "minorVersion");
        }


        // verify required parameter 'annotationId' is not null or undefined
        if (annotationId === null || annotationId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet", "annotationId");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)))
            .replace('{' + 'annotation_id' + '}', encodeURIComponent(String(annotationId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Export Document Version Annotations to PDF
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet", "docId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet", "minorVersion");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Import Document Version Annotations from PDF
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost", "docId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost", "minorVersion");
        }






        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Read Annotations by Document Version and Type
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset&#x3D;201.
     * @param annotationTypes The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60; 
     * @param paginationId A unique identifier used to load requests with paginated results.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(docId: string, majorVersion: string, minorVersion: string, limit?: string, offset?: string, annotationTypes?: string, paginationId?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet", "docId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet", "minorVersion");
        }









        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (limit !== undefined) {
            requestContext.setQueryParam("limit", ObjectSerializer.serialize(limit, "string", ""));
        }

        // Query Params
        if (offset !== undefined) {
            requestContext.setQueryParam("offset", ObjectSerializer.serialize(offset, "string", ""));
        }

        // Query Params
        if (annotationTypes !== undefined) {
            requestContext.setQueryParam("annotation_types", ObjectSerializer.serialize(annotationTypes, "string", ""));
        }

        // Query Params
        if (paginationId !== undefined) {
            requestContext.setQueryParam("pagination_id", ObjectSerializer.serialize(paginationId, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Download Document Version Attachment Version
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param attachmentId The id field value of the attachment.
     * @param attachmentVersion The version of the attachment.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId: string, majorVersion: string, minorVersion: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet", "docId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet", "minorVersion");
        }


        // verify required parameter 'attachmentId' is not null or undefined
        if (attachmentId === null || attachmentId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet", "attachmentId");
        }


        // verify required parameter 'attachmentVersion' is not null or undefined
        if (attachmentVersion === null || attachmentVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet", "attachmentVersion");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)))
            .replace('{' + 'attachment_id' + '}', encodeURIComponent(String(attachmentId)))
            .replace('{' + 'attachment_version' + '}', encodeURIComponent(String(attachmentVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Version Attachment Versions
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param attachmentId The id of the document attachment to retrieve.
     * @param attachmentVersion Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId: string, majorVersion: string, minorVersion: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet", "docId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet", "minorVersion");
        }


        // verify required parameter 'attachmentId' is not null or undefined
        if (attachmentId === null || attachmentId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet", "attachmentId");
        }


        // verify required parameter 'attachmentVersion' is not null or undefined
        if (attachmentVersion === null || attachmentVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet", "attachmentVersion");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)))
            .replace('{' + 'attachment_id' + '}', encodeURIComponent(String(attachmentId)))
            .replace('{' + 'attachment_version' + '}', encodeURIComponent(String(attachmentVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Single Document Version
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete", "docId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete", "minorVersion");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Version Notes as CSV
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet", "docId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet", "minorVersion");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Document Event
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost", "docId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost", "minorVersion");
        }






        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Video Annotations
     * @param docId The video document id field value.
     * @param majorVersion The video document major_version_number__v field value.
     * @param minorVersion The video document minor_version_number__v field value.
     * @param authorization 
     * @param accept This &#x60;Accept&#x60; header only changes the format of the response in the case of an error. On &#x60;SUCCESS&#x60;, the HTTP Response Header &#x60;Content-Type&#x60; is set to &#x60;text/plain;charset&#x3D;UnicodeLittle&#x60;.
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet", "docId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet", "minorVersion");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Download Document Version File
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet", "docId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet", "minorVersion");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Version
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet", "docId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet", "minorVersion");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Document Version
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(docId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut", "docId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut", "minorVersion");
        }







        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-MigrationMode", ObjectSerializer.serialize(xVaultAPIMigrationMode, "boolean", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Relationships
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet", "docId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet", "minorVersion");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Single Document Relationship
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost", "docId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost", "minorVersion");
        }






        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Single Document Relationship
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param relationshipId The relationship id field value. See Retrieve Document Relationships.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(docId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete", "docId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete", "minorVersion");
        }


        // verify required parameter 'relationshipId' is not null or undefined
        if (relationshipId === null || relationshipId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete", "relationshipId");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)))
            .replace('{' + 'relationship_id' + '}', encodeURIComponent(String(relationshipId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Relationship
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param relationshipId The relationship id field value. See Retrieve Document Relationships.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(docId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet", "docId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet", "minorVersion");
        }


        // verify required parameter 'relationshipId' is not null or undefined
        if (relationshipId === null || relationshipId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet", "relationshipId");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)))
            .replace('{' + 'relationship_id' + '}', encodeURIComponent(String(relationshipId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Version Renditions
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet", "docId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet", "minorVersion");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Document Version Rendition
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete", "docId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete", "minorVersion");
        }


        // verify required parameter 'renditionType' is not null or undefined
        if (renditionType === null || renditionType === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete", "renditionType");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)))
            .replace('{' + 'rendition_type' + '}', encodeURIComponent(String(renditionType)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Download Document Version Rendition File
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet", "docId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet", "minorVersion");
        }


        // verify required parameter 'renditionType' is not null or undefined
        if (renditionType === null || renditionType === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet", "renditionType");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)))
            .replace('{' + 'rendition_type' + '}', encodeURIComponent(String(renditionType)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Upload Document Version Rendition
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost", "docId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost", "minorVersion");
        }


        // verify required parameter 'renditionType' is not null or undefined
        if (renditionType === null || renditionType === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost", "renditionType");
        }






        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)))
            .replace('{' + 'rendition_type' + '}', encodeURIComponent(String(renditionType)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Replace Document Version Rendition
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut", "docId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut", "minorVersion");
        }


        // verify required parameter 'renditionType' is not null or undefined
        if (renditionType === null || renditionType === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut", "renditionType");
        }






        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)))
            .replace('{' + 'rendition_type' + '}', encodeURIComponent(String(renditionType)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Download Document Version Thumbnail File
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'docId' is not null or undefined
        if (docId === null || docId === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet", "docId");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet", "minorVersion");
        }





        // Path Params
        const localVarPath = '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail'
            .replace('{' + 'doc_id' + '}', encodeURIComponent(String(docId)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve All Documents
     * @param namedFilter Retrieves only documents which you have created.
     * @param scope Searches only within the document content.
     * @param versionscope Retrieves all document versions, rather than only the latest version.
     * @param search Search for documents based on a {keyword} in searchable document fields.
     * @param limit See VQL documentation for more information.
     * @param sort See VQL documentation for more information.
     * @param start See VQL documentation for more information.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsGet(namedFilter?: string, scope?: string, versionscope?: string, search?: string, limit?: string, sort?: string, start?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;











        // Path Params
        const localVarPath = '/objects/documents';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (namedFilter !== undefined) {
            requestContext.setQueryParam("named_filter", ObjectSerializer.serialize(namedFilter, "string", ""));
        }

        // Query Params
        if (scope !== undefined) {
            requestContext.setQueryParam("scope", ObjectSerializer.serialize(scope, "string", ""));
        }

        // Query Params
        if (versionscope !== undefined) {
            requestContext.setQueryParam("versionscope", ObjectSerializer.serialize(versionscope, "string", ""));
        }

        // Query Params
        if (search !== undefined) {
            requestContext.setQueryParam("search", ObjectSerializer.serialize(search, "string", ""));
        }

        // Query Params
        if (limit !== undefined) {
            requestContext.setQueryParam("limit", ObjectSerializer.serialize(limit, "string", ""));
        }

        // Query Params
        if (sort !== undefined) {
            requestContext.setQueryParam("sort", ObjectSerializer.serialize(sort, "string", ""));
        }

        // Query Params
        if (start !== undefined) {
            requestContext.setQueryParam("start", ObjectSerializer.serialize(start, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve All Document Roles
     * @param id 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsIdRolesGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsIdRolesGet", "id");
        }





        // Path Params
        const localVarPath = '/objects/documents/{id}/roles'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Assign Users & Groups to Roles on a Single Document
     * @param id 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsIdRolesPost(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsIdRolesPost", "id");
        }






        // Path Params
        const localVarPath = '/objects/documents/{id}/roles'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Role
     * @param id The document &#x60;id&#x60;.
     * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsIdRolesRoleNameGet(id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsIdRolesRoleNameGet", "id");
        }


        // verify required parameter 'roleName' is not null or undefined
        if (roleName === null || roleName === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsIdRolesRoleNameGet", "roleName");
        }





        // Path Params
        const localVarPath = '/objects/documents/{id}/roles/{role_name}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'role_name' + '}', encodeURIComponent(String(roleName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document User Actions
     * @param id The document id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the document.
     * @param minorVersion The minor version number of the document.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet", "id");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet", "minorVersion");
        }





        // Path Params
        const localVarPath = '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Entry Criteria
     * @param id The document id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the document.
     * @param minorVersion The minor version number of the document.
     * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet", "id");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet", "minorVersion");
        }


        // verify required parameter 'nameV' is not null or undefined
        if (nameV === null || nameV === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet", "nameV");
        }





        // Path Params
        const localVarPath = '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)))
            .replace('{' + 'name__v' + '}', encodeURIComponent(String(nameV)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Initiate Document User Action
     * @param id The document id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the document.
     * @param minorVersion The minor version number of the document.
     * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut", "id");
        }


        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut", "majorVersion");
        }


        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut", "minorVersion");
        }


        // verify required parameter 'nameV' is not null or undefined
        if (nameV === null || nameV === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut", "nameV");
        }






        // Path Params
        const localVarPath = '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'major_version' + '}', encodeURIComponent(String(majorVersion)))
            .replace('{' + 'minor_version' + '}', encodeURIComponent(String(minorVersion)))
            .replace('{' + 'name__v' + '}', encodeURIComponent(String(nameV)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve User Actions on Multiple Documents
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsLifecycleActionsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/documents/lifecycle_actions';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Initiate Bulk Document User Actions
     * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsLifecycleActionsUserActionNamePut(userActionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'userActionName' is not null or undefined
        if (userActionName === null || userActionName === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsLifecycleActionsUserActionNamePut", "userActionName");
        }






        // Path Params
        const localVarPath = '/objects/documents/lifecycle_actions/{user_action_name}'
            .replace('{' + 'user_action_name' + '}', encodeURIComponent(String(userActionName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Single Document
     * @param authorization 
     * @param accept 
     * @param xVaultAPIMigrationMode When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsPost(authorization?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/documents';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-MigrationMode", ObjectSerializer.serialize(xVaultAPIMigrationMode, "boolean", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Multiple Document Relationships
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsRelationshipsBatchDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/documents/relationships/batch';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Multiple Document Relationships
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsRelationshipsBatchPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/documents/relationships/batch';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Multiple Document Renditions
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsRenditionsBatchDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/documents/renditions/batch';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Add Multiple Document Renditions
     * @param idParam If you’re identifying documents in your input by their external ID
     * @param largeSizeAsset If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIMigrationMode Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsRenditionsBatchPost(idParam?: string, largeSizeAsset?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;








        // Path Params
        const localVarPath = '/objects/documents/renditions/batch';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (idParam !== undefined) {
            requestContext.setQueryParam("idParam", ObjectSerializer.serialize(idParam, "string", ""));
        }

        // Query Params
        if (largeSizeAsset !== undefined) {
            requestContext.setQueryParam("largeSizeAsset", ObjectSerializer.serialize(largeSizeAsset, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-MigrationMode", ObjectSerializer.serialize(xVaultAPIMigrationMode, "boolean", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Remove Users and Groups from Roles on Multiple Documents & Binders
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsRolesBatchDelete(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/documents/roles/batch';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Assign Users & Groups to Roles on Multiple Documents & Binders
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsRolesBatchPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/documents/roles/batch';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Template Collection
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/objects/documents/templates';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Single Document Template
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsTemplatesPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/documents/templates';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Multiple Document Templates
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsTemplatesPut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/documents/templates';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Basic Document Template
     * @param templateName The document template name__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsTemplatesTemplateNameDelete(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'templateName' is not null or undefined
        if (templateName === null || templateName === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsTemplatesTemplateNameDelete", "templateName");
        }





        // Path Params
        const localVarPath = '/objects/documents/templates/{template_name}'
            .replace('{' + 'template_name' + '}', encodeURIComponent(String(templateName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Download Document Template File
     * @param templateName The document template name__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsTemplatesTemplateNameFileGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'templateName' is not null or undefined
        if (templateName === null || templateName === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsTemplatesTemplateNameFileGet", "templateName");
        }





        // Path Params
        const localVarPath = '/objects/documents/templates/{template_name}/file'
            .replace('{' + 'template_name' + '}', encodeURIComponent(String(templateName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Document Template Attributes
     * @param templateName The document template name__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsTemplatesTemplateNameGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'templateName' is not null or undefined
        if (templateName === null || templateName === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsTemplatesTemplateNameGet", "templateName");
        }





        // Path Params
        const localVarPath = '/objects/documents/templates/{template_name}'
            .replace('{' + 'template_name' + '}', encodeURIComponent(String(templateName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Single Document Template
     * @param templateName The document template name__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsTemplatesTemplateNamePut(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'templateName' is not null or undefined
        if (templateName === null || templateName === undefined) {
            throw new RequiredError("DefaultApi", "objectsDocumentsTemplatesTemplateNamePut", "templateName");
        }





        // Path Params
        const localVarPath = '/objects/documents/templates/{template_name}'
            .replace('{' + 'template_name' + '}', encodeURIComponent(String(templateName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Document Tokens
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsTokensPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/documents/tokens';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Export Document Versions
     * @param source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
     * @param renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsVersionsBatchActionsFileextractPost(source?: boolean, renditions?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;







        // Path Params
        const localVarPath = '/objects/documents/versions/batch/actions/fileextract';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (source !== undefined) {
            requestContext.setQueryParam("source", ObjectSerializer.serialize(source, "boolean", ""));
        }

        // Query Params
        if (renditions !== undefined) {
            requestContext.setQueryParam("renditions", ObjectSerializer.serialize(renditions, "boolean", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Multiple Document Versions
     * @param idParam If you’re identifying documents in your input by their external ID
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsVersionsBatchDelete(idParam?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;






        // Path Params
        const localVarPath = '/objects/documents/versions/batch';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (idParam !== undefined) {
            requestContext.setQueryParam("idParam", ObjectSerializer.serialize(idParam, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Multiple Document Versions
     * @param idParam If you’re identifying documents in your input by their external ID
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIMigrationMode Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the &#x60;status__v&#x60; field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDocumentsVersionsBatchPost(idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;







        // Path Params
        const localVarPath = '/objects/documents/versions/batch';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (idParam !== undefined) {
            requestContext.setQueryParam("idParam", ObjectSerializer.serialize(idParam, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-MigrationMode", ObjectSerializer.serialize(xVaultAPIMigrationMode, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Domain Information
     * @param includeApplication To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDomainGet(includeApplication?: boolean, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;






        // Path Params
        const localVarPath = '/objects/domain';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (includeApplication !== undefined) {
            requestContext.setQueryParam("include_application", ObjectSerializer.serialize(includeApplication, "boolean", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Domains
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsDomainsGet(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/domains';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Add EDL Matched Documents
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsEdlMatchedDocumentsBatchActionsAddPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/edl_matched_documents/batch/actions/add';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Remove EDL Matched Documents
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsEdlMatchedDocumentsBatchActionsRemovePost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/edl_matched_documents/batch/actions/remove';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Auto Managed Groups
     * @param limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. 
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsGroupsAutoGet(limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;






        // Path Params
        const localVarPath = '/objects/groups/auto';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (limit !== undefined) {
            requestContext.setQueryParam("limit", ObjectSerializer.serialize(limit, "string", ""));
        }

        // Query Params
        if (offset !== undefined) {
            requestContext.setQueryParam("offset", ObjectSerializer.serialize(offset, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve All Groups
     * @param includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsGroupsGet(includeImplied?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/groups';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (includeImplied !== undefined) {
            requestContext.setQueryParam("includeImplied", ObjectSerializer.serialize(includeImplied, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Group
     * @param groupId The group id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsGroupsGroupIdDelete(groupId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'groupId' is not null or undefined
        if (groupId === null || groupId === undefined) {
            throw new RequiredError("DefaultApi", "objectsGroupsGroupIdDelete", "groupId");
        }





        // Path Params
        const localVarPath = '/objects/groups/{group_id}'
            .replace('{' + 'group_id' + '}', encodeURIComponent(String(groupId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Group
     * @param groupId The group id field value.
     * @param includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsGroupsGroupIdGet(groupId: string, includeImplied?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'groupId' is not null or undefined
        if (groupId === null || groupId === undefined) {
            throw new RequiredError("DefaultApi", "objectsGroupsGroupIdGet", "groupId");
        }






        // Path Params
        const localVarPath = '/objects/groups/{group_id}'
            .replace('{' + 'group_id' + '}', encodeURIComponent(String(groupId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (includeImplied !== undefined) {
            requestContext.setQueryParam("includeImplied", ObjectSerializer.serialize(includeImplied, "boolean", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Group
     * @param groupId The group id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsGroupsGroupIdPut(groupId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'groupId' is not null or undefined
        if (groupId === null || groupId === undefined) {
            throw new RequiredError("DefaultApi", "objectsGroupsGroupIdPut", "groupId");
        }






        // Path Params
        const localVarPath = '/objects/groups/{group_id}'
            .replace('{' + 'group_id' + '}', encodeURIComponent(String(groupId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Group 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsGroupsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/groups';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Application License Usage
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsLicensesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/objects/licenses';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve All Multi-Record Workflows
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsObjectworkflowsActionsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/objects/objectworkflows/actions';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Multi-Record Workflow Details
     * @param workflowName 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsObjectworkflowsActionsWorkflowNameGet(workflowName: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'workflowName' is not null or undefined
        if (workflowName === null || workflowName === undefined) {
            throw new RequiredError("DefaultApi", "objectsObjectworkflowsActionsWorkflowNameGet", "workflowName");
        }




        // Path Params
        const localVarPath = '/objects/objectworkflows/actions/{workflow_name}'
            .replace('{' + 'workflow_name' + '}', encodeURIComponent(String(workflowName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Initiate Multi-Record Workflow
     * @param workflowName 
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsObjectworkflowsActionsWorkflowNamePost(workflowName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'workflowName' is not null or undefined
        if (workflowName === null || workflowName === undefined) {
            throw new RequiredError("DefaultApi", "objectsObjectworkflowsActionsWorkflowNamePost", "workflowName");
        }






        // Path Params
        const localVarPath = '/objects/objectworkflows/actions/{workflow_name}'
            .replace('{' + 'workflow_name' + '}', encodeURIComponent(String(workflowName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Workflows
     * @param objectV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
     * @param recordIdV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
     * @param participant To retrieve all workflows available to a particular user, include the user id field value as ?participant&#x3D;{id}. To retrieve your own workflows, set this value to ?participant&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
     * @param statusV To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v&#x3D;active__v, status__v&#x3D;active__v,completed__v. Workflows with &#x60;status__v&#x3D;active__v&#x60; are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
     * @param pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
     * @param loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsObjectworkflowsGet(objectV?: string, recordIdV?: string, participant?: string, statusV?: string, offset?: string, pageSize?: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;











        // Path Params
        const localVarPath = '/objects/objectworkflows';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (objectV !== undefined) {
            requestContext.setQueryParam("object__v", ObjectSerializer.serialize(objectV, "string", ""));
        }

        // Query Params
        if (recordIdV !== undefined) {
            requestContext.setQueryParam("record_id__v", ObjectSerializer.serialize(recordIdV, "string", ""));
        }

        // Query Params
        if (participant !== undefined) {
            requestContext.setQueryParam("participant", ObjectSerializer.serialize(participant, "string", ""));
        }

        // Query Params
        if (statusV !== undefined) {
            requestContext.setQueryParam("status__v", ObjectSerializer.serialize(statusV, "string", ""));
        }

        // Query Params
        if (offset !== undefined) {
            requestContext.setQueryParam("offset", ObjectSerializer.serialize(offset, "string", ""));
        }

        // Query Params
        if (pageSize !== undefined) {
            requestContext.setQueryParam("page_size", ObjectSerializer.serialize(pageSize, "string", ""));
        }

        // Query Params
        if (loc !== undefined) {
            requestContext.setQueryParam("loc", ObjectSerializer.serialize(loc, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Workflow Tasks
     * @param objectV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
     * @param recordIdV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
     * @param assigneeV To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v&#x3D;{id}. To retrieve your own workflow tasks, set this value to ?assignee__v&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
     * @param statusV To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v&#x3D;available__v or ?status__v&#x3D;available__v,completed__v. 
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
     * @param pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
     * @param loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsObjectworkflowsTasksGet(objectV?: string, recordIdV?: string, assigneeV?: string, statusV?: string, offset?: string, pageSize?: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;











        // Path Params
        const localVarPath = '/objects/objectworkflows/tasks';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (objectV !== undefined) {
            requestContext.setQueryParam("object__v", ObjectSerializer.serialize(objectV, "string", ""));
        }

        // Query Params
        if (recordIdV !== undefined) {
            requestContext.setQueryParam("record_id__v", ObjectSerializer.serialize(recordIdV, "string", ""));
        }

        // Query Params
        if (assigneeV !== undefined) {
            requestContext.setQueryParam("assignee__v", ObjectSerializer.serialize(assigneeV, "string", ""));
        }

        // Query Params
        if (statusV !== undefined) {
            requestContext.setQueryParam("status__v", ObjectSerializer.serialize(statusV, "string", ""));
        }

        // Query Params
        if (offset !== undefined) {
            requestContext.setQueryParam("offset", ObjectSerializer.serialize(offset, "string", ""));
        }

        // Query Params
        if (pageSize !== undefined) {
            requestContext.setQueryParam("page_size", ObjectSerializer.serialize(pageSize, "string", ""));
        }

        // Query Params
        if (loc !== undefined) {
            requestContext.setQueryParam("loc", ObjectSerializer.serialize(loc, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Accept Single Record Workflow Task
     * @param taskId The task id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsObjectworkflowsTasksTaskIdActionsAcceptPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'taskId' is not null or undefined
        if (taskId === null || taskId === undefined) {
            throw new RequiredError("DefaultApi", "objectsObjectworkflowsTasksTaskIdActionsAcceptPost", "taskId");
        }






        // Path Params
        const localVarPath = '/objects/objectworkflows/tasks/{task_id}/actions/accept'
            .replace('{' + 'task_id' + '}', encodeURIComponent(String(taskId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Cancel Workflow Task
     * @param taskId The task id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsObjectworkflowsTasksTaskIdActionsCancelPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'taskId' is not null or undefined
        if (taskId === null || taskId === undefined) {
            throw new RequiredError("DefaultApi", "objectsObjectworkflowsTasksTaskIdActionsCancelPost", "taskId");
        }






        // Path Params
        const localVarPath = '/objects/objectworkflows/tasks/{task_id}/actions/cancel'
            .replace('{' + 'task_id' + '}', encodeURIComponent(String(taskId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Complete Single Record Workflow Task
     * @param taskId The task id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsObjectworkflowsTasksTaskIdActionsCompletePost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'taskId' is not null or undefined
        if (taskId === null || taskId === undefined) {
            throw new RequiredError("DefaultApi", "objectsObjectworkflowsTasksTaskIdActionsCompletePost", "taskId");
        }






        // Path Params
        const localVarPath = '/objects/objectworkflows/tasks/{task_id}/actions/complete'
            .replace('{' + 'task_id' + '}', encodeURIComponent(String(taskId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Workflow Task Actions
     * @param taskId The task id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsObjectworkflowsTasksTaskIdActionsGet(taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'taskId' is not null or undefined
        if (taskId === null || taskId === undefined) {
            throw new RequiredError("DefaultApi", "objectsObjectworkflowsTasksTaskIdActionsGet", "taskId");
        }





        // Path Params
        const localVarPath = '/objects/objectworkflows/tasks/{task_id}/actions'
            .replace('{' + 'task_id' + '}', encodeURIComponent(String(taskId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Accept Multi-item Workflow Task
     * @param taskId The task id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'taskId' is not null or undefined
        if (taskId === null || taskId === undefined) {
            throw new RequiredError("DefaultApi", "objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost", "taskId");
        }






        // Path Params
        const localVarPath = '/objects/objectworkflows/tasks/{task_id}/actions/mdwaccept'
            .replace('{' + 'task_id' + '}', encodeURIComponent(String(taskId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Complete Multi-item Workflow Task
     * @param taskId The task id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'taskId' is not null or undefined
        if (taskId === null || taskId === undefined) {
            throw new RequiredError("DefaultApi", "objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost", "taskId");
        }






        // Path Params
        const localVarPath = '/objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete'
            .replace('{' + 'task_id' + '}', encodeURIComponent(String(taskId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Manage Multi-Item Workflow Content
     * @param taskId The task id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'taskId' is not null or undefined
        if (taskId === null || taskId === undefined) {
            throw new RequiredError("DefaultApi", "objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost", "taskId");
        }






        // Path Params
        const localVarPath = '/objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent'
            .replace('{' + 'task_id' + '}', encodeURIComponent(String(taskId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Reassign Multi-item Workflow Task
     * @param taskId The id of the task to reassign.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'taskId' is not null or undefined
        if (taskId === null || taskId === undefined) {
            throw new RequiredError("DefaultApi", "objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost", "taskId");
        }






        // Path Params
        const localVarPath = '/objects/objectworkflows/tasks/{task_id}/actions/mdwreassign'
            .replace('{' + 'task_id' + '}', encodeURIComponent(String(taskId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Reassign Single Record Workflow Task
     * @param taskId The id of the task to reassign.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsObjectworkflowsTasksTaskIdActionsReassignPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'taskId' is not null or undefined
        if (taskId === null || taskId === undefined) {
            throw new RequiredError("DefaultApi", "objectsObjectworkflowsTasksTaskIdActionsReassignPost", "taskId");
        }






        // Path Params
        const localVarPath = '/objects/objectworkflows/tasks/{task_id}/actions/reassign'
            .replace('{' + 'task_id' + '}', encodeURIComponent(String(taskId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Workflow Task Action Details
     * @param taskId The task id field value.
     * @param taskAction The name of the task action retrieved from Retrieve Workflow Task Actions.
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(taskId: string, taskAction: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'taskId' is not null or undefined
        if (taskId === null || taskId === undefined) {
            throw new RequiredError("DefaultApi", "objectsObjectworkflowsTasksTaskIdActionsTaskActionGet", "taskId");
        }


        // verify required parameter 'taskAction' is not null or undefined
        if (taskAction === null || taskAction === undefined) {
            throw new RequiredError("DefaultApi", "objectsObjectworkflowsTasksTaskIdActionsTaskActionGet", "taskAction");
        }






        // Path Params
        const localVarPath = '/objects/objectworkflows/tasks/{task_id}/actions/{task_action}'
            .replace('{' + 'task_id' + '}', encodeURIComponent(String(taskId)))
            .replace('{' + 'task_action' + '}', encodeURIComponent(String(taskAction)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (loc !== undefined) {
            requestContext.setQueryParam("loc", ObjectSerializer.serialize(loc, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Undo Workflow Task Acceptance
     * @param taskId The task id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'taskId' is not null or undefined
        if (taskId === null || taskId === undefined) {
            throw new RequiredError("DefaultApi", "objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost", "taskId");
        }






        // Path Params
        const localVarPath = '/objects/objectworkflows/tasks/{task_id}/actions/undoaccept'
            .replace('{' + 'task_id' + '}', encodeURIComponent(String(taskId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Workflow Task Due Date
     * @param taskId The id of the task.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'taskId' is not null or undefined
        if (taskId === null || taskId === undefined) {
            throw new RequiredError("DefaultApi", "objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost", "taskId");
        }






        // Path Params
        const localVarPath = '/objects/objectworkflows/tasks/{task_id}/actions/updateduedate'
            .replace('{' + 'task_id' + '}', encodeURIComponent(String(taskId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Workflow Task Details
     * @param taskId The task id field value.
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsObjectworkflowsTasksTaskIdGet(taskId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'taskId' is not null or undefined
        if (taskId === null || taskId === undefined) {
            throw new RequiredError("DefaultApi", "objectsObjectworkflowsTasksTaskIdGet", "taskId");
        }






        // Path Params
        const localVarPath = '/objects/objectworkflows/tasks/{task_id}'
            .replace('{' + 'task_id' + '}', encodeURIComponent(String(taskId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (loc !== undefined) {
            requestContext.setQueryParam("loc", ObjectSerializer.serialize(loc, "boolean", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Workflow Actions
     * @param workflowId The workflow id field value.
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsObjectworkflowsWorkflowIdActionsGet(workflowId: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'workflowId' is not null or undefined
        if (workflowId === null || workflowId === undefined) {
            throw new RequiredError("DefaultApi", "objectsObjectworkflowsWorkflowIdActionsGet", "workflowId");
        }






        // Path Params
        const localVarPath = '/objects/objectworkflows/{workflow_id}/actions'
            .replace('{' + 'workflow_id' + '}', encodeURIComponent(String(workflowId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (loc !== undefined) {
            requestContext.setQueryParam("loc", ObjectSerializer.serialize(loc, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Workflow Action Details
     * @param workflowId The workflow id field value.
     * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(workflowId: string, workflowAction: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'workflowId' is not null or undefined
        if (workflowId === null || workflowId === undefined) {
            throw new RequiredError("DefaultApi", "objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet", "workflowId");
        }


        // verify required parameter 'workflowAction' is not null or undefined
        if (workflowAction === null || workflowAction === undefined) {
            throw new RequiredError("DefaultApi", "objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet", "workflowAction");
        }





        // Path Params
        const localVarPath = '/objects/objectworkflows/{workflow_id}/actions/{workflow_action}'
            .replace('{' + 'workflow_id' + '}', encodeURIComponent(String(workflowId)))
            .replace('{' + 'workflow_action' + '}', encodeURIComponent(String(workflowAction)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Initiate Workflow Action
     * @param workflowId The workflow id field value.
     * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
     * @param documentsSys Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(workflowId: string, workflowAction: string, documentsSys?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'workflowId' is not null or undefined
        if (workflowId === null || workflowId === undefined) {
            throw new RequiredError("DefaultApi", "objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost", "workflowId");
        }


        // verify required parameter 'workflowAction' is not null or undefined
        if (workflowAction === null || workflowAction === undefined) {
            throw new RequiredError("DefaultApi", "objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost", "workflowAction");
        }







        // Path Params
        const localVarPath = '/objects/objectworkflows/{workflow_id}/actions/{workflow_action}'
            .replace('{' + 'workflow_id' + '}', encodeURIComponent(String(workflowId)))
            .replace('{' + 'workflow_action' + '}', encodeURIComponent(String(workflowAction)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (documentsSys !== undefined) {
            requestContext.setQueryParam("documents__sys", ObjectSerializer.serialize(documentsSys, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Workflow Details
     * @param workflowId The workflow id field value.
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsObjectworkflowsWorkflowIdGet(workflowId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'workflowId' is not null or undefined
        if (workflowId === null || workflowId === undefined) {
            throw new RequiredError("DefaultApi", "objectsObjectworkflowsWorkflowIdGet", "workflowId");
        }






        // Path Params
        const localVarPath = '/objects/objectworkflows/{workflow_id}'
            .replace('{' + 'workflow_id' + '}', encodeURIComponent(String(workflowId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (loc !== undefined) {
            requestContext.setQueryParam("loc", ObjectSerializer.serialize(loc, "boolean", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve All Picklists
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsPicklistsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/objects/picklists';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Picklist Values
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsPicklistsPicklistNameGet(picklistName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'picklistName' is not null or undefined
        if (picklistName === null || picklistName === undefined) {
            throw new RequiredError("DefaultApi", "objectsPicklistsPicklistNameGet", "picklistName");
        }





        // Path Params
        const localVarPath = '/objects/picklists/{picklist_name}'
            .replace('{' + 'picklist_name' + '}', encodeURIComponent(String(picklistName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Inactivate Picklist Value
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsPicklistsPicklistNamePicklistValueNameDelete(picklistName: string, picklistValueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'picklistName' is not null or undefined
        if (picklistName === null || picklistName === undefined) {
            throw new RequiredError("DefaultApi", "objectsPicklistsPicklistNamePicklistValueNameDelete", "picklistName");
        }


        // verify required parameter 'picklistValueName' is not null or undefined
        if (picklistValueName === null || picklistValueName === undefined) {
            throw new RequiredError("DefaultApi", "objectsPicklistsPicklistNamePicklistValueNameDelete", "picklistValueName");
        }





        // Path Params
        const localVarPath = '/objects/picklists/{picklist_name}/{picklist_value_name}'
            .replace('{' + 'picklist_name' + '}', encodeURIComponent(String(picklistName)))
            .replace('{' + 'picklist_value_name' + '}', encodeURIComponent(String(picklistValueName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Picklist Value
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsPicklistsPicklistNamePicklistValueNamePut(picklistName: string, picklistValueName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'picklistName' is not null or undefined
        if (picklistName === null || picklistName === undefined) {
            throw new RequiredError("DefaultApi", "objectsPicklistsPicklistNamePicklistValueNamePut", "picklistName");
        }


        // verify required parameter 'picklistValueName' is not null or undefined
        if (picklistValueName === null || picklistValueName === undefined) {
            throw new RequiredError("DefaultApi", "objectsPicklistsPicklistNamePicklistValueNamePut", "picklistValueName");
        }






        // Path Params
        const localVarPath = '/objects/picklists/{picklist_name}/{picklist_value_name}'
            .replace('{' + 'picklist_name' + '}', encodeURIComponent(String(picklistName)))
            .replace('{' + 'picklist_value_name' + '}', encodeURIComponent(String(picklistValueName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Picklist Values
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsPicklistsPicklistNamePost(picklistName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'picklistName' is not null or undefined
        if (picklistName === null || picklistName === undefined) {
            throw new RequiredError("DefaultApi", "objectsPicklistsPicklistNamePost", "picklistName");
        }






        // Path Params
        const localVarPath = '/objects/picklists/{picklist_name}'
            .replace('{' + 'picklist_name' + '}', encodeURIComponent(String(picklistName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Picklist Value Label
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsPicklistsPicklistNamePut(picklistName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'picklistName' is not null or undefined
        if (picklistName === null || picklistName === undefined) {
            throw new RequiredError("DefaultApi", "objectsPicklistsPicklistNamePut", "picklistName");
        }






        // Path Params
        const localVarPath = '/objects/picklists/{picklist_name}'
            .replace('{' + 'picklist_name' + '}', encodeURIComponent(String(picklistName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Build Production Vault
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsSandboxActionsBuildproductionPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/sandbox/actions/buildproduction';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Promote to Production
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsSandboxActionsPromoteproductionPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/sandbox/actions/promoteproduction';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Recheck Sandbox Usage Limit
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsSandboxActionsRecheckusagePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/sandbox/actions/recheckusage';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Change Sandbox Size
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsSandboxBatchChangesizePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/sandbox/batch/changesize';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Set Sandbox Entitlements
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsSandboxEntitlementsSetPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/sandbox/entitlements/set';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Sandboxes
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsSandboxGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/objects/sandbox';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Sandbox
     * @param name The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsSandboxNameDelete(name: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new RequiredError("DefaultApi", "objectsSandboxNameDelete", "name");
        }





        // Path Params
        const localVarPath = '/objects/sandbox/{name}'
            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create or Refresh Sandbox
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsSandboxPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/sandbox';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Sandbox Snapshot
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsSandboxSnapshotApiNameActionsUpdatePost(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'apiName' is not null or undefined
        if (apiName === null || apiName === undefined) {
            throw new RequiredError("DefaultApi", "objectsSandboxSnapshotApiNameActionsUpdatePost", "apiName");
        }





        // Path Params
        const localVarPath = '/objects/sandbox/snapshot/{api_name}/actions/update'
            .replace('{' + 'api_name' + '}', encodeURIComponent(String(apiName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Upgrade Sandbox Snapshot
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsSandboxSnapshotApiNameActionsUpgradePost(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'apiName' is not null or undefined
        if (apiName === null || apiName === undefined) {
            throw new RequiredError("DefaultApi", "objectsSandboxSnapshotApiNameActionsUpgradePost", "apiName");
        }





        // Path Params
        const localVarPath = '/objects/sandbox/snapshot/{api_name}/actions/upgrade'
            .replace('{' + 'api_name' + '}', encodeURIComponent(String(apiName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Sandbox Snapshot
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsSandboxSnapshotApiNameDelete(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'apiName' is not null or undefined
        if (apiName === null || apiName === undefined) {
            throw new RequiredError("DefaultApi", "objectsSandboxSnapshotApiNameDelete", "apiName");
        }





        // Path Params
        const localVarPath = '/objects/sandbox/snapshot/{api_name}'
            .replace('{' + 'api_name' + '}', encodeURIComponent(String(apiName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Sandbox Snapshots
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsSandboxSnapshotGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/objects/sandbox/snapshot';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Sandbox Snapshot
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsSandboxSnapshotPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/sandbox/snapshot';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Refresh Sandbox from Snapshot
     * @param vaultId The Vault ID of the sandbox to be refreshed.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsSandboxVaultIdActionsRefreshPost(vaultId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'vaultId' is not null or undefined
        if (vaultId === null || vaultId === undefined) {
            throw new RequiredError("DefaultApi", "objectsSandboxVaultIdActionsRefreshPost", "vaultId");
        }






        // Path Params
        const localVarPath = '/objects/sandbox/{vault_id}/actions/refresh'
            .replace('{' + 'vault_id' + '}', encodeURIComponent(String(vaultId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Sandbox Details by ID
     * @param vaultId 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsSandboxVaultIdGet(vaultId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'vaultId' is not null or undefined
        if (vaultId === null || vaultId === undefined) {
            throw new RequiredError("DefaultApi", "objectsSandboxVaultIdGet", "vaultId");
        }





        // Path Params
        const localVarPath = '/objects/sandbox/{vault_id}'
            .replace('{' + 'vault_id' + '}', encodeURIComponent(String(vaultId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve All Security Policies
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsSecuritypoliciesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/objects/securitypolicies';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Security Policy
     * @param securityPolicyName Security policy name__v field value (retrieved from previous request). This is typically a numeric value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsSecuritypoliciesSecurityPolicyNameGet(securityPolicyName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'securityPolicyName' is not null or undefined
        if (securityPolicyName === null || securityPolicyName === undefined) {
            throw new RequiredError("DefaultApi", "objectsSecuritypoliciesSecurityPolicyNameGet", "securityPolicyName");
        }





        // Path Params
        const localVarPath = '/objects/securitypolicies/{security_policy_name}'
            .replace('{' + 'security_policy_name' + '}', encodeURIComponent(String(securityPolicyName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve All Users
     * @param vaults Retrieve all users assigned to all Vaults in your domain.
     * @param excludeVaultMembership Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.
     * @param excludeAppLicensing Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsUsersGet(vaults?: string, excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;







        // Path Params
        const localVarPath = '/objects/users/';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (vaults !== undefined) {
            requestContext.setQueryParam("vaults", ObjectSerializer.serialize(vaults, "string", ""));
        }

        // Query Params
        if (excludeVaultMembership !== undefined) {
            requestContext.setQueryParam("exclude_vault_membership", ObjectSerializer.serialize(excludeVaultMembership, "string", ""));
        }

        // Query Params
        if (excludeAppLicensing !== undefined) {
            requestContext.setQueryParam("exclude_app_licensing", ObjectSerializer.serialize(excludeAppLicensing, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve User
     * @param id The user id field value. Use the value me to get information for the currently authenticated user.
     * @param excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
     * @param excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsUsersIdGet(id: string, excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new RequiredError("DefaultApi", "objectsUsersIdGet", "id");
        }







        // Path Params
        const localVarPath = '/objects/users/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (excludeVaultMembership !== undefined) {
            requestContext.setQueryParam("exclude_vault_membership", ObjectSerializer.serialize(excludeVaultMembership, "string", ""));
        }

        // Query Params
        if (excludeAppLicensing !== undefined) {
            requestContext.setQueryParam("exclude_app_licensing", ObjectSerializer.serialize(excludeAppLicensing, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve User Permissions
     * @param id The ID of the user. Use the value me to retrieve information for the currently authenticated user.
     * @param filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsUsersIdPermissionsGet(id: string, filter?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new RequiredError("DefaultApi", "objectsUsersIdPermissionsGet", "id");
        }






        // Path Params
        const localVarPath = '/objects/users/{id}/permissions'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (filter !== undefined) {
            requestContext.setQueryParam("filter", ObjectSerializer.serialize(filter, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Single User
     * @param id The user id field value. Use the value me to get information for the currently authenticated user.
     * @param authorization 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsUsersIdPut(id: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new RequiredError("DefaultApi", "objectsUsersIdPut", "id");
        }





        // Path Params
        const localVarPath = '/objects/users/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Validate Session User
     * @param excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
     * @param excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsUsersMeGet(excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;






        // Path Params
        const localVarPath = '/objects/users/me';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (excludeVaultMembership !== undefined) {
            requestContext.setQueryParam("exclude_vault_membership", ObjectSerializer.serialize(excludeVaultMembership, "string", ""));
        }

        // Query Params
        if (excludeAppLicensing !== undefined) {
            requestContext.setQueryParam("exclude_app_licensing", ObjectSerializer.serialize(excludeAppLicensing, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Change My Password
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsUsersMePasswordPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/users/me/password';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve My User Permissions
     * @param filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsUsersMePermissionsGet(filter?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/users/me/permissions';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (filter !== undefined) {
            requestContext.setQueryParam("filter", ObjectSerializer.serialize(filter, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update My User
     * @param authorization 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsUsersMePut(authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/objects/users/me';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Single User
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsUsersPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/users';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Multiple Users
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsUsersPut(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/objects/users';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Disable User
     * @param userId The user id field value. 
     * @param domain When true, this disables the user account in all vaults in the domain.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsUsersUserIdDelete(userId: string, domain?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new RequiredError("DefaultApi", "objectsUsersUserIdDelete", "userId");
        }






        // Path Params
        const localVarPath = '/objects/users/{user_id}'
            .replace('{' + 'user_id' + '}', encodeURIComponent(String(userId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (domain !== undefined) {
            requestContext.setQueryParam("domain", ObjectSerializer.serialize(domain, "boolean", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Vault Membership
     * @param userId The user id field value.
     * @param vaultId The system-managed id field value assigned to each vault in the domain.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsUsersUserIdVaultMembershipVaultIdPut(userId: string, vaultId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new RequiredError("DefaultApi", "objectsUsersUserIdVaultMembershipVaultIdPut", "userId");
        }


        // verify required parameter 'vaultId' is not null or undefined
        if (vaultId === null || vaultId === undefined) {
            throw new RequiredError("DefaultApi", "objectsUsersUserIdVaultMembershipVaultIdPut", "vaultId");
        }






        // Path Params
        const localVarPath = '/objects/users/{user_id}/vault_membership/{vault_id}'
            .replace('{' + 'user_id' + '}', encodeURIComponent(String(userId)))
            .replace('{' + 'vault_id' + '}', encodeURIComponent(String(vaultId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Vault Compare
     * @param authorization 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsVaultActionsComparePost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/objects/vault/actions/compare';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Vault Configuration Report
     * @param authorization 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async objectsVaultActionsConfigreportPost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/objects/vault/actions/configreport';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Component Definition Query
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async queryComponentsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/query/components';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Next Page URL
     * @param nextPage 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIDescribeQuery 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async queryNextPagePost(nextPage: string, authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'nextPage' is not null or undefined
        if (nextPage === null || nextPage === undefined) {
            throw new RequiredError("DefaultApi", "queryNextPagePost", "nextPage");
        }







        // Path Params
        const localVarPath = '/query/{next_page}'
            .replace('{' + 'next_page' + '}', encodeURIComponent(String(nextPage)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-DescribeQuery", ObjectSerializer.serialize(xVaultAPIDescribeQuery, "boolean", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Submitting a Query
     * @param authorization 
     * @param accept 
     * @param xVaultAPIDescribeQuery 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async queryPost(authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;






        // Path Params
        const localVarPath = '/query';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-DescribeQuery", ObjectSerializer.serialize(xVaultAPIDescribeQuery, "boolean", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Previous Page URL
     * @param previousPage 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIDescribeQuery 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async queryPreviousPagePost(previousPage: string, authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'previousPage' is not null or undefined
        if (previousPage === null || previousPage === undefined) {
            throw new RequiredError("DefaultApi", "queryPreviousPagePost", "previousPage");
        }







        // Path Params
        const localVarPath = '/query/{previous_page}'
            .replace('{' + 'previous_page' + '}', encodeURIComponent(String(previousPage)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-DescribeQuery", ObjectSerializer.serialize(xVaultAPIDescribeQuery, "boolean", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Current User with SCIM
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async scimV2MeGet(attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;






        // Path Params
        const localVarPath = '/scim/v2/Me';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (attributes !== undefined) {
            requestContext.setQueryParam("attributes", ObjectSerializer.serialize(attributes, "string", ""));
        }

        // Query Params
        if (excludedAttributes !== undefined) {
            requestContext.setQueryParam("excludedAttributes", ObjectSerializer.serialize(excludedAttributes, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Current User with SCIM
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async scimV2MePut(attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;







        // Path Params
        const localVarPath = '/scim/v2/Me';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (attributes !== undefined) {
            requestContext.setQueryParam("attributes", ObjectSerializer.serialize(attributes, "string", ""));
        }

        // Query Params
        if (excludedAttributes !== undefined) {
            requestContext.setQueryParam("excludedAttributes", ObjectSerializer.serialize(excludedAttributes, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve All SCIM Resource Types
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async scimV2ResourceTypesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/scim/v2/ResourceTypes';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Single SCIM Resource Type
     * @param type A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async scimV2ResourceTypesTypeGet(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new RequiredError("DefaultApi", "scimV2ResourceTypesTypeGet", "type");
        }





        // Path Params
        const localVarPath = '/scim/v2/ResourceTypes/{type}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve All SCIM Schema Information
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async scimV2SchemasGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/scim/v2/Schemas';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Single SCIM Schema Information
     * @param id The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async scimV2SchemasIdGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new RequiredError("DefaultApi", "scimV2SchemasIdGet", "id");
        }





        // Path Params
        const localVarPath = '/scim/v2/Schemas/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve SCIM Provider
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async scimV2ServiceProviderConfigGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/scim/v2/ServiceProviderConfig';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve SCIM Resources
     * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
     * @param sortOrder Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
     * @param startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async scimV2TypeGet(type: string, filter?: string, attributes?: string, excludedAttributes?: string, sortBy?: string, sortOrder?: string, startIndex?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new RequiredError("DefaultApi", "scimV2TypeGet", "type");
        }











        // Path Params
        const localVarPath = '/scim/v2/{type}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (filter !== undefined) {
            requestContext.setQueryParam("filter", ObjectSerializer.serialize(filter, "string", ""));
        }

        // Query Params
        if (attributes !== undefined) {
            requestContext.setQueryParam("attributes", ObjectSerializer.serialize(attributes, "string", ""));
        }

        // Query Params
        if (excludedAttributes !== undefined) {
            requestContext.setQueryParam("excludedAttributes", ObjectSerializer.serialize(excludedAttributes, "string", ""));
        }

        // Query Params
        if (sortBy !== undefined) {
            requestContext.setQueryParam("sortBy", ObjectSerializer.serialize(sortBy, "string", ""));
        }

        // Query Params
        if (sortOrder !== undefined) {
            requestContext.setQueryParam("sortOrder", ObjectSerializer.serialize(sortOrder, "string", ""));
        }

        // Query Params
        if (startIndex !== undefined) {
            requestContext.setQueryParam("startIndex", ObjectSerializer.serialize(startIndex, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Single SCIM Resource
     * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
     * @param id The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async scimV2TypeIdGet(type: string, id: string, attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new RequiredError("DefaultApi", "scimV2TypeIdGet", "type");
        }


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new RequiredError("DefaultApi", "scimV2TypeIdGet", "id");
        }







        // Path Params
        const localVarPath = '/scim/v2/{type}/{id}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (attributes !== undefined) {
            requestContext.setQueryParam("attributes", ObjectSerializer.serialize(attributes, "string", ""));
        }

        // Query Params
        if (excludedAttributes !== undefined) {
            requestContext.setQueryParam("excludedAttributes", ObjectSerializer.serialize(excludedAttributes, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve All Users with SCIM
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
     * @param sortOrder Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.
     * @param count Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
     * @param startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async scimV2UsersGet(filter?: string, attributes?: string, excludedAttributes?: string, sortBy?: string, sortOrder?: string, count?: string, startIndex?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;











        // Path Params
        const localVarPath = '/scim/v2/Users';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (filter !== undefined) {
            requestContext.setQueryParam("filter", ObjectSerializer.serialize(filter, "string", ""));
        }

        // Query Params
        if (attributes !== undefined) {
            requestContext.setQueryParam("attributes", ObjectSerializer.serialize(attributes, "string", ""));
        }

        // Query Params
        if (excludedAttributes !== undefined) {
            requestContext.setQueryParam("excludedAttributes", ObjectSerializer.serialize(excludedAttributes, "string", ""));
        }

        // Query Params
        if (sortBy !== undefined) {
            requestContext.setQueryParam("sortBy", ObjectSerializer.serialize(sortBy, "string", ""));
        }

        // Query Params
        if (sortOrder !== undefined) {
            requestContext.setQueryParam("sortOrder", ObjectSerializer.serialize(sortOrder, "string", ""));
        }

        // Query Params
        if (count !== undefined) {
            requestContext.setQueryParam("count", ObjectSerializer.serialize(count, "string", ""));
        }

        // Query Params
        if (startIndex !== undefined) {
            requestContext.setQueryParam("startIndex", ObjectSerializer.serialize(startIndex, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Single User with SCIM
     * @param id The id of the user you wish to update.
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async scimV2UsersIdGet(id: string, filter?: string, attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new RequiredError("DefaultApi", "scimV2UsersIdGet", "id");
        }








        // Path Params
        const localVarPath = '/scim/v2/Users/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (filter !== undefined) {
            requestContext.setQueryParam("filter", ObjectSerializer.serialize(filter, "string", ""));
        }

        // Query Params
        if (attributes !== undefined) {
            requestContext.setQueryParam("attributes", ObjectSerializer.serialize(attributes, "string", ""));
        }

        // Query Params
        if (excludedAttributes !== undefined) {
            requestContext.setQueryParam("excludedAttributes", ObjectSerializer.serialize(excludedAttributes, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update User with SCIM
     * @param id The id of the user you wish to update.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async scimV2UsersIdPut(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new RequiredError("DefaultApi", "scimV2UsersIdPut", "id");
        }






        // Path Params
        const localVarPath = '/scim/v2/Users/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create User with SCIM
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async scimV2UsersPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/scim/v2/Users';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Signing Certificate
     * @param certId The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesCertificateCertIdGet(certId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'certId' is not null or undefined
        if (certId === null || certId === undefined) {
            throw new RequiredError("DefaultApi", "servicesCertificateCertIdGet", "certId");
        }





        // Path Params
        const localVarPath = '/services/certificate/{cert_id}'
            .replace('{' + 'cert_id' + '}', encodeURIComponent(String(certId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Disable Configuration Mode
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesConfigurationModeActionsDisablePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/services/configuration_mode/actions/disable';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Enable Configuration Mode
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesConfigurationModeActionsEnablePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/services/configuration_mode/actions/enable';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Available Direct Data Files
     * @param extractType The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.
     * @param startTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.
     * @param stopTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesDirectdataFilesGet(extractType?: string, startTime?: number, stopTime?: number, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;







        // Path Params
        const localVarPath = '/services/directdata/files';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (extractType !== undefined) {
            requestContext.setQueryParam("extract_type", ObjectSerializer.serialize(extractType, "string", ""));
        }

        // Query Params
        if (startTime !== undefined) {
            requestContext.setQueryParam("start_time", ObjectSerializer.serialize(startTime, "number", ""));
        }

        // Query Params
        if (stopTime !== undefined) {
            requestContext.setQueryParam("stop_time", ObjectSerializer.serialize(stopTime, "number", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Download Direct Data File
     * @param name The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesDirectdataFilesNameGet(name: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new RequiredError("DefaultApi", "servicesDirectdataFilesNameGet", "name");
        }





        // Path Params
        const localVarPath = '/services/directdata/files/{name}'
            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Download Item Content
     * @param item The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param authorization 
     * @param accept 
     * @param range Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format &#x60;bytes&#x3D;{min}-{max}&#x60;. For example, &#x60;bytes&#x3D;0-1000&#x60;.
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesFileStagingItemsContentItemGet(item: string, authorization?: string, accept?: string, range?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'item' is not null or undefined
        if (item === null || item === undefined) {
            throw new RequiredError("DefaultApi", "servicesFileStagingItemsContentItemGet", "item");
        }






        // Path Params
        const localVarPath = '/services/file_staging/items/content/{item}'
            .replace('{' + 'item' + '}', encodeURIComponent(String(item)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Range", ObjectSerializer.serialize(range, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete File or Folder
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param recursive Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesFileStagingItemsItemDelete(item: string, recursive?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'item' is not null or undefined
        if (item === null || item === undefined) {
            throw new RequiredError("DefaultApi", "servicesFileStagingItemsItemDelete", "item");
        }






        // Path Params
        const localVarPath = '/services/file_staging/items/{item}'
            .replace('{' + 'item' + '}', encodeURIComponent(String(item)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (recursive !== undefined) {
            requestContext.setQueryParam("recursive", ObjectSerializer.serialize(recursive, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * List Items at a Path
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param recursive If true, the response will contain the contents of all subfolders. If not specified, the default value is false.
     * @param limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
     * @param formatResult If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesFileStagingItemsItemGet(item: string, recursive?: string, limit?: string, formatResult?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'item' is not null or undefined
        if (item === null || item === undefined) {
            throw new RequiredError("DefaultApi", "servicesFileStagingItemsItemGet", "item");
        }








        // Path Params
        const localVarPath = '/services/file_staging/items/{item}'
            .replace('{' + 'item' + '}', encodeURIComponent(String(item)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (recursive !== undefined) {
            requestContext.setQueryParam("recursive", ObjectSerializer.serialize(recursive, "string", ""));
        }

        // Query Params
        if (limit !== undefined) {
            requestContext.setQueryParam("limit", ObjectSerializer.serialize(limit, "string", ""));
        }

        // Query Params
        if (formatResult !== undefined) {
            requestContext.setQueryParam("format_result", ObjectSerializer.serialize(formatResult, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Folder or File
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesFileStagingItemsItemPut(item: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'item' is not null or undefined
        if (item === null || item === undefined) {
            throw new RequiredError("DefaultApi", "servicesFileStagingItemsItemPut", "item");
        }





        // Path Params
        const localVarPath = '/services/file_staging/items/{item}'
            .replace('{' + 'item' + '}', encodeURIComponent(String(item)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Folder or File
     * @param authorization 
     * @param accept 
     * @param contentMD5 Optional: The MD5 checksum of the file being uploaded.
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesFileStagingItemsPost(authorization?: string, accept?: string, contentMD5?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/services/file_staging/items';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-MD5", ObjectSerializer.serialize(contentMD5, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * List Upload Sessions
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesFileStagingUploadGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/services/file_staging/upload/';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Resumable Upload Session
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesFileStagingUploadPost(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/services/file_staging/upload';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Abort Upload Session
     * @param uploadSessionId 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesFileStagingUploadUploadSessionIdDelete(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'uploadSessionId' is not null or undefined
        if (uploadSessionId === null || uploadSessionId === undefined) {
            throw new RequiredError("DefaultApi", "servicesFileStagingUploadUploadSessionIdDelete", "uploadSessionId");
        }





        // Path Params
        const localVarPath = '/services/file_staging/upload/{upload_session_id}'
            .replace('{' + 'upload_session_id' + '}', encodeURIComponent(String(uploadSessionId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Get Upload Session Details
     * @param uploadSessionId 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesFileStagingUploadUploadSessionIdGet(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'uploadSessionId' is not null or undefined
        if (uploadSessionId === null || uploadSessionId === undefined) {
            throw new RequiredError("DefaultApi", "servicesFileStagingUploadUploadSessionIdGet", "uploadSessionId");
        }





        // Path Params
        const localVarPath = '/services/file_staging/upload/{upload_session_id}'
            .replace('{' + 'upload_session_id' + '}', encodeURIComponent(String(uploadSessionId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * List File Parts Uploaded to Session
     * @param uploadSessionId 
     * @param limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesFileStagingUploadUploadSessionIdPartsGet(uploadSessionId: string, limit?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'uploadSessionId' is not null or undefined
        if (uploadSessionId === null || uploadSessionId === undefined) {
            throw new RequiredError("DefaultApi", "servicesFileStagingUploadUploadSessionIdPartsGet", "uploadSessionId");
        }






        // Path Params
        const localVarPath = '/services/file_staging/upload/{upload_session_id}/parts'
            .replace('{' + 'upload_session_id' + '}', encodeURIComponent(String(uploadSessionId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (limit !== undefined) {
            requestContext.setQueryParam("limit", ObjectSerializer.serialize(limit, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Commit Upload Session
     * @param uploadSessionId 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesFileStagingUploadUploadSessionIdPost(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'uploadSessionId' is not null or undefined
        if (uploadSessionId === null || uploadSessionId === undefined) {
            throw new RequiredError("DefaultApi", "servicesFileStagingUploadUploadSessionIdPost", "uploadSessionId");
        }





        // Path Params
        const localVarPath = '/services/file_staging/upload/{upload_session_id}'
            .replace('{' + 'upload_session_id' + '}', encodeURIComponent(String(uploadSessionId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Upload to a Session
     * @param uploadSessionId 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIFilePartNumber The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.
     * @param contentMD5 Optional: The MD5 checksum of the file part being uploaded.
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesFileStagingUploadUploadSessionIdPut(uploadSessionId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIFilePartNumber?: string, contentMD5?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'uploadSessionId' is not null or undefined
        if (uploadSessionId === null || uploadSessionId === undefined) {
            throw new RequiredError("DefaultApi", "servicesFileStagingUploadUploadSessionIdPut", "uploadSessionId");
        }








        // Path Params
        const localVarPath = '/services/file_staging/upload/{upload_session_id}'
            .replace('{' + 'upload_session_id' + '}', encodeURIComponent(String(uploadSessionId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-FilePartNumber", ObjectSerializer.serialize(xVaultAPIFilePartNumber, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-MD5", ObjectSerializer.serialize(contentMD5, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Job Histories
     * @param startDate Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
     * @param endDate Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
     * @param status Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesJobsHistoriesGet(startDate?: string, endDate?: string, status?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;









        // Path Params
        const localVarPath = '/services/jobs/histories';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (startDate !== undefined) {
            requestContext.setQueryParam("start_date", ObjectSerializer.serialize(startDate, "string", ""));
        }

        // Query Params
        if (endDate !== undefined) {
            requestContext.setQueryParam("end_date", ObjectSerializer.serialize(endDate, "string", ""));
        }

        // Query Params
        if (status !== undefined) {
            requestContext.setQueryParam("status", ObjectSerializer.serialize(status, "string", ""));
        }

        // Query Params
        if (limit !== undefined) {
            requestContext.setQueryParam("limit", ObjectSerializer.serialize(limit, "string", ""));
        }

        // Query Params
        if (offset !== undefined) {
            requestContext.setQueryParam("offset", ObjectSerializer.serialize(offset, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Import Bulk Translation File Job Errors
     * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesJobsJobIdErrorsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'jobId' is not null or undefined
        if (jobId === null || jobId === undefined) {
            throw new RequiredError("DefaultApi", "servicesJobsJobIdErrorsGet", "jobId");
        }





        // Path Params
        const localVarPath = '/services/jobs/{job_id}/errors'
            .replace('{' + 'job_id' + '}', encodeURIComponent(String(jobId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Job Status
     * @param jobId The ID of the job, returned from the original job request.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesJobsJobIdGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'jobId' is not null or undefined
        if (jobId === null || jobId === undefined) {
            throw new RequiredError("DefaultApi", "servicesJobsJobIdGet", "jobId");
        }





        // Path Params
        const localVarPath = '/services/jobs/{job_id}'
            .replace('{' + 'job_id' + '}', encodeURIComponent(String(jobId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Import Bulk Translation File Job Summary
     * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesJobsJobIdSummaryGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'jobId' is not null or undefined
        if (jobId === null || jobId === undefined) {
            throw new RequiredError("DefaultApi", "servicesJobsJobIdSummaryGet", "jobId");
        }





        // Path Params
        const localVarPath = '/services/jobs/{job_id}/summary'
            .replace('{' + 'job_id' + '}', encodeURIComponent(String(jobId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve SDK Job Tasks
     * @param jobId The ID of the SDK job, returned from the original job request.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesJobsJobIdTasksGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'jobId' is not null or undefined
        if (jobId === null || jobId === undefined) {
            throw new RequiredError("DefaultApi", "servicesJobsJobIdTasksGet", "jobId");
        }





        // Path Params
        const localVarPath = '/services/jobs/{job_id}/tasks'
            .replace('{' + 'job_id' + '}', encodeURIComponent(String(jobId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Job Monitors
     * @param startDate Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
     * @param endDate Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
     * @param status Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.
     * @param limit Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesJobsMonitorsGet(startDate?: string, endDate?: string, status?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;









        // Path Params
        const localVarPath = '/services/jobs/monitors';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (startDate !== undefined) {
            requestContext.setQueryParam("start_date", ObjectSerializer.serialize(startDate, "string", ""));
        }

        // Query Params
        if (endDate !== undefined) {
            requestContext.setQueryParam("end_date", ObjectSerializer.serialize(endDate, "string", ""));
        }

        // Query Params
        if (status !== undefined) {
            requestContext.setQueryParam("status", ObjectSerializer.serialize(status, "string", ""));
        }

        // Query Params
        if (limit !== undefined) {
            requestContext.setQueryParam("limit", ObjectSerializer.serialize(limit, "string", ""));
        }

        // Query Params
        if (offset !== undefined) {
            requestContext.setQueryParam("offset", ObjectSerializer.serialize(offset, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Start Job
     * @param jobId The ID of the scheduled job instance to start.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesJobsStartNowJobIdPost(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'jobId' is not null or undefined
        if (jobId === null || jobId === undefined) {
            throw new RequiredError("DefaultApi", "servicesJobsStartNowJobIdPost", "jobId");
        }





        // Path Params
        const localVarPath = '/services/jobs/start_now/{job_id}'
            .replace('{' + 'job_id' + '}', encodeURIComponent(String(jobId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Extract Data Files
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesLoaderExtractPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/services/loader/extract';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Load Failure Log Results
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesLoaderJobIdTasksTaskIdFailurelogGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'jobId' is not null or undefined
        if (jobId === null || jobId === undefined) {
            throw new RequiredError("DefaultApi", "servicesLoaderJobIdTasksTaskIdFailurelogGet", "jobId");
        }


        // verify required parameter 'taskId' is not null or undefined
        if (taskId === null || taskId === undefined) {
            throw new RequiredError("DefaultApi", "servicesLoaderJobIdTasksTaskIdFailurelogGet", "taskId");
        }





        // Path Params
        const localVarPath = '/services/loader/{job_id}/tasks/{task_id}/failurelog'
            .replace('{' + 'job_id' + '}', encodeURIComponent(String(jobId)))
            .replace('{' + 'task_id' + '}', encodeURIComponent(String(taskId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Loader Extract Results
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesLoaderJobIdTasksTaskIdResultsGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'jobId' is not null or undefined
        if (jobId === null || jobId === undefined) {
            throw new RequiredError("DefaultApi", "servicesLoaderJobIdTasksTaskIdResultsGet", "jobId");
        }


        // verify required parameter 'taskId' is not null or undefined
        if (taskId === null || taskId === undefined) {
            throw new RequiredError("DefaultApi", "servicesLoaderJobIdTasksTaskIdResultsGet", "taskId");
        }





        // Path Params
        const localVarPath = '/services/loader/{job_id}/tasks/{task_id}/results'
            .replace('{' + 'job_id' + '}', encodeURIComponent(String(jobId)))
            .replace('{' + 'task_id' + '}', encodeURIComponent(String(taskId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Loader Extract Renditions Results
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'jobId' is not null or undefined
        if (jobId === null || jobId === undefined) {
            throw new RequiredError("DefaultApi", "servicesLoaderJobIdTasksTaskIdResultsRenditionsGet", "jobId");
        }


        // verify required parameter 'taskId' is not null or undefined
        if (taskId === null || taskId === undefined) {
            throw new RequiredError("DefaultApi", "servicesLoaderJobIdTasksTaskIdResultsRenditionsGet", "taskId");
        }





        // Path Params
        const localVarPath = '/services/loader/{job_id}/tasks/{task_id}/results/renditions'
            .replace('{' + 'job_id' + '}', encodeURIComponent(String(jobId)))
            .replace('{' + 'task_id' + '}', encodeURIComponent(String(taskId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Load Success Log Results
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesLoaderJobIdTasksTaskIdSuccesslogGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'jobId' is not null or undefined
        if (jobId === null || jobId === undefined) {
            throw new RequiredError("DefaultApi", "servicesLoaderJobIdTasksTaskIdSuccesslogGet", "jobId");
        }


        // verify required parameter 'taskId' is not null or undefined
        if (taskId === null || taskId === undefined) {
            throw new RequiredError("DefaultApi", "servicesLoaderJobIdTasksTaskIdSuccesslogGet", "taskId");
        }





        // Path Params
        const localVarPath = '/services/loader/{job_id}/tasks/{task_id}/successlog'
            .replace('{' + 'job_id' + '}', encodeURIComponent(String(jobId)))
            .replace('{' + 'task_id' + '}', encodeURIComponent(String(taskId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Load Data Objects
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesLoaderLoadPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/services/loader/load';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Validate Package
     * @param authorization 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesPackageActionsValidatePost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/services/package/actions/validate';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Export Package
     * @param authorization 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesPackagePost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/services/package';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Import Package
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesPackagePut(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/services/package';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve All Queues
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesQueuesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/services/queues';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Disable Delivery
     * @param queueName The name of a specific Queue.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesQueuesQueueNameActionsDisableDeliveryPut(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'queueName' is not null or undefined
        if (queueName === null || queueName === undefined) {
            throw new RequiredError("DefaultApi", "servicesQueuesQueueNameActionsDisableDeliveryPut", "queueName");
        }





        // Path Params
        const localVarPath = '/services/queues/{queue_name}/actions/disable_delivery'
            .replace('{' + 'queue_name' + '}', encodeURIComponent(String(queueName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Enable Delivery
     * @param queueName The name of a specific Queue.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesQueuesQueueNameActionsEnableDeliveryPut(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'queueName' is not null or undefined
        if (queueName === null || queueName === undefined) {
            throw new RequiredError("DefaultApi", "servicesQueuesQueueNameActionsEnableDeliveryPut", "queueName");
        }





        // Path Params
        const localVarPath = '/services/queues/{queue_name}/actions/enable_delivery'
            .replace('{' + 'queue_name' + '}', encodeURIComponent(String(queueName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Reset Queue
     * @param queueName The name of a specific Queue.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesQueuesQueueNameActionsResetPut(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'queueName' is not null or undefined
        if (queueName === null || queueName === undefined) {
            throw new RequiredError("DefaultApi", "servicesQueuesQueueNameActionsResetPut", "queueName");
        }





        // Path Params
        const localVarPath = '/services/queues/{queue_name}/actions/reset'
            .replace('{' + 'queue_name' + '}', encodeURIComponent(String(queueName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Queue Status
     * @param queueName The name of a specific queue. For example, queue__c.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesQueuesQueueNameGet(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'queueName' is not null or undefined
        if (queueName === null || queueName === undefined) {
            throw new RequiredError("DefaultApi", "servicesQueuesQueueNameGet", "queueName");
        }





        // Path Params
        const localVarPath = '/services/queues/{queue_name}'
            .replace('{' + 'queue_name' + '}', encodeURIComponent(String(queueName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Validate Imported Package
     * @param packageId The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async servicesVobjectVaultPackageVPackageIdActionsValidatePost(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'packageId' is not null or undefined
        if (packageId === null || packageId === undefined) {
            throw new RequiredError("DefaultApi", "servicesVobjectVaultPackageVPackageIdActionsValidatePost", "packageId");
        }





        // Path Params
        const localVarPath = '/services/vobject/vault_package__v/{package_id}/actions/validate'
            .replace('{' + 'package_id' + '}', encodeURIComponent(String(packageId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * End Session
     * @param accept 
     * @param authorization The Vault sessionId to end.
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async sessionDelete(accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/session';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Download Single Client Code Distribution
     * @param distributionName The name attribute of the client code distribution to download.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async uicodeDistributionsDistributionNameCodeGet(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'distributionName' is not null or undefined
        if (distributionName === null || distributionName === undefined) {
            throw new RequiredError("DefaultApi", "uicodeDistributionsDistributionNameCodeGet", "distributionName");
        }





        // Path Params
        const localVarPath = '/uicode/distributions/{distribution_name}/code'
            .replace('{' + 'distribution_name' + '}', encodeURIComponent(String(distributionName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Single Client Code Distribution
     * @param distributionName The name attribute of the client code distribution to delete.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async uicodeDistributionsDistributionNameDelete(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'distributionName' is not null or undefined
        if (distributionName === null || distributionName === undefined) {
            throw new RequiredError("DefaultApi", "uicodeDistributionsDistributionNameDelete", "distributionName");
        }





        // Path Params
        const localVarPath = '/uicode/distributions/{distribution_name}'
            .replace('{' + 'distribution_name' + '}', encodeURIComponent(String(distributionName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Single Client Code Distribution Metadata
     * @param distributionName The name attribute of the client code distribution to delete.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async uicodeDistributionsDistributionNameGet(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'distributionName' is not null or undefined
        if (distributionName === null || distributionName === undefined) {
            throw new RequiredError("DefaultApi", "uicodeDistributionsDistributionNameGet", "distributionName");
        }





        // Path Params
        const localVarPath = '/uicode/distributions/{distribution_name}'
            .replace('{' + 'distribution_name' + '}', encodeURIComponent(String(distributionName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve All Client Code Distribution Metadata
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async uicodeDistributionsGet(accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;




        // Path Params
        const localVarPath = '/uicode/distributions';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Add or Replace Single Client Code Distribution
     * @param accept 
     * @param authorization 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async uicodeDistributionsPost(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/uicode/distributions';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Deploy Package
     * @param packageId The id field value of the vault_package__v object record used for deployment. See Import Package.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectVaultPackageVPackageIdActionsDeployPost(packageId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'packageId' is not null or undefined
        if (packageId === null || packageId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectVaultPackageVPackageIdActionsDeployPost", "packageId");
        }






        // Path Params
        const localVarPath = '/vobject/vault_package__v/{package_id}/actions/deploy'
            .replace('{' + 'package_id' + '}', encodeURIComponent(String(packageId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Package Deploy Results
     * @param packageId The id field value of the vault_package__v object record used for deployment. See Deploy Package.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectVaultPackageVPackageIdActionsDeployResultsGet(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'packageId' is not null or undefined
        if (packageId === null || packageId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectVaultPackageVPackageIdActionsDeployResultsGet", "packageId");
        }





        // Path Params
        const localVarPath = '/vobject/vault_package__v/{package_id}/actions/deploy/results'
            .replace('{' + 'package_id' + '}', encodeURIComponent(String(packageId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Results of Cascade Delete Job
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param jobStatus 
     * @param jobId 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(objectName: string, jobStatus: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet", "objectName");
        }


        // verify required parameter 'jobStatus' is not null or undefined
        if (jobStatus === null || jobStatus === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet", "jobStatus");
        }


        // verify required parameter 'jobId' is not null or undefined
        if (jobId === null || jobId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet", "jobId");
        }





        // Path Params
        const localVarPath = '/vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'job_status' + '}', encodeURIComponent(String(jobStatus)))
            .replace('{' + 'job_id' + '}', encodeURIComponent(String(jobId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Results of Deep Copy Job
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param jobStatus The ID of the job, retrieved from the response of the job request.
     * @param jobId Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(objectName: string, jobStatus: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet", "objectName");
        }


        // verify required parameter 'jobStatus' is not null or undefined
        if (jobStatus === null || jobStatus === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet", "jobStatus");
        }


        // verify required parameter 'jobId' is not null or undefined
        if (jobId === null || jobId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet", "jobId");
        }





        // Path Params
        const localVarPath = '/vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'job_status' + '}', encodeURIComponent(String(jobStatus)))
            .replace('{' + 'job_id' + '}', encodeURIComponent(String(jobId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create a Placeholder from an EDL Item
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsEdlItemVActionsCreateplaceholderPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;





        // Path Params
        const localVarPath = '/vobjects/edl_item__v/actions/createplaceholder';

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Download Merge Records Job Log
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsMergesJobIdLogGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'jobId' is not null or undefined
        if (jobId === null || jobId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsMergesJobIdLogGet", "jobId");
        }





        // Path Params
        const localVarPath = '/vobjects/merges/{job_id}/log'
            .replace('{' + 'job_id' + '}', encodeURIComponent(String(jobId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Record Merge Results
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsMergesJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'jobId' is not null or undefined
        if (jobId === null || jobId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsMergesJobIdResultsGet", "jobId");
        }





        // Path Params
        const localVarPath = '/vobjects/merges/{job_id}/results'
            .replace('{' + 'job_id' + '}', encodeURIComponent(String(jobId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Record Merge Status
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsMergesJobIdStatusGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'jobId' is not null or undefined
        if (jobId === null || jobId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsMergesJobIdStatusGet", "jobId");
        }





        // Path Params
        const localVarPath = '/vobjects/merges/{job_id}/status'
            .replace('{' + 'job_id' + '}', encodeURIComponent(String(jobId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Initiate Object Action on Multiple Records
     * @param objectName The object name__v field value.
     * @param actionName Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameActionsActionNamePost(objectName: string, actionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameActionsActionNamePost", "objectName");
        }


        // verify required parameter 'actionName' is not null or undefined
        if (actionName === null || actionName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameActionsActionNamePost", "actionName");
        }






        // Path Params
        const localVarPath = '/vobjects/{object_name}/actions/{action_name}'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'action_name' + '}', encodeURIComponent(String(actionName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Change Object Type
     * @param objectName The name of the object.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameActionsChangetypePost(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameActionsChangetypePost", "objectName");
        }






        // Path Params
        const localVarPath = '/vobjects/{object_name}/actions/changetype'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Initiate Record Merge
     * @param objectName The object name__v field value. For example, account__v. This object must have Enable Merges configured.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param vobjectsObjectNameActionsMergePostRequestInner 
     */
    public async vobjectsObjectNameActionsMergePost(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, vobjectsObjectNameActionsMergePostRequestInner?: Array<VobjectsObjectNameActionsMergePostRequestInner>, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameActionsMergePost", "objectName");
        }







        // Path Params
        const localVarPath = '/vobjects/{object_name}/actions/merge'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        // Body Params
        const contentType = ObjectSerializer.getPreferredMediaType([
            "application/json"
        ]);
        requestContext.setHeaderParam("Content-Type", contentType);
        const serializedBody = ObjectSerializer.stringify(
            ObjectSerializer.serialize(vobjectsObjectNameActionsMergePostRequestInner, "Array<VobjectsObjectNameActionsMergePostRequestInner>", ""),
            contentType
        );
        requestContext.setBody(serializedBody);

        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Roll-up Field Recalculation Status
     * @param objectName The name of the object for which to check the status of a Roll-up field recalculation.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameActionsRecalculaterollupsGet(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameActionsRecalculaterollupsGet", "objectName");
        }





        // Path Params
        const localVarPath = '/vobjects/{object_name}/actions/recalculaterollups'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Recalculate Roll-up Fields
     * @param objectName The name of the object for which to check the status of a Roll-up field recalculation.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameActionsRecalculaterollupsPost(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameActionsRecalculaterollupsPost", "objectName");
        }





        // Path Params
        const localVarPath = '/vobjects/{object_name}/actions/recalculaterollups'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Corporate Currency Fields
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameActionsUpdatecorporatecurrencyPut(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameActionsUpdatecorporatecurrencyPut", "objectName");
        }






        // Path Params
        const localVarPath = '/vobjects/{object_name}/actions/updatecorporatecurrency'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Multiple Object Record Attachments
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param idParam 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameAttachmentsBatchDelete(objectName: string, idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameAttachmentsBatchDelete", "objectName");
        }







        // Path Params
        const localVarPath = '/vobjects/{object_name}/attachments/batch'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (idParam !== undefined) {
            requestContext.setQueryParam("idParam", ObjectSerializer.serialize(idParam, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Multiple Object Record Attachments
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameAttachmentsBatchPost(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameAttachmentsBatchPost", "objectName");
        }






        // Path Params
        const localVarPath = '/vobjects/{object_name}/attachments/batch'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Multiple Object Record Attachment Descriptions
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameAttachmentsBatchPut(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameAttachmentsBatchPut", "objectName");
        }






        // Path Params
        const localVarPath = '/vobjects/{object_name}/attachments/batch'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Object Records
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization 
     * @param contentType Can be text/csv or application/json
     * @param accept Can be text/csv or application/json
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameDelete(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameDelete", "objectName");
        }






        // Path Params
        const localVarPath = '/vobjects/{object_name}'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Object Record Roles
     * @param objectName The object name.
     * @param id The id of the document, binder, or object record.
     * @param roleName Optional: Include a role name to filter for a specific role. For example, owner__v.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameIdRolesRoleNameGet(objectName: string, id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameIdRolesRoleNameGet", "objectName");
        }


        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameIdRolesRoleNameGet", "id");
        }


        // verify required parameter 'roleName' is not null or undefined
        if (roleName === null || roleName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameIdRolesRoleNameGet", "roleName");
        }





        // Path Params
        const localVarPath = '/vobjects/{object_name}/{id}/roles/{role_name}'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'role_name' + '}', encodeURIComponent(String(roleName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Object User Actions Details
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value from which to retrieve user actions.
     * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameObjectRecordIdActionsActionNameGet(objectName: string, objectRecordId: string, actionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdActionsActionNameGet", "objectName");
        }


        // verify required parameter 'objectRecordId' is not null or undefined
        if (objectRecordId === null || objectRecordId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdActionsActionNameGet", "objectRecordId");
        }


        // verify required parameter 'actionName' is not null or undefined
        if (actionName === null || actionName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdActionsActionNameGet", "actionName");
        }





        // Path Params
        const localVarPath = '/vobjects/{object_name}/{object_record_id}/actions/{action_name}'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'object_record_id' + '}', encodeURIComponent(String(objectRecordId)))
            .replace('{' + 'action_name' + '}', encodeURIComponent(String(actionName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Initiate Object Action on a Single Record
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value from which to retrieve user actions.
     * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameObjectRecordIdActionsActionNamePost(objectName: string, objectRecordId: string, actionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdActionsActionNamePost", "objectName");
        }


        // verify required parameter 'objectRecordId' is not null or undefined
        if (objectRecordId === null || objectRecordId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdActionsActionNamePost", "objectRecordId");
        }


        // verify required parameter 'actionName' is not null or undefined
        if (actionName === null || actionName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdActionsActionNamePost", "actionName");
        }






        // Path Params
        const localVarPath = '/vobjects/{object_name}/{object_record_id}/actions/{action_name}'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'object_record_id' + '}', encodeURIComponent(String(objectRecordId)))
            .replace('{' + 'action_name' + '}', encodeURIComponent(String(actionName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Cascade Delete Object Record
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdActionsCascadedeletePost", "objectName");
        }


        // verify required parameter 'objectRecordId' is not null or undefined
        if (objectRecordId === null || objectRecordId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdActionsCascadedeletePost", "objectRecordId");
        }





        // Path Params
        const localVarPath = '/vobjects/{object_name}/{object_record_id}/actions/cascadedelete'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'object_record_id' + '}', encodeURIComponent(String(objectRecordId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Deep Copy Object Record
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(objectName: string, objectRecordId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdActionsDeepcopyPost", "objectName");
        }


        // verify required parameter 'objectRecordId' is not null or undefined
        if (objectRecordId === null || objectRecordId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdActionsDeepcopyPost", "objectRecordId");
        }






        // Path Params
        const localVarPath = '/vobjects/{object_name}/{object_record_id}/actions/deepcopy'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'object_record_id' + '}', encodeURIComponent(String(objectRecordId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Object Record User Actions
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value.
     * @param loc Optional: When true, retrieves localized (translated) strings for the label. 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameObjectRecordIdActionsGet(objectName: string, objectRecordId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdActionsGet", "objectName");
        }


        // verify required parameter 'objectRecordId' is not null or undefined
        if (objectRecordId === null || objectRecordId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdActionsGet", "objectRecordId");
        }






        // Path Params
        const localVarPath = '/vobjects/{object_name}/{object_record_id}/actions'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'object_record_id' + '}', encodeURIComponent(String(objectRecordId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (loc !== undefined) {
            requestContext.setQueryParam("loc", ObjectSerializer.serialize(loc, "boolean", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Download Attachment Field File
     * @param objectName The object name__v field value. For example, product__v.
     * @param objectRecordId The object record id field value.
     * @param attachmentFieldName The name of the Attachment field to update.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(objectName: string, objectRecordId: string, attachmentFieldName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet", "objectName");
        }


        // verify required parameter 'objectRecordId' is not null or undefined
        if (objectRecordId === null || objectRecordId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet", "objectRecordId");
        }


        // verify required parameter 'attachmentFieldName' is not null or undefined
        if (attachmentFieldName === null || attachmentFieldName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet", "attachmentFieldName");
        }





        // Path Params
        const localVarPath = '/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'object_record_id' + '}', encodeURIComponent(String(objectRecordId)))
            .replace('{' + 'attachment_field_name' + '}', encodeURIComponent(String(attachmentFieldName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Attachment Field File
     * @param objectName The object name__v field value. For example, product__v.
     * @param objectRecordId The object record id field value.
     * @param attachmentFieldName The name of the Attachment field to update.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(objectName: string, objectRecordId: string, attachmentFieldName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost", "objectName");
        }


        // verify required parameter 'objectRecordId' is not null or undefined
        if (objectRecordId === null || objectRecordId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost", "objectRecordId");
        }


        // verify required parameter 'attachmentFieldName' is not null or undefined
        if (attachmentFieldName === null || attachmentFieldName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost", "attachmentFieldName");
        }





        // Path Params
        const localVarPath = '/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'object_record_id' + '}', encodeURIComponent(String(objectRecordId)))
            .replace('{' + 'attachment_field_name' + '}', encodeURIComponent(String(attachmentFieldName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Download All Attachment Field Files
     * @param objectName The object name__v field value. For example, product__v.
     * @param objectRecordId The object record id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet", "objectName");
        }


        // verify required parameter 'objectRecordId' is not null or undefined
        if (objectRecordId === null || objectRecordId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet", "objectRecordId");
        }





        // Path Params
        const localVarPath = '/vobjects/{object_name}/{object_record_id}/attachment_fields/file'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'object_record_id' + '}', encodeURIComponent(String(objectRecordId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Object Record Attachment
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete", "objectName");
        }


        // verify required parameter 'objectRecordId' is not null or undefined
        if (objectRecordId === null || objectRecordId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete", "objectRecordId");
        }


        // verify required parameter 'attachmentId' is not null or undefined
        if (attachmentId === null || attachmentId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete", "attachmentId");
        }






        // Path Params
        const localVarPath = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'object_record_id' + '}', encodeURIComponent(String(objectRecordId)))
            .replace('{' + 'attachment_id' + '}', encodeURIComponent(String(attachmentId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Object Record Attachment Metadata
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet", "objectName");
        }


        // verify required parameter 'objectRecordId' is not null or undefined
        if (objectRecordId === null || objectRecordId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet", "objectRecordId");
        }


        // verify required parameter 'attachmentId' is not null or undefined
        if (attachmentId === null || attachmentId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet", "attachmentId");
        }





        // Path Params
        const localVarPath = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'object_record_id' + '}', encodeURIComponent(String(objectRecordId)))
            .replace('{' + 'attachment_id' + '}', encodeURIComponent(String(attachmentId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Object Record Attachment Description
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut", "objectName");
        }


        // verify required parameter 'objectRecordId' is not null or undefined
        if (objectRecordId === null || objectRecordId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut", "objectRecordId");
        }


        // verify required parameter 'attachmentId' is not null or undefined
        if (attachmentId === null || attachmentId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut", "attachmentId");
        }






        // Path Params
        const localVarPath = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'object_record_id' + '}', encodeURIComponent(String(objectRecordId)))
            .replace('{' + 'attachment_id' + '}', encodeURIComponent(String(attachmentId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Delete Object Record Attachment Version
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete", "objectName");
        }


        // verify required parameter 'objectRecordId' is not null or undefined
        if (objectRecordId === null || objectRecordId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete", "objectRecordId");
        }


        // verify required parameter 'attachmentId' is not null or undefined
        if (attachmentId === null || attachmentId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete", "attachmentId");
        }


        // verify required parameter 'attachmentVersion' is not null or undefined
        if (attachmentVersion === null || attachmentVersion === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete", "attachmentVersion");
        }





        // Path Params
        const localVarPath = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'object_record_id' + '}', encodeURIComponent(String(objectRecordId)))
            .replace('{' + 'attachment_id' + '}', encodeURIComponent(String(attachmentId)))
            .replace('{' + 'attachment_version' + '}', encodeURIComponent(String(attachmentVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Download Object Record Attachment File
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet", "objectName");
        }


        // verify required parameter 'objectRecordId' is not null or undefined
        if (objectRecordId === null || objectRecordId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet", "objectRecordId");
        }


        // verify required parameter 'attachmentId' is not null or undefined
        if (attachmentId === null || attachmentId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet", "attachmentId");
        }


        // verify required parameter 'attachmentVersion' is not null or undefined
        if (attachmentVersion === null || attachmentVersion === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet", "attachmentVersion");
        }





        // Path Params
        const localVarPath = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'object_record_id' + '}', encodeURIComponent(String(objectRecordId)))
            .replace('{' + 'attachment_id' + '}', encodeURIComponent(String(attachmentId)))
            .replace('{' + 'attachment_version' + '}', encodeURIComponent(String(attachmentVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Object Record Attachment Version Metadata
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet", "objectName");
        }


        // verify required parameter 'objectRecordId' is not null or undefined
        if (objectRecordId === null || objectRecordId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet", "objectRecordId");
        }


        // verify required parameter 'attachmentId' is not null or undefined
        if (attachmentId === null || attachmentId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet", "attachmentId");
        }


        // verify required parameter 'attachmentVersion' is not null or undefined
        if (attachmentVersion === null || attachmentVersion === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet", "attachmentVersion");
        }





        // Path Params
        const localVarPath = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'object_record_id' + '}', encodeURIComponent(String(objectRecordId)))
            .replace('{' + 'attachment_id' + '}', encodeURIComponent(String(attachmentId)))
            .replace('{' + 'attachment_version' + '}', encodeURIComponent(String(attachmentVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Restore Object Record Attachment Version
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param restore 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, restore?: boolean, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost", "objectName");
        }


        // verify required parameter 'objectRecordId' is not null or undefined
        if (objectRecordId === null || objectRecordId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost", "objectRecordId");
        }


        // verify required parameter 'attachmentId' is not null or undefined
        if (attachmentId === null || attachmentId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost", "attachmentId");
        }


        // verify required parameter 'attachmentVersion' is not null or undefined
        if (attachmentVersion === null || attachmentVersion === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost", "attachmentVersion");
        }







        // Path Params
        const localVarPath = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'object_record_id' + '}', encodeURIComponent(String(objectRecordId)))
            .replace('{' + 'attachment_id' + '}', encodeURIComponent(String(attachmentId)))
            .replace('{' + 'attachment_version' + '}', encodeURIComponent(String(attachmentVersion)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (restore !== undefined) {
            requestContext.setQueryParam("restore", ObjectSerializer.serialize(restore, "boolean", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Object Record Attachment Versions
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet", "objectName");
        }


        // verify required parameter 'objectRecordId' is not null or undefined
        if (objectRecordId === null || objectRecordId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet", "objectRecordId");
        }


        // verify required parameter 'attachmentId' is not null or undefined
        if (attachmentId === null || attachmentId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet", "attachmentId");
        }





        // Path Params
        const localVarPath = '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'object_record_id' + '}', encodeURIComponent(String(objectRecordId)))
            .replace('{' + 'attachment_id' + '}', encodeURIComponent(String(attachmentId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Download All Object Record Attachment Files
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameObjectRecordIdAttachmentsFileGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsFileGet", "objectName");
        }


        // verify required parameter 'objectRecordId' is not null or undefined
        if (objectRecordId === null || objectRecordId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsFileGet", "objectRecordId");
        }





        // Path Params
        const localVarPath = '/vobjects/{object_name}/{object_record_id}/attachments/file'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'object_record_id' + '}', encodeURIComponent(String(objectRecordId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Object Record Attachments
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameObjectRecordIdAttachmentsGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsGet", "objectName");
        }


        // verify required parameter 'objectRecordId' is not null or undefined
        if (objectRecordId === null || objectRecordId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsGet", "objectRecordId");
        }





        // Path Params
        const localVarPath = '/vobjects/{object_name}/{object_record_id}/attachments'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'object_record_id' + '}', encodeURIComponent(String(objectRecordId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create Object Record Attachment
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameObjectRecordIdAttachmentsPost(objectName: string, objectRecordId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsPost", "objectName");
        }


        // verify required parameter 'objectRecordId' is not null or undefined
        if (objectRecordId === null || objectRecordId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAttachmentsPost", "objectRecordId");
        }






        // Path Params
        const localVarPath = '/vobjects/{object_name}/{object_record_id}/attachments'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'object_record_id' + '}', encodeURIComponent(String(objectRecordId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Complete Audit History for a Single Object Record
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value from which to retrieve user actions.
     * @param startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. 
     * @param endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
     * @param formatResult To request a CSV file of your audit history, use csv. 
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
     * @param events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;Copy,Edit,Delete. If omitted, defaults to all audit events.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameObjectRecordIdAudittrailGet(objectName: string, objectRecordId: string, startDate?: string, endDate?: string, formatResult?: string, limit?: string, offset?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAudittrailGet", "objectName");
        }


        // verify required parameter 'objectRecordId' is not null or undefined
        if (objectRecordId === null || objectRecordId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdAudittrailGet", "objectRecordId");
        }











        // Path Params
        const localVarPath = '/vobjects/{object_name}/{object_record_id}/audittrail'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'object_record_id' + '}', encodeURIComponent(String(objectRecordId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (startDate !== undefined) {
            requestContext.setQueryParam("start_date", ObjectSerializer.serialize(startDate, "string", ""));
        }

        // Query Params
        if (endDate !== undefined) {
            requestContext.setQueryParam("end_date", ObjectSerializer.serialize(endDate, "string", ""));
        }

        // Query Params
        if (formatResult !== undefined) {
            requestContext.setQueryParam("format_result", ObjectSerializer.serialize(formatResult, "string", ""));
        }

        // Query Params
        if (limit !== undefined) {
            requestContext.setQueryParam("limit", ObjectSerializer.serialize(limit, "string", ""));
        }

        // Query Params
        if (offset !== undefined) {
            requestContext.setQueryParam("offset", ObjectSerializer.serialize(offset, "string", ""));
        }

        // Query Params
        if (events !== undefined) {
            requestContext.setQueryParam("events", ObjectSerializer.serialize(events, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Object Record
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameObjectRecordIdGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdGet", "objectName");
        }


        // verify required parameter 'objectRecordId' is not null or undefined
        if (objectRecordId === null || objectRecordId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameObjectRecordIdGet", "objectRecordId");
        }





        // Path Params
        const localVarPath = '/vobjects/{object_name}/{object_record_id}'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)))
            .replace('{' + 'object_record_id' + '}', encodeURIComponent(String(objectRecordId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Create & Upsert Object Records
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param idParam To upsert object records, add &#x60;idParam&#x3D;{field_name}&#x60; to the request endpoint. You can use any object field which has &#x60;unique&#x60; set to &#x60;true&#x60; in the object metadata. For example, &#x60;idParam&#x3D;external_id__v&#x60;.
     * @param authorization 
     * @param contentType Can be text/csv or application/json
     * @param accept Can be text/csv or application/json
     * @param xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
     * @param xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNamePost(objectName: string, idParam?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPINoTriggers?: boolean, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNamePost", "objectName");
        }









        // Path Params
        const localVarPath = '/vobjects/{object_name}'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Query Params
        if (idParam !== undefined) {
            requestContext.setQueryParam("idParam", ObjectSerializer.serialize(idParam, "string", ""));
        }

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-MigrationMode", ObjectSerializer.serialize(xVaultAPIMigrationMode, "boolean", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-NoTriggers", ObjectSerializer.serialize(xVaultAPINoTriggers, "boolean", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Update Object Records
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization 
     * @param contentType Can be text/csv or application/json
     * @param accept Can be text/csv or application/json
     * @param xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
     * @param xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNamePut(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPINoTriggers?: boolean, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNamePut", "objectName");
        }








        // Path Params
        const localVarPath = '/vobjects/{object_name}'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-MigrationMode", ObjectSerializer.serialize(xVaultAPIMigrationMode, "boolean", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-NoTriggers", ObjectSerializer.serialize(xVaultAPINoTriggers, "boolean", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Remove Users & Groups from Roles on Object Records
     * @param objectName The name of the object where you want to remove roles.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameRolesDelete(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameRolesDelete", "objectName");
        }






        // Path Params
        const localVarPath = '/vobjects/{object_name}/roles'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Assign Users & Groups to Roles on Object Records
     * @param objectName The name of the object where you want to remove roles.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsObjectNameRolesPost(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'objectName' is not null or undefined
        if (objectName === null || objectName === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsObjectNameRolesPost", "objectName");
        }






        // Path Params
        const localVarPath = '/vobjects/{object_name}/roles'
            .replace('{' + 'object_name' + '}', encodeURIComponent(String(objectName)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Content-Type", ObjectSerializer.serialize(contentType, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

    /**
     * Retrieve Outbound Package Dependencies
     * @param packageId The ID of the outbound_package__v record from which to retrieve dependencies.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public async vobjectsOutboundPackageVPackageIdDependenciesGet(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: Configuration): Promise<RequestContext> {
        let _config = _options || this.configuration;

        // verify required parameter 'packageId' is not null or undefined
        if (packageId === null || packageId === undefined) {
            throw new RequiredError("DefaultApi", "vobjectsOutboundPackageVPackageIdDependenciesGet", "packageId");
        }





        // Path Params
        const localVarPath = '/vobjects/outbound_package__v/{package_id}/dependencies'
            .replace('{' + 'package_id' + '}', encodeURIComponent(String(packageId)));

        // Make Request Context
        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);
        requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8")

        // Header Params
        requestContext.setHeaderParam("Authorization", ObjectSerializer.serialize(authorization, "string", ""));

        // Header Params
        requestContext.setHeaderParam("Accept", ObjectSerializer.serialize(accept, "string", ""));

        // Header Params
        requestContext.setHeaderParam("X-VaultAPI-ClientID", ObjectSerializer.serialize(xVaultAPIClientID, "string", ""));


        
        const defaultAuth: SecurityAuthentication | undefined = _config?.authMethods?.default
        if (defaultAuth?.applySecurityAuthentication) {
            await defaultAuth?.applySecurityAuthentication(requestContext);
        }

        return requestContext;
    }

}

export class DefaultApiResponseProcessor {

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to apiGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async apiGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to apiMdlComponentsComponentTypeAndRecordNameFilesGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async apiMdlComponentsComponentTypeAndRecordNameFilesGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to apiMdlComponentsComponentTypeAndRecordNameGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async apiMdlComponentsComponentTypeAndRecordNameGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to apiMdlExecuteAsyncJobIdResultsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async apiMdlExecuteAsyncJobIdResultsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to apiMdlExecuteAsyncPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async apiMdlExecuteAsyncPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to apiMdlExecutePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async apiMdlExecutePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to apiMdlFilesPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async apiMdlFilesPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to audittrailAuditTrailTypeGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async audittrailAuditTrailTypeGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to authDiscoveryPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async authDiscoveryPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to authOauthSessionOathOidcProfileIdPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async authOauthSessionOathOidcProfileIdPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to authPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async authPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to codeClassNameDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async codeClassNameDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to codeClassNameDisablePut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async codeClassNameDisablePutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to codeClassNameEnablePut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async codeClassNameEnablePutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to codeClassNameGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async codeClassNameGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to codeProfilerGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async codeProfilerGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to codeProfilerPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async codeProfilerPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to codeProfilerSessionNameActionsEndPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async codeProfilerSessionNameActionsEndPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to codeProfilerSessionNameDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async codeProfilerSessionNameDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to codeProfilerSessionNameGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async codeProfilerSessionNameGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to codeProfilerSessionNameResultsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async codeProfilerSessionNameResultsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to codePut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async codePutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to compositesTreesEdlHierarchyOrTemplateActionsListnodesPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async compositesTreesEdlHierarchyOrTemplateActionsListnodesPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to compositesTreesEdlHierarchyOrTemplateGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async compositesTreesEdlHierarchyOrTemplateGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to compositesTreesEdlHierarchyVParentNodeIdChildrenGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async compositesTreesEdlHierarchyVParentNodeIdChildrenGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to compositesTreesEdlHierarchyVParentNodeIdChildrenPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async compositesTreesEdlHierarchyVParentNodeIdChildrenPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to configurationComponentTypeAndRecordNameGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async configurationComponentTypeAndRecordNameGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to configurationComponentTypeGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async configurationComponentTypeGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to configurationObjectNameAndObjectTypeGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async configurationObjectNameAndObjectTypeGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to configurationObjecttypeGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async configurationObjecttypeGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to configurationRoleAssignmentRuleDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async configurationRoleAssignmentRuleDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to configurationRoleAssignmentRuleGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async configurationRoleAssignmentRuleGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to configurationRoleAssignmentRulePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async configurationRoleAssignmentRulePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to configurationRoleAssignmentRulePut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async configurationRoleAssignmentRulePutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to delegationLoginPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async delegationLoginPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to delegationVaultsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async delegationVaultsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to keepAlivePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async keepAlivePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to limitsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async limitsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to logsApiUsageGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async logsApiUsageGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to logsCodeDebugGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async logsCodeDebugGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to logsCodeDebugIdActionsResetDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async logsCodeDebugIdActionsResetDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to logsCodeDebugIdActionsResetPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async logsCodeDebugIdActionsResetPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to logsCodeDebugIdFilesGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async logsCodeDebugIdFilesGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to logsCodeDebugIdGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async logsCodeDebugIdGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to logsCodeDebugPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async logsCodeDebugPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to logsCodeRuntimeGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async logsCodeRuntimeGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to messagesMessageTypeActionsImportPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async messagesMessageTypeActionsImportPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to messagesMessageTypeLanguageLangActionsExportPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async messagesMessageTypeLanguageLangActionsExportPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataAudittrailAuditTrailTypeGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataAudittrailAuditTrailTypeGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataAudittrailGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataAudittrailGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataComponentsComponentTypeGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataComponentsComponentTypeGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataComponentsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataComponentsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataObjectsBindersTemplatesBindernodesGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataObjectsBindersTemplatesBindernodesGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataObjectsBindersTemplatesGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataObjectsBindersTemplatesGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataObjectsDocumentsEventsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataObjectsDocumentsEventsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataObjectsDocumentsLockGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataObjectsDocumentsLockGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataObjectsDocumentsPropertiesFindCommonPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataObjectsDocumentsPropertiesFindCommonPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataObjectsDocumentsPropertiesGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataObjectsDocumentsPropertiesGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataObjectsDocumentsTemplatesGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataObjectsDocumentsTemplatesGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataObjectsDocumentsTypesGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataObjectsDocumentsTypesGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataObjectsDocumentsTypesTypeGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataObjectsDocumentsTypesTypeGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataObjectsDocumentsTypesTypeRelationshipsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataObjectsDocumentsTypesTypeRelationshipsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataObjectsGroupsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataObjectsGroupsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataObjectsSecuritypoliciesGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataObjectsSecuritypoliciesGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataObjectsUsersGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataObjectsUsersGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataVobjectsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataVobjectsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataVobjectsObjectNameActionsCanceldeploymentPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataVobjectsObjectNameActionsCanceldeploymentPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataVobjectsObjectNameFieldsObjectFieldNameGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataVobjectsObjectNameFieldsObjectFieldNameGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataVobjectsObjectNameGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataVobjectsObjectNameGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataVobjectsObjectNamePageLayoutsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataVobjectsObjectNamePageLayoutsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to metadataVobjectsObjectNamePageLayoutsLayoutNameGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async metadataVobjectsObjectNamePageLayoutsLayoutNameGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to notificationsHistoriesGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async notificationsHistoriesGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectWorkflowActionsActionGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectWorkflowActionsActionGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectWorkflowActionsActionPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectWorkflowActionsActionPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectWorkflowActionsCanceltasksPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectWorkflowActionsCanceltasksPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectWorkflowActionsCancelworkflowsPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectWorkflowActionsCancelworkflowsPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectWorkflowActionsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectWorkflowActionsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectWorkflowActionsReassigntasksPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectWorkflowActionsReassigntasksPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectWorkflowActionsReplaceworkflowownerPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectWorkflowActionsReplaceworkflowownerPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersActionsExportJobIdResultsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersActionsExportJobIdResultsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersBinderIdActionsExportPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersBinderIdActionsExportPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersBinderIdActionsPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersBinderIdActionsPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersBinderIdBindingRulePut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersBinderIdBindingRulePutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersBinderIdDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersBinderIdDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersBinderIdDocumentsNodeIdBindingRulePut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersBinderIdDocumentsNodeIdBindingRulePutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersBinderIdDocumentsPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersBinderIdDocumentsPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersBinderIdDocumentsSectionIdDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersBinderIdDocumentsSectionIdDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersBinderIdDocumentsSectionIdPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersBinderIdDocumentsSectionIdPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersBinderIdGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersBinderIdGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersBinderIdPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersBinderIdPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersBinderIdPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersBinderIdPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersBinderIdSectionsNodeIdBindingRulePut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersBinderIdSectionsNodeIdBindingRulePutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersBinderIdSectionsNodeIdPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersBinderIdSectionsNodeIdPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersBinderIdSectionsPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersBinderIdSectionsPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersBinderIdSectionsSectionIdDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersBinderIdSectionsSectionIdDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersBinderIdSectionsSectionIdGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersBinderIdSectionsSectionIdGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersBinderIdVersionsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersBinderIdVersionsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersBinderIdVersionsMajorVersionMinorVersionGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersBinderIdVersionsMajorVersionMinorVersionGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersBinderIdVersionsMajorVersionMinorVersionPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersBinderIdVersionsMajorVersionMinorVersionPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersIdRolesGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersIdRolesGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersIdRolesPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersIdRolesPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersIdRolesRoleNameGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersIdRolesRoleNameGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersLifecycleActionsPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersLifecycleActionsPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersLifecycleActionsUserActionNamePut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersLifecycleActionsUserActionNamePutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersTemplatesGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersTemplatesGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersTemplatesPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersTemplatesPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersTemplatesPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersTemplatesPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersTemplatesTemplateNameBindernodesGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersTemplatesTemplateNameBindernodesGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersTemplatesTemplateNameBindernodesPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersTemplatesTemplateNameBindernodesPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersTemplatesTemplateNameBindernodesPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersTemplatesTemplateNameBindernodesPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersTemplatesTemplateNameDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersTemplatesTemplateNameDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsBindersTemplatesTemplateNameGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsBindersTemplatesTemplateNameGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDeletionsDocumentsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDeletionsDocumentsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDeletionsVobjectsObjectNameGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDeletionsVobjectsObjectNameGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsActionsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsActionsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsActionsWorkflowNameGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsActionsWorkflowNameGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsActionsWorkflowNamePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsActionsWorkflowNamePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsAnnotationsBatchDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsAnnotationsBatchDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsAnnotationsBatchPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsAnnotationsBatchPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsAnnotationsBatchPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsAnnotationsBatchPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsAnnotationsRepliesBatchPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsAnnotationsRepliesBatchPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsAttachmentsBatchDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsAttachmentsBatchDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsAttachmentsBatchPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsAttachmentsBatchPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsAttachmentsBatchPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsAttachmentsBatchPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsBatchActionsFileextractJobIdResultsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsBatchActionsFileextractJobIdResultsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsBatchActionsFileextractPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsBatchActionsFileextractPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsBatchActionsReclassifyPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsBatchActionsReclassifyPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsBatchActionsRerenderPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsBatchActionsRerenderPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsBatchDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsBatchDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsBatchLockDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsBatchLockDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsBatchPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsBatchPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsBatchPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsBatchPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdAnchorsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdAnchorsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdAnnotationsFileGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdAnnotationsFileGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdAnnotationsFilePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdAnnotationsFilePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdAttachmentsAttachmentIdDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdAttachmentsAttachmentIdDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdAttachmentsAttachmentIdFileGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdAttachmentsAttachmentIdFileGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdAttachmentsAttachmentIdGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdAttachmentsAttachmentIdGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdAttachmentsAttachmentIdPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdAttachmentsAttachmentIdPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdAttachmentsFileGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdAttachmentsFileGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdAttachmentsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdAttachmentsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdAttachmentsPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdAttachmentsPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdAudittrailGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdAudittrailGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdEventsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdEventsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdFileGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdFileGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdLockDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdLockDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdLockGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdLockGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdLockPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdLockPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdRenditionsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdRenditionsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdRenditionsRenditionTypeDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdRenditionsRenditionTypeDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdRenditionsRenditionTypeGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdRenditionsRenditionTypeGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdRenditionsRenditionTypePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdRenditionsRenditionTypePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdRenditionsRenditionTypePut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdRenditionsRenditionTypePutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdVersionsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdVersionsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsIdRolesGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsIdRolesGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsIdRolesPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsIdRolesPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsIdRolesRoleNameGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsIdRolesRoleNameGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsLifecycleActionsPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsLifecycleActionsPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsLifecycleActionsUserActionNamePut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsLifecycleActionsUserActionNamePutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsRelationshipsBatchDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsRelationshipsBatchDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsRelationshipsBatchPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsRelationshipsBatchPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsRenditionsBatchDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsRenditionsBatchDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsRenditionsBatchPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsRenditionsBatchPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsRolesBatchDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsRolesBatchDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsRolesBatchPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsRolesBatchPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsTemplatesGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsTemplatesGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsTemplatesPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsTemplatesPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsTemplatesPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsTemplatesPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsTemplatesTemplateNameDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsTemplatesTemplateNameDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsTemplatesTemplateNameFileGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsTemplatesTemplateNameFileGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsTemplatesTemplateNameGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsTemplatesTemplateNameGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsTemplatesTemplateNamePut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsTemplatesTemplateNamePutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsTokensPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsTokensPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsVersionsBatchActionsFileextractPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsVersionsBatchActionsFileextractPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsVersionsBatchDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsVersionsBatchDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDocumentsVersionsBatchPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDocumentsVersionsBatchPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDomainGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDomainGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsDomainsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsDomainsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsEdlMatchedDocumentsBatchActionsAddPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsEdlMatchedDocumentsBatchActionsAddPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsEdlMatchedDocumentsBatchActionsRemovePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsEdlMatchedDocumentsBatchActionsRemovePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsGroupsAutoGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsGroupsAutoGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsGroupsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsGroupsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsGroupsGroupIdDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsGroupsGroupIdDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsGroupsGroupIdGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsGroupsGroupIdGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsGroupsGroupIdPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsGroupsGroupIdPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsGroupsPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsGroupsPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsLicensesGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsLicensesGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsObjectworkflowsActionsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsObjectworkflowsActionsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsObjectworkflowsActionsWorkflowNameGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsObjectworkflowsActionsWorkflowNameGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsObjectworkflowsActionsWorkflowNamePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsObjectworkflowsActionsWorkflowNamePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsObjectworkflowsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsObjectworkflowsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsObjectworkflowsTasksGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsObjectworkflowsTasksGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsObjectworkflowsTasksTaskIdActionsAcceptPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsObjectworkflowsTasksTaskIdActionsAcceptPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsObjectworkflowsTasksTaskIdActionsCancelPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsObjectworkflowsTasksTaskIdActionsCancelPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsObjectworkflowsTasksTaskIdActionsCompletePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsObjectworkflowsTasksTaskIdActionsCompletePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsObjectworkflowsTasksTaskIdActionsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsObjectworkflowsTasksTaskIdActionsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsObjectworkflowsTasksTaskIdActionsReassignPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsObjectworkflowsTasksTaskIdActionsReassignPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsObjectworkflowsTasksTaskIdActionsTaskActionGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsObjectworkflowsTasksTaskIdActionsTaskActionGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsObjectworkflowsTasksTaskIdGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsObjectworkflowsTasksTaskIdGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsObjectworkflowsWorkflowIdActionsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsObjectworkflowsWorkflowIdActionsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsObjectworkflowsWorkflowIdGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsObjectworkflowsWorkflowIdGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsPicklistsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsPicklistsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsPicklistsPicklistNameGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsPicklistsPicklistNameGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsPicklistsPicklistNamePicklistValueNameDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsPicklistsPicklistNamePicklistValueNameDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsPicklistsPicklistNamePicklistValueNamePut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsPicklistsPicklistNamePicklistValueNamePutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsPicklistsPicklistNamePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsPicklistsPicklistNamePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsPicklistsPicklistNamePut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsPicklistsPicklistNamePutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsSandboxActionsBuildproductionPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsSandboxActionsBuildproductionPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsSandboxActionsPromoteproductionPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsSandboxActionsPromoteproductionPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsSandboxActionsRecheckusagePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsSandboxActionsRecheckusagePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsSandboxBatchChangesizePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsSandboxBatchChangesizePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsSandboxEntitlementsSetPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsSandboxEntitlementsSetPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsSandboxGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsSandboxGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsSandboxNameDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsSandboxNameDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsSandboxPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsSandboxPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsSandboxSnapshotApiNameActionsUpdatePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsSandboxSnapshotApiNameActionsUpdatePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsSandboxSnapshotApiNameActionsUpgradePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsSandboxSnapshotApiNameActionsUpgradePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsSandboxSnapshotApiNameDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsSandboxSnapshotApiNameDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsSandboxSnapshotGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsSandboxSnapshotGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsSandboxSnapshotPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsSandboxSnapshotPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsSandboxVaultIdActionsRefreshPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsSandboxVaultIdActionsRefreshPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsSandboxVaultIdGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsSandboxVaultIdGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsSecuritypoliciesGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsSecuritypoliciesGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsSecuritypoliciesSecurityPolicyNameGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsSecuritypoliciesSecurityPolicyNameGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsUsersGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsUsersGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsUsersIdGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsUsersIdGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsUsersIdPermissionsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsUsersIdPermissionsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsUsersIdPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsUsersIdPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsUsersMeGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsUsersMeGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsUsersMePasswordPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsUsersMePasswordPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsUsersMePermissionsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsUsersMePermissionsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsUsersMePut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsUsersMePutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsUsersPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsUsersPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsUsersPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsUsersPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsUsersUserIdDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsUsersUserIdDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsUsersUserIdVaultMembershipVaultIdPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsUsersUserIdVaultMembershipVaultIdPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsVaultActionsComparePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsVaultActionsComparePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to objectsVaultActionsConfigreportPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async objectsVaultActionsConfigreportPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to queryComponentsPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async queryComponentsPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to queryNextPagePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async queryNextPagePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to queryPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async queryPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to queryPreviousPagePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async queryPreviousPagePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to scimV2MeGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async scimV2MeGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to scimV2MePut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async scimV2MePutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to scimV2ResourceTypesGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async scimV2ResourceTypesGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to scimV2ResourceTypesTypeGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async scimV2ResourceTypesTypeGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to scimV2SchemasGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async scimV2SchemasGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to scimV2SchemasIdGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async scimV2SchemasIdGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to scimV2ServiceProviderConfigGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async scimV2ServiceProviderConfigGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to scimV2TypeGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async scimV2TypeGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to scimV2TypeIdGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async scimV2TypeIdGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to scimV2UsersGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async scimV2UsersGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to scimV2UsersIdGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async scimV2UsersIdGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to scimV2UsersIdPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async scimV2UsersIdPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to scimV2UsersPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async scimV2UsersPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesCertificateCertIdGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesCertificateCertIdGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesConfigurationModeActionsDisablePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesConfigurationModeActionsDisablePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesConfigurationModeActionsEnablePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesConfigurationModeActionsEnablePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesDirectdataFilesGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesDirectdataFilesGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesDirectdataFilesNameGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesDirectdataFilesNameGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesFileStagingItemsContentItemGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesFileStagingItemsContentItemGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesFileStagingItemsItemDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesFileStagingItemsItemDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesFileStagingItemsItemGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesFileStagingItemsItemGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesFileStagingItemsItemPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesFileStagingItemsItemPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesFileStagingItemsPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesFileStagingItemsPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesFileStagingUploadGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesFileStagingUploadGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesFileStagingUploadPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesFileStagingUploadPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesFileStagingUploadUploadSessionIdDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesFileStagingUploadUploadSessionIdDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesFileStagingUploadUploadSessionIdGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesFileStagingUploadUploadSessionIdGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesFileStagingUploadUploadSessionIdPartsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesFileStagingUploadUploadSessionIdPartsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesFileStagingUploadUploadSessionIdPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesFileStagingUploadUploadSessionIdPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesFileStagingUploadUploadSessionIdPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesFileStagingUploadUploadSessionIdPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesJobsHistoriesGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesJobsHistoriesGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesJobsJobIdErrorsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesJobsJobIdErrorsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesJobsJobIdGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesJobsJobIdGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesJobsJobIdSummaryGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesJobsJobIdSummaryGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesJobsJobIdTasksGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesJobsJobIdTasksGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesJobsMonitorsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesJobsMonitorsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesJobsStartNowJobIdPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesJobsStartNowJobIdPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesLoaderExtractPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesLoaderExtractPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesLoaderJobIdTasksTaskIdFailurelogGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesLoaderJobIdTasksTaskIdFailurelogGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesLoaderJobIdTasksTaskIdResultsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesLoaderJobIdTasksTaskIdResultsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesLoaderJobIdTasksTaskIdResultsRenditionsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesLoaderJobIdTasksTaskIdResultsRenditionsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesLoaderJobIdTasksTaskIdSuccesslogGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesLoaderJobIdTasksTaskIdSuccesslogGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesLoaderLoadPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesLoaderLoadPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesPackageActionsValidatePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesPackageActionsValidatePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesPackagePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesPackagePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesPackagePut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesPackagePutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesQueuesGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesQueuesGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesQueuesQueueNameActionsDisableDeliveryPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesQueuesQueueNameActionsDisableDeliveryPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesQueuesQueueNameActionsEnableDeliveryPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesQueuesQueueNameActionsEnableDeliveryPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesQueuesQueueNameActionsResetPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesQueuesQueueNameActionsResetPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesQueuesQueueNameGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesQueuesQueueNameGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to servicesVobjectVaultPackageVPackageIdActionsValidatePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async servicesVobjectVaultPackageVPackageIdActionsValidatePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to sessionDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async sessionDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to uicodeDistributionsDistributionNameCodeGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async uicodeDistributionsDistributionNameCodeGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to uicodeDistributionsDistributionNameDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async uicodeDistributionsDistributionNameDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to uicodeDistributionsDistributionNameGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async uicodeDistributionsDistributionNameGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to uicodeDistributionsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async uicodeDistributionsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to uicodeDistributionsPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async uicodeDistributionsPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectVaultPackageVPackageIdActionsDeployPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectVaultPackageVPackageIdActionsDeployPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectVaultPackageVPackageIdActionsDeployResultsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectVaultPackageVPackageIdActionsDeployResultsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsEdlItemVActionsCreateplaceholderPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsEdlItemVActionsCreateplaceholderPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsMergesJobIdLogGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsMergesJobIdLogGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsMergesJobIdResultsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsMergesJobIdResultsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsMergesJobIdStatusGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsMergesJobIdStatusGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameActionsActionNamePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameActionsActionNamePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameActionsChangetypePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameActionsChangetypePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameActionsMergePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameActionsMergePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameActionsRecalculaterollupsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameActionsRecalculaterollupsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameActionsRecalculaterollupsPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameActionsRecalculaterollupsPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameActionsUpdatecorporatecurrencyPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameActionsUpdatecorporatecurrencyPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameAttachmentsBatchDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameAttachmentsBatchDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameAttachmentsBatchPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameAttachmentsBatchPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameAttachmentsBatchPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameAttachmentsBatchPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameIdRolesRoleNameGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameIdRolesRoleNameGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameObjectRecordIdActionsActionNameGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameObjectRecordIdActionsActionNameGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameObjectRecordIdActionsActionNamePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameObjectRecordIdActionsActionNamePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameObjectRecordIdActionsCascadedeletePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameObjectRecordIdActionsCascadedeletePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameObjectRecordIdActionsDeepcopyPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameObjectRecordIdActionsDeepcopyPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameObjectRecordIdActionsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameObjectRecordIdActionsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameObjectRecordIdAttachmentsFileGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameObjectRecordIdAttachmentsFileGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameObjectRecordIdAttachmentsGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameObjectRecordIdAttachmentsGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameObjectRecordIdAttachmentsPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameObjectRecordIdAttachmentsPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameObjectRecordIdAudittrailGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameObjectRecordIdAudittrailGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameObjectRecordIdGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameObjectRecordIdGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNamePost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNamePostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNamePut
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNamePutWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameRolesDelete
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameRolesDeleteWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsObjectNameRolesPost
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsObjectNameRolesPostWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to vobjectsOutboundPackageVPackageIdDependenciesGet
     * @throws ApiException if the response code was not in [200, 299]
     */
     public async vobjectsOutboundPackageVPackageIdDependenciesGetWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void >> {
        const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
        if (isCodeInRange("200", response.httpStatusCode)) {
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, undefined);
        }

        // Work around for missing responses in specification, e.g. for petstore.yaml
        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
            const body: void = ObjectSerializer.deserialize(
                ObjectSerializer.parse(await response.body.text(), contentType),
                "void", ""
            ) as void;
            return new HttpInfo(response.httpStatusCode, response.headers, response.body, body);
        }

        throw new ApiException<string | Blob | undefined>(response.httpStatusCode, "Unknown API Status Code!", await response.getBodyAsAny(), response.headers);
    }

}
