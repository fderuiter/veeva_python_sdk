extends ApiBee
class_name DefaultApi

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, © Public Domain, 2022

# API DefaultApi
# Instantiate this object and use it to make requests to the API.

func _bzz_get_api_name() -> String:
	return "DefaultApi"


# Operation apiGet → GET /api/
# Retrieve API Versions
func api_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/api/"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func api_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "api_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation apiMdlComponentsComponentTypeAndRecordNameFilesGet → GET /api/mdl/components/{component_type_and_record_name}/files
# Retrieve Content File
func api_mdl_components_component_type_and_record_name_files_get(
	# componentTypeAndRecordName: String = ""   Eg: componentTypeAndRecordName_example
	# The component type of the record followed by the name of the record from which to retrieve the content file. The format is `{Componenttype}.{record_name}`. For example, `Formattedoutput.my_formatted_output__c`.
	componentTypeAndRecordName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/api/mdl/components/{component_type_and_record_name}/files".replace("{" + "component_type_and_record_name" + "}", _bzz_urlize_path_param(componentTypeAndRecordName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func api_mdl_components_component_type_and_record_name_files_get_threaded(
	# componentTypeAndRecordName: String = ""   Eg: componentTypeAndRecordName_example
	# The component type of the record followed by the name of the record from which to retrieve the content file. The format is `{Componenttype}.{record_name}`. For example, `Formattedoutput.my_formatted_output__c`.
	componentTypeAndRecordName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "api_mdl_components_component_type_and_record_name_files_get")
	bzz_callable.bind(
		componentTypeAndRecordName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation apiMdlComponentsComponentTypeAndRecordNameGet → GET /api/mdl/components/{component_type_and_record_name}
# Retrieve Component Record (MDL)
func api_mdl_components_component_type_and_record_name_get(
	# componentTypeAndRecordName: String = ""   Eg: componentTypeAndRecordName_example
	# The component type name (`Picklist`, `Docfield`, `Doctype`, etc.) followed by the name of the record from which to retrieve metadata. The format is `{Componenttype}.{record_name}`. For example, `Picklist.color__c`. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
	componentTypeAndRecordName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/api/mdl/components/{component_type_and_record_name}".replace("{" + "component_type_and_record_name" + "}", _bzz_urlize_path_param(componentTypeAndRecordName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func api_mdl_components_component_type_and_record_name_get_threaded(
	# componentTypeAndRecordName: String = ""   Eg: componentTypeAndRecordName_example
	# The component type name (`Picklist`, `Docfield`, `Doctype`, etc.) followed by the name of the record from which to retrieve metadata. The format is `{Componenttype}.{record_name}`. For example, `Picklist.color__c`. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
	componentTypeAndRecordName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "api_mdl_components_component_type_and_record_name_get")
	bzz_callable.bind(
		componentTypeAndRecordName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation apiMdlExecuteAsyncJobIdResultsGet → GET /api/mdl/execute_async/{job_id}/results
# Retrieve Asynchronous MDL Script Results
func api_mdl_execute_async_job_id_results_get(
	# jobId: String = ""   Eg: jobId_example
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/api/mdl/execute_async/{job_id}/results".replace("{" + "job_id" + "}", _bzz_urlize_path_param(jobId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func api_mdl_execute_async_job_id_results_get_threaded(
	# jobId: String = ""   Eg: jobId_example
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "api_mdl_execute_async_job_id_results_get")
	bzz_callable.bind(
		jobId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation apiMdlExecuteAsyncPost → POST /api/mdl/execute_async
# Execute MDL Script Asynchronously
func api_mdl_execute_async_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/api/mdl/execute_async"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func api_mdl_execute_async_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "api_mdl_execute_async_post")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation apiMdlExecutePost → POST /api/mdl/execute
# Execute MDL Script
func api_mdl_execute_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/api/mdl/execute"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func api_mdl_execute_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "api_mdl_execute_post")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation apiMdlFilesPost → POST /api/mdl/files
# Upload Content File
func api_mdl_files_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/api/mdl/files"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func api_mdl_files_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "api_mdl_files_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation audittrailAuditTrailTypeGet → GET /audittrail/{audit_trail_type}
# Retrieve Audit Details
func audittrail_audit_trail_type_get(
	# auditTrailType: String = ""   Eg: auditTrailType_example
	# The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.
	auditTrailType: String,
	# startDate: String = ""   Eg: startDate_example
	# Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
	startDate = "",
	# endDate: String = ""   Eg: endDate_example
	# Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
	endDate = "",
	# allDates: String = ""   Eg: allDates_example
	# Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.
	allDates = "",
	# formatResult: String = ""   Eg: formatResult_example
	# To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.
	formatResult = "",
	# limit: String = ""   Eg: limit_example
	# Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
	limit = "",
	# offset: String = ""   Eg: offset_example
	# Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
	offset = "",
	# objects: String = ""   Eg: objects_example
	# This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects=product__v,country__v. If omitted, defaults to all objects.
	objects = "",
	# events: String = ""   Eg: events_example
	# This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events=Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.
	events = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/audittrail/{audit_trail_type}".replace("{" + "audit_trail_type" + "}", _bzz_urlize_path_param(auditTrailType))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["start_date"] = startDate
	bzz_query["end_date"] = endDate
	bzz_query["all_dates"] = allDates
	bzz_query["format_result"] = formatResult
	bzz_query["limit"] = limit
	bzz_query["offset"] = offset
	bzz_query["objects"] = objects
	bzz_query["events"] = events

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func audittrail_audit_trail_type_get_threaded(
	# auditTrailType: String = ""   Eg: auditTrailType_example
	# The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.
	auditTrailType: String,
	# startDate: String = ""   Eg: startDate_example
	# Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
	startDate = "",
	# endDate: String = ""   Eg: endDate_example
	# Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
	endDate = "",
	# allDates: String = ""   Eg: allDates_example
	# Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.
	allDates = "",
	# formatResult: String = ""   Eg: formatResult_example
	# To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.
	formatResult = "",
	# limit: String = ""   Eg: limit_example
	# Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
	limit = "",
	# offset: String = ""   Eg: offset_example
	# Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
	offset = "",
	# objects: String = ""   Eg: objects_example
	# This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects=product__v,country__v. If omitted, defaults to all objects.
	objects = "",
	# events: String = ""   Eg: events_example
	# This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events=Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.
	events = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "audittrail_audit_trail_type_get")
	bzz_callable.bind(
		auditTrailType,
		startDate,
		endDate,
		allDates,
		formatResult,
		limit,
		offset,
		objects,
		events,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation authDiscoveryPost → POST /auth/discovery
# Authentication Type Discovery
func auth_discovery_post(
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/auth/discovery"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func auth_discovery_post_threaded(
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "auth_discovery_post")
	bzz_callable.bind(
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation authOauthSessionOathOidcProfileIdPost → POST /auth/oauth/session/{oath_oidc_profile_id}
# OAuth 2.0 / OpenID Connect
func auth_oauth_session_oath_oidc_profile_id_post(
	# oathOidcProfileId: String = ""   Eg: {{oath_oidc_profile_id}}
	oathOidcProfileId: String,
	# authorization: String = ""   Eg: Bearer {{access_token}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/auth/oauth/session/{oath_oidc_profile_id}".replace("{" + "oath_oidc_profile_id" + "}", _bzz_urlize_path_param(oathOidcProfileId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func auth_oauth_session_oath_oidc_profile_id_post_threaded(
	# oathOidcProfileId: String = ""   Eg: {{oath_oidc_profile_id}}
	oathOidcProfileId: String,
	# authorization: String = ""   Eg: Bearer {{access_token}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "auth_oauth_session_oath_oidc_profile_id_post")
	bzz_callable.bind(
		oathOidcProfileId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation authPost → POST /auth
# User Name and Password
func auth_post(
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/auth"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func auth_post_threaded(
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "auth_post")
	bzz_callable.bind(
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation codeClassNameDelete → DELETE /code/{class_name}
# Delete Single Source Code File
func code_class_name_delete(
	# className: String = ""   Eg: className_example
	# The fully qualified class name of your file.
	className: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/code/{class_name}".replace("{" + "class_name" + "}", _bzz_urlize_path_param(className))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func code_class_name_delete_threaded(
	# className: String = ""   Eg: className_example
	# The fully qualified class name of your file.
	className: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "code_class_name_delete")
	bzz_callable.bind(
		className,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation codeClassNameDisablePut → PUT /code/{class_name}/disable
# Disable Vault Extension
func code_class_name_disable_put(
	# className: String = ""   Eg: className_example
	# The fully qualified class name of your file.
	className: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/code/{class_name}/disable".replace("{" + "class_name" + "}", _bzz_urlize_path_param(className))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func code_class_name_disable_put_threaded(
	# className: String = ""   Eg: className_example
	# The fully qualified class name of your file.
	className: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "code_class_name_disable_put")
	bzz_callable.bind(
		className,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation codeClassNameEnablePut → PUT /code/{class_name}/enable
# Enable Vault Extension
func code_class_name_enable_put(
	# className: String = ""   Eg: className_example
	# The fully qualified class name of your file.
	className: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/code/{class_name}/enable".replace("{" + "class_name" + "}", _bzz_urlize_path_param(className))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func code_class_name_enable_put_threaded(
	# className: String = ""   Eg: className_example
	# The fully qualified class name of your file.
	className: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "code_class_name_enable_put")
	bzz_callable.bind(
		className,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation codeClassNameGet → GET /code/{class_name}
# Retrieve Single Source Code File
func code_class_name_get(
	# className: String = ""   Eg: className_example
	# The fully qualified class name of your file.
	className: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/code/{class_name}".replace("{" + "class_name" + "}", _bzz_urlize_path_param(className))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func code_class_name_get_threaded(
	# className: String = ""   Eg: className_example
	# The fully qualified class name of your file.
	className: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "code_class_name_get")
	bzz_callable.bind(
		className,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation codeProfilerGet → GET /code/profiler
# Retrieve All Profiling Sessions
func code_profiler_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/code/profiler"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func code_profiler_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "code_profiler_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation codeProfilerPost → POST /code/profiler
# Create Profiling Session
func code_profiler_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/code/profiler"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func code_profiler_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "code_profiler_post")
	bzz_callable.bind(
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation codeProfilerSessionNameActionsEndPost → POST /code/profiler/{session_name}/actions/end
# End Profiling Session
func code_profiler_session_name_actions_end_post(
	# sessionName: String = ""   Eg: sessionName_example
	# The name of the session, for example,  baseline__c.
	sessionName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/code/profiler/{session_name}/actions/end".replace("{" + "session_name" + "}", _bzz_urlize_path_param(sessionName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func code_profiler_session_name_actions_end_post_threaded(
	# sessionName: String = ""   Eg: sessionName_example
	# The name of the session, for example,  baseline__c.
	sessionName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "code_profiler_session_name_actions_end_post")
	bzz_callable.bind(
		sessionName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation codeProfilerSessionNameDelete → DELETE /code/profiler/{session_name}
# Delete Profiling Session
func code_profiler_session_name_delete(
	# sessionName: String = ""   Eg: sessionName_example
	# The name of the session, for example,  baseline__c.
	sessionName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/code/profiler/{session_name}".replace("{" + "session_name" + "}", _bzz_urlize_path_param(sessionName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func code_profiler_session_name_delete_threaded(
	# sessionName: String = ""   Eg: sessionName_example
	# The name of the session, for example,  baseline__c.
	sessionName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "code_profiler_session_name_delete")
	bzz_callable.bind(
		sessionName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation codeProfilerSessionNameGet → GET /code/profiler/{session_name}
# Retrieve Profiling Session
func code_profiler_session_name_get(
	# sessionName: String = ""   Eg: sessionName_example
	# The name of the session, for example,  baseline__c.
	sessionName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/code/profiler/{session_name}".replace("{" + "session_name" + "}", _bzz_urlize_path_param(sessionName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func code_profiler_session_name_get_threaded(
	# sessionName: String = ""   Eg: sessionName_example
	# The name of the session, for example,  baseline__c.
	sessionName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "code_profiler_session_name_get")
	bzz_callable.bind(
		sessionName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation codeProfilerSessionNameResultsGet → GET /code/profiler/{session_name}/results
# Download Profiling Session Results
func code_profiler_session_name_results_get(
	# sessionName: String = ""   Eg: sessionName_example
	# The name of the session, for example,  baseline__c.
	sessionName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/code/profiler/{session_name}/results".replace("{" + "session_name" + "}", _bzz_urlize_path_param(sessionName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func code_profiler_session_name_results_get_threaded(
	# sessionName: String = ""   Eg: sessionName_example
	# The name of the session, for example,  baseline__c.
	sessionName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "code_profiler_session_name_results_get")
	bzz_callable.bind(
		sessionName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation codePut → PUT /code
# Add or Replace Single Source Code File
func code_put(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/code"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func code_put_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "code_put")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation compositesTreesEdlHierarchyOrTemplateActionsListnodesPost → POST /composites/trees/{edl_hierarchy_or_template}/actions/listnodes
# Retrieve Specific Root Nodes
func composites_trees_edl_hierarchy_or_template_actions_listnodes_post(
	# edlHierarchyOrTemplate: String = ""   Eg: edlHierarchyOrTemplate_example
	# Choose to retrieve either edl_hierarchy__v or edl_template__v
	edlHierarchyOrTemplate: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/composites/trees/{edl_hierarchy_or_template}/actions/listnodes".replace("{" + "edl_hierarchy_or_template" + "}", _bzz_urlize_path_param(edlHierarchyOrTemplate))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func composites_trees_edl_hierarchy_or_template_actions_listnodes_post_threaded(
	# edlHierarchyOrTemplate: String = ""   Eg: edlHierarchyOrTemplate_example
	# Choose to retrieve either edl_hierarchy__v or edl_template__v
	edlHierarchyOrTemplate: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "composites_trees_edl_hierarchy_or_template_actions_listnodes_post")
	bzz_callable.bind(
		edlHierarchyOrTemplate,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation compositesTreesEdlHierarchyOrTemplateGet → GET /composites/trees/{edl_hierarchy_or_template}
# Retrieve All Root Nodes
func composites_trees_edl_hierarchy_or_template_get(
	# edlHierarchyOrTemplate: String = ""   Eg: edlHierarchyOrTemplate_example
	edlHierarchyOrTemplate: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/composites/trees/{edl_hierarchy_or_template}".replace("{" + "edl_hierarchy_or_template" + "}", _bzz_urlize_path_param(edlHierarchyOrTemplate))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func composites_trees_edl_hierarchy_or_template_get_threaded(
	# edlHierarchyOrTemplate: String = ""   Eg: edlHierarchyOrTemplate_example
	edlHierarchyOrTemplate: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "composites_trees_edl_hierarchy_or_template_get")
	bzz_callable.bind(
		edlHierarchyOrTemplate,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation compositesTreesEdlHierarchyVParentNodeIdChildrenGet → GET /composites/trees/edl_hierarchy__v/{parent_node_id}/children
# Retrieve a Node's Children
func composites_trees_edl_hierarchy_v_parent_node_id_children_get(
	# parentNodeId: String = ""   Eg: parentNodeId_example
	# The ID of a parent node in the hierarchy.
	parentNodeId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/composites/trees/edl_hierarchy__v/{parent_node_id}/children".replace("{" + "parent_node_id" + "}", _bzz_urlize_path_param(parentNodeId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func composites_trees_edl_hierarchy_v_parent_node_id_children_get_threaded(
	# parentNodeId: String = ""   Eg: parentNodeId_example
	# The ID of a parent node in the hierarchy.
	parentNodeId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "composites_trees_edl_hierarchy_v_parent_node_id_children_get")
	bzz_callable.bind(
		parentNodeId,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation compositesTreesEdlHierarchyVParentNodeIdChildrenPut → PUT /composites/trees/edl_hierarchy__v/{parent_node_id}/children
# Update Node Order
func composites_trees_edl_hierarchy_v_parent_node_id_children_put(
	# parentNodeId: String = ""   Eg: parentNodeId_example
	# The ID of a parent node in the hierarchy.
	parentNodeId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/composites/trees/edl_hierarchy__v/{parent_node_id}/children".replace("{" + "parent_node_id" + "}", _bzz_urlize_path_param(parentNodeId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func composites_trees_edl_hierarchy_v_parent_node_id_children_put_threaded(
	# parentNodeId: String = ""   Eg: parentNodeId_example
	# The ID of a parent node in the hierarchy.
	parentNodeId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "composites_trees_edl_hierarchy_v_parent_node_id_children_put")
	bzz_callable.bind(
		parentNodeId,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation configurationComponentTypeAndRecordNameGet → GET /configuration/{component_type_and_record_name}
# Retrieve Component Record (XML/JSON)
func configuration_component_type_and_record_name_get(
	# componentTypeAndRecordName: String = ""   Eg: componentTypeAndRecordName_example
	# The component type name (`Picklist`, `Docfield`, `Doctype`, etc.) followed by the name of the record from which to retrieve metadata. The format is `{Componenttype}.{record_name}`. For example, `Picklist.color__c`. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
	componentTypeAndRecordName: String,
	# loc: String = ""   Eg: loc_example
	# When localized (translated) strings are available, retrieve them by setting loc to true.
	loc = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/configuration/{component_type_and_record_name}".replace("{" + "component_type_and_record_name" + "}", _bzz_urlize_path_param(componentTypeAndRecordName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["loc"] = loc

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func configuration_component_type_and_record_name_get_threaded(
	# componentTypeAndRecordName: String = ""   Eg: componentTypeAndRecordName_example
	# The component type name (`Picklist`, `Docfield`, `Doctype`, etc.) followed by the name of the record from which to retrieve metadata. The format is `{Componenttype}.{record_name}`. For example, `Picklist.color__c`. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
	componentTypeAndRecordName: String,
	# loc: String = ""   Eg: loc_example
	# When localized (translated) strings are available, retrieve them by setting loc to true.
	loc = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "configuration_component_type_and_record_name_get")
	bzz_callable.bind(
		componentTypeAndRecordName,
		loc,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation configurationComponentTypeGet → GET /configuration/{component_type}
# Retrieve Component Record Collection
func configuration_component_type_get(
	# componentType: String = ""   Eg: componentType_example
	componentType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/configuration/{component_type}".replace("{" + "component_type" + "}", _bzz_urlize_path_param(componentType))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func configuration_component_type_get_threaded(
	# componentType: String = ""   Eg: componentType_example
	componentType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "configuration_component_type_get")
	bzz_callable.bind(
		componentType,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation configurationObjectNameAndObjectTypeGet → GET /configuration/{object_name_and_object_type}
# Retrieve Details from a Specific Object
func configuration_object_name_and_object_type_get(
	# objectNameAndObjectType: String = ""   Eg: objectNameAndObjectType_example
	# The object name followed by the object type in the format `Objecttype.{object_name}.{object_type}`. For example, `Objecttype.product__v.base__v`.
	objectNameAndObjectType: String,
	# loc: String = ""   Eg: loc_example
	# When localized (translated) strings are available, retrieve them by setting loc to true.
	loc = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/configuration/{object_name_and_object_type}".replace("{" + "object_name_and_object_type" + "}", _bzz_urlize_path_param(objectNameAndObjectType))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["loc"] = loc

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func configuration_object_name_and_object_type_get_threaded(
	# objectNameAndObjectType: String = ""   Eg: objectNameAndObjectType_example
	# The object name followed by the object type in the format `Objecttype.{object_name}.{object_type}`. For example, `Objecttype.product__v.base__v`.
	objectNameAndObjectType: String,
	# loc: String = ""   Eg: loc_example
	# When localized (translated) strings are available, retrieve them by setting loc to true.
	loc = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "configuration_object_name_and_object_type_get")
	bzz_callable.bind(
		objectNameAndObjectType,
		loc,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation configurationObjecttypeGet → GET /configuration/Objecttype
# Retrieve Details from All Object Types
func configuration_objecttype_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/configuration/Objecttype"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func configuration_objecttype_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "configuration_objecttype_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation configurationRoleAssignmentRuleDelete → DELETE /configuration/role_assignment_rule
# Delete Lifecycle Role Assignment Override Rules
func configuration_role_assignment_rule_delete(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/configuration/role_assignment_rule"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func configuration_role_assignment_rule_delete_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "configuration_role_assignment_rule_delete")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation configurationRoleAssignmentRuleGet → GET /configuration/role_assignment_rule
# Retrieve Lifecycle Role Assignment Rules (Default & Override)
func configuration_role_assignment_rule_get(
	# lifecycleV: String = ""   Eg: lifecycleV_example
	# Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v=general_lifecycle__c
	lifecycleV = "",
	# roleV: String = ""   Eg: roleV_example
	# Include the name of the role from which to retrieve information. For example: role__v=editor__c
	roleV = "",
	# productV: String = ""   Eg: productV_example
	# Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v=0PR0011001 or product__v.name__v=CholeCap
	productV = "",
	# countryV: String = ""   Eg: countryV_example
	# Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v=0CR0022002 or country__v.name__v=United States
	countryV = "",
	# studyV: String = ""   Eg: studyV_example
	# In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v=0ST0021J01 or study__v.name__v=CholeCap Study
	studyV = "",
	# studyCountryV: String = ""   Eg: studyCountryV_example
	# In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v=0SC0001001 or study_country__v.name__v=Germany
	studyCountryV = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/configuration/role_assignment_rule"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["lifecycle__v"] = lifecycleV
	bzz_query["role__v"] = roleV
	bzz_query["product__v"] = productV
	bzz_query["country__v"] = countryV
	bzz_query["study__v"] = studyV
	bzz_query["study_country__v"] = studyCountryV

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func configuration_role_assignment_rule_get_threaded(
	# lifecycleV: String = ""   Eg: lifecycleV_example
	# Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v=general_lifecycle__c
	lifecycleV = "",
	# roleV: String = ""   Eg: roleV_example
	# Include the name of the role from which to retrieve information. For example: role__v=editor__c
	roleV = "",
	# productV: String = ""   Eg: productV_example
	# Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v=0PR0011001 or product__v.name__v=CholeCap
	productV = "",
	# countryV: String = ""   Eg: countryV_example
	# Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v=0CR0022002 or country__v.name__v=United States
	countryV = "",
	# studyV: String = ""   Eg: studyV_example
	# In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v=0ST0021J01 or study__v.name__v=CholeCap Study
	studyV = "",
	# studyCountryV: String = ""   Eg: studyCountryV_example
	# In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v=0SC0001001 or study_country__v.name__v=Germany
	studyCountryV = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "configuration_role_assignment_rule_get")
	bzz_callable.bind(
		lifecycleV,
		roleV,
		productV,
		countryV,
		studyV,
		studyCountryV,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation configurationRoleAssignmentRulePost → POST /configuration/role_assignment_rule
# Create Lifecycle Role Assignment Override Rules
func configuration_role_assignment_rule_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/configuration/role_assignment_rule"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func configuration_role_assignment_rule_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "configuration_role_assignment_rule_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation configurationRoleAssignmentRulePut → PUT /configuration/role_assignment_rule
# Update Lifecycle Role Assignment Rules (Default & Override)
func configuration_role_assignment_rule_put(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/configuration/role_assignment_rule"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func configuration_role_assignment_rule_put_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "configuration_role_assignment_rule_put")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation delegationLoginPost → POST /delegation/login
# Initiate Delegated Session
func delegation_login_post(
	# authorization: String = ""   Eg: {{sessionId}}
	# The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/delegation/login"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func delegation_login_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	# The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "delegation_login_post")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation delegationVaultsGet → GET /delegation/vaults
# Retrieve Delegations
func delegation_vaults_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/delegation/vaults"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func delegation_vaults_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "delegation_vaults_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation keepAlivePost → POST /keep-alive
# Session Keep Alive
func keep_alive_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/keep-alive"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func keep_alive_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "keep_alive_post")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation limitsGet → GET /limits
# Retrieve Limits on Objects
func limits_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/limits"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func limits_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "limits_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation logsApiUsageGet → GET /logs/api_usage
# Download Daily API Usage
func logs_api_usage_get(
	# date: String = ""   Eg: date_example
	# The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.
	date = "",
	# logFormat: String = ""   Eg: logFormat_example
	# Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
	logFormat = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/logs/api_usage"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["date"] = date
	bzz_query["log_format"] = logFormat

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func logs_api_usage_get_threaded(
	# date: String = ""   Eg: date_example
	# The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.
	date = "",
	# logFormat: String = ""   Eg: logFormat_example
	# Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
	logFormat = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "logs_api_usage_get")
	bzz_callable.bind(
		date,
		logFormat,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation logsCodeDebugGet → GET /logs/code/debug
# Retrieve All Debug Logs
func logs_code_debug_get(
	# userId: String = ""   Eg: userId_example
	# Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.
	userId = "",
	# includeInactive: bool   Eg: true
	# Set to `true` to include debug log sessions with a status of `inactive__sys` in the response. If omitted, defaults to `false` and inactive sessions are not included in the response.
	includeInactive = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/logs/code/debug"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["user_id"] = userId
	bzz_query["include_inactive"] = includeInactive

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func logs_code_debug_get_threaded(
	# userId: String = ""   Eg: userId_example
	# Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.
	userId = "",
	# includeInactive: bool   Eg: true
	# Set to `true` to include debug log sessions with a status of `inactive__sys` in the response. If omitted, defaults to `false` and inactive sessions are not included in the response.
	includeInactive = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "logs_code_debug_get")
	bzz_callable.bind(
		userId,
		includeInactive,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation logsCodeDebugIdActionsResetDelete → DELETE /logs/code/debug/{id}/actions/reset
# Delete Debug Log
func logs_code_debug_id_actions_reset_delete(
	# id: String = ""   Eg: id_example
	# The ID of the debug log to delete.
	id: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/logs/code/debug/{id}/actions/reset".replace("{" + "id" + "}", _bzz_urlize_path_param(id))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func logs_code_debug_id_actions_reset_delete_threaded(
	# id: String = ""   Eg: id_example
	# The ID of the debug log to delete.
	id: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "logs_code_debug_id_actions_reset_delete")
	bzz_callable.bind(
		id,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation logsCodeDebugIdActionsResetPost → POST /logs/code/debug/{id}/actions/reset
# Reset Debug Log
func logs_code_debug_id_actions_reset_post(
	# id: String = ""   Eg: id_example
	# The ID of the debug log to delete.
	id: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/logs/code/debug/{id}/actions/reset".replace("{" + "id" + "}", _bzz_urlize_path_param(id))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func logs_code_debug_id_actions_reset_post_threaded(
	# id: String = ""   Eg: id_example
	# The ID of the debug log to delete.
	id: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "logs_code_debug_id_actions_reset_post")
	bzz_callable.bind(
		id,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation logsCodeDebugIdFilesGet → GET /logs/code/debug/{id}/files
# Download Debug Log Files
func logs_code_debug_id_files_get(
	# id: String = ""   Eg: id_example
	# The ID of the debug log to download.
	id: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/logs/code/debug/{id}/files".replace("{" + "id" + "}", _bzz_urlize_path_param(id))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func logs_code_debug_id_files_get_threaded(
	# id: String = ""   Eg: id_example
	# The ID of the debug log to download.
	id: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "logs_code_debug_id_files_get")
	bzz_callable.bind(
		id,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation logsCodeDebugIdGet → GET /logs/code/debug/{id}
# Retrieve Single Debug Log
func logs_code_debug_id_get(
	# id: String = ""   Eg: id_example
	# The ID of the debug log to retrieve.
	id: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/logs/code/debug/{id}".replace("{" + "id" + "}", _bzz_urlize_path_param(id))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func logs_code_debug_id_get_threaded(
	# id: String = ""   Eg: id_example
	# The ID of the debug log to retrieve.
	id: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "logs_code_debug_id_get")
	bzz_callable.bind(
		id,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation logsCodeDebugPost → POST /logs/code/debug
# Create Debug Log
func logs_code_debug_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/logs/code/debug"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func logs_code_debug_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "logs_code_debug_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation logsCodeRuntimeGet → GET /logs/code/runtime
# Download SDK Runtime Log
func logs_code_runtime_get(
	# date: String = ""   Eg: YYYY-MM-DD
	date = "",
	# logFormat: String = ""   Eg: logFormat_example
	# Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
	logFormat = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/logs/code/runtime"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["date"] = date
	bzz_query["log_format"] = logFormat

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func logs_code_runtime_get_threaded(
	# date: String = ""   Eg: YYYY-MM-DD
	date = "",
	# logFormat: String = ""   Eg: logFormat_example
	# Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
	logFormat = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "logs_code_runtime_get")
	bzz_callable.bind(
		date,
		logFormat,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation messagesMessageTypeActionsImportPost → POST /messages/{message_type}/actions/import
# Import Bulk Translation File
func messages_message_type_actions_import_post(
	# messageType: String = ""   Eg: messageType_example
	# The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
	messageType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/messages/{message_type}/actions/import".replace("{" + "message_type" + "}", _bzz_urlize_path_param(messageType))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func messages_message_type_actions_import_post_threaded(
	# messageType: String = ""   Eg: messageType_example
	# The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
	messageType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "messages_message_type_actions_import_post")
	bzz_callable.bind(
		messageType,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation messagesMessageTypeLanguageLangActionsExportPost → POST /messages/{message_type}/language/{lang}/actions/export
# Export Bulk Translation File
func messages_message_type_language_lang_actions_export_post(
	# messageType: String = ""   Eg: messageType_example
	# The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
	messageType: String,
	# lang: String = ""   Eg: lang_example
	# A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 
	lang: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/messages/{message_type}/language/{lang}/actions/export".replace("{" + "message_type" + "}", _bzz_urlize_path_param(messageType)).replace("{" + "lang" + "}", _bzz_urlize_path_param(lang))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func messages_message_type_language_lang_actions_export_post_threaded(
	# messageType: String = ""   Eg: messageType_example
	# The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
	messageType: String,
	# lang: String = ""   Eg: lang_example
	# A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 
	lang: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "messages_message_type_language_lang_actions_export_post")
	bzz_callable.bind(
		messageType,
		lang,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataAudittrailAuditTrailTypeGet → GET /metadata/audittrail/{audit_trail_type}
# Retrieve Audit Metadata
func metadata_audittrail_audit_trail_type_get(
	# auditTrailType: String = ""   Eg: auditTrailType_example
	# The name of the specified audit type (document_audit_trail, object_audit_trail, etc).
	auditTrailType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/audittrail/{audit_trail_type}".replace("{" + "audit_trail_type" + "}", _bzz_urlize_path_param(auditTrailType))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_audittrail_audit_trail_type_get_threaded(
	# auditTrailType: String = ""   Eg: auditTrailType_example
	# The name of the specified audit type (document_audit_trail, object_audit_trail, etc).
	auditTrailType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_audittrail_audit_trail_type_get")
	bzz_callable.bind(
		auditTrailType,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataAudittrailGet → GET /metadata/audittrail
# Retrieve Audit Types
func metadata_audittrail_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/audittrail"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_audittrail_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_audittrail_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataComponentsComponentTypeGet → GET /metadata/components/{component_type}
# Retrieve Component Type Metadata
func metadata_components_component_type_get(
	# componentType: String = ""   Eg: componentType_example
	# The component type name (Picklist, Docfield, Doctype, etc.).
	componentType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/components/{component_type}".replace("{" + "component_type" + "}", _bzz_urlize_path_param(componentType))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_components_component_type_get_threaded(
	# componentType: String = ""   Eg: componentType_example
	# The component type name (Picklist, Docfield, Doctype, etc.).
	componentType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_components_component_type_get")
	bzz_callable.bind(
		componentType,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataComponentsGet → GET /metadata/components
# Retrieve All Component Metadata
func metadata_components_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/components"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_components_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_components_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataObjectsBindersTemplatesBindernodesGet → GET /metadata/objects/binders/templates/bindernodes
# Retrieve Binder Template Node Metadata
func metadata_objects_binders_templates_bindernodes_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/objects/binders/templates/bindernodes"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_objects_binders_templates_bindernodes_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_objects_binders_templates_bindernodes_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataObjectsBindersTemplatesGet → GET /metadata/objects/binders/templates
# Retrieve Binder Template Metadata
func metadata_objects_binders_templates_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/objects/binders/templates"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_objects_binders_templates_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_objects_binders_templates_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet → GET /metadata/objects/documents/annotations/placemarks/types/{placemark_type}
# Retrieve Annotation Placemark Type Metadata
func metadata_objects_documents_annotations_placemarks_types_placemark_type_get(
	# placemarkType: String = ""   Eg: placemarkType_example
	# The name of the placemark type. For example, sticky__sys.
	placemarkType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/objects/documents/annotations/placemarks/types/{placemark_type}".replace("{" + "placemark_type" + "}", _bzz_urlize_path_param(placemarkType))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_objects_documents_annotations_placemarks_types_placemark_type_get_threaded(
	# placemarkType: String = ""   Eg: placemarkType_example
	# The name of the placemark type. For example, sticky__sys.
	placemarkType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_objects_documents_annotations_placemarks_types_placemark_type_get")
	bzz_callable.bind(
		placemarkType,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet → GET /metadata/objects/documents/annotations/references/types/{reference_type}
# Retrieve Annotation Reference Type Metadata
func metadata_objects_documents_annotations_references_types_reference_type_get(
	# referenceType: String = ""   Eg: referenceType_example
	referenceType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/objects/documents/annotations/references/types/{reference_type}".replace("{" + "reference_type" + "}", _bzz_urlize_path_param(referenceType))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_objects_documents_annotations_references_types_reference_type_get_threaded(
	# referenceType: String = ""   Eg: referenceType_example
	referenceType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_objects_documents_annotations_references_types_reference_type_get")
	bzz_callable.bind(
		referenceType,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet → GET /metadata/objects/documents/annotations/types/{annotation_type}
# Retrieve Annotation Type Metadata
func metadata_objects_documents_annotations_types_annotation_type_get(
	# annotationType: String = ""   Eg: annotationType_example
	# The name of the annotation type. Valid annotation types include: `note__sys` `line__sys` `document_link__sys` `permalink_link__sys` `anchor__sys` `reply__sys` `external_link__sys`  The following annotation types are only valid in Medical and PromoMats Vaults:  `suggested_link__sys` `approved_link__sys` `auto_link__sys` `keyword_link__sys`
	annotationType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/objects/documents/annotations/types/{annotation_type}".replace("{" + "annotation_type" + "}", _bzz_urlize_path_param(annotationType))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_objects_documents_annotations_types_annotation_type_get_threaded(
	# annotationType: String = ""   Eg: annotationType_example
	# The name of the annotation type. Valid annotation types include: `note__sys` `line__sys` `document_link__sys` `permalink_link__sys` `anchor__sys` `reply__sys` `external_link__sys`  The following annotation types are only valid in Medical and PromoMats Vaults:  `suggested_link__sys` `approved_link__sys` `auto_link__sys` `keyword_link__sys`
	annotationType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_objects_documents_annotations_types_annotation_type_get")
	bzz_callable.bind(
		annotationType,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet → GET /metadata/objects/documents/events/{event_type}/types/{event_subtype}
# Retrieve Document Event SubType Metadata
func metadata_objects_documents_events_event_type_types_event_subtype_get(
	# eventType: String = ""   Eg: eventType_example
	# The event type. For example, distribution__v.
	eventType: String,
	# eventSubtype: String = ""   Eg: eventSubtype_example
	# The event subtype. For example, approved_email__v.
	eventSubtype: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/objects/documents/events/{event_type}/types/{event_subtype}".replace("{" + "event_type" + "}", _bzz_urlize_path_param(eventType)).replace("{" + "event_subtype" + "}", _bzz_urlize_path_param(eventSubtype))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_objects_documents_events_event_type_types_event_subtype_get_threaded(
	# eventType: String = ""   Eg: eventType_example
	# The event type. For example, distribution__v.
	eventType: String,
	# eventSubtype: String = ""   Eg: eventSubtype_example
	# The event subtype. For example, approved_email__v.
	eventSubtype: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_objects_documents_events_event_type_types_event_subtype_get")
	bzz_callable.bind(
		eventType,
		eventSubtype,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataObjectsDocumentsEventsGet → GET /metadata/objects/documents/events
# Retrieve Document Event Types and Subtypes
func metadata_objects_documents_events_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/objects/documents/events"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_objects_documents_events_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_objects_documents_events_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataObjectsDocumentsLockGet → GET /metadata/objects/documents/lock
# Retrieve Document Lock Metadata
func metadata_objects_documents_lock_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/objects/documents/lock"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_objects_documents_lock_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_objects_documents_lock_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataObjectsDocumentsPropertiesFindCommonPost → POST /metadata/objects/documents/properties/find_common
# Retrieve Common Document Fields
func metadata_objects_documents_properties_find_common_post(
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/objects/documents/properties/find_common"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_objects_documents_properties_find_common_post_threaded(
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_objects_documents_properties_find_common_post")
	bzz_callable.bind(
		contentType,
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataObjectsDocumentsPropertiesGet → GET /metadata/objects/documents/properties
# Retrieve All Document Fields
func metadata_objects_documents_properties_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/objects/documents/properties"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_objects_documents_properties_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_objects_documents_properties_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataObjectsDocumentsTemplatesGet → GET /metadata/objects/documents/templates
# Retrieve Document Template Metadata
func metadata_objects_documents_templates_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/objects/documents/templates"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_objects_documents_templates_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_objects_documents_templates_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataObjectsDocumentsTypesGet → GET /metadata/objects/documents/types
# Retrieve All Document Types
func metadata_objects_documents_types_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/objects/documents/types"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_objects_documents_types_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_objects_documents_types_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataObjectsDocumentsTypesTypeGet → GET /metadata/objects/documents/types/{type}
# Retrieve Document Type
func metadata_objects_documents_types_type_get(
	# type: String = ""   Eg: type_example
	# The document type. See Retrieve Document Types.
	type: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/objects/documents/types/{type}".replace("{" + "type" + "}", _bzz_urlize_path_param(type))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_objects_documents_types_type_get_threaded(
	# type: String = ""   Eg: type_example
	# The document type. See Retrieve Document Types.
	type: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_objects_documents_types_type_get")
	bzz_callable.bind(
		type,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataObjectsDocumentsTypesTypeRelationshipsGet → GET /metadata/objects/documents/types/{type}/relationships
# Retrieve Document Type Relationships
func metadata_objects_documents_types_type_relationships_get(
	# type: String = ""   Eg: type_example
	# The document type. See Retrieve Document Types.
	type: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/objects/documents/types/{type}/relationships".replace("{" + "type" + "}", _bzz_urlize_path_param(type))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_objects_documents_types_type_relationships_get_threaded(
	# type: String = ""   Eg: type_example
	# The document type. See Retrieve Document Types.
	type: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_objects_documents_types_type_relationships_get")
	bzz_callable.bind(
		type,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet → GET /metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}
# Retrieve Document Classification
func metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get(
	# type: String = ""   Eg: type_example
	# The document type. See Retrieve Document Types.
	type: String,
	# subtype: String = ""   Eg: subtype_example
	# The document subtype. See Retrieve Document Types.
	subtype: String,
	# classification: String = ""   Eg: classification_example
	# The document classification. See Retrieve Document Types.
	classification: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}".replace("{" + "type" + "}", _bzz_urlize_path_param(type)).replace("{" + "subtype" + "}", _bzz_urlize_path_param(subtype)).replace("{" + "classification" + "}", _bzz_urlize_path_param(classification))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get_threaded(
	# type: String = ""   Eg: type_example
	# The document type. See Retrieve Document Types.
	type: String,
	# subtype: String = ""   Eg: subtype_example
	# The document subtype. See Retrieve Document Types.
	subtype: String,
	# classification: String = ""   Eg: classification_example
	# The document classification. See Retrieve Document Types.
	classification: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_objects_documents_types_type_subtypes_subtype_classifications_classification_get")
	bzz_callable.bind(
		type,
		subtype,
		classification,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet → GET /metadata/objects/documents/types/{type}/subtypes/{subtype}
# Retrieve Document Subtype
func metadata_objects_documents_types_type_subtypes_subtype_get(
	# type: String = ""   Eg: type_example
	# The document type. See Retrieve Document Types.
	type: String,
	# subtype: String = ""   Eg: subtype_example
	# The document subtype. See Retrieve Document Types.
	subtype: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/objects/documents/types/{type}/subtypes/{subtype}".replace("{" + "type" + "}", _bzz_urlize_path_param(type)).replace("{" + "subtype" + "}", _bzz_urlize_path_param(subtype))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_objects_documents_types_type_subtypes_subtype_get_threaded(
	# type: String = ""   Eg: type_example
	# The document type. See Retrieve Document Types.
	type: String,
	# subtype: String = ""   Eg: subtype_example
	# The document subtype. See Retrieve Document Types.
	subtype: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_objects_documents_types_type_subtypes_subtype_get")
	bzz_callable.bind(
		type,
		subtype,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataObjectsGroupsGet → GET /metadata/objects/groups
# Retrieve Group Metadata
func metadata_objects_groups_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/objects/groups"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_objects_groups_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_objects_groups_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataObjectsSecuritypoliciesGet → GET /metadata/objects/securitypolicies
# Retrieve Security Policy Metadata
func metadata_objects_securitypolicies_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/objects/securitypolicies"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_objects_securitypolicies_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_objects_securitypolicies_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataObjectsUsersGet → GET /metadata/objects/users
# Retrieve User Metadata
func metadata_objects_users_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/objects/users"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_objects_users_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_objects_users_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet → GET /metadata/query/archived_documents/relationships/document_signature__sysr
# Retrieve Archived Document Signature Metadata
func metadata_query_archived_documents_relationships_document_signature_sysr_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/query/archived_documents/relationships/document_signature__sysr"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_query_archived_documents_relationships_document_signature_sysr_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_query_archived_documents_relationships_document_signature_sysr_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet → GET /metadata/query/documents/relationships/document_signature__sysr
# Retrieve Document Signature Metadata
func metadata_query_documents_relationships_document_signature_sysr_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/query/documents/relationships/document_signature__sysr"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_query_documents_relationships_document_signature_sysr_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_query_documents_relationships_document_signature_sysr_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataVobjectsGet → GET /metadata/vobjects
# Retrieve Object Collection
func metadata_vobjects_get(
	# loc: bool   Eg: true
	# To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
	loc = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/vobjects"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["loc"] = loc

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_vobjects_get_threaded(
	# loc: bool   Eg: true
	# To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
	loc = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_vobjects_get")
	bzz_callable.bind(
		loc,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataVobjectsObjectNameActionsCanceldeploymentPost → POST /metadata/vobjects/{object_name}/actions/canceldeployment
# Cancel Raw Object Deployment
func metadata_vobjects_object_name_actions_canceldeployment_post(
	# objectName: String = ""   Eg: objectName_example
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/vobjects/{object_name}/actions/canceldeployment".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_vobjects_object_name_actions_canceldeployment_post_threaded(
	# objectName: String = ""   Eg: objectName_example
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_vobjects_object_name_actions_canceldeployment_post")
	bzz_callable.bind(
		objectName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataVobjectsObjectNameFieldsObjectFieldNameGet → GET /metadata/vobjects/{object_name}/fields/{object_field_name}
# Retrieve Object Field Metadata
func metadata_vobjects_object_name_fields_object_field_name_get(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectFieldName: String = ""   Eg: objectFieldName_example
	# The object field name value (id, name__v, external_id__v, etc.).
	objectFieldName: String,
	# loc: bool   Eg: true
	# To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
	loc = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/vobjects/{object_name}/fields/{object_field_name}".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "object_field_name" + "}", _bzz_urlize_path_param(objectFieldName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["loc"] = loc

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_vobjects_object_name_fields_object_field_name_get_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectFieldName: String = ""   Eg: objectFieldName_example
	# The object field name value (id, name__v, external_id__v, etc.).
	objectFieldName: String,
	# loc: bool   Eg: true
	# To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
	loc = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_vobjects_object_name_fields_object_field_name_get")
	bzz_callable.bind(
		objectName,
		objectFieldName,
		loc,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataVobjectsObjectNameGet → GET /metadata/vobjects/{object_name}
# Retrieve Object Metadata
func metadata_vobjects_object_name_get(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# loc: bool   Eg: true
	# To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
	loc = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/vobjects/{object_name}".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["loc"] = loc

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_vobjects_object_name_get_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# loc: bool   Eg: true
	# To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
	loc = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_vobjects_object_name_get")
	bzz_callable.bind(
		objectName,
		loc,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataVobjectsObjectNamePageLayoutsGet → GET /metadata/vobjects/{object_name}/page_layouts
# Retrieve Page Layouts
func metadata_vobjects_object_name_page_layouts_get(
	# objectName: String = ""   Eg: objectName_example
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/vobjects/{object_name}/page_layouts".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_vobjects_object_name_page_layouts_get_threaded(
	# objectName: String = ""   Eg: objectName_example
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_vobjects_object_name_page_layouts_get")
	bzz_callable.bind(
		objectName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation metadataVobjectsObjectNamePageLayoutsLayoutNameGet → GET /metadata/vobjects/{object_name}/page_layouts/{layout_name}
# Retrieve Page Layout Metadata
func metadata_vobjects_object_name_page_layouts_layout_name_get(
	# objectName: String = ""   Eg: objectName_example
	# The name of the object from which to retrieve page layout metadata.
	objectName: String,
	# layoutName: String = ""   Eg: layoutName_example
	# The name of the page layout from which to retrieve metadata.
	layoutName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/metadata/vobjects/{object_name}/page_layouts/{layout_name}".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "layout_name" + "}", _bzz_urlize_path_param(layoutName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func metadata_vobjects_object_name_page_layouts_layout_name_get_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The name of the object from which to retrieve page layout metadata.
	objectName: String,
	# layoutName: String = ""   Eg: layoutName_example
	# The name of the page layout from which to retrieve metadata.
	layoutName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "metadata_vobjects_object_name_page_layouts_layout_name_get")
	bzz_callable.bind(
		objectName,
		layoutName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation notificationsHistoriesGet → GET /notifications/histories
# Retrieve Email Notification Histories
func notifications_histories_get(
	# startDate: String = ""   Eg: YYYY-MM-DD
	# Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.
	startDate = "",
	# endDate: String = ""   Eg: YYYY-MM-DD
	# Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.
	endDate = "",
	# allDates: bool   Eg: true
	# Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.
	allDates = null,
	# formatResult: String = ""   Eg: csv
	# To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.
	formatResult = "",
	# limit: String = ""   Eg: limit_example
	# Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
	limit = "",
	# offset: String = ""   Eg: offset_example
	# Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.
	offset = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/notifications/histories"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["start_date"] = startDate
	bzz_query["end_date"] = endDate
	bzz_query["all_dates"] = allDates
	bzz_query["format_result"] = formatResult
	bzz_query["limit"] = limit
	bzz_query["offset"] = offset

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func notifications_histories_get_threaded(
	# startDate: String = ""   Eg: YYYY-MM-DD
	# Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.
	startDate = "",
	# endDate: String = ""   Eg: YYYY-MM-DD
	# Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.
	endDate = "",
	# allDates: bool   Eg: true
	# Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.
	allDates = null,
	# formatResult: String = ""   Eg: csv
	# To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.
	formatResult = "",
	# limit: String = ""   Eg: limit_example
	# Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
	limit = "",
	# offset: String = ""   Eg: offset_example
	# Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.
	offset = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "notifications_histories_get")
	bzz_callable.bind(
		startDate,
		endDate,
		allDates,
		formatResult,
		limit,
		offset,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectWorkflowActionsActionGet → GET /object/workflow/actions/{action}
# Retrieve Bulk Workflow Action Details
func object_workflow_actions_action_get(
	# action: String = ""   Eg: action_example
	action: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/object/workflow/actions/{action}".replace("{" + "action" + "}", _bzz_urlize_path_param(action))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func object_workflow_actions_action_get_threaded(
	# action: String = ""   Eg: action_example
	action: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "object_workflow_actions_action_get")
	bzz_callable.bind(
		action,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectWorkflowActionsActionPost → POST /object/workflow/actions/{action}
# Initiate Workflow Actions on Multiple Workflows
func object_workflow_actions_action_post(
	# action: String = ""   Eg: action_example
	action: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/object/workflow/actions/{action}".replace("{" + "action" + "}", _bzz_urlize_path_param(action))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func object_workflow_actions_action_post_threaded(
	# action: String = ""   Eg: action_example
	action: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "object_workflow_actions_action_post")
	bzz_callable.bind(
		action,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectWorkflowActionsCanceltasksPost → POST /object/workflow/actions/canceltasks
# Cancel Workflow Tasks
func object_workflow_actions_canceltasks_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/object/workflow/actions/canceltasks"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func object_workflow_actions_canceltasks_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "object_workflow_actions_canceltasks_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectWorkflowActionsCancelworkflowsPost → POST /object/workflow/actions/cancelworkflows
# Cancel Workflows
func object_workflow_actions_cancelworkflows_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/object/workflow/actions/cancelworkflows"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func object_workflow_actions_cancelworkflows_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "object_workflow_actions_cancelworkflows_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectWorkflowActionsGet → GET /object/workflow/actions
# Retrieve Bulk Workflow Actions
func object_workflow_actions_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/object/workflow/actions"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func object_workflow_actions_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "object_workflow_actions_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectWorkflowActionsReassigntasksPost → POST /object/workflow/actions/reassigntasks
# Reassign Workflow Tasks
func object_workflow_actions_reassigntasks_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/object/workflow/actions/reassigntasks"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func object_workflow_actions_reassigntasks_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "object_workflow_actions_reassigntasks_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectWorkflowActionsReplaceworkflowownerPost → POST /object/workflow/actions/replaceworkflowowner
# Replace Workflow Owner
func object_workflow_actions_replaceworkflowowner_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/object/workflow/actions/replaceworkflowowner"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func object_workflow_actions_replaceworkflowowner_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "object_workflow_actions_replaceworkflowowner_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersActionsExportJobIdResultsGet → GET /objects/binders/actions/export/{job_id}/results
# Retrieve Binder Export Results
func objects_binders_actions_export_job_id_results_get(
	# jobId: String = ""   Eg: jobId_example
	# The id value of the requested export job. This is returned with the export binder requests above.
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/actions/export/{job_id}/results".replace("{" + "job_id" + "}", _bzz_urlize_path_param(jobId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_actions_export_job_id_results_get_threaded(
	# jobId: String = ""   Eg: jobId_example
	# The id value of the requested export job. This is returned with the export binder requests above.
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_actions_export_job_id_results_get")
	bzz_callable.bind(
		jobId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersBinderIdActionsExportPost → POST /objects/binders/{binder_id}/actions/export
# Export Binder (Latest Version)
func objects_binders_binder_id_actions_export_post(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# source: bool   Eg: true
	# to include source content or not
	source = null,
	# renditiontype: String = ""   Eg: viewable_rendition__v
	# to include viewable renditions
	renditiontype = "",
	# docversion: String = ""   Eg: major
	# to include all major versions
	docversion = "",
	# attachments: String = ""   Eg: all
	# to include all versions of attachments
	attachments = "",
	# export: String = ""   Eg: name__v,title__v,document_number__v
	# configurable filename metadata
	export = "",
	# docfield: bool   Eg: false
	# to exclude document metadata csv
	docfield = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{binder_id}/actions/export".replace("{" + "binder_id" + "}", _bzz_urlize_path_param(binderId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["source"] = source
	bzz_query["renditiontype"] = renditiontype
	bzz_query["docversion"] = docversion
	bzz_query["attachments"] = attachments
	bzz_query["export"] = export
	bzz_query["docfield"] = docfield

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_binder_id_actions_export_post_threaded(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# source: bool   Eg: true
	# to include source content or not
	source = null,
	# renditiontype: String = ""   Eg: viewable_rendition__v
	# to include viewable renditions
	renditiontype = "",
	# docversion: String = ""   Eg: major
	# to include all major versions
	docversion = "",
	# attachments: String = ""   Eg: all
	# to include all versions of attachments
	attachments = "",
	# export: String = ""   Eg: name__v,title__v,document_number__v
	# configurable filename metadata
	export = "",
	# docfield: bool   Eg: false
	# to exclude document metadata csv
	docfield = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_binder_id_actions_export_post")
	bzz_callable.bind(
		binderId,
		source,
		renditiontype,
		docversion,
		attachments,
		export,
		docfield,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersBinderIdActionsPost → POST /objects/binders/{binder_id}/actions
# Refresh Binder Auto-Filing
func objects_binders_binder_id_actions_post(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{binder_id}/actions".replace("{" + "binder_id" + "}", _bzz_urlize_path_param(binderId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_binder_id_actions_post_threaded(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_binder_id_actions_post")
	bzz_callable.bind(
		binderId,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersBinderIdBindingRulePut → PUT /objects/binders/{binder_id}/binding_rule
# Update Binding Rule
func objects_binders_binder_id_binding_rule_put(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{binder_id}/binding_rule".replace("{" + "binder_id" + "}", _bzz_urlize_path_param(binderId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_binder_id_binding_rule_put_threaded(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_binder_id_binding_rule_put")
	bzz_callable.bind(
		binderId,
		contentType,
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersBinderIdDelete → DELETE /objects/binders/{binder_id}
# Delete Binder
func objects_binders_binder_id_delete(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{binder_id}".replace("{" + "binder_id" + "}", _bzz_urlize_path_param(binderId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_binder_id_delete_threaded(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_binder_id_delete")
	bzz_callable.bind(
		binderId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersBinderIdDocumentsNodeIdBindingRulePut → PUT /objects/binders/{binder_id}/documents/{node_id}/binding_rule
# Update Binder Document Binding Rule
func objects_binders_binder_id_documents_node_id_binding_rule_put(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# nodeId: String = ""   Eg: nodeId_example
	# The binder node id field value.
	nodeId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{binder_id}/documents/{node_id}/binding_rule".replace("{" + "binder_id" + "}", _bzz_urlize_path_param(binderId)).replace("{" + "node_id" + "}", _bzz_urlize_path_param(nodeId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_binder_id_documents_node_id_binding_rule_put_threaded(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# nodeId: String = ""   Eg: nodeId_example
	# The binder node id field value.
	nodeId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_binder_id_documents_node_id_binding_rule_put")
	bzz_callable.bind(
		binderId,
		nodeId,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersBinderIdDocumentsPost → POST /objects/binders/{binder_id}/documents
# Add Document to Binder
func objects_binders_binder_id_documents_post(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{binder_id}/documents".replace("{" + "binder_id" + "}", _bzz_urlize_path_param(binderId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_binder_id_documents_post_threaded(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_binder_id_documents_post")
	bzz_callable.bind(
		binderId,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersBinderIdDocumentsSectionIdDelete → DELETE /objects/binders/{binder_id}/documents/{section_id}
# Remove Document from Binder
func objects_binders_binder_id_documents_section_id_delete(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# sectionId: String = ""   Eg: sectionId_example
	# The binder node id field value.
	sectionId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{binder_id}/documents/{section_id}".replace("{" + "binder_id" + "}", _bzz_urlize_path_param(binderId)).replace("{" + "section_id" + "}", _bzz_urlize_path_param(sectionId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_binder_id_documents_section_id_delete_threaded(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# sectionId: String = ""   Eg: sectionId_example
	# The binder node id field value.
	sectionId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_binder_id_documents_section_id_delete")
	bzz_callable.bind(
		binderId,
		sectionId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersBinderIdDocumentsSectionIdPut → PUT /objects/binders/{binder_id}/documents/{section_id}
# Move Document in Binder
func objects_binders_binder_id_documents_section_id_put(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# sectionId: String = ""   Eg: sectionId_example
	# The binder node id field value.
	sectionId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{binder_id}/documents/{section_id}".replace("{" + "binder_id" + "}", _bzz_urlize_path_param(binderId)).replace("{" + "section_id" + "}", _bzz_urlize_path_param(sectionId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_binder_id_documents_section_id_put_threaded(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# sectionId: String = ""   Eg: sectionId_example
	# The binder node id field value.
	sectionId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_binder_id_documents_section_id_put")
	bzz_callable.bind(
		binderId,
		sectionId,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersBinderIdGet → GET /objects/binders/{binder_id}
# Retrieve Binder
func objects_binders_binder_id_get(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# depth: String = ""   Eg: depth_example
	# To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.
	depth = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{binder_id}".replace("{" + "binder_id" + "}", _bzz_urlize_path_param(binderId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["depth"] = depth

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_binder_id_get_threaded(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# depth: String = ""   Eg: depth_example
	# To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.
	depth = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_binder_id_get")
	bzz_callable.bind(
		binderId,
		depth,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersBinderIdPost → POST /objects/binders/{binder_id}
# Create Binder Version
func objects_binders_binder_id_post(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{binder_id}".replace("{" + "binder_id" + "}", _bzz_urlize_path_param(binderId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_binder_id_post_threaded(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_binder_id_post")
	bzz_callable.bind(
		binderId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersBinderIdPut → PUT /objects/binders/{binder_id}
# Update Binder
func objects_binders_binder_id_put(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{binder_id}".replace("{" + "binder_id" + "}", _bzz_urlize_path_param(binderId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_binder_id_put_threaded(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_binder_id_put")
	bzz_callable.bind(
		binderId,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete → DELETE /objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}
# Remove Users & Groups from Roles on a Single Binder
func objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete(
	# binderId: String = ""   Eg: binderId_example
	# The id value of the binder from which to remove roles.
	binderId: String,
	# roleNameAndUserOrGroup: String = ""   Eg: roleNameAndUserOrGroup_example
	# The name of the role from which to remove the user or group followed by either `user` or `group`. The format is `{role_name}.{user_or_group}`. For example, `consumer__v.user`.
	roleNameAndUserOrGroup: String,
	# id: String = ""   Eg: id_example
	# The id value of the user or group to remove from the role.
	id: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}".replace("{" + "binder_id" + "}", _bzz_urlize_path_param(binderId)).replace("{" + "role_name_and_user_or_group" + "}", _bzz_urlize_path_param(roleNameAndUserOrGroup)).replace("{" + "id" + "}", _bzz_urlize_path_param(id))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete_threaded(
	# binderId: String = ""   Eg: binderId_example
	# The id value of the binder from which to remove roles.
	binderId: String,
	# roleNameAndUserOrGroup: String = ""   Eg: roleNameAndUserOrGroup_example
	# The name of the role from which to remove the user or group followed by either `user` or `group`. The format is `{role_name}.{user_or_group}`. For example, `consumer__v.user`.
	roleNameAndUserOrGroup: String,
	# id: String = ""   Eg: id_example
	# The id value of the user or group to remove from the role.
	id: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_binder_id_roles_role_name_and_user_or_group_id_delete")
	bzz_callable.bind(
		binderId,
		roleNameAndUserOrGroup,
		id,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersBinderIdSectionsNodeIdBindingRulePut → PUT /objects/binders/{binder_id}/sections/{node_id}/binding_rule
# Update Binder Section Binding Rule
func objects_binders_binder_id_sections_node_id_binding_rule_put(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# nodeId: String = ""   Eg: nodeId_example
	# The binder node id field value.
	nodeId: String,
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{binder_id}/sections/{node_id}/binding_rule".replace("{" + "binder_id" + "}", _bzz_urlize_path_param(binderId)).replace("{" + "node_id" + "}", _bzz_urlize_path_param(nodeId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_binder_id_sections_node_id_binding_rule_put_threaded(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# nodeId: String = ""   Eg: nodeId_example
	# The binder node id field value.
	nodeId: String,
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_binder_id_sections_node_id_binding_rule_put")
	bzz_callable.bind(
		binderId,
		nodeId,
		contentType,
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersBinderIdSectionsNodeIdPut → PUT /objects/binders/{binder_id}/sections/{node_id}
# Update Binder Section
func objects_binders_binder_id_sections_node_id_put(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# nodeId: String = ""   Eg: nodeId_example
	# The binder node id of the section.
	nodeId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{binder_id}/sections/{node_id}".replace("{" + "binder_id" + "}", _bzz_urlize_path_param(binderId)).replace("{" + "node_id" + "}", _bzz_urlize_path_param(nodeId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_binder_id_sections_node_id_put_threaded(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# nodeId: String = ""   Eg: nodeId_example
	# The binder node id of the section.
	nodeId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_binder_id_sections_node_id_put")
	bzz_callable.bind(
		binderId,
		nodeId,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersBinderIdSectionsPost → POST /objects/binders/{binder_id}/sections
# Create Binder Section
func objects_binders_binder_id_sections_post(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{binder_id}/sections".replace("{" + "binder_id" + "}", _bzz_urlize_path_param(binderId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_binder_id_sections_post_threaded(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_binder_id_sections_post")
	bzz_callable.bind(
		binderId,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersBinderIdSectionsSectionIdDelete → DELETE /objects/binders/{binder_id}/sections/{section_id}
# Delete Binder Section
func objects_binders_binder_id_sections_section_id_delete(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# sectionId: String = ""   Eg: sectionId_example
	# The binder node id field value.
	sectionId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{binder_id}/sections/{section_id}".replace("{" + "binder_id" + "}", _bzz_urlize_path_param(binderId)).replace("{" + "section_id" + "}", _bzz_urlize_path_param(sectionId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_binder_id_sections_section_id_delete_threaded(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# sectionId: String = ""   Eg: sectionId_example
	# The binder node id field value.
	sectionId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_binder_id_sections_section_id_delete")
	bzz_callable.bind(
		binderId,
		sectionId,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersBinderIdSectionsSectionIdGet → GET /objects/binders/{binder_id}/sections/{section_id}
# Retrieve Binder Sections
func objects_binders_binder_id_sections_section_id_get(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# sectionId: String = ""   Eg: sectionId_example
	# The binder node id field value.
	sectionId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{binder_id}/sections/{section_id}".replace("{" + "binder_id" + "}", _bzz_urlize_path_param(binderId)).replace("{" + "section_id" + "}", _bzz_urlize_path_param(sectionId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_binder_id_sections_section_id_get_threaded(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# sectionId: String = ""   Eg: sectionId_example
	# The binder node id field value.
	sectionId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_binder_id_sections_section_id_get")
	bzz_callable.bind(
		binderId,
		sectionId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersBinderIdVersionsGet → GET /objects/binders/{binder_id}/versions
# Retrieve All Binder Versions
func objects_binders_binder_id_versions_get(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{binder_id}/versions".replace("{" + "binder_id" + "}", _bzz_urlize_path_param(binderId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_binder_id_versions_get_threaded(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_binder_id_versions_get")
	bzz_callable.bind(
		binderId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost → POST /objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export
# Export Binder (Specific Version)
func objects_binders_binder_id_versions_major_version_minor_version_actions_export_post(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The binder major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The binder minor_version_number__v field value.
	minorVersion: String,
	# source: bool   Eg: true
	# to include source content or not
	source = null,
	# renditiontype: String = ""   Eg: viewable_rendition__v
	# to include viewable renditions
	renditiontype = "",
	# docversion: String = ""   Eg: major
	# to include all major versions
	docversion = "",
	# attachments: String = ""   Eg: all
	# to include all versions of attachments
	attachments = "",
	# export: String = ""   Eg: name__v,title__v,document_number__v
	# configurable filename metadata
	export = "",
	# docfield: bool   Eg: false
	# to exclude document metadata csv
	docfield = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export".replace("{" + "binder_id" + "}", _bzz_urlize_path_param(binderId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["source"] = source
	bzz_query["renditiontype"] = renditiontype
	bzz_query["docversion"] = docversion
	bzz_query["attachments"] = attachments
	bzz_query["export"] = export
	bzz_query["docfield"] = docfield

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_binder_id_versions_major_version_minor_version_actions_export_post_threaded(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The binder major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The binder minor_version_number__v field value.
	minorVersion: String,
	# source: bool   Eg: true
	# to include source content or not
	source = null,
	# renditiontype: String = ""   Eg: viewable_rendition__v
	# to include viewable renditions
	renditiontype = "",
	# docversion: String = ""   Eg: major
	# to include all major versions
	docversion = "",
	# attachments: String = ""   Eg: all
	# to include all versions of attachments
	attachments = "",
	# export: String = ""   Eg: name__v,title__v,document_number__v
	# configurable filename metadata
	export = "",
	# docfield: bool   Eg: false
	# to exclude document metadata csv
	docfield = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_binder_id_versions_major_version_minor_version_actions_export_post")
	bzz_callable.bind(
		binderId,
		majorVersion,
		minorVersion,
		source,
		renditiontype,
		docversion,
		attachments,
		export,
		docfield,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete → DELETE /objects/binders/{binder_id}/versions/{major_version}/{minor_version}
# Delete Binder Version
func objects_binders_binder_id_versions_major_version_minor_version_delete(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The binder major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The binder minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{binder_id}/versions/{major_version}/{minor_version}".replace("{" + "binder_id" + "}", _bzz_urlize_path_param(binderId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_binder_id_versions_major_version_minor_version_delete_threaded(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The binder major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The binder minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_binder_id_versions_major_version_minor_version_delete")
	bzz_callable.bind(
		binderId,
		majorVersion,
		minorVersion,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersBinderIdVersionsMajorVersionMinorVersionGet → GET /objects/binders/{binder_id}/versions/{major_version}/{minor_version}
# Retrieve Binder Version
func objects_binders_binder_id_versions_major_version_minor_version_get(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The binder major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The binder minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{binder_id}/versions/{major_version}/{minor_version}".replace("{" + "binder_id" + "}", _bzz_urlize_path_param(binderId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_binder_id_versions_major_version_minor_version_get_threaded(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The binder major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The binder minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_binder_id_versions_major_version_minor_version_get")
	bzz_callable.bind(
		binderId,
		majorVersion,
		minorVersion,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersBinderIdVersionsMajorVersionMinorVersionPut → PUT /objects/binders/{binder_id}/versions/{major_version}/{minor_version}
# Update Binder Version
func objects_binders_binder_id_versions_major_version_minor_version_put(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The binder major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The binder minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{binder_id}/versions/{major_version}/{minor_version}".replace("{" + "binder_id" + "}", _bzz_urlize_path_param(binderId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_binder_id_versions_major_version_minor_version_put_threaded(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The binder major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The binder minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_binder_id_versions_major_version_minor_version_put")
	bzz_callable.bind(
		binderId,
		majorVersion,
		minorVersion,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost → POST /objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships
# Create Binder Relationship
func objects_binders_binder_id_versions_major_version_minor_version_relationships_post(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The binder major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The binder minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships".replace("{" + "binder_id" + "}", _bzz_urlize_path_param(binderId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_binder_id_versions_major_version_minor_version_relationships_post_threaded(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The binder major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The binder minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_binder_id_versions_major_version_minor_version_relationships_post")
	bzz_callable.bind(
		binderId,
		majorVersion,
		minorVersion,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete → DELETE /objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}
# Delete Binder Relationship
func objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The binder major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The binder minor_version_number__v field value.
	minorVersion: String,
	# relationshipId: String = ""   Eg: relationshipId_example
	# The binder relationship id field value.
	relationshipId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}".replace("{" + "binder_id" + "}", _bzz_urlize_path_param(binderId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion)).replace("{" + "relationship_id" + "}", _bzz_urlize_path_param(relationshipId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete_threaded(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The binder major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The binder minor_version_number__v field value.
	minorVersion: String,
	# relationshipId: String = ""   Eg: relationshipId_example
	# The binder relationship id field value.
	relationshipId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_delete")
	bzz_callable.bind(
		binderId,
		majorVersion,
		minorVersion,
		relationshipId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet → GET /objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}
# Retrieve Binder Relationship
func objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The binder major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The binder minor_version_number__v field value.
	minorVersion: String,
	# relationshipId: String = ""   Eg: relationshipId_example
	# The binder relationship id field value.
	relationshipId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}".replace("{" + "binder_id" + "}", _bzz_urlize_path_param(binderId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion)).replace("{" + "relationship_id" + "}", _bzz_urlize_path_param(relationshipId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get_threaded(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The binder major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The binder minor_version_number__v field value.
	minorVersion: String,
	# relationshipId: String = ""   Eg: relationshipId_example
	# The binder relationship id field value.
	relationshipId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_binder_id_versions_major_version_minor_version_relationships_relationship_id_get")
	bzz_callable.bind(
		binderId,
		majorVersion,
		minorVersion,
		relationshipId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet → GET /objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}
# Retrieve Binder Version Section
func objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The binder major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The binder minor_version_number__v field value.
	minorVersion: String,
	# sectionId: String = ""   Eg: sectionId_example
	# Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.
	sectionId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}".replace("{" + "binder_id" + "}", _bzz_urlize_path_param(binderId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion)).replace("{" + "section_id" + "}", _bzz_urlize_path_param(sectionId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get_threaded(
	# binderId: String = ""   Eg: binderId_example
	# The binder id field value.
	binderId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The binder major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The binder minor_version_number__v field value.
	minorVersion: String,
	# sectionId: String = ""   Eg: sectionId_example
	# Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.
	sectionId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_binder_id_versions_major_version_minor_version_sections_section_id_get")
	bzz_callable.bind(
		binderId,
		majorVersion,
		minorVersion,
		sectionId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersIdRolesGet → GET /objects/binders/{id}/roles
# Retrieve All Binder Roles
func objects_binders_id_roles_get(
	# id: String = ""   Eg: id_example
	id: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{id}/roles".replace("{" + "id" + "}", _bzz_urlize_path_param(id))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_id_roles_get_threaded(
	# id: String = ""   Eg: id_example
	id: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_id_roles_get")
	bzz_callable.bind(
		id,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersIdRolesPost → POST /objects/binders/{id}/roles
# Assign Users & Groups to Roles on a Single Binder
func objects_binders_id_roles_post(
	# id: String = ""   Eg: id_example
	id: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{id}/roles".replace("{" + "id" + "}", _bzz_urlize_path_param(id))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_id_roles_post_threaded(
	# id: String = ""   Eg: id_example
	id: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_id_roles_post")
	bzz_callable.bind(
		id,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersIdRolesRoleNameGet → GET /objects/binders/{id}/roles/{role_name}
# Retrieve Document Role
func objects_binders_id_roles_role_name_get(
	# id: String = ""   Eg: id_example
	# The binder `id`.
	id: String,
	# roleName: String = ""   Eg: roleName_example
	# The name of the role to retrieve. For example, `owner__v`.
	roleName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{id}/roles/{role_name}".replace("{" + "id" + "}", _bzz_urlize_path_param(id)).replace("{" + "role_name" + "}", _bzz_urlize_path_param(roleName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_id_roles_role_name_get_threaded(
	# id: String = ""   Eg: id_example
	# The binder `id`.
	id: String,
	# roleName: String = ""   Eg: roleName_example
	# The name of the role to retrieve. For example, `owner__v`.
	roleName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_id_roles_role_name_get")
	bzz_callable.bind(
		id,
		roleName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet → GET /objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions
# Retrieve Binder User Actions
func objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get(
	# id: String = ""   Eg: id_example
	# The binder id field value from which to retrieve available user actions.
	id: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The major version number of the binder.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The minor version number of the binder.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions".replace("{" + "id" + "}", _bzz_urlize_path_param(id)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get_threaded(
	# id: String = ""   Eg: id_example
	# The binder id field value from which to retrieve available user actions.
	id: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The major version number of the binder.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The minor version number of the binder.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_id_versions_major_version_minor_version_lifecycle_actions_get")
	bzz_callable.bind(
		id,
		majorVersion,
		minorVersion,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet → GET /objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements
# Retrieve Binder Entry Criteria
func objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get(
	# id: String = ""   Eg: id_example
	# The binder id field value from which to retrieve available user actions.
	id: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The major version number of the binder.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The minor version number of the binder.
	minorVersion: String,
	# nameV: String = ""   Eg: nameV_example
	# The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
	nameV: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements".replace("{" + "id" + "}", _bzz_urlize_path_param(id)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion)).replace("{" + "name__v" + "}", _bzz_urlize_path_param(nameV))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get_threaded(
	# id: String = ""   Eg: id_example
	# The binder id field value from which to retrieve available user actions.
	id: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The major version number of the binder.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The minor version number of the binder.
	minorVersion: String,
	# nameV: String = ""   Eg: nameV_example
	# The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
	nameV: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get")
	bzz_callable.bind(
		id,
		majorVersion,
		minorVersion,
		nameV,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut → PUT /objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}
# Initiate Binder User Action
func objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put(
	# id: String = ""   Eg: id_example
	# The binder id field value from which to retrieve available user actions.
	id: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The major version number of the binder.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The minor version number of the binder.
	minorVersion: String,
	# nameV: String = ""   Eg: nameV_example
	# The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
	nameV: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}".replace("{" + "id" + "}", _bzz_urlize_path_param(id)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion)).replace("{" + "name__v" + "}", _bzz_urlize_path_param(nameV))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put_threaded(
	# id: String = ""   Eg: id_example
	# The binder id field value from which to retrieve available user actions.
	id: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The major version number of the binder.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The minor version number of the binder.
	minorVersion: String,
	# nameV: String = ""   Eg: nameV_example
	# The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
	nameV: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_id_versions_major_version_minor_version_lifecycle_actions_name_v_put")
	bzz_callable.bind(
		id,
		majorVersion,
		minorVersion,
		nameV,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersLifecycleActionsPost → POST /objects/binders/lifecycle_actions
# Retrieve User Actions on Multiple Binders
func objects_binders_lifecycle_actions_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/lifecycle_actions"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_lifecycle_actions_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_lifecycle_actions_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersLifecycleActionsUserActionNamePut → PUT /objects/binders/lifecycle_actions/{user_action_name}
# Initiate Bulk Binder User Actions
func objects_binders_lifecycle_actions_user_action_name_put(
	# userActionName: String = ""   Eg: userActionName_example
	# The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.
	userActionName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/lifecycle_actions/{user_action_name}".replace("{" + "user_action_name" + "}", _bzz_urlize_path_param(userActionName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_lifecycle_actions_user_action_name_put_threaded(
	# userActionName: String = ""   Eg: userActionName_example
	# The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.
	userActionName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_lifecycle_actions_user_action_name_put")
	bzz_callable.bind(
		userActionName,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersPost → POST /objects/binders
# Create Binder
func objects_binders_post(
	# async: bool   Eg: true
	# When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async=true). This helps speed up the response time from Vault when processing large amounts of data. 
	async = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["async"] = async

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_post_threaded(
	# async: bool   Eg: true
	# When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async=true). This helps speed up the response time from Vault when processing large amounts of data. 
	async = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_post")
	bzz_callable.bind(
		async,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersTemplatesGet → GET /objects/binders/templates
# Retrieve Binder Template Collection
func objects_binders_templates_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/templates"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_templates_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_templates_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersTemplatesPost → POST /objects/binders/templates
# Create Binder Template
func objects_binders_templates_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/templates"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_templates_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_templates_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersTemplatesPut → PUT /objects/binders/templates
# Update Binder Template
func objects_binders_templates_put(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/templates"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_templates_put_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_templates_put")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersTemplatesTemplateNameBindernodesGet → GET /objects/binders/templates/{template_name}/bindernodes
# Retrieve Binder Template Node Attributes
func objects_binders_templates_template_name_bindernodes_get(
	# templateName: String = ""   Eg: templateName_example
	# The binder template name__v field value.
	templateName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/templates/{template_name}/bindernodes".replace("{" + "template_name" + "}", _bzz_urlize_path_param(templateName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_templates_template_name_bindernodes_get_threaded(
	# templateName: String = ""   Eg: templateName_example
	# The binder template name__v field value.
	templateName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_templates_template_name_bindernodes_get")
	bzz_callable.bind(
		templateName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersTemplatesTemplateNameBindernodesPost → POST /objects/binders/templates/{template_name}/bindernodes
# Create Binder Template Node
func objects_binders_templates_template_name_bindernodes_post(
	# templateName: String = ""   Eg: templateName_example
	# The binder template name__v field value.
	templateName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/templates/{template_name}/bindernodes".replace("{" + "template_name" + "}", _bzz_urlize_path_param(templateName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_templates_template_name_bindernodes_post_threaded(
	# templateName: String = ""   Eg: templateName_example
	# The binder template name__v field value.
	templateName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_templates_template_name_bindernodes_post")
	bzz_callable.bind(
		templateName,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersTemplatesTemplateNameBindernodesPut → PUT /objects/binders/templates/{template_name}/bindernodes
# Replace Binder Template Nodes
func objects_binders_templates_template_name_bindernodes_put(
	# templateName: String = ""   Eg: templateName_example
	# The binder template name__v field value.
	templateName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/templates/{template_name}/bindernodes".replace("{" + "template_name" + "}", _bzz_urlize_path_param(templateName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_templates_template_name_bindernodes_put_threaded(
	# templateName: String = ""   Eg: templateName_example
	# The binder template name__v field value.
	templateName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_templates_template_name_bindernodes_put")
	bzz_callable.bind(
		templateName,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersTemplatesTemplateNameDelete → DELETE /objects/binders/templates/{template_name}
# Delete Binder Template
func objects_binders_templates_template_name_delete(
	# templateName: String = ""   Eg: templateName_example
	# The binder template name__v field value.
	templateName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/templates/{template_name}".replace("{" + "template_name" + "}", _bzz_urlize_path_param(templateName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_templates_template_name_delete_threaded(
	# templateName: String = ""   Eg: templateName_example
	# The binder template name__v field value.
	templateName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_templates_template_name_delete")
	bzz_callable.bind(
		templateName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsBindersTemplatesTemplateNameGet → GET /objects/binders/templates/{template_name}
# Retrieve Binder Template Attributes
func objects_binders_templates_template_name_get(
	# templateName: String = ""   Eg: templateName_example
	# The binder template name__v field value.
	templateName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/binders/templates/{template_name}".replace("{" + "template_name" + "}", _bzz_urlize_path_param(templateName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_binders_templates_template_name_get_threaded(
	# templateName: String = ""   Eg: templateName_example
	# The binder template name__v field value.
	templateName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_binders_templates_template_name_get")
	bzz_callable.bind(
		templateName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDeletionsDocumentsGet → GET /objects/deletions/documents
# Retrieve Deleted Document IDs
func objects_deletions_documents_get(
	# startDate: String = ""   Eg: startDate_example
	# Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z
	startDate = "",
	# endDate: String = ""   Eg: endDate_example
	# Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z 
	endDate = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/deletions/documents"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["start_date"] = startDate
	bzz_query["end_date"] = endDate

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_deletions_documents_get_threaded(
	# startDate: String = ""   Eg: startDate_example
	# Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z
	startDate = "",
	# endDate: String = ""   Eg: endDate_example
	# Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z 
	endDate = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_deletions_documents_get")
	bzz_callable.bind(
		startDate,
		endDate,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDeletionsVobjectsObjectNameGet → GET /objects/deletions/vobjects/{object_name}
# Retrieve Deleted Object Record ID
func objects_deletions_vobjects_object_name_get(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/deletions/vobjects/{object_name}".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_deletions_vobjects_object_name_get_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_deletions_vobjects_object_name_get")
	bzz_callable.bind(
		objectName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsActionsGet → GET /objects/documents/actions
# Retrieve All Document Workflows
func objects_documents_actions_get(
	# loc: bool   Eg: true
	# When localized (translated) strings are available, retrieve them by setting loc to true.
	loc = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/actions"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["loc"] = loc

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_actions_get_threaded(
	# loc: bool   Eg: true
	# When localized (translated) strings are available, retrieve them by setting loc to true.
	loc = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_actions_get")
	bzz_callable.bind(
		loc,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet → GET /objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results
# Download Controlled Copy Job Results
func objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get(
	# lifecycleAndStateAndAction: String = ""   Eg: lifecycleAndStateAndAction_example
	# The `name__v` values for the lifecycle, state, and action in the format `{lifecycle_name}.{state_name}.{action_name}`. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the `href` under the `artifacts` link.
	lifecycleAndStateAndAction: String,
	# jobId: String = ""   Eg: jobId_example
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results".replace("{" + "lifecycle_and_state_and_action" + "}", _bzz_urlize_path_param(lifecycleAndStateAndAction)).replace("{" + "job_id" + "}", _bzz_urlize_path_param(jobId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get_threaded(
	# lifecycleAndStateAndAction: String = ""   Eg: lifecycleAndStateAndAction_example
	# The `name__v` values for the lifecycle, state, and action in the format `{lifecycle_name}.{state_name}.{action_name}`. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the `href` under the `artifacts` link.
	lifecycleAndStateAndAction: String,
	# jobId: String = ""   Eg: jobId_example
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_actions_lifecycle_and_state_and_action_job_id_results_get")
	bzz_callable.bind(
		lifecycleAndStateAndAction,
		jobId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsActionsWorkflowNameGet → GET /objects/documents/actions/{workflow_name}
# Retrieve Document Workflow Details
func objects_documents_actions_workflow_name_get(
	# workflowName: String = ""   Eg: workflowName_example
	# The document workflow name value.
	workflowName: String,
	# loc: bool   Eg: true
	# When localized (translated) strings are available, retrieve them by setting loc to true.
	loc = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/actions/{workflow_name}".replace("{" + "workflow_name" + "}", _bzz_urlize_path_param(workflowName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["loc"] = loc

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_actions_workflow_name_get_threaded(
	# workflowName: String = ""   Eg: workflowName_example
	# The document workflow name value.
	workflowName: String,
	# loc: bool   Eg: true
	# When localized (translated) strings are available, retrieve them by setting loc to true.
	loc = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_actions_workflow_name_get")
	bzz_callable.bind(
		workflowName,
		loc,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsActionsWorkflowNamePost → POST /objects/documents/actions/{workflow_name}
# Initiate Document Workflow
func objects_documents_actions_workflow_name_post(
	# workflowName: String = ""   Eg: workflowName_example
	# The document workflow name value.
	workflowName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/actions/{workflow_name}".replace("{" + "workflow_name" + "}", _bzz_urlize_path_param(workflowName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_actions_workflow_name_post_threaded(
	# workflowName: String = ""   Eg: workflowName_example
	# The document workflow name value.
	workflowName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_actions_workflow_name_post")
	bzz_callable.bind(
		workflowName,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsAnnotationsBatchDelete → DELETE /objects/documents/annotations/batch
# Delete Annotations
func objects_documents_annotations_batch_delete(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/annotations/batch"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_annotations_batch_delete_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_annotations_batch_delete")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsAnnotationsBatchPost → POST /objects/documents/annotations/batch
# Create Multiple Annotations
func objects_documents_annotations_batch_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization: String,
	# contentType: String = ""   Eg: application/json
	contentType: String,
	# accept: String = ""   Eg: application/json
	accept: String,
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Validate param `authorization` constraints

	# Validate param `contentType` constraints

	# Validate param `accept` constraints

	# Validate param `xVaultAPIClientID` constraints

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/annotations/batch"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_annotations_batch_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization: String,
	# contentType: String = ""   Eg: application/json
	contentType: String,
	# accept: String = ""   Eg: application/json
	accept: String,
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_annotations_batch_post")
	bzz_callable.bind(
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsAnnotationsBatchPut → PUT /objects/documents/annotations/batch
# Update Annotations
func objects_documents_annotations_batch_put(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/annotations/batch"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_annotations_batch_put_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_annotations_batch_put")
	bzz_callable.bind(
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsAnnotationsRepliesBatchPost → POST /objects/documents/annotations/replies/batch
# Add Annotation Replies
func objects_documents_annotations_replies_batch_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/annotations/replies/batch"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_annotations_replies_batch_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_annotations_replies_batch_post")
	bzz_callable.bind(
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsAttachmentsBatchDelete → DELETE /objects/documents/attachments/batch
# Delete Multiple Document Attachments
func objects_documents_attachments_batch_delete(
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/attachments/batch"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_attachments_batch_delete_threaded(
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_attachments_batch_delete")
	bzz_callable.bind(
		accept,
		authorization,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsAttachmentsBatchPost → POST /objects/documents/attachments/batch
# Create Multiple Document Attachments
func objects_documents_attachments_batch_post(
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/attachments/batch"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_attachments_batch_post_threaded(
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_attachments_batch_post")
	bzz_callable.bind(
		accept,
		authorization,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsAttachmentsBatchPut → PUT /objects/documents/attachments/batch
# Update Multiple Document Attachment Descriptions
func objects_documents_attachments_batch_put(
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/attachments/batch"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_attachments_batch_put_threaded(
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_attachments_batch_put")
	bzz_callable.bind(
		accept,
		authorization,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsBatchActionsFileextractJobIdResultsGet → GET /objects/documents/batch/actions/fileextract/{job_id}/results
# Retrieve Document Export Results
func objects_documents_batch_actions_fileextract_job_id_results_get(
	# jobId: String = ""   Eg: jobId_example
	# The id value of the requested export job. This is returned with the export document requests.
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/batch/actions/fileextract/{job_id}/results".replace("{" + "job_id" + "}", _bzz_urlize_path_param(jobId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_batch_actions_fileextract_job_id_results_get_threaded(
	# jobId: String = ""   Eg: jobId_example
	# The id value of the requested export job. This is returned with the export document requests.
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_batch_actions_fileextract_job_id_results_get")
	bzz_callable.bind(
		jobId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsBatchActionsFileextractPost → POST /objects/documents/batch/actions/fileextract
# Export Documents
func objects_documents_batch_actions_fileextract_post(
	# source: bool   Eg: true
	# Optional: To exclude source files, include a query parameter source=false. If omitted, defaults to true.
	source = null,
	# renditions: bool   Eg: false
	# Optional: To include renditions, include a query parameter renditions=true. If omitted, defaults to false.
	renditions = null,
	# allversions: bool   Eg: true
	# Optional: To include all versions or latest version, include a query parameter allversions=true. If omitted, defaults to false.
	allversions = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/batch/actions/fileextract"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["source"] = source
	bzz_query["renditions"] = renditions
	bzz_query["allversions"] = allversions

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_batch_actions_fileextract_post_threaded(
	# source: bool   Eg: true
	# Optional: To exclude source files, include a query parameter source=false. If omitted, defaults to true.
	source = null,
	# renditions: bool   Eg: false
	# Optional: To include renditions, include a query parameter renditions=true. If omitted, defaults to false.
	renditions = null,
	# allversions: bool   Eg: true
	# Optional: To include all versions or latest version, include a query parameter allversions=true. If omitted, defaults to false.
	allversions = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_batch_actions_fileextract_post")
	bzz_callable.bind(
		source,
		renditions,
		allversions,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsBatchActionsReclassifyPut → PUT /objects/documents/batch/actions/reclassify
# Reclassify Multiple Documents
func objects_documents_batch_actions_reclassify_put(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# accept: String = ""   Eg: text/csv
	accept = "",
	# xVaultAPIMigrationMode: bool   Eg: true
	# When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
	xVaultAPIMigrationMode = null,
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/batch/actions/reclassify"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_batch_actions_reclassify_put_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# accept: String = ""   Eg: text/csv
	accept = "",
	# xVaultAPIMigrationMode: bool   Eg: true
	# When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
	xVaultAPIMigrationMode = null,
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_batch_actions_reclassify_put")
	bzz_callable.bind(
		authorization,
		contentType,
		accept,
		xVaultAPIMigrationMode,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsBatchActionsRerenderPost → POST /objects/documents/batch/actions/rerender
# Update Multiple Document Renditions
func objects_documents_batch_actions_rerender_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/batch/actions/rerender"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_batch_actions_rerender_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_batch_actions_rerender_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsBatchDelete → DELETE /objects/documents/batch
# Delete Multiple Documents
func objects_documents_batch_delete(
	# idParam: String = ""   Eg: idParam_example
	# If you’re identifying documents in your input by their external ID
	idParam = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/batch"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["idParam"] = idParam

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_batch_delete_threaded(
	# idParam: String = ""   Eg: idParam_example
	# If you’re identifying documents in your input by their external ID
	idParam = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_batch_delete")
	bzz_callable.bind(
		idParam,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsBatchLockDelete → DELETE /objects/documents/batch/lock
# Undo Collaborative Authoring Checkout
func objects_documents_batch_lock_delete(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/batch/lock"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_batch_lock_delete_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_batch_lock_delete")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsBatchPost → POST /objects/documents/batch
# Create Multiple Documents
func objects_documents_batch_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIMigrationMode: bool   Eg: true
	# When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
	xVaultAPIMigrationMode = null,
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/batch"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_batch_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIMigrationMode: bool   Eg: true
	# When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
	xVaultAPIMigrationMode = null,
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_batch_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIMigrationMode,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsBatchPut → PUT /objects/documents/batch
# Update Multiple Documents
func objects_documents_batch_put(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIMigrationMode: bool   Eg: true
	# When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
	xVaultAPIMigrationMode = null,
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/batch"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_batch_put_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIMigrationMode: bool   Eg: true
	# When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
	xVaultAPIMigrationMode = null,
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_batch_put")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIMigrationMode,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdAnchorsGet → GET /objects/documents/{doc_id}/anchors
# Retrieve Anchor IDs
func objects_documents_doc_id_anchors_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/anchors".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_anchors_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_anchors_get")
	bzz_callable.bind(
		docId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdAnnotationsFileGet → GET /objects/documents/{doc_id}/annotations/file
# Export Document Annotations to PDF
func objects_documents_doc_id_annotations_file_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/annotations/file".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_annotations_file_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_annotations_file_get")
	bzz_callable.bind(
		docId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdAnnotationsFilePost → POST /objects/documents/{doc_id}/annotations/file
# Import Document Annotations from PDF
func objects_documents_doc_id_annotations_file_post(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/annotations/file".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_annotations_file_post_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_annotations_file_post")
	bzz_callable.bind(
		docId,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdAttachmentsAttachmentIdDelete → DELETE /objects/documents/{doc_id}/attachments/{attachment_id}
# Delete Single Document Attachment
func objects_documents_doc_id_attachments_attachment_id_delete(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/attachments/{attachment_id}".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "attachment_id" + "}", _bzz_urlize_path_param(attachmentId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_attachments_attachment_id_delete_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_attachments_attachment_id_delete")
	bzz_callable.bind(
		docId,
		attachmentId,
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdAttachmentsAttachmentIdFileGet → GET /objects/documents/{doc_id}/attachments/{attachment_id}/file
# Download Document Attachment
func objects_documents_doc_id_attachments_attachment_id_file_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/attachments/{attachment_id}/file".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "attachment_id" + "}", _bzz_urlize_path_param(attachmentId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_attachments_attachment_id_file_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_attachments_attachment_id_file_get")
	bzz_callable.bind(
		docId,
		attachmentId,
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdAttachmentsAttachmentIdGet → GET /objects/documents/{doc_id}/attachments/{attachment_id}
# Retrieve Document Attachment Metadata
func objects_documents_doc_id_attachments_attachment_id_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/attachments/{attachment_id}".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "attachment_id" + "}", _bzz_urlize_path_param(attachmentId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_attachments_attachment_id_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_attachments_attachment_id_get")
	bzz_callable.bind(
		docId,
		attachmentId,
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdAttachmentsAttachmentIdPut → PUT /objects/documents/{doc_id}/attachments/{attachment_id}
# Update Document Attachment Description
func objects_documents_doc_id_attachments_attachment_id_put(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/attachments/{attachment_id}".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "attachment_id" + "}", _bzz_urlize_path_param(attachmentId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_attachments_attachment_id_put_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_attachments_attachment_id_put")
	bzz_callable.bind(
		docId,
		attachmentId,
		accept,
		authorization,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete → DELETE /objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}
# Delete Single Document Attachment Version
func objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# attachmentVersion: String = ""   Eg: attachmentVersion_example
	# The attachment version__v field value.
	attachmentVersion: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "attachment_id" + "}", _bzz_urlize_path_param(attachmentId)).replace("{" + "attachment_version" + "}", _bzz_urlize_path_param(attachmentVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# attachmentVersion: String = ""   Eg: attachmentVersion_example
	# The attachment version__v field value.
	attachmentVersion: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_delete")
	bzz_callable.bind(
		docId,
		attachmentId,
		attachmentVersion,
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet → GET /objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file
# Download Document Attachment Version
func objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# attachmentVersion: String = ""   Eg: attachmentVersion_example
	# The attachment version__v field value.
	attachmentVersion: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "attachment_id" + "}", _bzz_urlize_path_param(attachmentId)).replace("{" + "attachment_version" + "}", _bzz_urlize_path_param(attachmentVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# attachmentVersion: String = ""   Eg: attachmentVersion_example
	# The attachment version__v field value.
	attachmentVersion: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_file_get")
	bzz_callable.bind(
		docId,
		attachmentId,
		attachmentVersion,
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet → GET /objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}
# Retrieve Document Attachment Version Metadata
func objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# attachmentVersion: String = ""   Eg: attachmentVersion_example
	# The attachment version__v field value.
	attachmentVersion: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "attachment_id" + "}", _bzz_urlize_path_param(attachmentId)).replace("{" + "attachment_version" + "}", _bzz_urlize_path_param(attachmentVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# attachmentVersion: String = ""   Eg: attachmentVersion_example
	# The attachment version__v field value.
	attachmentVersion: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_get")
	bzz_callable.bind(
		docId,
		attachmentId,
		attachmentVersion,
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost → POST /objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}
# Restore Document Attachment Version
func objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# attachmentVersion: String = ""   Eg: attachmentVersion_example
	# The attachment version__v field value.
	attachmentVersion: String,
	# restore: bool   Eg: true
	# The parameter restore must be set to true. 
	restore = null,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "attachment_id" + "}", _bzz_urlize_path_param(attachmentId)).replace("{" + "attachment_version" + "}", _bzz_urlize_path_param(attachmentVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["restore"] = restore

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# attachmentVersion: String = ""   Eg: attachmentVersion_example
	# The attachment version__v field value.
	attachmentVersion: String,
	# restore: bool   Eg: true
	# The parameter restore must be set to true. 
	restore = null,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_attachments_attachment_id_versions_attachment_version_post")
	bzz_callable.bind(
		docId,
		attachmentId,
		attachmentVersion,
		restore,
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet → GET /objects/documents/{doc_id}/attachments/{attachment_id}/versions
# Retrieve Document Attachment Versions
func objects_documents_doc_id_attachments_attachment_id_versions_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/attachments/{attachment_id}/versions".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "attachment_id" + "}", _bzz_urlize_path_param(attachmentId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_attachments_attachment_id_versions_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_attachments_attachment_id_versions_get")
	bzz_callable.bind(
		docId,
		attachmentId,
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdAttachmentsFileGet → GET /objects/documents/{doc_id}/attachments/file
# Download All Document Attachments
func objects_documents_doc_id_attachments_file_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/attachments/file".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_attachments_file_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_attachments_file_get")
	bzz_callable.bind(
		docId,
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdAttachmentsGet → GET /objects/documents/{doc_id}/attachments
# Retrieve Document Attachments
func objects_documents_doc_id_attachments_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/attachments".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_attachments_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_attachments_get")
	bzz_callable.bind(
		docId,
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdAttachmentsPost → POST /objects/documents/{doc_id}/attachments
# Create Document Attachment
func objects_documents_doc_id_attachments_post(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/attachments".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_attachments_post_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_attachments_post")
	bzz_callable.bind(
		docId,
		accept,
		authorization,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdAudittrailGet → GET /objects/documents/{doc_id}/audittrail
# Retrieve Complete Audit History for a Single Document
func objects_documents_doc_id_audittrail_get(
	# docId: String = ""   Eg: docId_example
	# The document ID for which to retrieve audit history.
	docId: String,
	# startDate: String = ""   Eg: startDate_example
	# Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. 
	startDate = "",
	# endDate: String = ""   Eg: endDate_example
	# Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
	endDate = "",
	# formatResult: String = ""   Eg: formatResult_example
	# To request a CSV file of your audit history, use csv. 
	formatResult = "",
	# limit: String = ""   Eg: limit_example
	# Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
	limit = "",
	# offset: String = ""   Eg: offset_example
	# Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
	offset = "",
	# events: String = ""   Eg: events_example
	# Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events=WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.
	events = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/audittrail".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["start_date"] = startDate
	bzz_query["end_date"] = endDate
	bzz_query["format_result"] = formatResult
	bzz_query["limit"] = limit
	bzz_query["offset"] = offset
	bzz_query["events"] = events

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_audittrail_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document ID for which to retrieve audit history.
	docId: String,
	# startDate: String = ""   Eg: startDate_example
	# Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. 
	startDate = "",
	# endDate: String = ""   Eg: endDate_example
	# Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
	endDate = "",
	# formatResult: String = ""   Eg: formatResult_example
	# To request a CSV file of your audit history, use csv. 
	formatResult = "",
	# limit: String = ""   Eg: limit_example
	# Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
	limit = "",
	# offset: String = ""   Eg: offset_example
	# Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
	offset = "",
	# events: String = ""   Eg: events_example
	# Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events=WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.
	events = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_audittrail_get")
	bzz_callable.bind(
		docId,
		startDate,
		endDate,
		formatResult,
		limit,
		offset,
		events,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdDelete → DELETE /objects/documents/{doc_id}
# Delete Single Document
func objects_documents_doc_id_delete(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_delete_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_delete")
	bzz_callable.bind(
		docId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdEventsGet → GET /objects/documents/{doc_id}/events
# Retrieve Document Events
func objects_documents_doc_id_events_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/events".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_events_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_events_get")
	bzz_callable.bind(
		docId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdFileGet → GET /objects/documents/{doc_id}/file
# Download Document File
func objects_documents_doc_id_file_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# lockDocument: bool   Eg: false
	# Set to true to Check Out this document before retrieval. If omitted, defaults to false.
	lockDocument = null,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/file".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["lockDocument"] = lockDocument

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_file_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# lockDocument: bool   Eg: false
	# Set to true to Check Out this document before retrieval. If omitted, defaults to false.
	lockDocument = null,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_file_get")
	bzz_callable.bind(
		docId,
		lockDocument,
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdGet → GET /objects/documents/{doc_id}
# Retrieve Document
func objects_documents_doc_id_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_get")
	bzz_callable.bind(
		docId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdLockDelete → DELETE /objects/documents/{doc_id}/lock
# Delete Document Lock
func objects_documents_doc_id_lock_delete(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/lock".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_lock_delete_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_lock_delete")
	bzz_callable.bind(
		docId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdLockGet → GET /objects/documents/{doc_id}/lock
# Retrieve Document Lock
func objects_documents_doc_id_lock_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/lock".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_lock_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_lock_get")
	bzz_callable.bind(
		docId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdLockPost → POST /objects/documents/{doc_id}/lock
# Create Document Lock
func objects_documents_doc_id_lock_post(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/lock".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_lock_post_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_lock_post")
	bzz_callable.bind(
		docId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet → GET /objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file
# Download All Document Version Attachments
func objects_documents_doc_id_major_version_minor_version_attachments_file_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_major_version_minor_version_attachments_file_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_major_version_minor_version_attachments_file_get")
	bzz_callable.bind(
		docId,
		majorVersion,
		minorVersion,
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdPost → POST /objects/documents/{doc_id}
# Create Single Document Version
func objects_documents_doc_id_post(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# suppressRendition: String = ""   Eg: suppressRendition_example
	# Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false
	suppressRendition = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["suppressRendition"] = suppressRendition

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_post_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# suppressRendition: String = ""   Eg: suppressRendition_example
	# Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false
	suppressRendition = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_post")
	bzz_callable.bind(
		docId,
		suppressRendition,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdPut → PUT /objects/documents/{doc_id}
# Update Single Document
func objects_documents_doc_id_put(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIMigrationMode: bool   Eg: true
	# When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
	xVaultAPIMigrationMode = null,
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_put_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIMigrationMode: bool   Eg: true
	# When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
	xVaultAPIMigrationMode = null,
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_put")
	bzz_callable.bind(
		docId,
		authorization,
		contentType,
		accept,
		xVaultAPIMigrationMode,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdRenditionsGet → GET /objects/documents/{doc_id}/renditions
# Retrieve Document Renditions
func objects_documents_doc_id_renditions_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/renditions".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_renditions_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_renditions_get")
	bzz_callable.bind(
		docId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdRenditionsRenditionTypeDelete → DELETE /objects/documents/{doc_id}/renditions/{rendition_type}
# Delete Single Document Rendition
func objects_documents_doc_id_renditions_rendition_type_delete(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# renditionType: String = ""   Eg: renditionType_example
	# The document rendition type.
	renditionType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/renditions/{rendition_type}".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "rendition_type" + "}", _bzz_urlize_path_param(renditionType))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_renditions_rendition_type_delete_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# renditionType: String = ""   Eg: renditionType_example
	# The document rendition type.
	renditionType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_renditions_rendition_type_delete")
	bzz_callable.bind(
		docId,
		renditionType,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdRenditionsRenditionTypeGet → GET /objects/documents/{doc_id}/renditions/{rendition_type}
# Download Document Rendition File
func objects_documents_doc_id_renditions_rendition_type_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# renditionType: String = ""   Eg: renditionType_example
	# The document rendition type.
	renditionType: String,
	# steadyState: String = ""   Eg: steadyState_example
	# Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. 
	steadyState = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/renditions/{rendition_type}".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "rendition_type" + "}", _bzz_urlize_path_param(renditionType))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["steadyState"] = steadyState

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_renditions_rendition_type_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# renditionType: String = ""   Eg: renditionType_example
	# The document rendition type.
	renditionType: String,
	# steadyState: String = ""   Eg: steadyState_example
	# Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. 
	steadyState = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_renditions_rendition_type_get")
	bzz_callable.bind(
		docId,
		renditionType,
		steadyState,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdRenditionsRenditionTypePost → POST /objects/documents/{doc_id}/renditions/{rendition_type}
# Add Single Document Rendition
func objects_documents_doc_id_renditions_rendition_type_post(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# renditionType: String = ""   Eg: renditionType_example
	# The document rendition type.
	renditionType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# content Type: String = ""   Eg: multipart/form-data
	content Type = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/renditions/{rendition_type}".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "rendition_type" + "}", _bzz_urlize_path_param(renditionType))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content Type"] = content Type
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_renditions_rendition_type_post_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# renditionType: String = ""   Eg: renditionType_example
	# The document rendition type.
	renditionType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# content Type: String = ""   Eg: multipart/form-data
	content Type = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_renditions_rendition_type_post")
	bzz_callable.bind(
		docId,
		renditionType,
		authorization,
		accept,
		content Type,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdRenditionsRenditionTypePut → PUT /objects/documents/{doc_id}/renditions/{rendition_type}
# Replace Document Rendition
func objects_documents_doc_id_renditions_rendition_type_put(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# renditionType: String = ""   Eg: renditionType_example
	# The document rendition type.
	renditionType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/renditions/{rendition_type}".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "rendition_type" + "}", _bzz_urlize_path_param(renditionType))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_renditions_rendition_type_put_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# renditionType: String = ""   Eg: renditionType_example
	# The document rendition type.
	renditionType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_renditions_rendition_type_put")
	bzz_callable.bind(
		docId,
		renditionType,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete → DELETE /objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}
# Remove Users & Groups from Roles on a Single Document
func objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete(
	# docId: String = ""   Eg: docId_example
	# The id value of the document from which to remove roles.
	docId: String,
	# roleNameAndUserOrGroup: String = ""   Eg: roleNameAndUserOrGroup_example
	# The name of the role from which to remove the user or group followed by either `user` or `group`. The format is `{role_name}.{user_or_group}`. For example, `consumer__v.user`.
	roleNameAndUserOrGroup: String,
	# id: String = ""   Eg: id_example
	# The id value of the user or group to remove from the role.
	id: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "role_name_and_user_or_group" + "}", _bzz_urlize_path_param(roleNameAndUserOrGroup)).replace("{" + "id" + "}", _bzz_urlize_path_param(id))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete_threaded(
	# docId: String = ""   Eg: docId_example
	# The id value of the document from which to remove roles.
	docId: String,
	# roleNameAndUserOrGroup: String = ""   Eg: roleNameAndUserOrGroup_example
	# The name of the role from which to remove the user or group followed by either `user` or `group`. The format is `{role_name}.{user_or_group}`. For example, `consumer__v.user`.
	roleNameAndUserOrGroup: String,
	# id: String = ""   Eg: id_example
	# The id value of the user or group to remove from the role.
	id: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_roles_role_name_and_user_or_group_id_delete")
	bzz_callable.bind(
		docId,
		roleNameAndUserOrGroup,
		id,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet → GET /objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments
# Retrieve Document Version Attachments
func objects_documents_doc_id_version_major_version_minor_version_attachments_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_version_major_version_minor_version_attachments_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_version_major_version_minor_version_attachments_get")
	bzz_callable.bind(
		docId,
		majorVersion,
		minorVersion,
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdVersionsGet → GET /objects/documents/{doc_id}/versions
# Retrieve Document Versions
func objects_documents_doc_id_versions_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/versions".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_versions_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_versions_get")
	bzz_callable.bind(
		docId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet → GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}
# Read Annotations by ID
func objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# annotationId: String = ""   Eg: annotationId_example
	# The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
	annotationId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion)).replace("{" + "annotation_id" + "}", _bzz_urlize_path_param(annotationId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# annotationId: String = ""   Eg: annotationId_example
	# The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
	annotationId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_get")
	bzz_callable.bind(
		docId,
		majorVersion,
		minorVersion,
		annotationId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet → GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies
# Read Replies of Parent Annotation
func objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# annotationId: String = ""   Eg: annotationId_example
	# The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
	annotationId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion)).replace("{" + "annotation_id" + "}", _bzz_urlize_path_param(annotationId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# annotationId: String = ""   Eg: annotationId_example
	# The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
	annotationId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_versions_major_version_minor_version_annotations_annotation_id_replies_get")
	bzz_callable.bind(
		docId,
		majorVersion,
		minorVersion,
		annotationId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet → GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file
# Export Document Version Annotations to PDF
func objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_versions_major_version_minor_version_annotations_file_get")
	bzz_callable.bind(
		docId,
		majorVersion,
		minorVersion,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost → POST /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file
# Import Document Version Annotations from PDF
func objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_versions_major_version_minor_version_annotations_file_post")
	bzz_callable.bind(
		docId,
		majorVersion,
		minorVersion,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet → GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations
# Read Annotations by Document Version and Type
func objects_documents_doc_id_versions_major_version_minor_version_annotations_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# limit: String = ""   Eg: limit_example
	# Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.
	limit = "",
	# offset: String = ""   Eg: offset_example
	# This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset=201.
	offset = "",
	# annotationTypes: String = ""   Eg: annotationTypes_example
	# The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: `note__sys` `line__sys` `document_link__sys` `permalink_link__sys` `anchor__sys` `reply__sys` `external_link__sys`  The following annotation types are only valid in PromoMats Vaults:  `suggested_link__sys` `approved_link__sys` `auto_link__sys` `keyword_link__sys` 
	annotationTypes = "",
	# paginationId: String = ""   Eg: paginationId_example
	# A unique identifier used to load requests with paginated results.
	paginationId = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["limit"] = limit
	bzz_query["offset"] = offset
	bzz_query["annotation_types"] = annotationTypes
	bzz_query["pagination_id"] = paginationId

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_versions_major_version_minor_version_annotations_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# limit: String = ""   Eg: limit_example
	# Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.
	limit = "",
	# offset: String = ""   Eg: offset_example
	# This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset=201.
	offset = "",
	# annotationTypes: String = ""   Eg: annotationTypes_example
	# The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: `note__sys` `line__sys` `document_link__sys` `permalink_link__sys` `anchor__sys` `reply__sys` `external_link__sys`  The following annotation types are only valid in PromoMats Vaults:  `suggested_link__sys` `approved_link__sys` `auto_link__sys` `keyword_link__sys` 
	annotationTypes = "",
	# paginationId: String = ""   Eg: paginationId_example
	# A unique identifier used to load requests with paginated results.
	paginationId = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_versions_major_version_minor_version_annotations_get")
	bzz_callable.bind(
		docId,
		majorVersion,
		minorVersion,
		limit,
		offset,
		annotationTypes,
		paginationId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet → GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file
# Download Document Version Attachment Version
func objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The id field value of the attachment.
	attachmentId: String,
	# attachmentVersion: String = ""   Eg: attachmentVersion_example
	# The version of the attachment.
	attachmentVersion: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion)).replace("{" + "attachment_id" + "}", _bzz_urlize_path_param(attachmentId)).replace("{" + "attachment_version" + "}", _bzz_urlize_path_param(attachmentVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The id field value of the attachment.
	attachmentId: String,
	# attachmentVersion: String = ""   Eg: attachmentVersion_example
	# The version of the attachment.
	attachmentVersion: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_file_get")
	bzz_callable.bind(
		docId,
		majorVersion,
		minorVersion,
		attachmentId,
		attachmentVersion,
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet → GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}
# Retrieve Document Version Attachment Versions
func objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The id of the document attachment to retrieve.
	attachmentId: String,
	# attachmentVersion: String = ""   Eg: attachmentVersion_example
	# Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.
	attachmentVersion: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion)).replace("{" + "attachment_id" + "}", _bzz_urlize_path_param(attachmentId)).replace("{" + "attachment_version" + "}", _bzz_urlize_path_param(attachmentVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The id of the document attachment to retrieve.
	attachmentId: String,
	# attachmentVersion: String = ""   Eg: attachmentVersion_example
	# Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.
	attachmentVersion: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_versions_major_version_minor_version_attachments_attachment_id_versions_attachment_version_get")
	bzz_callable.bind(
		docId,
		majorVersion,
		minorVersion,
		attachmentId,
		attachmentVersion,
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete → DELETE /objects/documents/{doc_id}/versions/{major_version}/{minor_version}
# Delete Single Document Version
func objects_documents_doc_id_versions_major_version_minor_version_delete(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/versions/{major_version}/{minor_version}".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_versions_major_version_minor_version_delete_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_versions_major_version_minor_version_delete")
	bzz_callable.bind(
		docId,
		majorVersion,
		minorVersion,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet → GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv
# Retrieve Document Version Notes as CSV
func objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: text/csv
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: text/csv
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_versions_major_version_minor_version_doc_export_annotations_to_csv_get")
	bzz_callable.bind(
		docId,
		majorVersion,
		minorVersion,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost → POST /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events
# Create Document Event
func objects_documents_doc_id_versions_major_version_minor_version_events_post(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_versions_major_version_minor_version_events_post_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_versions_major_version_minor_version_events_post")
	bzz_callable.bind(
		docId,
		majorVersion,
		minorVersion,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet → GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations
# Retrieve Video Annotations
func objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get(
	# docId: String = ""   Eg: docId_example
	# The video document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The video document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The video document minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	# This `Accept` header only changes the format of the response in the case of an error. On `SUCCESS`, the HTTP Response Header `Content-Type` is set to `text/plain;charset=UnicodeLittle`.
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The video document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The video document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The video document minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	# This `Accept` header only changes the format of the response in the case of an error. On `SUCCESS`, the HTTP Response Header `Content-Type` is set to `text/plain;charset=UnicodeLittle`.
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_versions_major_version_minor_version_export_video_annotations_get")
	bzz_callable.bind(
		docId,
		majorVersion,
		minorVersion,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet → GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file
# Download Document Version File
func objects_documents_doc_id_versions_major_version_minor_version_file_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_versions_major_version_minor_version_file_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_versions_major_version_minor_version_file_get")
	bzz_callable.bind(
		docId,
		majorVersion,
		minorVersion,
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet → GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}
# Retrieve Document Version
func objects_documents_doc_id_versions_major_version_minor_version_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/versions/{major_version}/{minor_version}".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_versions_major_version_minor_version_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_versions_major_version_minor_version_get")
	bzz_callable.bind(
		docId,
		majorVersion,
		minorVersion,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut → PUT /objects/documents/{doc_id}/versions/{major_version}/{minor_version}
# Update Document Version
func objects_documents_doc_id_versions_major_version_minor_version_put(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIMigrationMode: bool   Eg: true
	# When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
	xVaultAPIMigrationMode = null,
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/versions/{major_version}/{minor_version}".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_versions_major_version_minor_version_put_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIMigrationMode: bool   Eg: true
	# When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
	xVaultAPIMigrationMode = null,
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_versions_major_version_minor_version_put")
	bzz_callable.bind(
		docId,
		majorVersion,
		minorVersion,
		authorization,
		contentType,
		accept,
		xVaultAPIMigrationMode,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet → GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships
# Retrieve Document Relationships
func objects_documents_doc_id_versions_major_version_minor_version_relationships_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_versions_major_version_minor_version_relationships_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_versions_major_version_minor_version_relationships_get")
	bzz_callable.bind(
		docId,
		majorVersion,
		minorVersion,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost → POST /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships
# Create Single Document Relationship
func objects_documents_doc_id_versions_major_version_minor_version_relationships_post(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_versions_major_version_minor_version_relationships_post_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_versions_major_version_minor_version_relationships_post")
	bzz_callable.bind(
		docId,
		majorVersion,
		minorVersion,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete → DELETE /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}
# Delete Single Document Relationship
func objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# relationshipId: String = ""   Eg: relationshipId_example
	# The relationship id field value. See Retrieve Document Relationships.
	relationshipId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion)).replace("{" + "relationship_id" + "}", _bzz_urlize_path_param(relationshipId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# relationshipId: String = ""   Eg: relationshipId_example
	# The relationship id field value. See Retrieve Document Relationships.
	relationshipId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_delete")
	bzz_callable.bind(
		docId,
		majorVersion,
		minorVersion,
		relationshipId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet → GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}
# Retrieve Document Relationship
func objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# relationshipId: String = ""   Eg: relationshipId_example
	# The relationship id field value. See Retrieve Document Relationships.
	relationshipId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion)).replace("{" + "relationship_id" + "}", _bzz_urlize_path_param(relationshipId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# relationshipId: String = ""   Eg: relationshipId_example
	# The relationship id field value. See Retrieve Document Relationships.
	relationshipId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_versions_major_version_minor_version_relationships_relationship_id_get")
	bzz_callable.bind(
		docId,
		majorVersion,
		minorVersion,
		relationshipId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet → GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions
# Retrieve Document Version Renditions
func objects_documents_doc_id_versions_major_version_minor_version_renditions_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_versions_major_version_minor_version_renditions_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_versions_major_version_minor_version_renditions_get")
	bzz_callable.bind(
		docId,
		majorVersion,
		minorVersion,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete → DELETE /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}
# Delete Document Version Rendition
func objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# renditionType: String = ""   Eg: renditionType_example
	# The document rendition type.
	renditionType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion)).replace("{" + "rendition_type" + "}", _bzz_urlize_path_param(renditionType))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# renditionType: String = ""   Eg: renditionType_example
	# The document rendition type.
	renditionType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_delete")
	bzz_callable.bind(
		docId,
		majorVersion,
		minorVersion,
		renditionType,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet → GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}
# Download Document Version Rendition File
func objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# renditionType: String = ""   Eg: renditionType_example
	# The document rendition type.
	renditionType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion)).replace("{" + "rendition_type" + "}", _bzz_urlize_path_param(renditionType))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# renditionType: String = ""   Eg: renditionType_example
	# The document rendition type.
	renditionType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_get")
	bzz_callable.bind(
		docId,
		majorVersion,
		minorVersion,
		renditionType,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost → POST /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}
# Upload Document Version Rendition
func objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# renditionType: String = ""   Eg: renditionType_example
	# The document rendition type.
	renditionType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion)).replace("{" + "rendition_type" + "}", _bzz_urlize_path_param(renditionType))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# renditionType: String = ""   Eg: renditionType_example
	# The document rendition type.
	renditionType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_post")
	bzz_callable.bind(
		docId,
		majorVersion,
		minorVersion,
		renditionType,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut → PUT /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}
# Replace Document Version Rendition
func objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# renditionType: String = ""   Eg: renditionType_example
	# The document rendition type.
	renditionType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion)).replace("{" + "rendition_type" + "}", _bzz_urlize_path_param(renditionType))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# renditionType: String = ""   Eg: renditionType_example
	# The document rendition type.
	renditionType: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_versions_major_version_minor_version_renditions_rendition_type_put")
	bzz_callable.bind(
		docId,
		majorVersion,
		minorVersion,
		renditionType,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet → GET /objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail
# Download Document Version Thumbnail File
func objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail".replace("{" + "doc_id" + "}", _bzz_urlize_path_param(docId)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get_threaded(
	# docId: String = ""   Eg: docId_example
	# The document id field value.
	docId: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The document major_version_number__v field value.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The document minor_version_number__v field value.
	minorVersion: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_doc_id_versions_major_version_minor_version_thumbnail_get")
	bzz_callable.bind(
		docId,
		majorVersion,
		minorVersion,
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsGet → GET /objects/documents
# Retrieve All Documents
func objects_documents_get(
	# namedFilter: String = ""   Eg: My Documents
	# Retrieves only documents which you have created.
	namedFilter = "",
	# scope: String = ""   Eg: contents
	# Searches only within the document content.
	scope = "",
	# versionscope: String = ""   Eg: all
	# Retrieves all document versions, rather than only the latest version.
	versionscope = "",
	# search: String = ""   Eg: {keyword}
	# Search for documents based on a {keyword} in searchable document fields.
	search = "",
	# limit: String = ""   Eg: limit_example
	# See VQL documentation for more information.
	limit = "",
	# sort: String = ""   Eg: sort_example
	# See VQL documentation for more information.
	sort = "",
	# start: String = ""   Eg: start_example
	# See VQL documentation for more information.
	start = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["named_filter"] = namedFilter
	bzz_query["scope"] = scope
	bzz_query["versionscope"] = versionscope
	bzz_query["search"] = search
	bzz_query["limit"] = limit
	bzz_query["sort"] = sort
	bzz_query["start"] = start

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_get_threaded(
	# namedFilter: String = ""   Eg: My Documents
	# Retrieves only documents which you have created.
	namedFilter = "",
	# scope: String = ""   Eg: contents
	# Searches only within the document content.
	scope = "",
	# versionscope: String = ""   Eg: all
	# Retrieves all document versions, rather than only the latest version.
	versionscope = "",
	# search: String = ""   Eg: {keyword}
	# Search for documents based on a {keyword} in searchable document fields.
	search = "",
	# limit: String = ""   Eg: limit_example
	# See VQL documentation for more information.
	limit = "",
	# sort: String = ""   Eg: sort_example
	# See VQL documentation for more information.
	sort = "",
	# start: String = ""   Eg: start_example
	# See VQL documentation for more information.
	start = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_get")
	bzz_callable.bind(
		namedFilter,
		scope,
		versionscope,
		search,
		limit,
		sort,
		start,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsIdRolesGet → GET /objects/documents/{id}/roles
# Retrieve All Document Roles
func objects_documents_id_roles_get(
	# id: String = ""   Eg: id_example
	id: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{id}/roles".replace("{" + "id" + "}", _bzz_urlize_path_param(id))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_id_roles_get_threaded(
	# id: String = ""   Eg: id_example
	id: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_id_roles_get")
	bzz_callable.bind(
		id,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsIdRolesPost → POST /objects/documents/{id}/roles
# Assign Users & Groups to Roles on a Single Document
func objects_documents_id_roles_post(
	# id: String = ""   Eg: id_example
	id: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{id}/roles".replace("{" + "id" + "}", _bzz_urlize_path_param(id))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_id_roles_post_threaded(
	# id: String = ""   Eg: id_example
	id: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_id_roles_post")
	bzz_callable.bind(
		id,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsIdRolesRoleNameGet → GET /objects/documents/{id}/roles/{role_name}
# Retrieve Document Role
func objects_documents_id_roles_role_name_get(
	# id: String = ""   Eg: id_example
	# The document `id`.
	id: String,
	# roleName: String = ""   Eg: roleName_example
	# The name of the role to retrieve. For example, `owner__v`.
	roleName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{id}/roles/{role_name}".replace("{" + "id" + "}", _bzz_urlize_path_param(id)).replace("{" + "role_name" + "}", _bzz_urlize_path_param(roleName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_id_roles_role_name_get_threaded(
	# id: String = ""   Eg: id_example
	# The document `id`.
	id: String,
	# roleName: String = ""   Eg: roleName_example
	# The name of the role to retrieve. For example, `owner__v`.
	roleName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_id_roles_role_name_get")
	bzz_callable.bind(
		id,
		roleName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet → GET /objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions
# Retrieve Document User Actions
func objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get(
	# id: String = ""   Eg: id_example
	# The document id field value from which to retrieve available user actions.
	id: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The major version number of the document.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The minor version number of the document.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions".replace("{" + "id" + "}", _bzz_urlize_path_param(id)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get_threaded(
	# id: String = ""   Eg: id_example
	# The document id field value from which to retrieve available user actions.
	id: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The major version number of the document.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The minor version number of the document.
	minorVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_id_versions_major_version_minor_version_lifecycle_actions_get")
	bzz_callable.bind(
		id,
		majorVersion,
		minorVersion,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet → GET /objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements
# Retrieve Document Entry Criteria
func objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get(
	# id: String = ""   Eg: id_example
	# The document id field value from which to retrieve available user actions.
	id: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The major version number of the document.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The minor version number of the document.
	minorVersion: String,
	# nameV: String = ""   Eg: nameV_example
	# The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
	nameV: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements".replace("{" + "id" + "}", _bzz_urlize_path_param(id)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion)).replace("{" + "name__v" + "}", _bzz_urlize_path_param(nameV))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get_threaded(
	# id: String = ""   Eg: id_example
	# The document id field value from which to retrieve available user actions.
	id: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The major version number of the document.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The minor version number of the document.
	minorVersion: String,
	# nameV: String = ""   Eg: nameV_example
	# The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
	nameV: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_entry_requirements_get")
	bzz_callable.bind(
		id,
		majorVersion,
		minorVersion,
		nameV,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut → PUT /objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}
# Initiate Document User Action
func objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put(
	# id: String = ""   Eg: id_example
	# The document id field value from which to retrieve available user actions.
	id: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The major version number of the document.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The minor version number of the document.
	minorVersion: String,
	# nameV: String = ""   Eg: nameV_example
	# The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
	nameV: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}".replace("{" + "id" + "}", _bzz_urlize_path_param(id)).replace("{" + "major_version" + "}", _bzz_urlize_path_param(majorVersion)).replace("{" + "minor_version" + "}", _bzz_urlize_path_param(minorVersion)).replace("{" + "name__v" + "}", _bzz_urlize_path_param(nameV))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put_threaded(
	# id: String = ""   Eg: id_example
	# The document id field value from which to retrieve available user actions.
	id: String,
	# majorVersion: String = ""   Eg: majorVersion_example
	# The major version number of the document.
	majorVersion: String,
	# minorVersion: String = ""   Eg: minorVersion_example
	# The minor version number of the document.
	minorVersion: String,
	# nameV: String = ""   Eg: nameV_example
	# The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
	nameV: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_id_versions_major_version_minor_version_lifecycle_actions_name_v_put")
	bzz_callable.bind(
		id,
		majorVersion,
		minorVersion,
		nameV,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsLifecycleActionsPost → POST /objects/documents/lifecycle_actions
# Retrieve User Actions on Multiple Documents
func objects_documents_lifecycle_actions_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/lifecycle_actions"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_lifecycle_actions_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_lifecycle_actions_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsLifecycleActionsUserActionNamePut → PUT /objects/documents/lifecycle_actions/{user_action_name}
# Initiate Bulk Document User Actions
func objects_documents_lifecycle_actions_user_action_name_put(
	# userActionName: String = ""   Eg: userActionName_example
	# The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.
	userActionName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/lifecycle_actions/{user_action_name}".replace("{" + "user_action_name" + "}", _bzz_urlize_path_param(userActionName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_lifecycle_actions_user_action_name_put_threaded(
	# userActionName: String = ""   Eg: userActionName_example
	# The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.
	userActionName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_lifecycle_actions_user_action_name_put")
	bzz_callable.bind(
		userActionName,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsPost → POST /objects/documents
# Create Single Document
func objects_documents_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIMigrationMode: bool   Eg: true
	# When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
	xVaultAPIMigrationMode = null,
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIMigrationMode: bool   Eg: true
	# When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
	xVaultAPIMigrationMode = null,
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_post")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIMigrationMode,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsRelationshipsBatchDelete → DELETE /objects/documents/relationships/batch
# Delete Multiple Document Relationships
func objects_documents_relationships_batch_delete(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/relationships/batch"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_relationships_batch_delete_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_relationships_batch_delete")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsRelationshipsBatchPost → POST /objects/documents/relationships/batch
# Create Multiple Document Relationships
func objects_documents_relationships_batch_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/relationships/batch"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_relationships_batch_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_relationships_batch_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsRenditionsBatchDelete → DELETE /objects/documents/renditions/batch
# Delete Multiple Document Renditions
func objects_documents_renditions_batch_delete(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/renditions/batch"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_renditions_batch_delete_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_renditions_batch_delete")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsRenditionsBatchPost → POST /objects/documents/renditions/batch
# Add Multiple Document Renditions
func objects_documents_renditions_batch_post(
	# idParam: String = ""   Eg: idParam_example
	# If you’re identifying documents in your input by their external ID
	idParam = "",
	# largeSizeAsset: String = ""   Eg: largeSizeAsset_example
	# If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.
	largeSizeAsset = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIMigrationMode: bool   Eg: true
	# Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
	xVaultAPIMigrationMode = null,
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/renditions/batch"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["idParam"] = idParam
	bzz_query["largeSizeAsset"] = largeSizeAsset

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_renditions_batch_post_threaded(
	# idParam: String = ""   Eg: idParam_example
	# If you’re identifying documents in your input by their external ID
	idParam = "",
	# largeSizeAsset: String = ""   Eg: largeSizeAsset_example
	# If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.
	largeSizeAsset = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIMigrationMode: bool   Eg: true
	# Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
	xVaultAPIMigrationMode = null,
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_renditions_batch_post")
	bzz_callable.bind(
		idParam,
		largeSizeAsset,
		authorization,
		accept,
		contentType,
		xVaultAPIMigrationMode,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsRolesBatchDelete → DELETE /objects/documents/roles/batch
# Remove Users and Groups from Roles on Multiple Documents & Binders
func objects_documents_roles_batch_delete(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/roles/batch"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_roles_batch_delete_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_roles_batch_delete")
	bzz_callable.bind(
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsRolesBatchPost → POST /objects/documents/roles/batch
# Assign Users & Groups to Roles on Multiple Documents & Binders
func objects_documents_roles_batch_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/roles/batch"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_roles_batch_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_roles_batch_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsTemplatesGet → GET /objects/documents/templates
# Retrieve Document Template Collection
func objects_documents_templates_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/templates"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_templates_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_templates_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsTemplatesPost → POST /objects/documents/templates
# Create Single Document Template
func objects_documents_templates_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/templates"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_templates_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_templates_post")
	bzz_callable.bind(
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsTemplatesPut → PUT /objects/documents/templates
# Update Multiple Document Templates
func objects_documents_templates_put(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/templates"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_templates_put_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_templates_put")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsTemplatesTemplateNameDelete → DELETE /objects/documents/templates/{template_name}
# Delete Basic Document Template
func objects_documents_templates_template_name_delete(
	# templateName: String = ""   Eg: templateName_example
	# The document template name__v field value.
	templateName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/templates/{template_name}".replace("{" + "template_name" + "}", _bzz_urlize_path_param(templateName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_templates_template_name_delete_threaded(
	# templateName: String = ""   Eg: templateName_example
	# The document template name__v field value.
	templateName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_templates_template_name_delete")
	bzz_callable.bind(
		templateName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsTemplatesTemplateNameFileGet → GET /objects/documents/templates/{template_name}/file
# Download Document Template File
func objects_documents_templates_template_name_file_get(
	# templateName: String = ""   Eg: templateName_example
	# The document template name__v field value.
	templateName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/templates/{template_name}/file".replace("{" + "template_name" + "}", _bzz_urlize_path_param(templateName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_templates_template_name_file_get_threaded(
	# templateName: String = ""   Eg: templateName_example
	# The document template name__v field value.
	templateName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_templates_template_name_file_get")
	bzz_callable.bind(
		templateName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsTemplatesTemplateNameGet → GET /objects/documents/templates/{template_name}
# Retrieve Document Template Attributes
func objects_documents_templates_template_name_get(
	# templateName: String = ""   Eg: templateName_example
	# The document template name__v field value.
	templateName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/templates/{template_name}".replace("{" + "template_name" + "}", _bzz_urlize_path_param(templateName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_templates_template_name_get_threaded(
	# templateName: String = ""   Eg: templateName_example
	# The document template name__v field value.
	templateName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_templates_template_name_get")
	bzz_callable.bind(
		templateName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsTemplatesTemplateNamePut → PUT /objects/documents/templates/{template_name}
# Update Single Document Template
func objects_documents_templates_template_name_put(
	# templateName: String = ""   Eg: templateName_example
	# The document template name__v field value.
	templateName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/templates/{template_name}".replace("{" + "template_name" + "}", _bzz_urlize_path_param(templateName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_templates_template_name_put_threaded(
	# templateName: String = ""   Eg: templateName_example
	# The document template name__v field value.
	templateName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_templates_template_name_put")
	bzz_callable.bind(
		templateName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsTokensPost → POST /objects/documents/tokens
# Document Tokens
func objects_documents_tokens_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/tokens"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_tokens_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_tokens_post")
	bzz_callable.bind(
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsVersionsBatchActionsFileextractPost → POST /objects/documents/versions/batch/actions/fileextract
# Export Document Versions
func objects_documents_versions_batch_actions_fileextract_post(
	# source: bool   Eg: true
	# Optional: To exclude source files, include a query parameter source=false. If omitted, defaults to true.
	source = null,
	# renditions: bool   Eg: false
	# Optional: To include renditions, include a query parameter renditions=true. If omitted, defaults to false.
	renditions = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/versions/batch/actions/fileextract"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["source"] = source
	bzz_query["renditions"] = renditions

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_versions_batch_actions_fileextract_post_threaded(
	# source: bool   Eg: true
	# Optional: To exclude source files, include a query parameter source=false. If omitted, defaults to true.
	source = null,
	# renditions: bool   Eg: false
	# Optional: To include renditions, include a query parameter renditions=true. If omitted, defaults to false.
	renditions = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_versions_batch_actions_fileextract_post")
	bzz_callable.bind(
		source,
		renditions,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsVersionsBatchDelete → DELETE /objects/documents/versions/batch
# Delete Multiple Document Versions
func objects_documents_versions_batch_delete(
	# idParam: String = ""   Eg: idParam_example
	# If you’re identifying documents in your input by their external ID
	idParam = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/versions/batch"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["idParam"] = idParam

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_versions_batch_delete_threaded(
	# idParam: String = ""   Eg: idParam_example
	# If you’re identifying documents in your input by their external ID
	idParam = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_versions_batch_delete")
	bzz_callable.bind(
		idParam,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDocumentsVersionsBatchPost → POST /objects/documents/versions/batch
# Create Multiple Document Versions
func objects_documents_versions_batch_post(
	# idParam: String = ""   Eg: external_id__v
	# If you’re identifying documents in your input by their external ID
	idParam = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIMigrationMode: String = ""   Eg: xVaultAPIMigrationMode_example
	# Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the `status__v` field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
	xVaultAPIMigrationMode = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/documents/versions/batch"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["idParam"] = idParam

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_documents_versions_batch_post_threaded(
	# idParam: String = ""   Eg: external_id__v
	# If you’re identifying documents in your input by their external ID
	idParam = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIMigrationMode: String = ""   Eg: xVaultAPIMigrationMode_example
	# Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the `status__v` field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
	xVaultAPIMigrationMode = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_documents_versions_batch_post")
	bzz_callable.bind(
		idParam,
		authorization,
		accept,
		contentType,
		xVaultAPIMigrationMode,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDomainGet → GET /objects/domain
# Retrieve Domain Information
func objects_domain_get(
	# includeApplication: bool   Eg: true
	# To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.
	includeApplication = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/domain"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["include_application"] = includeApplication

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_domain_get_threaded(
	# includeApplication: bool   Eg: true
	# To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.
	includeApplication = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_domain_get")
	bzz_callable.bind(
		includeApplication,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsDomainsGet → GET /objects/domains
# Retrieve Domains
func objects_domains_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/domains"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_domains_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_domains_get")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsEdlMatchedDocumentsBatchActionsAddPost → POST /objects/edl_matched_documents/batch/actions/add
# Add EDL Matched Documents
func objects_edl_matched_documents_batch_actions_add_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/edl_matched_documents/batch/actions/add"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_edl_matched_documents_batch_actions_add_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_edl_matched_documents_batch_actions_add_post")
	bzz_callable.bind(
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsEdlMatchedDocumentsBatchActionsRemovePost → POST /objects/edl_matched_documents/batch/actions/remove
# Remove EDL Matched Documents
func objects_edl_matched_documents_batch_actions_remove_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/edl_matched_documents/batch/actions/remove"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_edl_matched_documents_batch_actions_remove_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_edl_matched_documents_batch_actions_remove_post")
	bzz_callable.bind(
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsGroupsAutoGet → GET /objects/groups/auto
# Retrieve Auto Managed Groups
func objects_groups_auto_get(
	# limit: String = ""   Eg: limit_example
	# Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. 
	limit = "",
	# offset: String = ""   Eg: offset_example
	# Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
	offset = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/groups/auto"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["limit"] = limit
	bzz_query["offset"] = offset

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_groups_auto_get_threaded(
	# limit: String = ""   Eg: limit_example
	# Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. 
	limit = "",
	# offset: String = ""   Eg: offset_example
	# Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
	offset = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_groups_auto_get")
	bzz_callable.bind(
		limit,
		offset,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsGroupsGet → GET /objects/groups
# Retrieve All Groups
func objects_groups_get(
	# includeImplied: String = ""   Eg: includeImplied_example
	# When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.
	includeImplied = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/groups"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["includeImplied"] = includeImplied

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_groups_get_threaded(
	# includeImplied: String = ""   Eg: includeImplied_example
	# When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.
	includeImplied = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_groups_get")
	bzz_callable.bind(
		includeImplied,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsGroupsGroupIdDelete → DELETE /objects/groups/{group_id}
# Delete Group
func objects_groups_group_id_delete(
	# groupId: String = ""   Eg: groupId_example
	# The group id field value.
	groupId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/groups/{group_id}".replace("{" + "group_id" + "}", _bzz_urlize_path_param(groupId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_groups_group_id_delete_threaded(
	# groupId: String = ""   Eg: groupId_example
	# The group id field value.
	groupId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_groups_group_id_delete")
	bzz_callable.bind(
		groupId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsGroupsGroupIdGet → GET /objects/groups/{group_id}
# Retrieve Group
func objects_groups_group_id_get(
	# groupId: String = ""   Eg: groupId_example
	# The group id field value.
	groupId: String,
	# includeImplied: bool   Eg: true
	# When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.
	includeImplied = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/groups/{group_id}".replace("{" + "group_id" + "}", _bzz_urlize_path_param(groupId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["includeImplied"] = includeImplied

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_groups_group_id_get_threaded(
	# groupId: String = ""   Eg: groupId_example
	# The group id field value.
	groupId: String,
	# includeImplied: bool   Eg: true
	# When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.
	includeImplied = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_groups_group_id_get")
	bzz_callable.bind(
		groupId,
		includeImplied,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsGroupsGroupIdPut → PUT /objects/groups/{group_id}
# Update Group
func objects_groups_group_id_put(
	# groupId: String = ""   Eg: groupId_example
	# The group id field value.
	groupId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/groups/{group_id}".replace("{" + "group_id" + "}", _bzz_urlize_path_param(groupId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_groups_group_id_put_threaded(
	# groupId: String = ""   Eg: groupId_example
	# The group id field value.
	groupId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_groups_group_id_put")
	bzz_callable.bind(
		groupId,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsGroupsPost → POST /objects/groups
# Create Group 
func objects_groups_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/groups"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_groups_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_groups_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsLicensesGet → GET /objects/licenses
# Retrieve Application License Usage
func objects_licenses_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/licenses"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_licenses_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_licenses_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsObjectworkflowsActionsGet → GET /objects/objectworkflows/actions
# Retrieve All Multi-Record Workflows
func objects_objectworkflows_actions_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/objectworkflows/actions"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_objectworkflows_actions_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_objectworkflows_actions_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsObjectworkflowsActionsWorkflowNameGet → GET /objects/objectworkflows/actions/{workflow_name}
# Retrieve Multi-Record Workflow Details
func objects_objectworkflows_actions_workflow_name_get(
	# workflowName: String = ""   Eg: workflowName_example
	workflowName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/objectworkflows/actions/{workflow_name}".replace("{" + "workflow_name" + "}", _bzz_urlize_path_param(workflowName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_objectworkflows_actions_workflow_name_get_threaded(
	# workflowName: String = ""   Eg: workflowName_example
	workflowName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_objectworkflows_actions_workflow_name_get")
	bzz_callable.bind(
		workflowName,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsObjectworkflowsActionsWorkflowNamePost → POST /objects/objectworkflows/actions/{workflow_name}
# Initiate Multi-Record Workflow
func objects_objectworkflows_actions_workflow_name_post(
	# workflowName: String = ""   Eg: workflowName_example
	workflowName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/objectworkflows/actions/{workflow_name}".replace("{" + "workflow_name" + "}", _bzz_urlize_path_param(workflowName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_objectworkflows_actions_workflow_name_post_threaded(
	# workflowName: String = ""   Eg: workflowName_example
	workflowName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_objectworkflows_actions_workflow_name_post")
	bzz_callable.bind(
		workflowName,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsObjectworkflowsGet → GET /objects/objectworkflows
# Retrieve Workflows
func objects_objectworkflows_get(
	# objectV: String = ""   Eg: objectV_example
	# To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the participant parameter is not used. 
	objectV = "",
	# recordIdV: String = ""   Eg: recordIdV_example
	# To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the participant parameter is not used. 
	recordIdV = "",
	# participant: String = ""   Eg: participant_example
	# To retrieve all workflows available to a particular user, include the user id field value as ?participant={id}. To retrieve your own workflows, set this value to ?participant=me. This parameter is required when the object__v and record_id__v parameters are not used. 
	participant = "",
	# statusV: String = ""   Eg: statusV_example
	# To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v=active__v, status__v=active__v,completed__v. Workflows with `status__v=active__v` are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v
	statusV = "",
	# offset: String = ""   Eg: offset_example
	# This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset=201. 
	offset = "",
	# pageSize: String = ""   Eg: pageSize_example
	# This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size=1000. 
	pageSize = "",
	# loc: String = ""   Eg: loc_example
	# When localized (translated) strings are available, retrieve them by including ?loc=true. 
	loc = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/objectworkflows"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["object__v"] = objectV
	bzz_query["record_id__v"] = recordIdV
	bzz_query["participant"] = participant
	bzz_query["status__v"] = statusV
	bzz_query["offset"] = offset
	bzz_query["page_size"] = pageSize
	bzz_query["loc"] = loc

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_objectworkflows_get_threaded(
	# objectV: String = ""   Eg: objectV_example
	# To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the participant parameter is not used. 
	objectV = "",
	# recordIdV: String = ""   Eg: recordIdV_example
	# To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the participant parameter is not used. 
	recordIdV = "",
	# participant: String = ""   Eg: participant_example
	# To retrieve all workflows available to a particular user, include the user id field value as ?participant={id}. To retrieve your own workflows, set this value to ?participant=me. This parameter is required when the object__v and record_id__v parameters are not used. 
	participant = "",
	# statusV: String = ""   Eg: statusV_example
	# To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v=active__v, status__v=active__v,completed__v. Workflows with `status__v=active__v` are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v
	statusV = "",
	# offset: String = ""   Eg: offset_example
	# This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset=201. 
	offset = "",
	# pageSize: String = ""   Eg: pageSize_example
	# This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size=1000. 
	pageSize = "",
	# loc: String = ""   Eg: loc_example
	# When localized (translated) strings are available, retrieve them by including ?loc=true. 
	loc = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_objectworkflows_get")
	bzz_callable.bind(
		objectV,
		recordIdV,
		participant,
		statusV,
		offset,
		pageSize,
		loc,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsObjectworkflowsTasksGet → GET /objects/objectworkflows/tasks
# Retrieve Workflow Tasks
func objects_objectworkflows_tasks_get(
	# objectV: String = ""   Eg: objectV_example
	# To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the assignee__v parameter is not used.
	objectV = "",
	# recordIdV: String = ""   Eg: recordIdV_example
	# To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the assignee__v parameter is not used.
	recordIdV = "",
	# assigneeV: String = ""   Eg: assigneeV_example
	# To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v={id}. To retrieve your own workflow tasks, set this value to ?assignee__v=me. This parameter is required when the object__v and record_id__v parameters are not used. 
	assigneeV = "",
	# statusV: String = ""   Eg: statusV_example
	# To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v=available__v or ?status__v=available__v,completed__v. 
	statusV = "",
	# offset: String = ""   Eg: offset_example
	# This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset=201. 
	offset = "",
	# pageSize: String = ""   Eg: pageSize_example
	# This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size=1000. 
	pageSize = "",
	# loc: String = ""   Eg: loc_example
	# When localized (translated) strings are available, retrieve them by including ?loc=true. 
	loc = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/objectworkflows/tasks"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["object__v"] = objectV
	bzz_query["record_id__v"] = recordIdV
	bzz_query["assignee__v"] = assigneeV
	bzz_query["status__v"] = statusV
	bzz_query["offset"] = offset
	bzz_query["page_size"] = pageSize
	bzz_query["loc"] = loc

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_objectworkflows_tasks_get_threaded(
	# objectV: String = ""   Eg: objectV_example
	# To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the assignee__v parameter is not used.
	objectV = "",
	# recordIdV: String = ""   Eg: recordIdV_example
	# To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the assignee__v parameter is not used.
	recordIdV = "",
	# assigneeV: String = ""   Eg: assigneeV_example
	# To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v={id}. To retrieve your own workflow tasks, set this value to ?assignee__v=me. This parameter is required when the object__v and record_id__v parameters are not used. 
	assigneeV = "",
	# statusV: String = ""   Eg: statusV_example
	# To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v=available__v or ?status__v=available__v,completed__v. 
	statusV = "",
	# offset: String = ""   Eg: offset_example
	# This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset=201. 
	offset = "",
	# pageSize: String = ""   Eg: pageSize_example
	# This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size=1000. 
	pageSize = "",
	# loc: String = ""   Eg: loc_example
	# When localized (translated) strings are available, retrieve them by including ?loc=true. 
	loc = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_objectworkflows_tasks_get")
	bzz_callable.bind(
		objectV,
		recordIdV,
		assigneeV,
		statusV,
		offset,
		pageSize,
		loc,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsObjectworkflowsTasksTaskIdActionsAcceptPost → POST /objects/objectworkflows/tasks/{task_id}/actions/accept
# Accept Single Record Workflow Task
func objects_objectworkflows_tasks_task_id_actions_accept_post(
	# taskId: String = ""   Eg: taskId_example
	# The task id field value.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/objectworkflows/tasks/{task_id}/actions/accept".replace("{" + "task_id" + "}", _bzz_urlize_path_param(taskId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_objectworkflows_tasks_task_id_actions_accept_post_threaded(
	# taskId: String = ""   Eg: taskId_example
	# The task id field value.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_objectworkflows_tasks_task_id_actions_accept_post")
	bzz_callable.bind(
		taskId,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsObjectworkflowsTasksTaskIdActionsCancelPost → POST /objects/objectworkflows/tasks/{task_id}/actions/cancel
# Cancel Workflow Task
func objects_objectworkflows_tasks_task_id_actions_cancel_post(
	# taskId: String = ""   Eg: taskId_example
	# The task id field value.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/objectworkflows/tasks/{task_id}/actions/cancel".replace("{" + "task_id" + "}", _bzz_urlize_path_param(taskId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_objectworkflows_tasks_task_id_actions_cancel_post_threaded(
	# taskId: String = ""   Eg: taskId_example
	# The task id field value.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_objectworkflows_tasks_task_id_actions_cancel_post")
	bzz_callable.bind(
		taskId,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsObjectworkflowsTasksTaskIdActionsCompletePost → POST /objects/objectworkflows/tasks/{task_id}/actions/complete
# Complete Single Record Workflow Task
func objects_objectworkflows_tasks_task_id_actions_complete_post(
	# taskId: String = ""   Eg: taskId_example
	# The task id field value.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/objectworkflows/tasks/{task_id}/actions/complete".replace("{" + "task_id" + "}", _bzz_urlize_path_param(taskId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_objectworkflows_tasks_task_id_actions_complete_post_threaded(
	# taskId: String = ""   Eg: taskId_example
	# The task id field value.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_objectworkflows_tasks_task_id_actions_complete_post")
	bzz_callable.bind(
		taskId,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsObjectworkflowsTasksTaskIdActionsGet → GET /objects/objectworkflows/tasks/{task_id}/actions
# Retrieve Workflow Task Actions
func objects_objectworkflows_tasks_task_id_actions_get(
	# taskId: String = ""   Eg: taskId_example
	# The task id field value.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/objectworkflows/tasks/{task_id}/actions".replace("{" + "task_id" + "}", _bzz_urlize_path_param(taskId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_objectworkflows_tasks_task_id_actions_get_threaded(
	# taskId: String = ""   Eg: taskId_example
	# The task id field value.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_objectworkflows_tasks_task_id_actions_get")
	bzz_callable.bind(
		taskId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost → POST /objects/objectworkflows/tasks/{task_id}/actions/mdwaccept
# Accept Multi-item Workflow Task
func objects_objectworkflows_tasks_task_id_actions_mdwaccept_post(
	# taskId: String = ""   Eg: taskId_example
	# The task id field value.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/objectworkflows/tasks/{task_id}/actions/mdwaccept".replace("{" + "task_id" + "}", _bzz_urlize_path_param(taskId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_objectworkflows_tasks_task_id_actions_mdwaccept_post_threaded(
	# taskId: String = ""   Eg: taskId_example
	# The task id field value.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_objectworkflows_tasks_task_id_actions_mdwaccept_post")
	bzz_callable.bind(
		taskId,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost → POST /objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete
# Complete Multi-item Workflow Task
func objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post(
	# taskId: String = ""   Eg: taskId_example
	# The task id field value.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete".replace("{" + "task_id" + "}", _bzz_urlize_path_param(taskId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post_threaded(
	# taskId: String = ""   Eg: taskId_example
	# The task id field value.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_objectworkflows_tasks_task_id_actions_mdwcomplete_post")
	bzz_callable.bind(
		taskId,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost → POST /objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent
# Manage Multi-Item Workflow Content
func objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post(
	# taskId: String = ""   Eg: taskId_example
	# The task id field value.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent".replace("{" + "task_id" + "}", _bzz_urlize_path_param(taskId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post_threaded(
	# taskId: String = ""   Eg: taskId_example
	# The task id field value.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_objectworkflows_tasks_task_id_actions_mdwmanagecontent_post")
	bzz_callable.bind(
		taskId,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost → POST /objects/objectworkflows/tasks/{task_id}/actions/mdwreassign
# Reassign Multi-item Workflow Task
func objects_objectworkflows_tasks_task_id_actions_mdwreassign_post(
	# taskId: String = ""   Eg: taskId_example
	# The id of the task to reassign.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/objectworkflows/tasks/{task_id}/actions/mdwreassign".replace("{" + "task_id" + "}", _bzz_urlize_path_param(taskId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_objectworkflows_tasks_task_id_actions_mdwreassign_post_threaded(
	# taskId: String = ""   Eg: taskId_example
	# The id of the task to reassign.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_objectworkflows_tasks_task_id_actions_mdwreassign_post")
	bzz_callable.bind(
		taskId,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsObjectworkflowsTasksTaskIdActionsReassignPost → POST /objects/objectworkflows/tasks/{task_id}/actions/reassign
# Reassign Single Record Workflow Task
func objects_objectworkflows_tasks_task_id_actions_reassign_post(
	# taskId: String = ""   Eg: taskId_example
	# The id of the task to reassign.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/objectworkflows/tasks/{task_id}/actions/reassign".replace("{" + "task_id" + "}", _bzz_urlize_path_param(taskId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_objectworkflows_tasks_task_id_actions_reassign_post_threaded(
	# taskId: String = ""   Eg: taskId_example
	# The id of the task to reassign.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_objectworkflows_tasks_task_id_actions_reassign_post")
	bzz_callable.bind(
		taskId,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsObjectworkflowsTasksTaskIdActionsTaskActionGet → GET /objects/objectworkflows/tasks/{task_id}/actions/{task_action}
# Retrieve Workflow Task Action Details
func objects_objectworkflows_tasks_task_id_actions_task_action_get(
	# taskId: String = ""   Eg: taskId_example
	# The task id field value.
	taskId: String,
	# taskAction: String = ""   Eg: taskAction_example
	# The name of the task action retrieved from Retrieve Workflow Task Actions.
	taskAction: String,
	# loc: String = ""   Eg: loc_example
	# When localized (translated) strings are available, retrieve them by including loc=true. 
	loc = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/objectworkflows/tasks/{task_id}/actions/{task_action}".replace("{" + "task_id" + "}", _bzz_urlize_path_param(taskId)).replace("{" + "task_action" + "}", _bzz_urlize_path_param(taskAction))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["loc"] = loc

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_objectworkflows_tasks_task_id_actions_task_action_get_threaded(
	# taskId: String = ""   Eg: taskId_example
	# The task id field value.
	taskId: String,
	# taskAction: String = ""   Eg: taskAction_example
	# The name of the task action retrieved from Retrieve Workflow Task Actions.
	taskAction: String,
	# loc: String = ""   Eg: loc_example
	# When localized (translated) strings are available, retrieve them by including loc=true. 
	loc = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_objectworkflows_tasks_task_id_actions_task_action_get")
	bzz_callable.bind(
		taskId,
		taskAction,
		loc,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost → POST /objects/objectworkflows/tasks/{task_id}/actions/undoaccept
# Undo Workflow Task Acceptance
func objects_objectworkflows_tasks_task_id_actions_undoaccept_post(
	# taskId: String = ""   Eg: taskId_example
	# The task id field value.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/objectworkflows/tasks/{task_id}/actions/undoaccept".replace("{" + "task_id" + "}", _bzz_urlize_path_param(taskId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_objectworkflows_tasks_task_id_actions_undoaccept_post_threaded(
	# taskId: String = ""   Eg: taskId_example
	# The task id field value.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_objectworkflows_tasks_task_id_actions_undoaccept_post")
	bzz_callable.bind(
		taskId,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost → POST /objects/objectworkflows/tasks/{task_id}/actions/updateduedate
# Update Workflow Task Due Date
func objects_objectworkflows_tasks_task_id_actions_updateduedate_post(
	# taskId: String = ""   Eg: taskId_example
	# The id of the task.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/objectworkflows/tasks/{task_id}/actions/updateduedate".replace("{" + "task_id" + "}", _bzz_urlize_path_param(taskId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_objectworkflows_tasks_task_id_actions_updateduedate_post_threaded(
	# taskId: String = ""   Eg: taskId_example
	# The id of the task.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_objectworkflows_tasks_task_id_actions_updateduedate_post")
	bzz_callable.bind(
		taskId,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsObjectworkflowsTasksTaskIdGet → GET /objects/objectworkflows/tasks/{task_id}
# Retrieve Workflow Task Details
func objects_objectworkflows_tasks_task_id_get(
	# taskId: String = ""   Eg: taskId_example
	# The task id field value.
	taskId: String,
	# loc: bool   Eg: true
	# When localized (translated) strings are available, retrieve them by including loc=true.
	loc = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/objectworkflows/tasks/{task_id}".replace("{" + "task_id" + "}", _bzz_urlize_path_param(taskId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["loc"] = loc

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_objectworkflows_tasks_task_id_get_threaded(
	# taskId: String = ""   Eg: taskId_example
	# The task id field value.
	taskId: String,
	# loc: bool   Eg: true
	# When localized (translated) strings are available, retrieve them by including loc=true.
	loc = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_objectworkflows_tasks_task_id_get")
	bzz_callable.bind(
		taskId,
		loc,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsObjectworkflowsWorkflowIdActionsGet → GET /objects/objectworkflows/{workflow_id}/actions
# Retrieve Workflow Actions
func objects_objectworkflows_workflow_id_actions_get(
	# workflowId: String = ""   Eg: workflowId_example
	# The workflow id field value.
	workflowId: String,
	# loc: String = ""   Eg: loc_example
	# When localized (translated) strings are available, retrieve them by including loc=true. 
	loc = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/objectworkflows/{workflow_id}/actions".replace("{" + "workflow_id" + "}", _bzz_urlize_path_param(workflowId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["loc"] = loc

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_objectworkflows_workflow_id_actions_get_threaded(
	# workflowId: String = ""   Eg: workflowId_example
	# The workflow id field value.
	workflowId: String,
	# loc: String = ""   Eg: loc_example
	# When localized (translated) strings are available, retrieve them by including loc=true. 
	loc = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_objectworkflows_workflow_id_actions_get")
	bzz_callable.bind(
		workflowId,
		loc,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet → GET /objects/objectworkflows/{workflow_id}/actions/{workflow_action}
# Retrieve Workflow Action Details
func objects_objectworkflows_workflow_id_actions_workflow_action_get(
	# workflowId: String = ""   Eg: workflowId_example
	# The workflow id field value.
	workflowId: String,
	# workflowAction: String = ""   Eg: workflowAction_example
	# The workflow action name retrieved from Retrieve Workflow Actions.
	workflowAction: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/objectworkflows/{workflow_id}/actions/{workflow_action}".replace("{" + "workflow_id" + "}", _bzz_urlize_path_param(workflowId)).replace("{" + "workflow_action" + "}", _bzz_urlize_path_param(workflowAction))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_objectworkflows_workflow_id_actions_workflow_action_get_threaded(
	# workflowId: String = ""   Eg: workflowId_example
	# The workflow id field value.
	workflowId: String,
	# workflowAction: String = ""   Eg: workflowAction_example
	# The workflow action name retrieved from Retrieve Workflow Actions.
	workflowAction: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_objectworkflows_workflow_id_actions_workflow_action_get")
	bzz_callable.bind(
		workflowId,
		workflowAction,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost → POST /objects/objectworkflows/{workflow_id}/actions/{workflow_action}
# Initiate Workflow Action
func objects_objectworkflows_workflow_id_actions_workflow_action_post(
	# workflowId: String = ""   Eg: workflowId_example
	# The workflow id field value.
	workflowId: String,
	# workflowAction: String = ""   Eg: workflowAction_example
	# The workflow action name retrieved from Retrieve Workflow Actions.
	workflowAction: String,
	# documentsSys: String = ""   Eg: documentsSys_example
	# Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.
	documentsSys = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/objectworkflows/{workflow_id}/actions/{workflow_action}".replace("{" + "workflow_id" + "}", _bzz_urlize_path_param(workflowId)).replace("{" + "workflow_action" + "}", _bzz_urlize_path_param(workflowAction))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["documents__sys"] = documentsSys

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_objectworkflows_workflow_id_actions_workflow_action_post_threaded(
	# workflowId: String = ""   Eg: workflowId_example
	# The workflow id field value.
	workflowId: String,
	# workflowAction: String = ""   Eg: workflowAction_example
	# The workflow action name retrieved from Retrieve Workflow Actions.
	workflowAction: String,
	# documentsSys: String = ""   Eg: documentsSys_example
	# Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.
	documentsSys = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_objectworkflows_workflow_id_actions_workflow_action_post")
	bzz_callable.bind(
		workflowId,
		workflowAction,
		documentsSys,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsObjectworkflowsWorkflowIdGet → GET /objects/objectworkflows/{workflow_id}
# Retrieve Workflow Details
func objects_objectworkflows_workflow_id_get(
	# workflowId: String = ""   Eg: workflowId_example
	# The workflow id field value.
	workflowId: String,
	# loc: bool   Eg: true
	# When localized (translated) strings are available, retrieve them by including loc=true.
	loc = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/objectworkflows/{workflow_id}".replace("{" + "workflow_id" + "}", _bzz_urlize_path_param(workflowId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["loc"] = loc

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_objectworkflows_workflow_id_get_threaded(
	# workflowId: String = ""   Eg: workflowId_example
	# The workflow id field value.
	workflowId: String,
	# loc: bool   Eg: true
	# When localized (translated) strings are available, retrieve them by including loc=true.
	loc = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_objectworkflows_workflow_id_get")
	bzz_callable.bind(
		workflowId,
		loc,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsPicklistsGet → GET /objects/picklists
# Retrieve All Picklists
func objects_picklists_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/picklists"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_picklists_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_picklists_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsPicklistsPicklistNameGet → GET /objects/picklists/{picklist_name}
# Retrieve Picklist Values
func objects_picklists_picklist_name_get(
	# picklistName: String = ""   Eg: picklistName_example
	# The picklist name field value (license_type__v, product_family__c, region__c, etc.)
	picklistName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/picklists/{picklist_name}".replace("{" + "picklist_name" + "}", _bzz_urlize_path_param(picklistName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_picklists_picklist_name_get_threaded(
	# picklistName: String = ""   Eg: picklistName_example
	# The picklist name field value (license_type__v, product_family__c, region__c, etc.)
	picklistName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_picklists_picklist_name_get")
	bzz_callable.bind(
		picklistName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsPicklistsPicklistNamePicklistValueNameDelete → DELETE /objects/picklists/{picklist_name}/{picklist_value_name}
# Inactivate Picklist Value
func objects_picklists_picklist_name_picklist_value_name_delete(
	# picklistName: String = ""   Eg: picklistName_example
	# The picklist name field value (license_type__v, product_family__c, region__c, etc.)
	picklistName: String,
	# picklistValueName: String = ""   Eg: picklistValueName_example
	# The picklist value name field value (north_america__c, south_america__c, etc.)
	picklistValueName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/picklists/{picklist_name}/{picklist_value_name}".replace("{" + "picklist_name" + "}", _bzz_urlize_path_param(picklistName)).replace("{" + "picklist_value_name" + "}", _bzz_urlize_path_param(picklistValueName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_picklists_picklist_name_picklist_value_name_delete_threaded(
	# picklistName: String = ""   Eg: picklistName_example
	# The picklist name field value (license_type__v, product_family__c, region__c, etc.)
	picklistName: String,
	# picklistValueName: String = ""   Eg: picklistValueName_example
	# The picklist value name field value (north_america__c, south_america__c, etc.)
	picklistValueName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_picklists_picklist_name_picklist_value_name_delete")
	bzz_callable.bind(
		picklistName,
		picklistValueName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsPicklistsPicklistNamePicklistValueNamePut → PUT /objects/picklists/{picklist_name}/{picklist_value_name}
# Update Picklist Value
func objects_picklists_picklist_name_picklist_value_name_put(
	# picklistName: String = ""   Eg: picklistName_example
	# The picklist name field value (license_type__v, product_family__c, region__c, etc.)
	picklistName: String,
	# picklistValueName: String = ""   Eg: picklistValueName_example
	# The picklist value name field value (north_america__c, south_america__c, etc.)
	picklistValueName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/picklists/{picklist_name}/{picklist_value_name}".replace("{" + "picklist_name" + "}", _bzz_urlize_path_param(picklistName)).replace("{" + "picklist_value_name" + "}", _bzz_urlize_path_param(picklistValueName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_picklists_picklist_name_picklist_value_name_put_threaded(
	# picklistName: String = ""   Eg: picklistName_example
	# The picklist name field value (license_type__v, product_family__c, region__c, etc.)
	picklistName: String,
	# picklistValueName: String = ""   Eg: picklistValueName_example
	# The picklist value name field value (north_america__c, south_america__c, etc.)
	picklistValueName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_picklists_picklist_name_picklist_value_name_put")
	bzz_callable.bind(
		picklistName,
		picklistValueName,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsPicklistsPicklistNamePost → POST /objects/picklists/{picklist_name}
# Create Picklist Values
func objects_picklists_picklist_name_post(
	# picklistName: String = ""   Eg: picklistName_example
	# The picklist name field value (license_type__v, product_family__c, region__c, etc.)
	picklistName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/picklists/{picklist_name}".replace("{" + "picklist_name" + "}", _bzz_urlize_path_param(picklistName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_picklists_picklist_name_post_threaded(
	# picklistName: String = ""   Eg: picklistName_example
	# The picklist name field value (license_type__v, product_family__c, region__c, etc.)
	picklistName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_picklists_picklist_name_post")
	bzz_callable.bind(
		picklistName,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsPicklistsPicklistNamePut → PUT /objects/picklists/{picklist_name}
# Update Picklist Value Label
func objects_picklists_picklist_name_put(
	# picklistName: String = ""   Eg: picklistName_example
	# The picklist name field value (license_type__v, product_family__c, region__c, etc.)
	picklistName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/picklists/{picklist_name}".replace("{" + "picklist_name" + "}", _bzz_urlize_path_param(picklistName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_picklists_picklist_name_put_threaded(
	# picklistName: String = ""   Eg: picklistName_example
	# The picklist name field value (license_type__v, product_family__c, region__c, etc.)
	picklistName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_picklists_picklist_name_put")
	bzz_callable.bind(
		picklistName,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsSandboxActionsBuildproductionPost → POST /objects/sandbox/actions/buildproduction
# Build Production Vault
func objects_sandbox_actions_buildproduction_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/sandbox/actions/buildproduction"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_sandbox_actions_buildproduction_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_sandbox_actions_buildproduction_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsSandboxActionsPromoteproductionPost → POST /objects/sandbox/actions/promoteproduction
# Promote to Production
func objects_sandbox_actions_promoteproduction_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/sandbox/actions/promoteproduction"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_sandbox_actions_promoteproduction_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_sandbox_actions_promoteproduction_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsSandboxActionsRecheckusagePost → POST /objects/sandbox/actions/recheckusage
# Recheck Sandbox Usage Limit
func objects_sandbox_actions_recheckusage_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/sandbox/actions/recheckusage"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_sandbox_actions_recheckusage_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_sandbox_actions_recheckusage_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsSandboxBatchChangesizePost → POST /objects/sandbox/batch/changesize
# Change Sandbox Size
func objects_sandbox_batch_changesize_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/sandbox/batch/changesize"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_sandbox_batch_changesize_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_sandbox_batch_changesize_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsSandboxEntitlementsSetPost → POST /objects/sandbox/entitlements/set
# Set Sandbox Entitlements
func objects_sandbox_entitlements_set_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/sandbox/entitlements/set"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_sandbox_entitlements_set_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_sandbox_entitlements_set_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsSandboxGet → GET /objects/sandbox
# Retrieve Sandboxes
func objects_sandbox_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/sandbox"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_sandbox_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_sandbox_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsSandboxNameDelete → DELETE /objects/sandbox/{name}
# Delete Sandbox
func objects_sandbox_name_delete(
	# name: String = ""   Eg: name_example
	# The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.
	name: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/sandbox/{name}".replace("{" + "name" + "}", _bzz_urlize_path_param(name))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_sandbox_name_delete_threaded(
	# name: String = ""   Eg: name_example
	# The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.
	name: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_sandbox_name_delete")
	bzz_callable.bind(
		name,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsSandboxPost → POST /objects/sandbox
# Create or Refresh Sandbox
func objects_sandbox_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/sandbox"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_sandbox_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_sandbox_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsSandboxSnapshotApiNameActionsUpdatePost → POST /objects/sandbox/snapshot/{api_name}/actions/update
# Update Sandbox Snapshot
func objects_sandbox_snapshot_api_name_actions_update_post(
	# apiName: String = ""   Eg: apiName_example
	# The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
	apiName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/sandbox/snapshot/{api_name}/actions/update".replace("{" + "api_name" + "}", _bzz_urlize_path_param(apiName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_sandbox_snapshot_api_name_actions_update_post_threaded(
	# apiName: String = ""   Eg: apiName_example
	# The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
	apiName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_sandbox_snapshot_api_name_actions_update_post")
	bzz_callable.bind(
		apiName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsSandboxSnapshotApiNameActionsUpgradePost → POST /objects/sandbox/snapshot/{api_name}/actions/upgrade
# Upgrade Sandbox Snapshot
func objects_sandbox_snapshot_api_name_actions_upgrade_post(
	# apiName: String = ""   Eg: apiName_example
	# The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
	apiName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/sandbox/snapshot/{api_name}/actions/upgrade".replace("{" + "api_name" + "}", _bzz_urlize_path_param(apiName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_sandbox_snapshot_api_name_actions_upgrade_post_threaded(
	# apiName: String = ""   Eg: apiName_example
	# The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
	apiName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_sandbox_snapshot_api_name_actions_upgrade_post")
	bzz_callable.bind(
		apiName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsSandboxSnapshotApiNameDelete → DELETE /objects/sandbox/snapshot/{api_name}
# Delete Sandbox Snapshot
func objects_sandbox_snapshot_api_name_delete(
	# apiName: String = ""   Eg: apiName_example
	# The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
	apiName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/sandbox/snapshot/{api_name}".replace("{" + "api_name" + "}", _bzz_urlize_path_param(apiName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_sandbox_snapshot_api_name_delete_threaded(
	# apiName: String = ""   Eg: apiName_example
	# The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
	apiName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_sandbox_snapshot_api_name_delete")
	bzz_callable.bind(
		apiName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsSandboxSnapshotGet → GET /objects/sandbox/snapshot
# Retrieve Sandbox Snapshots
func objects_sandbox_snapshot_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/sandbox/snapshot"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_sandbox_snapshot_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_sandbox_snapshot_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsSandboxSnapshotPost → POST /objects/sandbox/snapshot
# Create Sandbox Snapshot
func objects_sandbox_snapshot_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/sandbox/snapshot"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_sandbox_snapshot_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_sandbox_snapshot_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsSandboxVaultIdActionsRefreshPost → POST /objects/sandbox/{vault_id}/actions/refresh
# Refresh Sandbox from Snapshot
func objects_sandbox_vault_id_actions_refresh_post(
	# vaultId: String = ""   Eg: vaultId_example
	# The Vault ID of the sandbox to be refreshed.
	vaultId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/sandbox/{vault_id}/actions/refresh".replace("{" + "vault_id" + "}", _bzz_urlize_path_param(vaultId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_sandbox_vault_id_actions_refresh_post_threaded(
	# vaultId: String = ""   Eg: vaultId_example
	# The Vault ID of the sandbox to be refreshed.
	vaultId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_sandbox_vault_id_actions_refresh_post")
	bzz_callable.bind(
		vaultId,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsSandboxVaultIdGet → GET /objects/sandbox/{vault_id}
# Retrieve Sandbox Details by ID
func objects_sandbox_vault_id_get(
	# vaultId: String = ""   Eg: vaultId_example
	vaultId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/sandbox/{vault_id}".replace("{" + "vault_id" + "}", _bzz_urlize_path_param(vaultId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_sandbox_vault_id_get_threaded(
	# vaultId: String = ""   Eg: vaultId_example
	vaultId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_sandbox_vault_id_get")
	bzz_callable.bind(
		vaultId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsSecuritypoliciesGet → GET /objects/securitypolicies
# Retrieve All Security Policies
func objects_securitypolicies_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/securitypolicies"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_securitypolicies_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_securitypolicies_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsSecuritypoliciesSecurityPolicyNameGet → GET /objects/securitypolicies/{security_policy_name}
# Retrieve Security Policy
func objects_securitypolicies_security_policy_name_get(
	# securityPolicyName: String = ""   Eg: securityPolicyName_example
	# Security policy name__v field value (retrieved from previous request). This is typically a numeric value.
	securityPolicyName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/securitypolicies/{security_policy_name}".replace("{" + "security_policy_name" + "}", _bzz_urlize_path_param(securityPolicyName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_securitypolicies_security_policy_name_get_threaded(
	# securityPolicyName: String = ""   Eg: securityPolicyName_example
	# Security policy name__v field value (retrieved from previous request). This is typically a numeric value.
	securityPolicyName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_securitypolicies_security_policy_name_get")
	bzz_callable.bind(
		securityPolicyName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsUsersGet → GET /objects/users/
# Retrieve All Users
func objects_users_get(
	# vaults: String = ""   Eg: all
	# Retrieve all users assigned to all Vaults in your domain.
	vaults = "",
	# excludeVaultMembership: String = ""   Eg: excludeVaultMembership_example
	# Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.
	excludeVaultMembership = "",
	# excludeAppLicensing: String = ""   Eg: excludeAppLicensing_example
	# Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.
	excludeAppLicensing = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/users/"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["vaults"] = vaults
	bzz_query["exclude_vault_membership"] = excludeVaultMembership
	bzz_query["exclude_app_licensing"] = excludeAppLicensing

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_users_get_threaded(
	# vaults: String = ""   Eg: all
	# Retrieve all users assigned to all Vaults in your domain.
	vaults = "",
	# excludeVaultMembership: String = ""   Eg: excludeVaultMembership_example
	# Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.
	excludeVaultMembership = "",
	# excludeAppLicensing: String = ""   Eg: excludeAppLicensing_example
	# Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.
	excludeAppLicensing = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_users_get")
	bzz_callable.bind(
		vaults,
		excludeVaultMembership,
		excludeAppLicensing,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsUsersIdGet → GET /objects/users/{id}
# Retrieve User
func objects_users_id_get(
	# id: String = ""   Eg: id_example
	# The user id field value. Use the value me to get information for the currently authenticated user.
	id: String,
	# excludeVaultMembership: String = ""   Eg: excludeVaultMembership_example
	# Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
	excludeVaultMembership = "",
	# excludeAppLicensing: String = ""   Eg: excludeAppLicensing_example
	# Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
	excludeAppLicensing = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/users/{id}".replace("{" + "id" + "}", _bzz_urlize_path_param(id))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["exclude_vault_membership"] = excludeVaultMembership
	bzz_query["exclude_app_licensing"] = excludeAppLicensing

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_users_id_get_threaded(
	# id: String = ""   Eg: id_example
	# The user id field value. Use the value me to get information for the currently authenticated user.
	id: String,
	# excludeVaultMembership: String = ""   Eg: excludeVaultMembership_example
	# Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
	excludeVaultMembership = "",
	# excludeAppLicensing: String = ""   Eg: excludeAppLicensing_example
	# Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
	excludeAppLicensing = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_users_id_get")
	bzz_callable.bind(
		id,
		excludeVaultMembership,
		excludeAppLicensing,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsUsersIdPermissionsGet → GET /objects/users/{id}/permissions
# Retrieve User Permissions
func objects_users_id_permissions_get(
	# id: String = ""   Eg: id_example
	# The ID of the user. Use the value me to retrieve information for the currently authenticated user.
	id: String,
	# filter: String = ""   Eg: filter_example
	# Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
	filter = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/users/{id}/permissions".replace("{" + "id" + "}", _bzz_urlize_path_param(id))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["filter"] = filter

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_users_id_permissions_get_threaded(
	# id: String = ""   Eg: id_example
	# The ID of the user. Use the value me to retrieve information for the currently authenticated user.
	id: String,
	# filter: String = ""   Eg: filter_example
	# Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
	filter = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_users_id_permissions_get")
	bzz_callable.bind(
		id,
		filter,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsUsersIdPut → PUT /objects/users/{id}
# Update Single User
func objects_users_id_put(
	# id: String = ""   Eg: id_example
	# The user id field value. Use the value me to get information for the currently authenticated user.
	id: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/users/{id}".replace("{" + "id" + "}", _bzz_urlize_path_param(id))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_users_id_put_threaded(
	# id: String = ""   Eg: id_example
	# The user id field value. Use the value me to get information for the currently authenticated user.
	id: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_users_id_put")
	bzz_callable.bind(
		id,
		authorization,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsUsersMeGet → GET /objects/users/me
# Validate Session User
func objects_users_me_get(
	# excludeVaultMembership: String = ""   Eg: excludeVaultMembership_example
	# Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
	excludeVaultMembership = "",
	# excludeAppLicensing: String = ""   Eg: excludeAppLicensing_example
	# Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
	excludeAppLicensing = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/users/me"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["exclude_vault_membership"] = excludeVaultMembership
	bzz_query["exclude_app_licensing"] = excludeAppLicensing

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_users_me_get_threaded(
	# excludeVaultMembership: String = ""   Eg: excludeVaultMembership_example
	# Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
	excludeVaultMembership = "",
	# excludeAppLicensing: String = ""   Eg: excludeAppLicensing_example
	# Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
	excludeAppLicensing = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_users_me_get")
	bzz_callable.bind(
		excludeVaultMembership,
		excludeAppLicensing,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsUsersMePasswordPost → POST /objects/users/me/password
# Change My Password
func objects_users_me_password_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/users/me/password"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_users_me_password_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_users_me_password_post")
	bzz_callable.bind(
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsUsersMePermissionsGet → GET /objects/users/me/permissions
# Retrieve My User Permissions
func objects_users_me_permissions_get(
	# filter: String = ""   Eg: filter_example
	# Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
	filter = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/users/me/permissions"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["filter"] = filter

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_users_me_permissions_get_threaded(
	# filter: String = ""   Eg: filter_example
	# Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
	filter = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_users_me_permissions_get")
	bzz_callable.bind(
		filter,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsUsersMePut → PUT /objects/users/me
# Update My User
func objects_users_me_put(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/users/me"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_users_me_put_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_users_me_put")
	bzz_callable.bind(
		authorization,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsUsersPost → POST /objects/users
# Create Single User
func objects_users_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/users"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_users_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_users_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsUsersPut → PUT /objects/users
# Update Multiple Users
func objects_users_put(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# accept: String = ""   Eg: text/csv
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/users"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_users_put_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# accept: String = ""   Eg: text/csv
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_users_put")
	bzz_callable.bind(
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsUsersUserIdDelete → DELETE /objects/users/{user_id}
# Disable User
func objects_users_user_id_delete(
	# userId: String = ""   Eg: userId_example
	# The user id field value. 
	userId: String,
	# domain: bool   Eg: true
	# When true, this disables the user account in all vaults in the domain.
	domain = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/users/{user_id}".replace("{" + "user_id" + "}", _bzz_urlize_path_param(userId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["domain"] = domain

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_users_user_id_delete_threaded(
	# userId: String = ""   Eg: userId_example
	# The user id field value. 
	userId: String,
	# domain: bool   Eg: true
	# When true, this disables the user account in all vaults in the domain.
	domain = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_users_user_id_delete")
	bzz_callable.bind(
		userId,
		domain,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsUsersUserIdVaultMembershipVaultIdPut → PUT /objects/users/{user_id}/vault_membership/{vault_id}
# Update Vault Membership
func objects_users_user_id_vault_membership_vault_id_put(
	# userId: String = ""   Eg: userId_example
	# The user id field value.
	userId: String,
	# vaultId: String = ""   Eg: vaultId_example
	# The system-managed id field value assigned to each vault in the domain.
	vaultId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/users/{user_id}/vault_membership/{vault_id}".replace("{" + "user_id" + "}", _bzz_urlize_path_param(userId)).replace("{" + "vault_id" + "}", _bzz_urlize_path_param(vaultId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_users_user_id_vault_membership_vault_id_put_threaded(
	# userId: String = ""   Eg: userId_example
	# The user id field value.
	userId: String,
	# vaultId: String = ""   Eg: vaultId_example
	# The system-managed id field value assigned to each vault in the domain.
	vaultId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_users_user_id_vault_membership_vault_id_put")
	bzz_callable.bind(
		userId,
		vaultId,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsVaultActionsComparePost → POST /objects/vault/actions/compare
# Vault Compare
func objects_vault_actions_compare_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/vault/actions/compare"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_vault_actions_compare_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_vault_actions_compare_post")
	bzz_callable.bind(
		authorization,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation objectsVaultActionsConfigreportPost → POST /objects/vault/actions/configreport
# Vault Configuration Report
func objects_vault_actions_configreport_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/objects/vault/actions/configreport"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func objects_vault_actions_configreport_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "objects_vault_actions_configreport_post")
	bzz_callable.bind(
		authorization,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation queryComponentsPost → POST /query/components
# Component Definition Query
func query_components_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/query/components"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func query_components_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "query_components_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation queryNextPagePost → POST /query/{next_page}
# Next Page URL
func query_next_page_post(
	# nextPage: String = ""   Eg: nextPage_example
	nextPage: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIDescribeQuery: bool   Eg: true
	xVaultAPIDescribeQuery = null,
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/query/{next_page}".replace("{" + "next_page" + "}", _bzz_urlize_path_param(nextPage))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-DescribeQuery"] = xVaultAPIDescribeQuery
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func query_next_page_post_threaded(
	# nextPage: String = ""   Eg: nextPage_example
	nextPage: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIDescribeQuery: bool   Eg: true
	xVaultAPIDescribeQuery = null,
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "query_next_page_post")
	bzz_callable.bind(
		nextPage,
		authorization,
		accept,
		xVaultAPIDescribeQuery,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation queryPost → POST /query
# Submitting a Query
func query_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIDescribeQuery: bool   Eg: true
	xVaultAPIDescribeQuery = null,
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/query"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-DescribeQuery"] = xVaultAPIDescribeQuery
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func query_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIDescribeQuery: bool   Eg: true
	xVaultAPIDescribeQuery = null,
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "query_post")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIDescribeQuery,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation queryPreviousPagePost → POST /query/{previous_page}
# Previous Page URL
func query_previous_page_post(
	# previousPage: String = ""   Eg: previousPage_example
	previousPage: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIDescribeQuery: bool   Eg: true
	xVaultAPIDescribeQuery = null,
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/query/{previous_page}".replace("{" + "previous_page" + "}", _bzz_urlize_path_param(previousPage))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-DescribeQuery"] = xVaultAPIDescribeQuery
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func query_previous_page_post_threaded(
	# previousPage: String = ""   Eg: previousPage_example
	previousPage: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIDescribeQuery: bool   Eg: true
	xVaultAPIDescribeQuery = null,
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "query_previous_page_post")
	bzz_callable.bind(
		previousPage,
		authorization,
		accept,
		xVaultAPIDescribeQuery,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation scimV2MeGet → GET /scim/v2/Me
# Retrieve Current User with SCIM
func scim_v2_me_get(
	# attributes: String = ""   Eg: attributes_example
	# Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
	attributes = "",
	# excludedAttributes: String = ""   Eg: excludedAttributes_example
	# Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
	excludedAttributes = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/scim+json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/scim/v2/Me"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["attributes"] = attributes
	bzz_query["excludedAttributes"] = excludedAttributes

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func scim_v2_me_get_threaded(
	# attributes: String = ""   Eg: attributes_example
	# Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
	attributes = "",
	# excludedAttributes: String = ""   Eg: excludedAttributes_example
	# Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
	excludedAttributes = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/scim+json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "scim_v2_me_get")
	bzz_callable.bind(
		attributes,
		excludedAttributes,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation scimV2MePut → PUT /scim/v2/Me
# Update Current User with SCIM
func scim_v2_me_put(
	# attributes: String = ""   Eg: attributes_example
	# Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
	attributes = "",
	# excludedAttributes: String = ""   Eg: excludedAttributes_example
	# Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
	excludedAttributes = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/scim+json
	accept = "",
	# contentType: String = ""   Eg: application/scim+json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/scim/v2/Me"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["attributes"] = attributes
	bzz_query["excludedAttributes"] = excludedAttributes

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func scim_v2_me_put_threaded(
	# attributes: String = ""   Eg: attributes_example
	# Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
	attributes = "",
	# excludedAttributes: String = ""   Eg: excludedAttributes_example
	# Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
	excludedAttributes = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/scim+json
	accept = "",
	# contentType: String = ""   Eg: application/scim+json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "scim_v2_me_put")
	bzz_callable.bind(
		attributes,
		excludedAttributes,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation scimV2ResourceTypesGet → GET /scim/v2/ResourceTypes
# Retrieve All SCIM Resource Types
func scim_v2_resource_types_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/scim+json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/scim/v2/ResourceTypes"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func scim_v2_resource_types_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/scim+json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "scim_v2_resource_types_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation scimV2ResourceTypesTypeGet → GET /scim/v2/ResourceTypes/{type}
# Retrieve Single SCIM Resource Type
func scim_v2_resource_types_type_get(
	# type: String = ""   Eg: type_example
	# A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.
	type: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/scim+json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/scim/v2/ResourceTypes/{type}".replace("{" + "type" + "}", _bzz_urlize_path_param(type))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func scim_v2_resource_types_type_get_threaded(
	# type: String = ""   Eg: type_example
	# A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.
	type: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/scim+json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "scim_v2_resource_types_type_get")
	bzz_callable.bind(
		type,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation scimV2SchemasGet → GET /scim/v2/Schemas
# Retrieve All SCIM Schema Information
func scim_v2_schemas_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/scim+json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/scim/v2/Schemas"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func scim_v2_schemas_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/scim+json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "scim_v2_schemas_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation scimV2SchemasIdGet → GET /scim/v2/Schemas/{id}
# Retrieve Single SCIM Schema Information
func scim_v2_schemas_id_get(
	# id: String = ""   Eg: id_example
	# The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.
	id: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/scim+json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/scim/v2/Schemas/{id}".replace("{" + "id" + "}", _bzz_urlize_path_param(id))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func scim_v2_schemas_id_get_threaded(
	# id: String = ""   Eg: id_example
	# The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.
	id: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/scim+json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "scim_v2_schemas_id_get")
	bzz_callable.bind(
		id,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation scimV2ServiceProviderConfigGet → GET /scim/v2/ServiceProviderConfig
# Retrieve SCIM Provider
func scim_v2_service_provider_config_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/scim+json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/scim/v2/ServiceProviderConfig"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func scim_v2_service_provider_config_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/scim+json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "scim_v2_service_provider_config_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation scimV2TypeGet → GET /scim/v2/{type}
# Retrieve SCIM Resources
func scim_v2_type_get(
	# type: String = ""   Eg: type_example
	# The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
	type: String,
	# filter: String = ""   Eg: filter_example
	# Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
	filter = "",
	# attributes: String = ""   Eg: attributes_example
	# Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
	attributes = "",
	# excludedAttributes: String = ""   Eg: excludedAttributes_example
	# Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
	excludedAttributes = "",
	# sortBy: String = ""   Eg: sortBy_example
	# Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
	sortBy = "",
	# sortOrder: String = ""   Eg: sortOrder_example
	# Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
	sortOrder = "",
	# startIndex: String = ""   Eg: startIndex_example
	# Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
	startIndex = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/scim+json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/scim/v2/{type}".replace("{" + "type" + "}", _bzz_urlize_path_param(type))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["filter"] = filter
	bzz_query["attributes"] = attributes
	bzz_query["excludedAttributes"] = excludedAttributes
	bzz_query["sortBy"] = sortBy
	bzz_query["sortOrder"] = sortOrder
	bzz_query["startIndex"] = startIndex

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func scim_v2_type_get_threaded(
	# type: String = ""   Eg: type_example
	# The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
	type: String,
	# filter: String = ""   Eg: filter_example
	# Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
	filter = "",
	# attributes: String = ""   Eg: attributes_example
	# Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
	attributes = "",
	# excludedAttributes: String = ""   Eg: excludedAttributes_example
	# Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
	excludedAttributes = "",
	# sortBy: String = ""   Eg: sortBy_example
	# Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
	sortBy = "",
	# sortOrder: String = ""   Eg: sortOrder_example
	# Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
	sortOrder = "",
	# startIndex: String = ""   Eg: startIndex_example
	# Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
	startIndex = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/scim+json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "scim_v2_type_get")
	bzz_callable.bind(
		type,
		filter,
		attributes,
		excludedAttributes,
		sortBy,
		sortOrder,
		startIndex,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation scimV2TypeIdGet → GET /scim/v2/{type}/{id}
# Retrieve Single SCIM Resource
func scim_v2_type_id_get(
	# type: String = ""   Eg: type_example
	# The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
	type: String,
	# id: String = ""   Eg: id_example
	# The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.
	id: String,
	# attributes: String = ""   Eg: attributes_example
	# Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
	attributes = "",
	# excludedAttributes: String = ""   Eg: excludedAttributes_example
	# Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
	excludedAttributes = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/scim+json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/scim/v2/{type}/{id}".replace("{" + "type" + "}", _bzz_urlize_path_param(type)).replace("{" + "id" + "}", _bzz_urlize_path_param(id))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["attributes"] = attributes
	bzz_query["excludedAttributes"] = excludedAttributes

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func scim_v2_type_id_get_threaded(
	# type: String = ""   Eg: type_example
	# The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
	type: String,
	# id: String = ""   Eg: id_example
	# The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.
	id: String,
	# attributes: String = ""   Eg: attributes_example
	# Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
	attributes = "",
	# excludedAttributes: String = ""   Eg: excludedAttributes_example
	# Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
	excludedAttributes = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/scim+json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "scim_v2_type_id_get")
	bzz_callable.bind(
		type,
		id,
		attributes,
		excludedAttributes,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation scimV2UsersGet → GET /scim/v2/Users
# Retrieve All Users with SCIM
func scim_v2_users_get(
	# filter: String = ""   Eg: filter_example
	# Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
	filter = "",
	# attributes: String = ""   Eg: attributes_example
	# Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
	attributes = "",
	# excludedAttributes: String = ""   Eg: excludedAttributes_example
	# Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
	excludedAttributes = "",
	# sortBy: String = ""   Eg: sortBy_example
	# Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
	sortBy = "",
	# sortOrder: String = ""   Eg: sortOrder_example
	# Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.
	sortOrder = "",
	# count: String = ""   Eg: count_example
	# Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
	count = "",
	# startIndex: String = ""   Eg: startIndex_example
	# Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
	startIndex = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/scim+json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/scim/v2/Users"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["filter"] = filter
	bzz_query["attributes"] = attributes
	bzz_query["excludedAttributes"] = excludedAttributes
	bzz_query["sortBy"] = sortBy
	bzz_query["sortOrder"] = sortOrder
	bzz_query["count"] = count
	bzz_query["startIndex"] = startIndex

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func scim_v2_users_get_threaded(
	# filter: String = ""   Eg: filter_example
	# Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
	filter = "",
	# attributes: String = ""   Eg: attributes_example
	# Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
	attributes = "",
	# excludedAttributes: String = ""   Eg: excludedAttributes_example
	# Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
	excludedAttributes = "",
	# sortBy: String = ""   Eg: sortBy_example
	# Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
	sortBy = "",
	# sortOrder: String = ""   Eg: sortOrder_example
	# Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.
	sortOrder = "",
	# count: String = ""   Eg: count_example
	# Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
	count = "",
	# startIndex: String = ""   Eg: startIndex_example
	# Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
	startIndex = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/scim+json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "scim_v2_users_get")
	bzz_callable.bind(
		filter,
		attributes,
		excludedAttributes,
		sortBy,
		sortOrder,
		count,
		startIndex,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation scimV2UsersIdGet → GET /scim/v2/Users/{id}
# Retrieve Single User with SCIM
func scim_v2_users_id_get(
	# id: String = ""   Eg: id_example
	# The id of the user you wish to update.
	id: String,
	# filter: String = ""   Eg: filter_example
	# Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
	filter = "",
	# attributes: String = ""   Eg: attributes_example
	# Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
	attributes = "",
	# excludedAttributes: String = ""   Eg: excludedAttributes_example
	# Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
	excludedAttributes = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/scim+json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/scim/v2/Users/{id}".replace("{" + "id" + "}", _bzz_urlize_path_param(id))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["filter"] = filter
	bzz_query["attributes"] = attributes
	bzz_query["excludedAttributes"] = excludedAttributes

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func scim_v2_users_id_get_threaded(
	# id: String = ""   Eg: id_example
	# The id of the user you wish to update.
	id: String,
	# filter: String = ""   Eg: filter_example
	# Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
	filter = "",
	# attributes: String = ""   Eg: attributes_example
	# Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
	attributes = "",
	# excludedAttributes: String = ""   Eg: excludedAttributes_example
	# Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
	excludedAttributes = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/scim+json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "scim_v2_users_id_get")
	bzz_callable.bind(
		id,
		filter,
		attributes,
		excludedAttributes,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation scimV2UsersIdPut → PUT /scim/v2/Users/{id}
# Update User with SCIM
func scim_v2_users_id_put(
	# id: String = ""   Eg: id_example
	# The id of the user you wish to update.
	id: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/scim+json
	accept = "",
	# contentType: String = ""   Eg: application/scim+json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/scim/v2/Users/{id}".replace("{" + "id" + "}", _bzz_urlize_path_param(id))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func scim_v2_users_id_put_threaded(
	# id: String = ""   Eg: id_example
	# The id of the user you wish to update.
	id: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/scim+json
	accept = "",
	# contentType: String = ""   Eg: application/scim+json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "scim_v2_users_id_put")
	bzz_callable.bind(
		id,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation scimV2UsersPost → POST /scim/v2/Users
# Create User with SCIM
func scim_v2_users_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/scim+json
	accept = "",
	# contentType: String = ""   Eg: application/scim+json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/scim/v2/Users"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func scim_v2_users_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/scim+json
	accept = "",
	# contentType: String = ""   Eg: application/scim+json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "scim_v2_users_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesCertificateCertIdGet → GET /services/certificate/{cert_id}
# Retrieve Signing Certificate
func services_certificate_cert_id_get(
	# certId: String = ""   Eg: certId_example
	# The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.
	certId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/certificate/{cert_id}".replace("{" + "cert_id" + "}", _bzz_urlize_path_param(certId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_certificate_cert_id_get_threaded(
	# certId: String = ""   Eg: certId_example
	# The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.
	certId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_certificate_cert_id_get")
	bzz_callable.bind(
		certId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesConfigurationModeActionsDisablePost → POST /services/configuration_mode/actions/disable
# Disable Configuration Mode
func services_configuration_mode_actions_disable_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: contentType_example
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/configuration_mode/actions/disable"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_configuration_mode_actions_disable_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: contentType_example
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_configuration_mode_actions_disable_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesConfigurationModeActionsEnablePost → POST /services/configuration_mode/actions/enable
# Enable Configuration Mode
func services_configuration_mode_actions_enable_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: contentType_example
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/configuration_mode/actions/enable"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_configuration_mode_actions_enable_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: contentType_example
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_configuration_mode_actions_enable_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesDirectdataFilesGet → GET /services/directdata/files
# Retrieve Available Direct Data Files
func services_directdata_files_get(
	# extractType: String = ""   Eg: incremental_directdata
	# The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.
	extractType = "",
	# startTime: int   Eg: 2023-12-07T00:00Z
	# Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.
	startTime = null,
	# stopTime: int   Eg: 2023-12-08T00:00Z
	# Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.
	stopTime = null,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/directdata/files"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["extract_type"] = extractType
	bzz_query["start_time"] = startTime
	bzz_query["stop_time"] = stopTime

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_directdata_files_get_threaded(
	# extractType: String = ""   Eg: incremental_directdata
	# The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.
	extractType = "",
	# startTime: int   Eg: 2023-12-07T00:00Z
	# Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.
	startTime = null,
	# stopTime: int   Eg: 2023-12-08T00:00Z
	# Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.
	stopTime = null,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_directdata_files_get")
	bzz_callable.bind(
		extractType,
		startTime,
		stopTime,
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesDirectdataFilesNameGet → GET /services/directdata/files/{name}
# Download Direct Data File
func services_directdata_files_name_get(
	# name: String = ""   Eg: name_example
	# The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.
	name: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/directdata/files/{name}".replace("{" + "name" + "}", _bzz_urlize_path_param(name))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_directdata_files_name_get_threaded(
	# name: String = ""   Eg: name_example
	# The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.
	name: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_directdata_files_name_get")
	bzz_callable.bind(
		name,
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesFileStagingItemsContentItemGet → GET /services/file_staging/items/content/{item}
# Download Item Content
func services_file_staging_items_content_item_get(
	# item: String = ""   Eg: item_example
	# The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
	item: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# some_range: String = ""   Eg: some_range_example
	# Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format `bytes={min}-{max}`. For example, `bytes=0-1000`.
	some_range = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/file_staging/items/content/{item}".replace("{" + "item" + "}", _bzz_urlize_path_param(item))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Range"] = some_range
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_file_staging_items_content_item_get_threaded(
	# item: String = ""   Eg: item_example
	# The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
	item: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# some_range: String = ""   Eg: some_range_example
	# Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format `bytes={min}-{max}`. For example, `bytes=0-1000`.
	some_range = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_file_staging_items_content_item_get")
	bzz_callable.bind(
		item,
		authorization,
		accept,
		some_range,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesFileStagingItemsItemDelete → DELETE /services/file_staging/items/{item}
# Delete File or Folder
func services_file_staging_items_item_delete(
	# item: String = ""   Eg: item_example
	# The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
	item: String,
	# recursive: String = ""   Eg: recursive_example
	# Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.
	recursive = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/file_staging/items/{item}".replace("{" + "item" + "}", _bzz_urlize_path_param(item))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["recursive"] = recursive

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_file_staging_items_item_delete_threaded(
	# item: String = ""   Eg: item_example
	# The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
	item: String,
	# recursive: String = ""   Eg: recursive_example
	# Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.
	recursive = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_file_staging_items_item_delete")
	bzz_callable.bind(
		item,
		recursive,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesFileStagingItemsItemGet → GET /services/file_staging/items/{item}
# List Items at a Path
func services_file_staging_items_item_get(
	# item: String = ""   Eg: item_example
	# The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
	item: String,
	# recursive: String = ""   Eg: recursive_example
	# If true, the response will contain the contents of all subfolders. If not specified, the default value is false.
	recursive = "",
	# limit: String = ""   Eg: limit_example
	# Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
	limit = "",
	# formatResult: String = ""   Eg: formatResult_example
	# If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.
	formatResult = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/file_staging/items/{item}".replace("{" + "item" + "}", _bzz_urlize_path_param(item))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["recursive"] = recursive
	bzz_query["limit"] = limit
	bzz_query["format_result"] = formatResult

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_file_staging_items_item_get_threaded(
	# item: String = ""   Eg: item_example
	# The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
	item: String,
	# recursive: String = ""   Eg: recursive_example
	# If true, the response will contain the contents of all subfolders. If not specified, the default value is false.
	recursive = "",
	# limit: String = ""   Eg: limit_example
	# Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
	limit = "",
	# formatResult: String = ""   Eg: formatResult_example
	# If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.
	formatResult = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_file_staging_items_item_get")
	bzz_callable.bind(
		item,
		recursive,
		limit,
		formatResult,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesFileStagingItemsItemPut → PUT /services/file_staging/items/{item}
# Update Folder or File
func services_file_staging_items_item_put(
	# item: String = ""   Eg: item_example
	# The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
	item: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/file_staging/items/{item}".replace("{" + "item" + "}", _bzz_urlize_path_param(item))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_file_staging_items_item_put_threaded(
	# item: String = ""   Eg: item_example
	# The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
	item: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_file_staging_items_item_put")
	bzz_callable.bind(
		item,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesFileStagingItemsPost → POST /services/file_staging/items
# Create Folder or File
func services_file_staging_items_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentMD5: String = ""   Eg: contentMD5_example
	# Optional: The MD5 checksum of the file being uploaded.
	contentMD5 = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/file_staging/items"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-MD5"] = contentMD5
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_file_staging_items_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentMD5: String = ""   Eg: contentMD5_example
	# Optional: The MD5 checksum of the file being uploaded.
	contentMD5 = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_file_staging_items_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentMD5,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesFileStagingUploadGet → GET /services/file_staging/upload/
# List Upload Sessions
func services_file_staging_upload_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/file_staging/upload/"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_file_staging_upload_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_file_staging_upload_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesFileStagingUploadPost → POST /services/file_staging/upload
# Create Resumable Upload Session
func services_file_staging_upload_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/file_staging/upload"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_file_staging_upload_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_file_staging_upload_post")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesFileStagingUploadUploadSessionIdDelete → DELETE /services/file_staging/upload/{upload_session_id}
# Abort Upload Session
func services_file_staging_upload_upload_session_id_delete(
	# uploadSessionId: String = ""   Eg: uploadSessionId_example
	uploadSessionId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/file_staging/upload/{upload_session_id}".replace("{" + "upload_session_id" + "}", _bzz_urlize_path_param(uploadSessionId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_file_staging_upload_upload_session_id_delete_threaded(
	# uploadSessionId: String = ""   Eg: uploadSessionId_example
	uploadSessionId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_file_staging_upload_upload_session_id_delete")
	bzz_callable.bind(
		uploadSessionId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesFileStagingUploadUploadSessionIdGet → GET /services/file_staging/upload/{upload_session_id}
# Get Upload Session Details
func services_file_staging_upload_upload_session_id_get(
	# uploadSessionId: String = ""   Eg: uploadSessionId_example
	uploadSessionId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/file_staging/upload/{upload_session_id}".replace("{" + "upload_session_id" + "}", _bzz_urlize_path_param(uploadSessionId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_file_staging_upload_upload_session_id_get_threaded(
	# uploadSessionId: String = ""   Eg: uploadSessionId_example
	uploadSessionId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_file_staging_upload_upload_session_id_get")
	bzz_callable.bind(
		uploadSessionId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesFileStagingUploadUploadSessionIdPartsGet → GET /services/file_staging/upload/{upload_session_id}/parts
# List File Parts Uploaded to Session
func services_file_staging_upload_upload_session_id_parts_get(
	# uploadSessionId: String = ""   Eg: uploadSessionId_example
	uploadSessionId: String,
	# limit: String = ""   Eg: limit_example
	# Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
	limit = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/file_staging/upload/{upload_session_id}/parts".replace("{" + "upload_session_id" + "}", _bzz_urlize_path_param(uploadSessionId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["limit"] = limit

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_file_staging_upload_upload_session_id_parts_get_threaded(
	# uploadSessionId: String = ""   Eg: uploadSessionId_example
	uploadSessionId: String,
	# limit: String = ""   Eg: limit_example
	# Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
	limit = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_file_staging_upload_upload_session_id_parts_get")
	bzz_callable.bind(
		uploadSessionId,
		limit,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesFileStagingUploadUploadSessionIdPost → POST /services/file_staging/upload/{upload_session_id}
# Commit Upload Session
func services_file_staging_upload_upload_session_id_post(
	# uploadSessionId: String = ""   Eg: uploadSessionId_example
	uploadSessionId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/file_staging/upload/{upload_session_id}".replace("{" + "upload_session_id" + "}", _bzz_urlize_path_param(uploadSessionId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_file_staging_upload_upload_session_id_post_threaded(
	# uploadSessionId: String = ""   Eg: uploadSessionId_example
	uploadSessionId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_file_staging_upload_upload_session_id_post")
	bzz_callable.bind(
		uploadSessionId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesFileStagingUploadUploadSessionIdPut → PUT /services/file_staging/upload/{upload_session_id}
# Upload to a Session
func services_file_staging_upload_upload_session_id_put(
	# uploadSessionId: String = ""   Eg: uploadSessionId_example
	uploadSessionId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/octet-stream
	contentType = "",
	# xVaultAPIFilePartNumber: String = ""   Eg: xVaultAPIFilePartNumber_example
	# The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.
	xVaultAPIFilePartNumber = "",
	# contentMD5: String = ""   Eg: contentMD5_example
	# Optional: The MD5 checksum of the file part being uploaded.
	contentMD5 = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/file_staging/upload/{upload_session_id}".replace("{" + "upload_session_id" + "}", _bzz_urlize_path_param(uploadSessionId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-FilePartNumber"] = xVaultAPIFilePartNumber
	bzz_headers["Content-MD5"] = contentMD5
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_file_staging_upload_upload_session_id_put_threaded(
	# uploadSessionId: String = ""   Eg: uploadSessionId_example
	uploadSessionId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/octet-stream
	contentType = "",
	# xVaultAPIFilePartNumber: String = ""   Eg: xVaultAPIFilePartNumber_example
	# The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.
	xVaultAPIFilePartNumber = "",
	# contentMD5: String = ""   Eg: contentMD5_example
	# Optional: The MD5 checksum of the file part being uploaded.
	contentMD5 = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_file_staging_upload_upload_session_id_put")
	bzz_callable.bind(
		uploadSessionId,
		authorization,
		accept,
		contentType,
		xVaultAPIFilePartNumber,
		contentMD5,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesJobsHistoriesGet → GET /services/jobs/histories
# Retrieve Job Histories
func services_jobs_histories_get(
	# startDate: String = ""   Eg: startDate_example
	# Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
	startDate = "",
	# endDate: String = ""   Eg: endDate_example
	# Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
	endDate = "",
	# status: String = ""   Eg: status_example
	# Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.
	status = "",
	# limit: String = ""   Eg: limit_example
	# Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
	limit = "",
	# offset: String = ""   Eg: offset_example
	# Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51.
	offset = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/jobs/histories"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["start_date"] = startDate
	bzz_query["end_date"] = endDate
	bzz_query["status"] = status
	bzz_query["limit"] = limit
	bzz_query["offset"] = offset

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_jobs_histories_get_threaded(
	# startDate: String = ""   Eg: startDate_example
	# Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
	startDate = "",
	# endDate: String = ""   Eg: endDate_example
	# Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
	endDate = "",
	# status: String = ""   Eg: status_example
	# Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.
	status = "",
	# limit: String = ""   Eg: limit_example
	# Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
	limit = "",
	# offset: String = ""   Eg: offset_example
	# Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51.
	offset = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_jobs_histories_get")
	bzz_callable.bind(
		startDate,
		endDate,
		status,
		limit,
		offset,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesJobsJobIdErrorsGet → GET /services/jobs/{job_id}/errors
# Retrieve Import Bulk Translation File Job Errors
func services_jobs_job_id_errors_get(
	# jobId: String = ""   Eg: jobId_example
	# The id value of the requested import job. This was returned from the Import Bulk Translation File request.
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: text/csv
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/jobs/{job_id}/errors".replace("{" + "job_id" + "}", _bzz_urlize_path_param(jobId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_jobs_job_id_errors_get_threaded(
	# jobId: String = ""   Eg: jobId_example
	# The id value of the requested import job. This was returned from the Import Bulk Translation File request.
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: text/csv
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_jobs_job_id_errors_get")
	bzz_callable.bind(
		jobId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesJobsJobIdGet → GET /services/jobs/{job_id}
# Retrieve Job Status
func services_jobs_job_id_get(
	# jobId: String = ""   Eg: jobId_example
	# The ID of the job, returned from the original job request.
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/jobs/{job_id}".replace("{" + "job_id" + "}", _bzz_urlize_path_param(jobId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_jobs_job_id_get_threaded(
	# jobId: String = ""   Eg: jobId_example
	# The ID of the job, returned from the original job request.
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_jobs_job_id_get")
	bzz_callable.bind(
		jobId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesJobsJobIdSummaryGet → GET /services/jobs/{job_id}/summary
# Retrieve Import Bulk Translation File Job Summary
func services_jobs_job_id_summary_get(
	# jobId: String = ""   Eg: jobId_example
	# The id value of the requested import job. This was returned from the Import Bulk Translation File request.
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/jobs/{job_id}/summary".replace("{" + "job_id" + "}", _bzz_urlize_path_param(jobId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_jobs_job_id_summary_get_threaded(
	# jobId: String = ""   Eg: jobId_example
	# The id value of the requested import job. This was returned from the Import Bulk Translation File request.
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_jobs_job_id_summary_get")
	bzz_callable.bind(
		jobId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesJobsJobIdTasksGet → GET /services/jobs/{job_id}/tasks
# Retrieve SDK Job Tasks
func services_jobs_job_id_tasks_get(
	# jobId: String = ""   Eg: jobId_example
	# The ID of the SDK job, returned from the original job request.
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/jobs/{job_id}/tasks".replace("{" + "job_id" + "}", _bzz_urlize_path_param(jobId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_jobs_job_id_tasks_get_threaded(
	# jobId: String = ""   Eg: jobId_example
	# The ID of the SDK job, returned from the original job request.
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_jobs_job_id_tasks_get")
	bzz_callable.bind(
		jobId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesJobsMonitorsGet → GET /services/jobs/monitors
# Retrieve Job Monitors
func services_jobs_monitors_get(
	# startDate: String = ""   Eg: startDate_example
	# Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
	startDate = "",
	# endDate: String = ""   Eg: endDate_example
	# Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
	endDate = "",
	# status: String = ""   Eg: status_example
	# Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.
	status = "",
	# limit: String = ""   Eg: limit_example
	# Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
	limit = "",
	# offset: String = ""   Eg: offset_example
	# Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51.
	offset = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/jobs/monitors"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["start_date"] = startDate
	bzz_query["end_date"] = endDate
	bzz_query["status"] = status
	bzz_query["limit"] = limit
	bzz_query["offset"] = offset

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_jobs_monitors_get_threaded(
	# startDate: String = ""   Eg: startDate_example
	# Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
	startDate = "",
	# endDate: String = ""   Eg: endDate_example
	# Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
	endDate = "",
	# status: String = ""   Eg: status_example
	# Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.
	status = "",
	# limit: String = ""   Eg: limit_example
	# Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
	limit = "",
	# offset: String = ""   Eg: offset_example
	# Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51.
	offset = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_jobs_monitors_get")
	bzz_callable.bind(
		startDate,
		endDate,
		status,
		limit,
		offset,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesJobsStartNowJobIdPost → POST /services/jobs/start_now/{job_id}
# Start Job
func services_jobs_start_now_job_id_post(
	# jobId: String = ""   Eg: jobId_example
	# The ID of the scheduled job instance to start.
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/jobs/start_now/{job_id}".replace("{" + "job_id" + "}", _bzz_urlize_path_param(jobId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_jobs_start_now_job_id_post_threaded(
	# jobId: String = ""   Eg: jobId_example
	# The ID of the scheduled job instance to start.
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_jobs_start_now_job_id_post")
	bzz_callable.bind(
		jobId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesLoaderExtractPost → POST /services/loader/extract
# Extract Data Files
func services_loader_extract_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/loader/extract"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_loader_extract_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_loader_extract_post")
	bzz_callable.bind(
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesLoaderJobIdTasksTaskIdFailurelogGet → GET /services/loader/{job_id}/tasks/{task_id}/failurelog
# Retrieve Load Failure Log Results
func services_loader_job_id_tasks_task_id_failurelog_get(
	# jobId: String = ""   Eg: jobId_example
	# The id value of the requested extract job.
	jobId: String,
	# taskId: String = ""   Eg: taskId_example
	# The id value of the requested extract task.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: text/csv
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/loader/{job_id}/tasks/{task_id}/failurelog".replace("{" + "job_id" + "}", _bzz_urlize_path_param(jobId)).replace("{" + "task_id" + "}", _bzz_urlize_path_param(taskId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_loader_job_id_tasks_task_id_failurelog_get_threaded(
	# jobId: String = ""   Eg: jobId_example
	# The id value of the requested extract job.
	jobId: String,
	# taskId: String = ""   Eg: taskId_example
	# The id value of the requested extract task.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: text/csv
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_loader_job_id_tasks_task_id_failurelog_get")
	bzz_callable.bind(
		jobId,
		taskId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesLoaderJobIdTasksTaskIdResultsGet → GET /services/loader/{job_id}/tasks/{task_id}/results
# Retrieve Loader Extract Results
func services_loader_job_id_tasks_task_id_results_get(
	# jobId: String = ""   Eg: jobId_example
	# The id value of the requested extract job.
	jobId: String,
	# taskId: String = ""   Eg: taskId_example
	# The id value of the requested extract task.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: text/csv
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/loader/{job_id}/tasks/{task_id}/results".replace("{" + "job_id" + "}", _bzz_urlize_path_param(jobId)).replace("{" + "task_id" + "}", _bzz_urlize_path_param(taskId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_loader_job_id_tasks_task_id_results_get_threaded(
	# jobId: String = ""   Eg: jobId_example
	# The id value of the requested extract job.
	jobId: String,
	# taskId: String = ""   Eg: taskId_example
	# The id value of the requested extract task.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: text/csv
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_loader_job_id_tasks_task_id_results_get")
	bzz_callable.bind(
		jobId,
		taskId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesLoaderJobIdTasksTaskIdResultsRenditionsGet → GET /services/loader/{job_id}/tasks/{task_id}/results/renditions
# Retrieve Loader Extract Renditions Results
func services_loader_job_id_tasks_task_id_results_renditions_get(
	# jobId: String = ""   Eg: jobId_example
	# The id value of the requested extract job.
	jobId: String,
	# taskId: String = ""   Eg: taskId_example
	# The id value of the requested extract task.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: text/csv
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/loader/{job_id}/tasks/{task_id}/results/renditions".replace("{" + "job_id" + "}", _bzz_urlize_path_param(jobId)).replace("{" + "task_id" + "}", _bzz_urlize_path_param(taskId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_loader_job_id_tasks_task_id_results_renditions_get_threaded(
	# jobId: String = ""   Eg: jobId_example
	# The id value of the requested extract job.
	jobId: String,
	# taskId: String = ""   Eg: taskId_example
	# The id value of the requested extract task.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: text/csv
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_loader_job_id_tasks_task_id_results_renditions_get")
	bzz_callable.bind(
		jobId,
		taskId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesLoaderJobIdTasksTaskIdSuccesslogGet → GET /services/loader/{job_id}/tasks/{task_id}/successlog
# Retrieve Load Success Log Results
func services_loader_job_id_tasks_task_id_successlog_get(
	# jobId: String = ""   Eg: jobId_example
	# The id value of the requested extract job.
	jobId: String,
	# taskId: String = ""   Eg: taskId_example
	# The id value of the requested extract task.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: text/csv
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/loader/{job_id}/tasks/{task_id}/successlog".replace("{" + "job_id" + "}", _bzz_urlize_path_param(jobId)).replace("{" + "task_id" + "}", _bzz_urlize_path_param(taskId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_loader_job_id_tasks_task_id_successlog_get_threaded(
	# jobId: String = ""   Eg: jobId_example
	# The id value of the requested extract job.
	jobId: String,
	# taskId: String = ""   Eg: taskId_example
	# The id value of the requested extract task.
	taskId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: text/csv
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_loader_job_id_tasks_task_id_successlog_get")
	bzz_callable.bind(
		jobId,
		taskId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesLoaderLoadPost → POST /services/loader/load
# Load Data Objects
func services_loader_load_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/loader/load"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_loader_load_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_loader_load_post")
	bzz_callable.bind(
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesPackageActionsValidatePost → POST /services/package/actions/validate
# Validate Package
func services_package_actions_validate_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/package/actions/validate"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_package_actions_validate_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_package_actions_validate_post")
	bzz_callable.bind(
		authorization,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesPackagePost → POST /services/package
# Export Package
func services_package_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/package"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_package_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_package_post")
	bzz_callable.bind(
		authorization,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesPackagePut → PUT /services/package
# Import Package
func services_package_put(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/package"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_package_put_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_package_put")
	bzz_callable.bind(
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesQueuesGet → GET /services/queues
# Retrieve All Queues
func services_queues_get(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/queues"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_queues_get_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_queues_get")
	bzz_callable.bind(
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesQueuesQueueNameActionsDisableDeliveryPut → PUT /services/queues/{queue_name}/actions/disable_delivery
# Disable Delivery
func services_queues_queue_name_actions_disable_delivery_put(
	# queueName: String = ""   Eg: queueName_example
	# The name of a specific Queue.
	queueName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/queues/{queue_name}/actions/disable_delivery".replace("{" + "queue_name" + "}", _bzz_urlize_path_param(queueName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_queues_queue_name_actions_disable_delivery_put_threaded(
	# queueName: String = ""   Eg: queueName_example
	# The name of a specific Queue.
	queueName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_queues_queue_name_actions_disable_delivery_put")
	bzz_callable.bind(
		queueName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesQueuesQueueNameActionsEnableDeliveryPut → PUT /services/queues/{queue_name}/actions/enable_delivery
# Enable Delivery
func services_queues_queue_name_actions_enable_delivery_put(
	# queueName: String = ""   Eg: queueName_example
	# The name of a specific Queue.
	queueName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/queues/{queue_name}/actions/enable_delivery".replace("{" + "queue_name" + "}", _bzz_urlize_path_param(queueName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_queues_queue_name_actions_enable_delivery_put_threaded(
	# queueName: String = ""   Eg: queueName_example
	# The name of a specific Queue.
	queueName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_queues_queue_name_actions_enable_delivery_put")
	bzz_callable.bind(
		queueName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesQueuesQueueNameActionsResetPut → PUT /services/queues/{queue_name}/actions/reset
# Reset Queue
func services_queues_queue_name_actions_reset_put(
	# queueName: String = ""   Eg: queueName_example
	# The name of a specific Queue.
	queueName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/queues/{queue_name}/actions/reset".replace("{" + "queue_name" + "}", _bzz_urlize_path_param(queueName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_queues_queue_name_actions_reset_put_threaded(
	# queueName: String = ""   Eg: queueName_example
	# The name of a specific Queue.
	queueName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_queues_queue_name_actions_reset_put")
	bzz_callable.bind(
		queueName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesQueuesQueueNameGet → GET /services/queues/{queue_name}
# Retrieve Queue Status
func services_queues_queue_name_get(
	# queueName: String = ""   Eg: queueName_example
	# The name of a specific queue. For example, queue__c.
	queueName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/queues/{queue_name}".replace("{" + "queue_name" + "}", _bzz_urlize_path_param(queueName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_queues_queue_name_get_threaded(
	# queueName: String = ""   Eg: queueName_example
	# The name of a specific queue. For example, queue__c.
	queueName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_queues_queue_name_get")
	bzz_callable.bind(
		queueName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation servicesVobjectVaultPackageVPackageIdActionsValidatePost → POST /services/vobject/vault_package__v/{package_id}/actions/validate
# Validate Imported Package
func services_vobject_vault_package_v_package_id_actions_validate_post(
	# packageId: String = ""   Eg: packageId_example
	# The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.
	packageId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/services/vobject/vault_package__v/{package_id}/actions/validate".replace("{" + "package_id" + "}", _bzz_urlize_path_param(packageId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func services_vobject_vault_package_v_package_id_actions_validate_post_threaded(
	# packageId: String = ""   Eg: packageId_example
	# The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.
	packageId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "services_vobject_vault_package_v_package_id_actions_validate_post")
	bzz_callable.bind(
		packageId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation sessionDelete → DELETE /session
# End Session
func session_delete(
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	# The Vault sessionId to end.
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/session"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func session_delete_threaded(
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	# The Vault sessionId to end.
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "session_delete")
	bzz_callable.bind(
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation uicodeDistributionsDistributionNameCodeGet → GET /uicode/distributions/{distribution_name}/code
# Download Single Client Code Distribution
func uicode_distributions_distribution_name_code_get(
	# distributionName: String = ""   Eg: distributionName_example
	# The name attribute of the client code distribution to download.
	distributionName: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/uicode/distributions/{distribution_name}/code".replace("{" + "distribution_name" + "}", _bzz_urlize_path_param(distributionName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func uicode_distributions_distribution_name_code_get_threaded(
	# distributionName: String = ""   Eg: distributionName_example
	# The name attribute of the client code distribution to download.
	distributionName: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "uicode_distributions_distribution_name_code_get")
	bzz_callable.bind(
		distributionName,
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation uicodeDistributionsDistributionNameDelete → DELETE /uicode/distributions/{distribution_name}
# Delete Single Client Code Distribution
func uicode_distributions_distribution_name_delete(
	# distributionName: String = ""   Eg: distributionName_example
	# The name attribute of the client code distribution to delete.
	distributionName: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/uicode/distributions/{distribution_name}".replace("{" + "distribution_name" + "}", _bzz_urlize_path_param(distributionName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func uicode_distributions_distribution_name_delete_threaded(
	# distributionName: String = ""   Eg: distributionName_example
	# The name attribute of the client code distribution to delete.
	distributionName: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "uicode_distributions_distribution_name_delete")
	bzz_callable.bind(
		distributionName,
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation uicodeDistributionsDistributionNameGet → GET /uicode/distributions/{distribution_name}
# Retrieve Single Client Code Distribution Metadata
func uicode_distributions_distribution_name_get(
	# distributionName: String = ""   Eg: distributionName_example
	# The name attribute of the client code distribution to delete.
	distributionName: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/uicode/distributions/{distribution_name}".replace("{" + "distribution_name" + "}", _bzz_urlize_path_param(distributionName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func uicode_distributions_distribution_name_get_threaded(
	# distributionName: String = ""   Eg: distributionName_example
	# The name attribute of the client code distribution to delete.
	distributionName: String,
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "uicode_distributions_distribution_name_get")
	bzz_callable.bind(
		distributionName,
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation uicodeDistributionsGet → GET /uicode/distributions
# Retrieve All Client Code Distribution Metadata
func uicode_distributions_get(
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/uicode/distributions"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func uicode_distributions_get_threaded(
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "uicode_distributions_get")
	bzz_callable.bind(
		accept,
		authorization,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation uicodeDistributionsPost → POST /uicode/distributions
# Add or Replace Single Client Code Distribution
func uicode_distributions_post(
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/uicode/distributions"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Accept"] = accept
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func uicode_distributions_post_threaded(
	# accept: String = ""   Eg: application/json
	accept = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: multipart/form-data
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "uicode_distributions_post")
	bzz_callable.bind(
		accept,
		authorization,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectVaultPackageVPackageIdActionsDeployPost → POST /vobject/vault_package__v/{package_id}/actions/deploy
# Deploy Package
func vobject_vault_package_v_package_id_actions_deploy_post(
	# packageId: String = ""   Eg: packageId_example
	# The id field value of the vault_package__v object record used for deployment. See Import Package.
	packageId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobject/vault_package__v/{package_id}/actions/deploy".replace("{" + "package_id" + "}", _bzz_urlize_path_param(packageId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobject_vault_package_v_package_id_actions_deploy_post_threaded(
	# packageId: String = ""   Eg: packageId_example
	# The id field value of the vault_package__v object record used for deployment. See Import Package.
	packageId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobject_vault_package_v_package_id_actions_deploy_post")
	bzz_callable.bind(
		packageId,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectVaultPackageVPackageIdActionsDeployResultsGet → GET /vobject/vault_package__v/{package_id}/actions/deploy/results
# Retrieve Package Deploy Results
func vobject_vault_package_v_package_id_actions_deploy_results_get(
	# packageId: String = ""   Eg: packageId_example
	# The id field value of the vault_package__v object record used for deployment. See Deploy Package.
	packageId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobject/vault_package__v/{package_id}/actions/deploy/results".replace("{" + "package_id" + "}", _bzz_urlize_path_param(packageId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobject_vault_package_v_package_id_actions_deploy_results_get_threaded(
	# packageId: String = ""   Eg: packageId_example
	# The id field value of the vault_package__v object record used for deployment. See Deploy Package.
	packageId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobject_vault_package_v_package_id_actions_deploy_results_get")
	bzz_callable.bind(
		packageId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet → GET /vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}
# Retrieve Results of Cascade Delete Job
func vobjects_cascadedelete_results_object_name_job_status_job_id_get(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# jobStatus: String = ""   Eg: jobStatus_example
	jobStatus: String,
	# jobId: String = ""   Eg: jobId_example
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: text/csv
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "job_status" + "}", _bzz_urlize_path_param(jobStatus)).replace("{" + "job_id" + "}", _bzz_urlize_path_param(jobId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_cascadedelete_results_object_name_job_status_job_id_get_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# jobStatus: String = ""   Eg: jobStatus_example
	jobStatus: String,
	# jobId: String = ""   Eg: jobId_example
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: text/csv
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_cascadedelete_results_object_name_job_status_job_id_get")
	bzz_callable.bind(
		objectName,
		jobStatus,
		jobId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet → GET /vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}
# Retrieve Results of Deep Copy Job
func vobjects_deepcopy_results_object_name_job_status_job_id_get(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# jobStatus: String = ""   Eg: jobStatus_example
	# The ID of the job, retrieved from the response of the job request.
	jobStatus: String,
	# jobId: String = ""   Eg: jobId_example
	# Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "job_status" + "}", _bzz_urlize_path_param(jobStatus)).replace("{" + "job_id" + "}", _bzz_urlize_path_param(jobId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_deepcopy_results_object_name_job_status_job_id_get_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# jobStatus: String = ""   Eg: jobStatus_example
	# The ID of the job, retrieved from the response of the job request.
	jobStatus: String,
	# jobId: String = ""   Eg: jobId_example
	# Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_deepcopy_results_object_name_job_status_job_id_get")
	bzz_callable.bind(
		objectName,
		jobStatus,
		jobId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsEdlItemVActionsCreateplaceholderPost → POST /vobjects/edl_item__v/actions/createplaceholder
# Create a Placeholder from an EDL Item
func vobjects_edl_item_v_actions_createplaceholder_post(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/edl_item__v/actions/createplaceholder"

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_edl_item_v_actions_createplaceholder_post_threaded(
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_edl_item_v_actions_createplaceholder_post")
	bzz_callable.bind(
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsMergesJobIdLogGet → GET /vobjects/merges/{job_id}/log
# Download Merge Records Job Log
func vobjects_merges_job_id_log_get(
	# jobId: String = ""   Eg: jobId_example
	# The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/merges/{job_id}/log".replace("{" + "job_id" + "}", _bzz_urlize_path_param(jobId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_merges_job_id_log_get_threaded(
	# jobId: String = ""   Eg: jobId_example
	# The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_merges_job_id_log_get")
	bzz_callable.bind(
		jobId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsMergesJobIdResultsGet → GET /vobjects/merges/{job_id}/results
# Retrieve Record Merge Results
func vobjects_merges_job_id_results_get(
	# jobId: String = ""   Eg: jobId_example
	# The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/merges/{job_id}/results".replace("{" + "job_id" + "}", _bzz_urlize_path_param(jobId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_merges_job_id_results_get_threaded(
	# jobId: String = ""   Eg: jobId_example
	# The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_merges_job_id_results_get")
	bzz_callable.bind(
		jobId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsMergesJobIdStatusGet → GET /vobjects/merges/{job_id}/status
# Retrieve Record Merge Status
func vobjects_merges_job_id_status_get(
	# jobId: String = ""   Eg: jobId_example
	# The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/merges/{job_id}/status".replace("{" + "job_id" + "}", _bzz_urlize_path_param(jobId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_merges_job_id_status_get_threaded(
	# jobId: String = ""   Eg: jobId_example
	# The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
	jobId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_merges_job_id_status_get")
	bzz_callable.bind(
		jobId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameActionsActionNamePost → POST /vobjects/{object_name}/actions/{action_name}
# Initiate Object Action on Multiple Records
func vobjects_object_name_actions_action_name_post(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value.
	objectName: String,
	# actionName: String = ""   Eg: actionName_example
	# Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
	actionName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/actions/{action_name}".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "action_name" + "}", _bzz_urlize_path_param(actionName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_actions_action_name_post_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value.
	objectName: String,
	# actionName: String = ""   Eg: actionName_example
	# Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
	actionName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_actions_action_name_post")
	bzz_callable.bind(
		objectName,
		actionName,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameActionsChangetypePost → POST /vobjects/{object_name}/actions/changetype
# Change Object Type
func vobjects_object_name_actions_changetype_post(
	# objectName: String = ""   Eg: objectName_example
	# The name of the object.
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/actions/changetype".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_actions_changetype_post_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The name of the object.
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_actions_changetype_post")
	bzz_callable.bind(
		objectName,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameActionsMergePost → POST /vobjects/{object_name}/actions/merge
# Initiate Record Merge
func vobjects_object_name_actions_merge_post(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value. For example, account__v. This object must have Enable Merges configured.
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	# vobjectsObjectNameActionsMergePostRequestInner: Array
	vobjectsObjectNameActionsMergePostRequestInner = null,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/actions/merge".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID
	var bzz_mimes_consumable_by_server := ['application/json']
	var bzz_found_producible_mime := false
	for bzz_mime in BZZ_PRODUCIBLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_consumable_by_server:
			bzz_headers["Content-Type"] = bzz_mime
			bzz_found_producible_mime = true
			break
	if not bzz_found_producible_mime:
		var error := ApiError.new()
		error.identifier = "vobjects_object_name_actions_merge_post.headers.content_type"
		error.message = "That endpoint only accepts %s as content type(s) and none are supported by this client."
		on_failure.call(error)
		return

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null
	bzz_body = vobjectsObjectNameActionsMergePostRequestInner

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_actions_merge_post_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value. For example, account__v. This object must have Enable Merges configured.
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	# vobjectsObjectNameActionsMergePostRequestInner: Array
	vobjectsObjectNameActionsMergePostRequestInner = null,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_actions_merge_post")
	bzz_callable.bind(
		objectName,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		vobjectsObjectNameActionsMergePostRequestInner,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameActionsRecalculaterollupsGet → GET /vobjects/{object_name}/actions/recalculaterollups
# Retrieve Roll-up Field Recalculation Status
func vobjects_object_name_actions_recalculaterollups_get(
	# objectName: String = ""   Eg: objectName_example
	# The name of the object for which to check the status of a Roll-up field recalculation.
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/actions/recalculaterollups".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_actions_recalculaterollups_get_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The name of the object for which to check the status of a Roll-up field recalculation.
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_actions_recalculaterollups_get")
	bzz_callable.bind(
		objectName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameActionsRecalculaterollupsPost → POST /vobjects/{object_name}/actions/recalculaterollups
# Recalculate Roll-up Fields
func vobjects_object_name_actions_recalculaterollups_post(
	# objectName: String = ""   Eg: objectName_example
	# The name of the object for which to check the status of a Roll-up field recalculation.
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/actions/recalculaterollups".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_actions_recalculaterollups_post_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The name of the object for which to check the status of a Roll-up field recalculation.
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_actions_recalculaterollups_post")
	bzz_callable.bind(
		objectName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameActionsUpdatecorporatecurrencyPut → PUT /vobjects/{object_name}/actions/updatecorporatecurrency
# Update Corporate Currency Fields
func vobjects_object_name_actions_updatecorporatecurrency_put(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/actions/updatecorporatecurrency".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_actions_updatecorporatecurrency_put_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_actions_updatecorporatecurrency_put")
	bzz_callable.bind(
		objectName,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameAttachmentsBatchDelete → DELETE /vobjects/{object_name}/attachments/batch
# Delete Multiple Object Record Attachments
func vobjects_object_name_attachments_batch_delete(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# idParam: String = ""   Eg: If you’re identifying attachments in your input by external id, add idParam=external_id__v to the request endpoint.
	idParam = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/attachments/batch".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["idParam"] = idParam

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_attachments_batch_delete_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# idParam: String = ""   Eg: If you’re identifying attachments in your input by external id, add idParam=external_id__v to the request endpoint.
	idParam = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_attachments_batch_delete")
	bzz_callable.bind(
		objectName,
		idParam,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameAttachmentsBatchPost → POST /vobjects/{object_name}/attachments/batch
# Create Multiple Object Record Attachments
func vobjects_object_name_attachments_batch_post(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/attachments/batch".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_attachments_batch_post_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_attachments_batch_post")
	bzz_callable.bind(
		objectName,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameAttachmentsBatchPut → PUT /vobjects/{object_name}/attachments/batch
# Update Multiple Object Record Attachment Descriptions
func vobjects_object_name_attachments_batch_put(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/attachments/batch".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_attachments_batch_put_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_attachments_batch_put")
	bzz_callable.bind(
		objectName,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameDelete → DELETE /vobjects/{object_name}
# Delete Object Records
func vobjects_object_name_delete(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: text/csv
	# Can be text/csv or application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	# Can be text/csv or application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_delete_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: text/csv
	# Can be text/csv or application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	# Can be text/csv or application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_delete")
	bzz_callable.bind(
		objectName,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameIdRolesRoleNameGet → GET /vobjects/{object_name}/{id}/roles/{role_name}
# Retrieve Object Record Roles
func vobjects_object_name_id_roles_role_name_get(
	# objectName: String = ""   Eg: objectName_example
	# The object name.
	objectName: String,
	# id: String = ""   Eg: id_example
	# The id of the document, binder, or object record.
	id: String,
	# roleName: String = ""   Eg: roleName_example
	# Optional: Include a role name to filter for a specific role. For example, owner__v.
	roleName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/{id}/roles/{role_name}".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "id" + "}", _bzz_urlize_path_param(id)).replace("{" + "role_name" + "}", _bzz_urlize_path_param(roleName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_id_roles_role_name_get_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name.
	objectName: String,
	# id: String = ""   Eg: id_example
	# The id of the document, binder, or object record.
	id: String,
	# roleName: String = ""   Eg: roleName_example
	# Optional: Include a role name to filter for a specific role. For example, owner__v.
	roleName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_id_roles_role_name_get")
	bzz_callable.bind(
		objectName,
		id,
		roleName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameObjectRecordIdActionsActionNameGet → GET /vobjects/{object_name}/{object_record_id}/actions/{action_name}
# Retrieve Object User Actions Details
func vobjects_object_name_object_record_id_actions_action_name_get(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value.
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value from which to retrieve user actions.
	objectRecordId: String,
	# actionName: String = ""   Eg: actionName_example
	# The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
	actionName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/{object_record_id}/actions/{action_name}".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "object_record_id" + "}", _bzz_urlize_path_param(objectRecordId)).replace("{" + "action_name" + "}", _bzz_urlize_path_param(actionName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_object_record_id_actions_action_name_get_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value.
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value from which to retrieve user actions.
	objectRecordId: String,
	# actionName: String = ""   Eg: actionName_example
	# The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
	actionName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_object_record_id_actions_action_name_get")
	bzz_callable.bind(
		objectName,
		objectRecordId,
		actionName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameObjectRecordIdActionsActionNamePost → POST /vobjects/{object_name}/{object_record_id}/actions/{action_name}
# Initiate Object Action on a Single Record
func vobjects_object_name_object_record_id_actions_action_name_post(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value.
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value from which to retrieve user actions.
	objectRecordId: String,
	# actionName: String = ""   Eg: actionName_example
	# The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
	actionName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/{object_record_id}/actions/{action_name}".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "object_record_id" + "}", _bzz_urlize_path_param(objectRecordId)).replace("{" + "action_name" + "}", _bzz_urlize_path_param(actionName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_object_record_id_actions_action_name_post_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value.
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value from which to retrieve user actions.
	objectRecordId: String,
	# actionName: String = ""   Eg: actionName_example
	# The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
	actionName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: application/x-www-form-urlencoded
	contentType = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_object_record_id_actions_action_name_post")
	bzz_callable.bind(
		objectName,
		objectRecordId,
		actionName,
		authorization,
		contentType,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameObjectRecordIdActionsCascadedeletePost → POST /vobjects/{object_name}/{object_record_id}/actions/cascadedelete
# Cascade Delete Object Record
func vobjects_object_name_object_record_id_actions_cascadedelete_post(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/{object_record_id}/actions/cascadedelete".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "object_record_id" + "}", _bzz_urlize_path_param(objectRecordId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_object_record_id_actions_cascadedelete_post_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_object_record_id_actions_cascadedelete_post")
	bzz_callable.bind(
		objectName,
		objectRecordId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameObjectRecordIdActionsDeepcopyPost → POST /vobjects/{object_name}/{object_record_id}/actions/deepcopy
# Deep Copy Object Record
func vobjects_object_name_object_record_id_actions_deepcopy_post(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/{object_record_id}/actions/deepcopy".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "object_record_id" + "}", _bzz_urlize_path_param(objectRecordId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_object_record_id_actions_deepcopy_post_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_object_record_id_actions_deepcopy_post")
	bzz_callable.bind(
		objectName,
		objectRecordId,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameObjectRecordIdActionsGet → GET /vobjects/{object_name}/{object_record_id}/actions
# Retrieve Object Record User Actions
func vobjects_object_name_object_record_id_actions_get(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value.
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# loc: bool   Eg: true
	# Optional: When true, retrieves localized (translated) strings for the label. 
	loc = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/{object_record_id}/actions".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "object_record_id" + "}", _bzz_urlize_path_param(objectRecordId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["loc"] = loc

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_object_record_id_actions_get_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value.
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# loc: bool   Eg: true
	# Optional: When true, retrieves localized (translated) strings for the label. 
	loc = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_object_record_id_actions_get")
	bzz_callable.bind(
		objectName,
		objectRecordId,
		loc,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet → GET /vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file
# Download Attachment Field File
func vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value. For example, product__v.
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# attachmentFieldName: String = ""   Eg: attachmentFieldName_example
	# The name of the Attachment field to update.
	attachmentFieldName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "object_record_id" + "}", _bzz_urlize_path_param(objectRecordId)).replace("{" + "attachment_field_name" + "}", _bzz_urlize_path_param(attachmentFieldName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value. For example, product__v.
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# attachmentFieldName: String = ""   Eg: attachmentFieldName_example
	# The name of the Attachment field to update.
	attachmentFieldName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_get")
	bzz_callable.bind(
		objectName,
		objectRecordId,
		attachmentFieldName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost → POST /vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file
# Update Attachment Field File
func vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value. For example, product__v.
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# attachmentFieldName: String = ""   Eg: attachmentFieldName_example
	# The name of the Attachment field to update.
	attachmentFieldName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "object_record_id" + "}", _bzz_urlize_path_param(objectRecordId)).replace("{" + "attachment_field_name" + "}", _bzz_urlize_path_param(attachmentFieldName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value. For example, product__v.
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# attachmentFieldName: String = ""   Eg: attachmentFieldName_example
	# The name of the Attachment field to update.
	attachmentFieldName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_object_record_id_attachment_fields_attachment_field_name_file_post")
	bzz_callable.bind(
		objectName,
		objectRecordId,
		attachmentFieldName,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet → GET /vobjects/{object_name}/{object_record_id}/attachment_fields/file
# Download All Attachment Field Files
func vobjects_object_name_object_record_id_attachment_fields_file_get(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value. For example, product__v.
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/{object_record_id}/attachment_fields/file".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "object_record_id" + "}", _bzz_urlize_path_param(objectRecordId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_object_record_id_attachment_fields_file_get_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value. For example, product__v.
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_object_record_id_attachment_fields_file_get")
	bzz_callable.bind(
		objectName,
		objectRecordId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete → DELETE /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}
# Delete Object Record Attachment
func vobjects_object_name_object_record_id_attachments_attachment_id_delete(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "object_record_id" + "}", _bzz_urlize_path_param(objectRecordId)).replace("{" + "attachment_id" + "}", _bzz_urlize_path_param(attachmentId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_object_record_id_attachments_attachment_id_delete_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_object_record_id_attachments_attachment_id_delete")
	bzz_callable.bind(
		objectName,
		objectRecordId,
		attachmentId,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet → GET /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}
# Retrieve Object Record Attachment Metadata
func vobjects_object_name_object_record_id_attachments_attachment_id_get(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "object_record_id" + "}", _bzz_urlize_path_param(objectRecordId)).replace("{" + "attachment_id" + "}", _bzz_urlize_path_param(attachmentId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_object_record_id_attachments_attachment_id_get_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_object_record_id_attachments_attachment_id_get")
	bzz_callable.bind(
		objectName,
		objectRecordId,
		attachmentId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut → PUT /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}
# Update Object Record Attachment Description
func vobjects_object_name_object_record_id_attachments_attachment_id_put(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "object_record_id" + "}", _bzz_urlize_path_param(objectRecordId)).replace("{" + "attachment_id" + "}", _bzz_urlize_path_param(attachmentId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_object_record_id_attachments_attachment_id_put_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_object_record_id_attachments_attachment_id_put")
	bzz_callable.bind(
		objectName,
		objectRecordId,
		attachmentId,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete → DELETE /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}
# Delete Object Record Attachment Version
func vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# attachmentVersion: String = ""   Eg: attachmentVersion_example
	# The attachment version__v field value.
	attachmentVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "object_record_id" + "}", _bzz_urlize_path_param(objectRecordId)).replace("{" + "attachment_id" + "}", _bzz_urlize_path_param(attachmentId)).replace("{" + "attachment_version" + "}", _bzz_urlize_path_param(attachmentVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# attachmentVersion: String = ""   Eg: attachmentVersion_example
	# The attachment version__v field value.
	attachmentVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_delete")
	bzz_callable.bind(
		objectName,
		objectRecordId,
		attachmentId,
		attachmentVersion,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet → GET /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file
# Download Object Record Attachment File
func vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# attachmentVersion: String = ""   Eg: attachmentVersion_example
	attachmentVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "object_record_id" + "}", _bzz_urlize_path_param(objectRecordId)).replace("{" + "attachment_id" + "}", _bzz_urlize_path_param(attachmentId)).replace("{" + "attachment_version" + "}", _bzz_urlize_path_param(attachmentVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# attachmentVersion: String = ""   Eg: attachmentVersion_example
	attachmentVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_file_get")
	bzz_callable.bind(
		objectName,
		objectRecordId,
		attachmentId,
		attachmentVersion,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet → GET /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}
# Retrieve Object Record Attachment Version Metadata
func vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# attachmentVersion: String = ""   Eg: attachmentVersion_example
	# The attachment version__v field value.
	attachmentVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "object_record_id" + "}", _bzz_urlize_path_param(objectRecordId)).replace("{" + "attachment_id" + "}", _bzz_urlize_path_param(attachmentId)).replace("{" + "attachment_version" + "}", _bzz_urlize_path_param(attachmentVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# attachmentVersion: String = ""   Eg: attachmentVersion_example
	# The attachment version__v field value.
	attachmentVersion: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_get")
	bzz_callable.bind(
		objectName,
		objectRecordId,
		attachmentId,
		attachmentVersion,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost → POST /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}
# Restore Object Record Attachment Version
func vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# attachmentVersion: String = ""   Eg: attachmentVersion_example
	# The attachment version__v field value.
	attachmentVersion: String,
	# restore: bool   Eg: true
	restore = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "object_record_id" + "}", _bzz_urlize_path_param(objectRecordId)).replace("{" + "attachment_id" + "}", _bzz_urlize_path_param(attachmentId)).replace("{" + "attachment_version" + "}", _bzz_urlize_path_param(attachmentVersion))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["restore"] = restore

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# attachmentVersion: String = ""   Eg: attachmentVersion_example
	# The attachment version__v field value.
	attachmentVersion: String,
	# restore: bool   Eg: true
	restore = null,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_object_record_id_attachments_attachment_id_versions_attachment_version_post")
	bzz_callable.bind(
		objectName,
		objectRecordId,
		attachmentId,
		attachmentVersion,
		restore,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet → GET /vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions
# Retrieve Object Record Attachment Versions
func vobjects_object_name_object_record_id_attachments_attachment_id_versions_get(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "object_record_id" + "}", _bzz_urlize_path_param(objectRecordId)).replace("{" + "attachment_id" + "}", _bzz_urlize_path_param(attachmentId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_object_record_id_attachments_attachment_id_versions_get_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# attachmentId: String = ""   Eg: attachmentId_example
	# The attachment id field value.
	attachmentId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_object_record_id_attachments_attachment_id_versions_get")
	bzz_callable.bind(
		objectName,
		objectRecordId,
		attachmentId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameObjectRecordIdAttachmentsFileGet → GET /vobjects/{object_name}/{object_record_id}/attachments/file
# Download All Object Record Attachment Files
func vobjects_object_name_object_record_id_attachments_file_get(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/{object_record_id}/attachments/file".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "object_record_id" + "}", _bzz_urlize_path_param(objectRecordId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_object_record_id_attachments_file_get_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_object_record_id_attachments_file_get")
	bzz_callable.bind(
		objectName,
		objectRecordId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameObjectRecordIdAttachmentsGet → GET /vobjects/{object_name}/{object_record_id}/attachments
# Retrieve Object Record Attachments
func vobjects_object_name_object_record_id_attachments_get(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/{object_record_id}/attachments".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "object_record_id" + "}", _bzz_urlize_path_param(objectRecordId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_object_record_id_attachments_get_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_object_record_id_attachments_get")
	bzz_callable.bind(
		objectName,
		objectRecordId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameObjectRecordIdAttachmentsPost → POST /vobjects/{object_name}/{object_record_id}/attachments
# Create Object Record Attachment
func vobjects_object_name_object_record_id_attachments_post(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/{object_record_id}/attachments".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "object_record_id" + "}", _bzz_urlize_path_param(objectRecordId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_object_record_id_attachments_post_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: application/json
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_object_record_id_attachments_post")
	bzz_callable.bind(
		objectName,
		objectRecordId,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameObjectRecordIdAudittrailGet → GET /vobjects/{object_name}/{object_record_id}/audittrail
# Retrieve Complete Audit History for a Single Object Record
func vobjects_object_name_object_record_id_audittrail_get(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value.
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value from which to retrieve user actions.
	objectRecordId: String,
	# startDate: String = ""   Eg: startDate_example
	# Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. 
	startDate = "",
	# endDate: String = ""   Eg: endDate_example
	# Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
	endDate = "",
	# formatResult: String = ""   Eg: formatResult_example
	# To request a CSV file of your audit history, use csv. 
	formatResult = "",
	# limit: String = ""   Eg: limit_example
	# Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
	limit = "",
	# offset: String = ""   Eg: offset_example
	# Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
	offset = "",
	# events: String = ""   Eg: events_example
	# Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events=Copy,Edit,Delete. If omitted, defaults to all audit events.
	events = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/{object_record_id}/audittrail".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "object_record_id" + "}", _bzz_urlize_path_param(objectRecordId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["start_date"] = startDate
	bzz_query["end_date"] = endDate
	bzz_query["format_result"] = formatResult
	bzz_query["limit"] = limit
	bzz_query["offset"] = offset
	bzz_query["events"] = events

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_object_record_id_audittrail_get_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value.
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value from which to retrieve user actions.
	objectRecordId: String,
	# startDate: String = ""   Eg: startDate_example
	# Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. 
	startDate = "",
	# endDate: String = ""   Eg: endDate_example
	# Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
	endDate = "",
	# formatResult: String = ""   Eg: formatResult_example
	# To request a CSV file of your audit history, use csv. 
	formatResult = "",
	# limit: String = ""   Eg: limit_example
	# Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
	limit = "",
	# offset: String = ""   Eg: offset_example
	# Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
	offset = "",
	# events: String = ""   Eg: events_example
	# Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events=Copy,Edit,Delete. If omitted, defaults to all audit events.
	events = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_object_record_id_audittrail_get")
	bzz_callable.bind(
		objectName,
		objectRecordId,
		startDate,
		endDate,
		formatResult,
		limit,
		offset,
		events,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameObjectRecordIdGet → GET /vobjects/{object_name}/{object_record_id}
# Retrieve Object Record
func vobjects_object_name_object_record_id_get(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/{object_record_id}".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName)).replace("{" + "object_record_id" + "}", _bzz_urlize_path_param(objectRecordId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_object_record_id_get_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# objectRecordId: String = ""   Eg: objectRecordId_example
	# The object record id field value.
	objectRecordId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_object_record_id_get")
	bzz_callable.bind(
		objectName,
		objectRecordId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNamePost → POST /vobjects/{object_name}
# Create & Upsert Object Records
func vobjects_object_name_post(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# idParam: String = ""   Eg: idParam_example
	# To upsert object records, add `idParam={field_name}` to the request endpoint. You can use any object field which has `unique` set to `true` in the object metadata. For example, `idParam=external_id__v`.
	idParam = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: text/csv
	# Can be text/csv or application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	# Can be text/csv or application/json
	accept = "",
	# xVaultAPIMigrationMode: bool   Eg: true
	# If set to `true`, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as `created_by__v`. Does not bypass record triggers. Use the `X-VaultAPI-NoTriggers` header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
	xVaultAPIMigrationMode = null,
	# xVaultAPINoTriggers: bool   Eg: true
	# If set to `true` and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
	xVaultAPINoTriggers = null,
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode
	bzz_headers["X-VaultAPI-NoTriggers"] = xVaultAPINoTriggers
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["idParam"] = idParam

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_post_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# idParam: String = ""   Eg: idParam_example
	# To upsert object records, add `idParam={field_name}` to the request endpoint. You can use any object field which has `unique` set to `true` in the object metadata. For example, `idParam=external_id__v`.
	idParam = "",
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: text/csv
	# Can be text/csv or application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	# Can be text/csv or application/json
	accept = "",
	# xVaultAPIMigrationMode: bool   Eg: true
	# If set to `true`, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as `created_by__v`. Does not bypass record triggers. Use the `X-VaultAPI-NoTriggers` header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
	xVaultAPIMigrationMode = null,
	# xVaultAPINoTriggers: bool   Eg: true
	# If set to `true` and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
	xVaultAPINoTriggers = null,
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_post")
	bzz_callable.bind(
		objectName,
		idParam,
		authorization,
		contentType,
		accept,
		xVaultAPIMigrationMode,
		xVaultAPINoTriggers,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNamePut → PUT /vobjects/{object_name}
# Update Object Records
func vobjects_object_name_put(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: text/csv
	# Can be text/csv or application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	# Can be text/csv or application/json
	accept = "",
	# xVaultAPIMigrationMode: bool   Eg: true
	# If set to `true`, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as `created_by__v`. Does not bypass record triggers. Use the `X-VaultAPI-NoTriggers` header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
	xVaultAPIMigrationMode = null,
	# xVaultAPINoTriggers: bool   Eg: true
	# If set to `true` and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
	xVaultAPINoTriggers = null,
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("PUT")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Content-Type"] = contentType
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-MigrationMode"] = xVaultAPIMigrationMode
	bzz_headers["X-VaultAPI-NoTriggers"] = xVaultAPINoTriggers
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_put_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The object name__v field value (product__v, country__v, custom_object__c, etc.).
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# contentType: String = ""   Eg: text/csv
	# Can be text/csv or application/json
	contentType = "",
	# accept: String = ""   Eg: application/json
	# Can be text/csv or application/json
	accept = "",
	# xVaultAPIMigrationMode: bool   Eg: true
	# If set to `true`, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as `created_by__v`. Does not bypass record triggers. Use the `X-VaultAPI-NoTriggers` header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
	xVaultAPIMigrationMode = null,
	# xVaultAPINoTriggers: bool   Eg: true
	# If set to `true` and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
	xVaultAPINoTriggers = null,
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_put")
	bzz_callable.bind(
		objectName,
		authorization,
		contentType,
		accept,
		xVaultAPIMigrationMode,
		xVaultAPINoTriggers,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameRolesDelete → DELETE /vobjects/{object_name}/roles
# Remove Users & Groups from Roles on Object Records
func vobjects_object_name_roles_delete(
	# objectName: String = ""   Eg: objectName_example
	# The name of the object where you want to remove roles.
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("DELETE")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/roles".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_roles_delete_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The name of the object where you want to remove roles.
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_roles_delete")
	bzz_callable.bind(
		objectName,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsObjectNameRolesPost → POST /vobjects/{object_name}/roles
# Assign Users & Groups to Roles on Object Records
func vobjects_object_name_roles_post(
	# objectName: String = ""   Eg: objectName_example
	# The name of the object where you want to remove roles.
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/{object_name}/roles".replace("{" + "object_name" + "}", _bzz_urlize_path_param(objectName))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["Content-Type"] = contentType
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_object_name_roles_post_threaded(
	# objectName: String = ""   Eg: objectName_example
	# The name of the object where you want to remove roles.
	objectName: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# contentType: String = ""   Eg: text/csv
	contentType = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_object_name_roles_post")
	bzz_callable.bind(
		objectName,
		authorization,
		accept,
		contentType,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation vobjectsOutboundPackageVPackageIdDependenciesGet → GET /vobjects/outbound_package__v/{package_id}/dependencies
# Retrieve Outbound Package Dependencies
func vobjects_outbound_package_v_package_id_dependencies_get(
	# packageId: String = ""   Eg: packageId_example
	# The ID of the outbound_package__v record from which to retrieve dependencies.
	packageId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v25.1/vobjects/outbound_package__v/{package_id}/dependencies".replace("{" + "package_id" + "}", _bzz_urlize_path_param(packageId))

	# Collect the headers
	var bzz_headers := Dictionary()
	bzz_headers["Authorization"] = authorization
	bzz_headers["Accept"] = accept
	bzz_headers["X-VaultAPI-ClientID"] = xVaultAPIClientID

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func vobjects_outbound_package_v_package_id_dependencies_get_threaded(
	# packageId: String = ""   Eg: packageId_example
	# The ID of the outbound_package__v record from which to retrieve dependencies.
	packageId: String,
	# authorization: String = ""   Eg: {{sessionId}}
	authorization = "",
	# accept: String = ""   Eg: application/json
	accept = "",
	# xVaultAPIClientID: String = ""   Eg: {{clientId}}
	# Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
	xVaultAPIClientID = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "vobjects_outbound_package_v_package_id_dependencies_get")
	bzz_callable.bind(
		packageId,
		authorization,
		accept,
		xVaultAPIClientID,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


