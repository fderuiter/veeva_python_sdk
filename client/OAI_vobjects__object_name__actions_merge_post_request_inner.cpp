/**
 * Veeva Vault API v25.1
 * The latest GA version of the Vault REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_vobjects__object_name__actions_merge_post_request_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_vobjects__object_name__actions_merge_post_request_inner::OAI_vobjects__object_name__actions_merge_post_request_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_vobjects__object_name__actions_merge_post_request_inner::OAI_vobjects__object_name__actions_merge_post_request_inner() {
    this->initializeModel();
}

OAI_vobjects__object_name__actions_merge_post_request_inner::~OAI_vobjects__object_name__actions_merge_post_request_inner() {}

void OAI_vobjects__object_name__actions_merge_post_request_inner::initializeModel() {

    m_duplicate_record_id_isSet = false;
    m_duplicate_record_id_isValid = false;

    m_main_record_id_isSet = false;
    m_main_record_id_isValid = false;
}

void OAI_vobjects__object_name__actions_merge_post_request_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_vobjects__object_name__actions_merge_post_request_inner::fromJsonObject(QJsonObject json) {

    m_duplicate_record_id_isValid = ::OpenAPI::fromJsonValue(m_duplicate_record_id, json[QString("duplicate_record_id")]);
    m_duplicate_record_id_isSet = !json[QString("duplicate_record_id")].isNull() && m_duplicate_record_id_isValid;

    m_main_record_id_isValid = ::OpenAPI::fromJsonValue(m_main_record_id, json[QString("main_record_id")]);
    m_main_record_id_isSet = !json[QString("main_record_id")].isNull() && m_main_record_id_isValid;
}

QString OAI_vobjects__object_name__actions_merge_post_request_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_vobjects__object_name__actions_merge_post_request_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_duplicate_record_id_isSet) {
        obj.insert(QString("duplicate_record_id"), ::OpenAPI::toJsonValue(m_duplicate_record_id));
    }
    if (m_main_record_id_isSet) {
        obj.insert(QString("main_record_id"), ::OpenAPI::toJsonValue(m_main_record_id));
    }
    return obj;
}

QString OAI_vobjects__object_name__actions_merge_post_request_inner::getDuplicateRecordId() const {
    return m_duplicate_record_id;
}
void OAI_vobjects__object_name__actions_merge_post_request_inner::setDuplicateRecordId(const QString &duplicate_record_id) {
    m_duplicate_record_id = duplicate_record_id;
    m_duplicate_record_id_isSet = true;
}

bool OAI_vobjects__object_name__actions_merge_post_request_inner::is_duplicate_record_id_Set() const{
    return m_duplicate_record_id_isSet;
}

bool OAI_vobjects__object_name__actions_merge_post_request_inner::is_duplicate_record_id_Valid() const{
    return m_duplicate_record_id_isValid;
}

QString OAI_vobjects__object_name__actions_merge_post_request_inner::getMainRecordId() const {
    return m_main_record_id;
}
void OAI_vobjects__object_name__actions_merge_post_request_inner::setMainRecordId(const QString &main_record_id) {
    m_main_record_id = main_record_id;
    m_main_record_id_isSet = true;
}

bool OAI_vobjects__object_name__actions_merge_post_request_inner::is_main_record_id_Set() const{
    return m_main_record_id_isSet;
}

bool OAI_vobjects__object_name__actions_merge_post_request_inner::is_main_record_id_Valid() const{
    return m_main_record_id_isValid;
}

bool OAI_vobjects__object_name__actions_merge_post_request_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duplicate_record_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_record_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_vobjects__object_name__actions_merge_post_request_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
