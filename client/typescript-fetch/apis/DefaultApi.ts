/* tslint:disable */
/* eslint-disable */
/**
 * Veeva Vault API v25.1
 * The latest GA version of the Vault REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  VobjectsObjectNameActionsMergePostRequestInner,
} from '../models/index';
import {
    VobjectsObjectNameActionsMergePostRequestInnerFromJSON,
    VobjectsObjectNameActionsMergePostRequestInnerToJSON,
} from '../models/index';

export interface ApiGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ApiMdlComponentsComponentTypeAndRecordNameFilesGetRequest {
    componentTypeAndRecordName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ApiMdlComponentsComponentTypeAndRecordNameGetRequest {
    componentTypeAndRecordName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ApiMdlExecuteAsyncJobIdResultsGetRequest {
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ApiMdlExecuteAsyncPostRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ApiMdlExecutePostRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ApiMdlFilesPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface AudittrailAuditTrailTypeGetRequest {
    auditTrailType: string;
    startDate?: string;
    endDate?: string;
    allDates?: string;
    formatResult?: string;
    limit?: string;
    offset?: string;
    objects?: string;
    events?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface AuthDiscoveryPostRequest {
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface AuthOauthSessionOathOidcProfileIdPostRequest {
    oathOidcProfileId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface AuthPostRequest {
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface CodeClassNameDeleteRequest {
    className: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface CodeClassNameDisablePutRequest {
    className: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface CodeClassNameEnablePutRequest {
    className: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface CodeClassNameGetRequest {
    className: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface CodeProfilerGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface CodeProfilerPostRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface CodeProfilerSessionNameActionsEndPostRequest {
    sessionName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface CodeProfilerSessionNameDeleteRequest {
    sessionName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface CodeProfilerSessionNameGetRequest {
    sessionName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface CodeProfilerSessionNameResultsGetRequest {
    sessionName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface CodePutRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface CompositesTreesEdlHierarchyOrTemplateActionsListnodesPostRequest {
    edlHierarchyOrTemplate: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface CompositesTreesEdlHierarchyOrTemplateGetRequest {
    edlHierarchyOrTemplate: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface CompositesTreesEdlHierarchyVParentNodeIdChildrenGetRequest {
    parentNodeId: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface CompositesTreesEdlHierarchyVParentNodeIdChildrenPutRequest {
    parentNodeId: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ConfigurationComponentTypeAndRecordNameGetRequest {
    componentTypeAndRecordName: string;
    loc?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ConfigurationComponentTypeGetRequest {
    componentType: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ConfigurationObjectNameAndObjectTypeGetRequest {
    objectNameAndObjectType: string;
    loc?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ConfigurationObjecttypeGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ConfigurationRoleAssignmentRuleDeleteRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ConfigurationRoleAssignmentRuleGetRequest {
    lifecycleV?: string;
    roleV?: string;
    productV?: string;
    countryV?: string;
    studyV?: string;
    studyCountryV?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ConfigurationRoleAssignmentRulePostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ConfigurationRoleAssignmentRulePutRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface DelegationLoginPostRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface DelegationVaultsGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface KeepAlivePostRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface LimitsGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface LogsApiUsageGetRequest {
    date?: string;
    logFormat?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface LogsCodeDebugGetRequest {
    userId?: string;
    includeInactive?: boolean;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface LogsCodeDebugIdActionsResetDeleteRequest {
    id: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface LogsCodeDebugIdActionsResetPostRequest {
    id: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface LogsCodeDebugIdFilesGetRequest {
    id: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface LogsCodeDebugIdGetRequest {
    id: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface LogsCodeDebugPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface LogsCodeRuntimeGetRequest {
    date?: string;
    logFormat?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MessagesMessageTypeActionsImportPostRequest {
    messageType: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MessagesMessageTypeLanguageLangActionsExportPostRequest {
    messageType: string;
    lang: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataAudittrailAuditTrailTypeGetRequest {
    auditTrailType: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataAudittrailGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataComponentsComponentTypeGetRequest {
    componentType: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataComponentsGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsBindersTemplatesBindernodesGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsBindersTemplatesGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetRequest {
    placemarkType: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetRequest {
    referenceType: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetRequest {
    annotationType: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetRequest {
    eventType: string;
    eventSubtype: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsEventsGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsLockGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsPropertiesFindCommonPostRequest {
    contentType?: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsPropertiesGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsTemplatesGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsTypesGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsTypesTypeGetRequest {
    type: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsTypesTypeRelationshipsGetRequest {
    type: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetRequest {
    type: string;
    subtype: string;
    classification: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsTypesTypeSubtypesSubtypeGetRequest {
    type: string;
    subtype: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsGroupsGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsSecuritypoliciesGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsUsersGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataQueryDocumentsRelationshipsDocumentSignatureSysrGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataVobjectsGetRequest {
    loc?: boolean;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataVobjectsObjectNameActionsCanceldeploymentPostRequest {
    objectName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataVobjectsObjectNameFieldsObjectFieldNameGetRequest {
    objectName: string;
    objectFieldName: string;
    loc?: boolean;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataVobjectsObjectNameGetRequest {
    objectName: string;
    loc?: boolean;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataVobjectsObjectNamePageLayoutsGetRequest {
    objectName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataVobjectsObjectNamePageLayoutsLayoutNameGetRequest {
    objectName: string;
    layoutName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface NotificationsHistoriesGetRequest {
    startDate?: string;
    endDate?: string;
    allDates?: boolean;
    formatResult?: string;
    limit?: string;
    offset?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectWorkflowActionsActionGetRequest {
    action: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectWorkflowActionsActionPostRequest {
    action: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectWorkflowActionsCanceltasksPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectWorkflowActionsCancelworkflowsPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectWorkflowActionsGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectWorkflowActionsReassigntasksPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectWorkflowActionsReplaceworkflowownerPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersActionsExportJobIdResultsGetRequest {
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdActionsExportPostRequest {
    binderId: string;
    source?: boolean;
    renditiontype?: string;
    docversion?: string;
    attachments?: string;
    _export?: string;
    docfield?: boolean;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdActionsPostRequest {
    binderId: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdBindingRulePutRequest {
    binderId: string;
    contentType?: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdDeleteRequest {
    binderId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdDocumentsNodeIdBindingRulePutRequest {
    binderId: string;
    nodeId: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdDocumentsPostRequest {
    binderId: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdDocumentsSectionIdDeleteRequest {
    binderId: string;
    sectionId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdDocumentsSectionIdPutRequest {
    binderId: string;
    sectionId: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdGetRequest {
    binderId: string;
    depth?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdPostRequest {
    binderId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdPutRequest {
    binderId: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteRequest {
    binderId: string;
    roleNameAndUserOrGroup: string;
    id: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdSectionsNodeIdBindingRulePutRequest {
    binderId: string;
    nodeId: string;
    contentType?: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdSectionsNodeIdPutRequest {
    binderId: string;
    nodeId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdSectionsPostRequest {
    binderId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdSectionsSectionIdDeleteRequest {
    binderId: string;
    sectionId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdSectionsSectionIdGetRequest {
    binderId: string;
    sectionId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdVersionsGetRequest {
    binderId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostRequest {
    binderId: string;
    majorVersion: string;
    minorVersion: string;
    source?: boolean;
    renditiontype?: string;
    docversion?: string;
    attachments?: string;
    _export?: string;
    docfield?: boolean;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteRequest {
    binderId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdVersionsMajorVersionMinorVersionGetRequest {
    binderId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdVersionsMajorVersionMinorVersionPutRequest {
    binderId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostRequest {
    binderId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteRequest {
    binderId: string;
    majorVersion: string;
    minorVersion: string;
    relationshipId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetRequest {
    binderId: string;
    majorVersion: string;
    minorVersion: string;
    relationshipId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetRequest {
    binderId: string;
    majorVersion: string;
    minorVersion: string;
    sectionId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersIdRolesGetRequest {
    id: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersIdRolesPostRequest {
    id: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersIdRolesRoleNameGetRequest {
    id: string;
    roleName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetRequest {
    id: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetRequest {
    id: string;
    majorVersion: string;
    minorVersion: string;
    nameV: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutRequest {
    id: string;
    majorVersion: string;
    minorVersion: string;
    nameV: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersLifecycleActionsPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersLifecycleActionsUserActionNamePutRequest {
    userActionName: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersPostRequest {
    async?: boolean;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersTemplatesGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersTemplatesPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersTemplatesPutRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersTemplatesTemplateNameBindernodesGetRequest {
    templateName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersTemplatesTemplateNameBindernodesPostRequest {
    templateName: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersTemplatesTemplateNameBindernodesPutRequest {
    templateName: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersTemplatesTemplateNameDeleteRequest {
    templateName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersTemplatesTemplateNameGetRequest {
    templateName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDeletionsDocumentsGetRequest {
    startDate?: string;
    endDate?: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDeletionsVobjectsObjectNameGetRequest {
    objectName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsActionsGetRequest {
    loc?: boolean;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetRequest {
    lifecycleAndStateAndAction: string;
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsActionsWorkflowNameGetRequest {
    workflowName: string;
    loc?: boolean;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsActionsWorkflowNamePostRequest {
    workflowName: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsAnnotationsBatchDeleteRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsAnnotationsBatchPostRequest {
    authorization: string;
    contentType: string;
    accept: string;
    xVaultAPIClientID: string;
}

export interface ObjectsDocumentsAnnotationsBatchPutRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsAnnotationsRepliesBatchPostRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsAttachmentsBatchDeleteRequest {
    accept?: string;
    authorization?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsAttachmentsBatchPostRequest {
    accept?: string;
    authorization?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsAttachmentsBatchPutRequest {
    accept?: string;
    authorization?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsBatchActionsFileextractJobIdResultsGetRequest {
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsBatchActionsFileextractPostRequest {
    source?: boolean;
    renditions?: boolean;
    allversions?: boolean;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsBatchActionsReclassifyPutRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIMigrationMode?: boolean;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsBatchActionsRerenderPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsBatchDeleteRequest {
    idParam?: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsBatchLockDeleteRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsBatchPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIMigrationMode?: boolean;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsBatchPutRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIMigrationMode?: boolean;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAnchorsGetRequest {
    docId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAnnotationsFileGetRequest {
    docId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAnnotationsFilePostRequest {
    docId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAttachmentsAttachmentIdDeleteRequest {
    docId: string;
    attachmentId: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAttachmentsAttachmentIdFileGetRequest {
    docId: string;
    attachmentId: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAttachmentsAttachmentIdGetRequest {
    docId: string;
    attachmentId: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAttachmentsAttachmentIdPutRequest {
    docId: string;
    attachmentId: string;
    accept?: string;
    authorization?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteRequest {
    docId: string;
    attachmentId: string;
    attachmentVersion: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequest {
    docId: string;
    attachmentId: string;
    attachmentVersion: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetRequest {
    docId: string;
    attachmentId: string;
    attachmentVersion: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostRequest {
    docId: string;
    attachmentId: string;
    attachmentVersion: string;
    restore?: boolean;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetRequest {
    docId: string;
    attachmentId: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAttachmentsFileGetRequest {
    docId: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAttachmentsGetRequest {
    docId: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAttachmentsPostRequest {
    docId: string;
    accept?: string;
    authorization?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAudittrailGetRequest {
    docId: string;
    startDate?: string;
    endDate?: string;
    formatResult?: string;
    limit?: string;
    offset?: string;
    events?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdDeleteRequest {
    docId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdEventsGetRequest {
    docId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdFileGetRequest {
    docId: string;
    lockDocument?: boolean;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdGetRequest {
    docId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdLockDeleteRequest {
    docId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdLockGetRequest {
    docId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdLockPostRequest {
    docId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdPostRequest {
    docId: string;
    suppressRendition?: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdPutRequest {
    docId: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIMigrationMode?: boolean;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdRenditionsGetRequest {
    docId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdRenditionsRenditionTypeDeleteRequest {
    docId: string;
    renditionType: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdRenditionsRenditionTypeGetRequest {
    docId: string;
    renditionType: string;
    steadyState?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdRenditionsRenditionTypePostRequest {
    docId: string;
    renditionType: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdRenditionsRenditionTypePutRequest {
    docId: string;
    renditionType: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteRequest {
    docId: string;
    roleNameAndUserOrGroup: string;
    id: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsGetRequest {
    docId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    annotationId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    annotationId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    limit?: string;
    offset?: string;
    annotationTypes?: string;
    paginationId?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    attachmentId: string;
    attachmentVersion: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    attachmentId: string;
    attachmentVersion: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionPutRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIMigrationMode?: boolean;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    relationshipId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    relationshipId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    renditionType: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    renditionType: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    renditionType: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    renditionType: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsGetRequest {
    namedFilter?: string;
    scope?: string;
    versionscope?: string;
    search?: string;
    limit?: string;
    sort?: string;
    start?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsIdRolesGetRequest {
    id: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsIdRolesPostRequest {
    id: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsIdRolesRoleNameGetRequest {
    id: string;
    roleName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetRequest {
    id: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetRequest {
    id: string;
    majorVersion: string;
    minorVersion: string;
    nameV: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutRequest {
    id: string;
    majorVersion: string;
    minorVersion: string;
    nameV: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsLifecycleActionsPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsLifecycleActionsUserActionNamePutRequest {
    userActionName: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsPostRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIMigrationMode?: boolean;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsRelationshipsBatchDeleteRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsRelationshipsBatchPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsRenditionsBatchDeleteRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsRenditionsBatchPostRequest {
    idParam?: string;
    largeSizeAsset?: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIMigrationMode?: boolean;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsRolesBatchDeleteRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsRolesBatchPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsTemplatesGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsTemplatesPostRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsTemplatesPutRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsTemplatesTemplateNameDeleteRequest {
    templateName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsTemplatesTemplateNameFileGetRequest {
    templateName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsTemplatesTemplateNameGetRequest {
    templateName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsTemplatesTemplateNamePutRequest {
    templateName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsTokensPostRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsVersionsBatchActionsFileextractPostRequest {
    source?: boolean;
    renditions?: boolean;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsVersionsBatchDeleteRequest {
    idParam?: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsVersionsBatchPostRequest {
    idParam?: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIMigrationMode?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDomainGetRequest {
    includeApplication?: boolean;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDomainsGetRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsEdlMatchedDocumentsBatchActionsAddPostRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsEdlMatchedDocumentsBatchActionsRemovePostRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsGroupsAutoGetRequest {
    limit?: string;
    offset?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsGroupsGetRequest {
    includeImplied?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsGroupsGroupIdDeleteRequest {
    groupId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsGroupsGroupIdGetRequest {
    groupId: string;
    includeImplied?: boolean;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsGroupsGroupIdPutRequest {
    groupId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsGroupsPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsLicensesGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsActionsGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsActionsWorkflowNameGetRequest {
    workflowName: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsActionsWorkflowNamePostRequest {
    workflowName: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsGetRequest {
    objectV?: string;
    recordIdV?: string;
    participant?: string;
    statusV?: string;
    offset?: string;
    pageSize?: string;
    loc?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksGetRequest {
    objectV?: string;
    recordIdV?: string;
    assigneeV?: string;
    statusV?: string;
    offset?: string;
    pageSize?: string;
    loc?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksTaskIdActionsAcceptPostRequest {
    taskId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksTaskIdActionsCancelPostRequest {
    taskId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksTaskIdActionsCompletePostRequest {
    taskId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksTaskIdActionsGetRequest {
    taskId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksTaskIdActionsMdwacceptPostRequest {
    taskId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksTaskIdActionsMdwcompletePostRequest {
    taskId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostRequest {
    taskId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksTaskIdActionsMdwreassignPostRequest {
    taskId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksTaskIdActionsReassignPostRequest {
    taskId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksTaskIdActionsTaskActionGetRequest {
    taskId: string;
    taskAction: string;
    loc?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksTaskIdActionsUndoacceptPostRequest {
    taskId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostRequest {
    taskId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksTaskIdGetRequest {
    taskId: string;
    loc?: boolean;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsWorkflowIdActionsGetRequest {
    workflowId: string;
    loc?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionGetRequest {
    workflowId: string;
    workflowAction: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionPostRequest {
    workflowId: string;
    workflowAction: string;
    documentsSys?: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsWorkflowIdGetRequest {
    workflowId: string;
    loc?: boolean;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsPicklistsGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsPicklistsPicklistNameGetRequest {
    picklistName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsPicklistsPicklistNamePicklistValueNameDeleteRequest {
    picklistName: string;
    picklistValueName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsPicklistsPicklistNamePicklistValueNamePutRequest {
    picklistName: string;
    picklistValueName: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsPicklistsPicklistNamePostRequest {
    picklistName: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsPicklistsPicklistNamePutRequest {
    picklistName: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxActionsBuildproductionPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxActionsPromoteproductionPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxActionsRecheckusagePostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxBatchChangesizePostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxEntitlementsSetPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxNameDeleteRequest {
    name: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxSnapshotApiNameActionsUpdatePostRequest {
    apiName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxSnapshotApiNameActionsUpgradePostRequest {
    apiName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxSnapshotApiNameDeleteRequest {
    apiName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxSnapshotGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxSnapshotPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxVaultIdActionsRefreshPostRequest {
    vaultId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxVaultIdGetRequest {
    vaultId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSecuritypoliciesGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSecuritypoliciesSecurityPolicyNameGetRequest {
    securityPolicyName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsUsersGetRequest {
    vaults?: string;
    excludeVaultMembership?: string;
    excludeAppLicensing?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsUsersIdGetRequest {
    id: string;
    excludeVaultMembership?: string;
    excludeAppLicensing?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsUsersIdPermissionsGetRequest {
    id: string;
    filter?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsUsersIdPutRequest {
    id: string;
    authorization?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsUsersMeGetRequest {
    excludeVaultMembership?: string;
    excludeAppLicensing?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsUsersMePasswordPostRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsUsersMePermissionsGetRequest {
    filter?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsUsersMePutRequest {
    authorization?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsUsersPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsUsersPutRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsUsersUserIdDeleteRequest {
    userId: string;
    domain?: boolean;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsUsersUserIdVaultMembershipVaultIdPutRequest {
    userId: string;
    vaultId: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsVaultActionsComparePostRequest {
    authorization?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsVaultActionsConfigreportPostRequest {
    authorization?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface QueryComponentsPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface QueryNextPagePostRequest {
    nextPage: string;
    authorization?: string;
    accept?: string;
    xVaultAPIDescribeQuery?: boolean;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface QueryPostRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIDescribeQuery?: boolean;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface QueryPreviousPagePostRequest {
    previousPage: string;
    authorization?: string;
    accept?: string;
    xVaultAPIDescribeQuery?: boolean;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ScimV2MeGetRequest {
    attributes?: string;
    excludedAttributes?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ScimV2MePutRequest {
    attributes?: string;
    excludedAttributes?: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ScimV2ResourceTypesGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ScimV2ResourceTypesTypeGetRequest {
    type: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ScimV2SchemasGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ScimV2SchemasIdGetRequest {
    id: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ScimV2ServiceProviderConfigGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ScimV2TypeGetRequest {
    type: string;
    filter?: string;
    attributes?: string;
    excludedAttributes?: string;
    sortBy?: string;
    sortOrder?: string;
    startIndex?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ScimV2TypeIdGetRequest {
    type: string;
    id: string;
    attributes?: string;
    excludedAttributes?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ScimV2UsersGetRequest {
    filter?: string;
    attributes?: string;
    excludedAttributes?: string;
    sortBy?: string;
    sortOrder?: string;
    count?: string;
    startIndex?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ScimV2UsersIdGetRequest {
    id: string;
    filter?: string;
    attributes?: string;
    excludedAttributes?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ScimV2UsersIdPutRequest {
    id: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ScimV2UsersPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesCertificateCertIdGetRequest {
    certId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesConfigurationModeActionsDisablePostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesConfigurationModeActionsEnablePostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesDirectdataFilesGetRequest {
    extractType?: string;
    startTime?: number;
    stopTime?: number;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesDirectdataFilesNameGetRequest {
    name: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesFileStagingItemsContentItemGetRequest {
    item: string;
    authorization?: string;
    accept?: string;
    range?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesFileStagingItemsItemDeleteRequest {
    item: string;
    recursive?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesFileStagingItemsItemGetRequest {
    item: string;
    recursive?: string;
    limit?: string;
    formatResult?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesFileStagingItemsItemPutRequest {
    item: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesFileStagingItemsPostRequest {
    authorization?: string;
    accept?: string;
    contentMD5?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesFileStagingUploadGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesFileStagingUploadPostRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesFileStagingUploadUploadSessionIdDeleteRequest {
    uploadSessionId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesFileStagingUploadUploadSessionIdGetRequest {
    uploadSessionId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesFileStagingUploadUploadSessionIdPartsGetRequest {
    uploadSessionId: string;
    limit?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesFileStagingUploadUploadSessionIdPostRequest {
    uploadSessionId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesFileStagingUploadUploadSessionIdPutRequest {
    uploadSessionId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIFilePartNumber?: string;
    contentMD5?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesJobsHistoriesGetRequest {
    startDate?: string;
    endDate?: string;
    status?: string;
    limit?: string;
    offset?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesJobsJobIdErrorsGetRequest {
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesJobsJobIdGetRequest {
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesJobsJobIdSummaryGetRequest {
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesJobsJobIdTasksGetRequest {
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesJobsMonitorsGetRequest {
    startDate?: string;
    endDate?: string;
    status?: string;
    limit?: string;
    offset?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesJobsStartNowJobIdPostRequest {
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesLoaderExtractPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesLoaderJobIdTasksTaskIdFailurelogGetRequest {
    jobId: string;
    taskId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesLoaderJobIdTasksTaskIdResultsGetRequest {
    jobId: string;
    taskId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesLoaderJobIdTasksTaskIdResultsRenditionsGetRequest {
    jobId: string;
    taskId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesLoaderJobIdTasksTaskIdSuccesslogGetRequest {
    jobId: string;
    taskId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesLoaderLoadPostRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesPackageActionsValidatePostRequest {
    authorization?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesPackagePostRequest {
    authorization?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesPackagePutRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesQueuesGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesQueuesQueueNameActionsDisableDeliveryPutRequest {
    queueName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesQueuesQueueNameActionsEnableDeliveryPutRequest {
    queueName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesQueuesQueueNameActionsResetPutRequest {
    queueName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesQueuesQueueNameGetRequest {
    queueName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesVobjectVaultPackageVPackageIdActionsValidatePostRequest {
    packageId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface SessionDeleteRequest {
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface UicodeDistributionsDistributionNameCodeGetRequest {
    distributionName: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface UicodeDistributionsDistributionNameDeleteRequest {
    distributionName: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface UicodeDistributionsDistributionNameGetRequest {
    distributionName: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface UicodeDistributionsGetRequest {
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface UicodeDistributionsPostRequest {
    accept?: string;
    authorization?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectVaultPackageVPackageIdActionsDeployPostRequest {
    packageId: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectVaultPackageVPackageIdActionsDeployResultsGetRequest {
    packageId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetRequest {
    objectName: string;
    jobStatus: string;
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsDeepcopyResultsObjectNameJobStatusJobIdGetRequest {
    objectName: string;
    jobStatus: string;
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsEdlItemVActionsCreateplaceholderPostRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsMergesJobIdLogGetRequest {
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsMergesJobIdResultsGetRequest {
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsMergesJobIdStatusGetRequest {
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameActionsActionNamePostRequest {
    objectName: string;
    actionName: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameActionsChangetypePostRequest {
    objectName: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameActionsMergePostRequest {
    objectName: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
    vobjectsObjectNameActionsMergePostRequestInner?: Array<VobjectsObjectNameActionsMergePostRequestInner>;
}

export interface VobjectsObjectNameActionsRecalculaterollupsGetRequest {
    objectName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameActionsRecalculaterollupsPostRequest {
    objectName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameActionsUpdatecorporatecurrencyPutRequest {
    objectName: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameAttachmentsBatchDeleteRequest {
    objectName: string;
    idParam?: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameAttachmentsBatchPostRequest {
    objectName: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameAttachmentsBatchPutRequest {
    objectName: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameDeleteRequest {
    objectName: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameIdRolesRoleNameGetRequest {
    objectName: string;
    id: string;
    roleName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdActionsActionNameGetRequest {
    objectName: string;
    objectRecordId: string;
    actionName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdActionsActionNamePostRequest {
    objectName: string;
    objectRecordId: string;
    actionName: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdActionsCascadedeletePostRequest {
    objectName: string;
    objectRecordId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdActionsDeepcopyPostRequest {
    objectName: string;
    objectRecordId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdActionsGetRequest {
    objectName: string;
    objectRecordId: string;
    loc?: boolean;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetRequest {
    objectName: string;
    objectRecordId: string;
    attachmentFieldName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostRequest {
    objectName: string;
    objectRecordId: string;
    attachmentFieldName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetRequest {
    objectName: string;
    objectRecordId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteRequest {
    objectName: string;
    objectRecordId: string;
    attachmentId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetRequest {
    objectName: string;
    objectRecordId: string;
    attachmentId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutRequest {
    objectName: string;
    objectRecordId: string;
    attachmentId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteRequest {
    objectName: string;
    objectRecordId: string;
    attachmentId: string;
    attachmentVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequest {
    objectName: string;
    objectRecordId: string;
    attachmentId: string;
    attachmentVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetRequest {
    objectName: string;
    objectRecordId: string;
    attachmentId: string;
    attachmentVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostRequest {
    objectName: string;
    objectRecordId: string;
    attachmentId: string;
    attachmentVersion: string;
    restore?: boolean;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetRequest {
    objectName: string;
    objectRecordId: string;
    attachmentId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentsFileGetRequest {
    objectName: string;
    objectRecordId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentsGetRequest {
    objectName: string;
    objectRecordId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentsPostRequest {
    objectName: string;
    objectRecordId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAudittrailGetRequest {
    objectName: string;
    objectRecordId: string;
    startDate?: string;
    endDate?: string;
    formatResult?: string;
    limit?: string;
    offset?: string;
    events?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdGetRequest {
    objectName: string;
    objectRecordId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNamePostRequest {
    objectName: string;
    idParam?: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIMigrationMode?: boolean;
    xVaultAPINoTriggers?: boolean;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNamePutRequest {
    objectName: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIMigrationMode?: boolean;
    xVaultAPINoTriggers?: boolean;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameRolesDeleteRequest {
    objectName: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameRolesPostRequest {
    objectName: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsOutboundPackageVPackageIdDependenciesGetRequest {
    packageId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Retrieve API Versions
     */
    async apiGetRaw(requestParameters: ApiGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/api/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve API Versions
     */
    async apiGet(requestParameters: ApiGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Content File
     */
    async apiMdlComponentsComponentTypeAndRecordNameFilesGetRaw(requestParameters: ApiMdlComponentsComponentTypeAndRecordNameFilesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['componentTypeAndRecordName'] == null) {
            throw new runtime.RequiredError(
                'componentTypeAndRecordName',
                'Required parameter "componentTypeAndRecordName" was null or undefined when calling apiMdlComponentsComponentTypeAndRecordNameFilesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/api/mdl/components/{component_type_and_record_name}/files`;
        urlPath = urlPath.replace(`{${"component_type_and_record_name"}}`, encodeURIComponent(String(requestParameters['componentTypeAndRecordName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Content File
     */
    async apiMdlComponentsComponentTypeAndRecordNameFilesGet(requestParameters: ApiMdlComponentsComponentTypeAndRecordNameFilesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiMdlComponentsComponentTypeAndRecordNameFilesGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Component Record (MDL)
     */
    async apiMdlComponentsComponentTypeAndRecordNameGetRaw(requestParameters: ApiMdlComponentsComponentTypeAndRecordNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['componentTypeAndRecordName'] == null) {
            throw new runtime.RequiredError(
                'componentTypeAndRecordName',
                'Required parameter "componentTypeAndRecordName" was null or undefined when calling apiMdlComponentsComponentTypeAndRecordNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/api/mdl/components/{component_type_and_record_name}`;
        urlPath = urlPath.replace(`{${"component_type_and_record_name"}}`, encodeURIComponent(String(requestParameters['componentTypeAndRecordName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Component Record (MDL)
     */
    async apiMdlComponentsComponentTypeAndRecordNameGet(requestParameters: ApiMdlComponentsComponentTypeAndRecordNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiMdlComponentsComponentTypeAndRecordNameGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Asynchronous MDL Script Results
     */
    async apiMdlExecuteAsyncJobIdResultsGetRaw(requestParameters: ApiMdlExecuteAsyncJobIdResultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling apiMdlExecuteAsyncJobIdResultsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/api/mdl/execute_async/{job_id}/results`;
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Asynchronous MDL Script Results
     */
    async apiMdlExecuteAsyncJobIdResultsGet(requestParameters: ApiMdlExecuteAsyncJobIdResultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiMdlExecuteAsyncJobIdResultsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Execute MDL Script Asynchronously
     */
    async apiMdlExecuteAsyncPostRaw(requestParameters: ApiMdlExecuteAsyncPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/api/mdl/execute_async`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Execute MDL Script Asynchronously
     */
    async apiMdlExecuteAsyncPost(requestParameters: ApiMdlExecuteAsyncPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiMdlExecuteAsyncPostRaw(requestParameters, initOverrides);
    }

    /**
     * Execute MDL Script
     */
    async apiMdlExecutePostRaw(requestParameters: ApiMdlExecutePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/api/mdl/execute`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Execute MDL Script
     */
    async apiMdlExecutePost(requestParameters: ApiMdlExecutePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiMdlExecutePostRaw(requestParameters, initOverrides);
    }

    /**
     * Upload Content File
     */
    async apiMdlFilesPostRaw(requestParameters: ApiMdlFilesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/api/mdl/files`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Upload Content File
     */
    async apiMdlFilesPost(requestParameters: ApiMdlFilesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiMdlFilesPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Audit Details
     */
    async audittrailAuditTrailTypeGetRaw(requestParameters: AudittrailAuditTrailTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['auditTrailType'] == null) {
            throw new runtime.RequiredError(
                'auditTrailType',
                'Required parameter "auditTrailType" was null or undefined when calling audittrailAuditTrailTypeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = requestParameters['endDate'];
        }

        if (requestParameters['allDates'] != null) {
            queryParameters['all_dates'] = requestParameters['allDates'];
        }

        if (requestParameters['formatResult'] != null) {
            queryParameters['format_result'] = requestParameters['formatResult'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['objects'] != null) {
            queryParameters['objects'] = requestParameters['objects'];
        }

        if (requestParameters['events'] != null) {
            queryParameters['events'] = requestParameters['events'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/audittrail/{audit_trail_type}`;
        urlPath = urlPath.replace(`{${"audit_trail_type"}}`, encodeURIComponent(String(requestParameters['auditTrailType'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Audit Details
     */
    async audittrailAuditTrailTypeGet(requestParameters: AudittrailAuditTrailTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.audittrailAuditTrailTypeGetRaw(requestParameters, initOverrides);
    }

    /**
     * Authentication Type Discovery
     */
    async authDiscoveryPostRaw(requestParameters: AuthDiscoveryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/auth/discovery`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Authentication Type Discovery
     */
    async authDiscoveryPost(requestParameters: AuthDiscoveryPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authDiscoveryPostRaw(requestParameters, initOverrides);
    }

    /**
     * OAuth 2.0 / OpenID Connect
     */
    async authOauthSessionOathOidcProfileIdPostRaw(requestParameters: AuthOauthSessionOathOidcProfileIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['oathOidcProfileId'] == null) {
            throw new runtime.RequiredError(
                'oathOidcProfileId',
                'Required parameter "oathOidcProfileId" was null or undefined when calling authOauthSessionOathOidcProfileIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/auth/oauth/session/{oath_oidc_profile_id}`;
        urlPath = urlPath.replace(`{${"oath_oidc_profile_id"}}`, encodeURIComponent(String(requestParameters['oathOidcProfileId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * OAuth 2.0 / OpenID Connect
     */
    async authOauthSessionOathOidcProfileIdPost(requestParameters: AuthOauthSessionOathOidcProfileIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authOauthSessionOathOidcProfileIdPostRaw(requestParameters, initOverrides);
    }

    /**
     * User Name and Password
     */
    async authPostRaw(requestParameters: AuthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/auth`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User Name and Password
     */
    async authPost(requestParameters: AuthPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authPostRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Single Source Code File
     */
    async codeClassNameDeleteRaw(requestParameters: CodeClassNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['className'] == null) {
            throw new runtime.RequiredError(
                'className',
                'Required parameter "className" was null or undefined when calling codeClassNameDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/code/{class_name}`;
        urlPath = urlPath.replace(`{${"class_name"}}`, encodeURIComponent(String(requestParameters['className'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Single Source Code File
     */
    async codeClassNameDelete(requestParameters: CodeClassNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.codeClassNameDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Disable Vault Extension
     */
    async codeClassNameDisablePutRaw(requestParameters: CodeClassNameDisablePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['className'] == null) {
            throw new runtime.RequiredError(
                'className',
                'Required parameter "className" was null or undefined when calling codeClassNameDisablePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/code/{class_name}/disable`;
        urlPath = urlPath.replace(`{${"class_name"}}`, encodeURIComponent(String(requestParameters['className'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disable Vault Extension
     */
    async codeClassNameDisablePut(requestParameters: CodeClassNameDisablePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.codeClassNameDisablePutRaw(requestParameters, initOverrides);
    }

    /**
     * Enable Vault Extension
     */
    async codeClassNameEnablePutRaw(requestParameters: CodeClassNameEnablePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['className'] == null) {
            throw new runtime.RequiredError(
                'className',
                'Required parameter "className" was null or undefined when calling codeClassNameEnablePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/code/{class_name}/enable`;
        urlPath = urlPath.replace(`{${"class_name"}}`, encodeURIComponent(String(requestParameters['className'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Enable Vault Extension
     */
    async codeClassNameEnablePut(requestParameters: CodeClassNameEnablePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.codeClassNameEnablePutRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Single Source Code File
     */
    async codeClassNameGetRaw(requestParameters: CodeClassNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['className'] == null) {
            throw new runtime.RequiredError(
                'className',
                'Required parameter "className" was null or undefined when calling codeClassNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/code/{class_name}`;
        urlPath = urlPath.replace(`{${"class_name"}}`, encodeURIComponent(String(requestParameters['className'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Single Source Code File
     */
    async codeClassNameGet(requestParameters: CodeClassNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.codeClassNameGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve All Profiling Sessions
     */
    async codeProfilerGetRaw(requestParameters: CodeProfilerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/code/profiler`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve All Profiling Sessions
     */
    async codeProfilerGet(requestParameters: CodeProfilerGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.codeProfilerGetRaw(requestParameters, initOverrides);
    }

    /**
     * Create Profiling Session
     */
    async codeProfilerPostRaw(requestParameters: CodeProfilerPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/code/profiler`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Profiling Session
     */
    async codeProfilerPost(requestParameters: CodeProfilerPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.codeProfilerPostRaw(requestParameters, initOverrides);
    }

    /**
     * End Profiling Session
     */
    async codeProfilerSessionNameActionsEndPostRaw(requestParameters: CodeProfilerSessionNameActionsEndPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sessionName'] == null) {
            throw new runtime.RequiredError(
                'sessionName',
                'Required parameter "sessionName" was null or undefined when calling codeProfilerSessionNameActionsEndPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/code/profiler/{session_name}/actions/end`;
        urlPath = urlPath.replace(`{${"session_name"}}`, encodeURIComponent(String(requestParameters['sessionName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * End Profiling Session
     */
    async codeProfilerSessionNameActionsEndPost(requestParameters: CodeProfilerSessionNameActionsEndPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.codeProfilerSessionNameActionsEndPostRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Profiling Session
     */
    async codeProfilerSessionNameDeleteRaw(requestParameters: CodeProfilerSessionNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sessionName'] == null) {
            throw new runtime.RequiredError(
                'sessionName',
                'Required parameter "sessionName" was null or undefined when calling codeProfilerSessionNameDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/code/profiler/{session_name}`;
        urlPath = urlPath.replace(`{${"session_name"}}`, encodeURIComponent(String(requestParameters['sessionName'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Profiling Session
     */
    async codeProfilerSessionNameDelete(requestParameters: CodeProfilerSessionNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.codeProfilerSessionNameDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Profiling Session
     */
    async codeProfilerSessionNameGetRaw(requestParameters: CodeProfilerSessionNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sessionName'] == null) {
            throw new runtime.RequiredError(
                'sessionName',
                'Required parameter "sessionName" was null or undefined when calling codeProfilerSessionNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/code/profiler/{session_name}`;
        urlPath = urlPath.replace(`{${"session_name"}}`, encodeURIComponent(String(requestParameters['sessionName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Profiling Session
     */
    async codeProfilerSessionNameGet(requestParameters: CodeProfilerSessionNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.codeProfilerSessionNameGetRaw(requestParameters, initOverrides);
    }

    /**
     * Download Profiling Session Results
     */
    async codeProfilerSessionNameResultsGetRaw(requestParameters: CodeProfilerSessionNameResultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sessionName'] == null) {
            throw new runtime.RequiredError(
                'sessionName',
                'Required parameter "sessionName" was null or undefined when calling codeProfilerSessionNameResultsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/code/profiler/{session_name}/results`;
        urlPath = urlPath.replace(`{${"session_name"}}`, encodeURIComponent(String(requestParameters['sessionName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download Profiling Session Results
     */
    async codeProfilerSessionNameResultsGet(requestParameters: CodeProfilerSessionNameResultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.codeProfilerSessionNameResultsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Add or Replace Single Source Code File
     */
    async codePutRaw(requestParameters: CodePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/code`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add or Replace Single Source Code File
     */
    async codePut(requestParameters: CodePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.codePutRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Specific Root Nodes
     */
    async compositesTreesEdlHierarchyOrTemplateActionsListnodesPostRaw(requestParameters: CompositesTreesEdlHierarchyOrTemplateActionsListnodesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['edlHierarchyOrTemplate'] == null) {
            throw new runtime.RequiredError(
                'edlHierarchyOrTemplate',
                'Required parameter "edlHierarchyOrTemplate" was null or undefined when calling compositesTreesEdlHierarchyOrTemplateActionsListnodesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/composites/trees/{edl_hierarchy_or_template}/actions/listnodes`;
        urlPath = urlPath.replace(`{${"edl_hierarchy_or_template"}}`, encodeURIComponent(String(requestParameters['edlHierarchyOrTemplate'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Specific Root Nodes
     */
    async compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(requestParameters: CompositesTreesEdlHierarchyOrTemplateActionsListnodesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.compositesTreesEdlHierarchyOrTemplateActionsListnodesPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve All Root Nodes
     */
    async compositesTreesEdlHierarchyOrTemplateGetRaw(requestParameters: CompositesTreesEdlHierarchyOrTemplateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['edlHierarchyOrTemplate'] == null) {
            throw new runtime.RequiredError(
                'edlHierarchyOrTemplate',
                'Required parameter "edlHierarchyOrTemplate" was null or undefined when calling compositesTreesEdlHierarchyOrTemplateGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/composites/trees/{edl_hierarchy_or_template}`;
        urlPath = urlPath.replace(`{${"edl_hierarchy_or_template"}}`, encodeURIComponent(String(requestParameters['edlHierarchyOrTemplate'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve All Root Nodes
     */
    async compositesTreesEdlHierarchyOrTemplateGet(requestParameters: CompositesTreesEdlHierarchyOrTemplateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.compositesTreesEdlHierarchyOrTemplateGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a Node\'s Children
     */
    async compositesTreesEdlHierarchyVParentNodeIdChildrenGetRaw(requestParameters: CompositesTreesEdlHierarchyVParentNodeIdChildrenGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['parentNodeId'] == null) {
            throw new runtime.RequiredError(
                'parentNodeId',
                'Required parameter "parentNodeId" was null or undefined when calling compositesTreesEdlHierarchyVParentNodeIdChildrenGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/composites/trees/edl_hierarchy__v/{parent_node_id}/children`;
        urlPath = urlPath.replace(`{${"parent_node_id"}}`, encodeURIComponent(String(requestParameters['parentNodeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve a Node\'s Children
     */
    async compositesTreesEdlHierarchyVParentNodeIdChildrenGet(requestParameters: CompositesTreesEdlHierarchyVParentNodeIdChildrenGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.compositesTreesEdlHierarchyVParentNodeIdChildrenGetRaw(requestParameters, initOverrides);
    }

    /**
     * Update Node Order
     */
    async compositesTreesEdlHierarchyVParentNodeIdChildrenPutRaw(requestParameters: CompositesTreesEdlHierarchyVParentNodeIdChildrenPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['parentNodeId'] == null) {
            throw new runtime.RequiredError(
                'parentNodeId',
                'Required parameter "parentNodeId" was null or undefined when calling compositesTreesEdlHierarchyVParentNodeIdChildrenPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/composites/trees/edl_hierarchy__v/{parent_node_id}/children`;
        urlPath = urlPath.replace(`{${"parent_node_id"}}`, encodeURIComponent(String(requestParameters['parentNodeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Node Order
     */
    async compositesTreesEdlHierarchyVParentNodeIdChildrenPut(requestParameters: CompositesTreesEdlHierarchyVParentNodeIdChildrenPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.compositesTreesEdlHierarchyVParentNodeIdChildrenPutRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Component Record (XML/JSON)
     */
    async configurationComponentTypeAndRecordNameGetRaw(requestParameters: ConfigurationComponentTypeAndRecordNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['componentTypeAndRecordName'] == null) {
            throw new runtime.RequiredError(
                'componentTypeAndRecordName',
                'Required parameter "componentTypeAndRecordName" was null or undefined when calling configurationComponentTypeAndRecordNameGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['loc'] != null) {
            queryParameters['loc'] = requestParameters['loc'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/configuration/{component_type_and_record_name}`;
        urlPath = urlPath.replace(`{${"component_type_and_record_name"}}`, encodeURIComponent(String(requestParameters['componentTypeAndRecordName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Component Record (XML/JSON)
     */
    async configurationComponentTypeAndRecordNameGet(requestParameters: ConfigurationComponentTypeAndRecordNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.configurationComponentTypeAndRecordNameGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Component Record Collection
     */
    async configurationComponentTypeGetRaw(requestParameters: ConfigurationComponentTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['componentType'] == null) {
            throw new runtime.RequiredError(
                'componentType',
                'Required parameter "componentType" was null or undefined when calling configurationComponentTypeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/configuration/{component_type}`;
        urlPath = urlPath.replace(`{${"component_type"}}`, encodeURIComponent(String(requestParameters['componentType'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Component Record Collection
     */
    async configurationComponentTypeGet(requestParameters: ConfigurationComponentTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.configurationComponentTypeGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Details from a Specific Object
     */
    async configurationObjectNameAndObjectTypeGetRaw(requestParameters: ConfigurationObjectNameAndObjectTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectNameAndObjectType'] == null) {
            throw new runtime.RequiredError(
                'objectNameAndObjectType',
                'Required parameter "objectNameAndObjectType" was null or undefined when calling configurationObjectNameAndObjectTypeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['loc'] != null) {
            queryParameters['loc'] = requestParameters['loc'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/configuration/{object_name_and_object_type}`;
        urlPath = urlPath.replace(`{${"object_name_and_object_type"}}`, encodeURIComponent(String(requestParameters['objectNameAndObjectType'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Details from a Specific Object
     */
    async configurationObjectNameAndObjectTypeGet(requestParameters: ConfigurationObjectNameAndObjectTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.configurationObjectNameAndObjectTypeGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Details from All Object Types
     */
    async configurationObjecttypeGetRaw(requestParameters: ConfigurationObjecttypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/configuration/Objecttype`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Details from All Object Types
     */
    async configurationObjecttypeGet(requestParameters: ConfigurationObjecttypeGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.configurationObjecttypeGetRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Lifecycle Role Assignment Override Rules
     */
    async configurationRoleAssignmentRuleDeleteRaw(requestParameters: ConfigurationRoleAssignmentRuleDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/configuration/role_assignment_rule`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Lifecycle Role Assignment Override Rules
     */
    async configurationRoleAssignmentRuleDelete(requestParameters: ConfigurationRoleAssignmentRuleDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.configurationRoleAssignmentRuleDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Lifecycle Role Assignment Rules (Default & Override)
     */
    async configurationRoleAssignmentRuleGetRaw(requestParameters: ConfigurationRoleAssignmentRuleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['lifecycleV'] != null) {
            queryParameters['lifecycle__v'] = requestParameters['lifecycleV'];
        }

        if (requestParameters['roleV'] != null) {
            queryParameters['role__v'] = requestParameters['roleV'];
        }

        if (requestParameters['productV'] != null) {
            queryParameters['product__v'] = requestParameters['productV'];
        }

        if (requestParameters['countryV'] != null) {
            queryParameters['country__v'] = requestParameters['countryV'];
        }

        if (requestParameters['studyV'] != null) {
            queryParameters['study__v'] = requestParameters['studyV'];
        }

        if (requestParameters['studyCountryV'] != null) {
            queryParameters['study_country__v'] = requestParameters['studyCountryV'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/configuration/role_assignment_rule`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Lifecycle Role Assignment Rules (Default & Override)
     */
    async configurationRoleAssignmentRuleGet(requestParameters: ConfigurationRoleAssignmentRuleGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.configurationRoleAssignmentRuleGetRaw(requestParameters, initOverrides);
    }

    /**
     * Create Lifecycle Role Assignment Override Rules
     */
    async configurationRoleAssignmentRulePostRaw(requestParameters: ConfigurationRoleAssignmentRulePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/configuration/role_assignment_rule`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Lifecycle Role Assignment Override Rules
     */
    async configurationRoleAssignmentRulePost(requestParameters: ConfigurationRoleAssignmentRulePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.configurationRoleAssignmentRulePostRaw(requestParameters, initOverrides);
    }

    /**
     * Update Lifecycle Role Assignment Rules (Default & Override)
     */
    async configurationRoleAssignmentRulePutRaw(requestParameters: ConfigurationRoleAssignmentRulePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/configuration/role_assignment_rule`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Lifecycle Role Assignment Rules (Default & Override)
     */
    async configurationRoleAssignmentRulePut(requestParameters: ConfigurationRoleAssignmentRulePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.configurationRoleAssignmentRulePutRaw(requestParameters, initOverrides);
    }

    /**
     * Initiate Delegated Session
     */
    async delegationLoginPostRaw(requestParameters: DelegationLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/delegation/login`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Initiate Delegated Session
     */
    async delegationLoginPost(requestParameters: DelegationLoginPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.delegationLoginPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Delegations
     */
    async delegationVaultsGetRaw(requestParameters: DelegationVaultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/delegation/vaults`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Delegations
     */
    async delegationVaultsGet(requestParameters: DelegationVaultsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.delegationVaultsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Session Keep Alive
     */
    async keepAlivePostRaw(requestParameters: KeepAlivePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/keep-alive`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Session Keep Alive
     */
    async keepAlivePost(requestParameters: KeepAlivePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.keepAlivePostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Limits on Objects
     */
    async limitsGetRaw(requestParameters: LimitsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/limits`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Limits on Objects
     */
    async limitsGet(requestParameters: LimitsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.limitsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Download Daily API Usage
     */
    async logsApiUsageGetRaw(requestParameters: LogsApiUsageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['date'] != null) {
            queryParameters['date'] = requestParameters['date'];
        }

        if (requestParameters['logFormat'] != null) {
            queryParameters['log_format'] = requestParameters['logFormat'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/logs/api_usage`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download Daily API Usage
     */
    async logsApiUsageGet(requestParameters: LogsApiUsageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.logsApiUsageGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve All Debug Logs
     */
    async logsCodeDebugGetRaw(requestParameters: LogsCodeDebugGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['user_id'] = requestParameters['userId'];
        }

        if (requestParameters['includeInactive'] != null) {
            queryParameters['include_inactive'] = requestParameters['includeInactive'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/logs/code/debug`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve All Debug Logs
     */
    async logsCodeDebugGet(requestParameters: LogsCodeDebugGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.logsCodeDebugGetRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Debug Log
     */
    async logsCodeDebugIdActionsResetDeleteRaw(requestParameters: LogsCodeDebugIdActionsResetDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling logsCodeDebugIdActionsResetDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/logs/code/debug/{id}/actions/reset`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Debug Log
     */
    async logsCodeDebugIdActionsResetDelete(requestParameters: LogsCodeDebugIdActionsResetDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.logsCodeDebugIdActionsResetDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Reset Debug Log
     */
    async logsCodeDebugIdActionsResetPostRaw(requestParameters: LogsCodeDebugIdActionsResetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling logsCodeDebugIdActionsResetPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/logs/code/debug/{id}/actions/reset`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reset Debug Log
     */
    async logsCodeDebugIdActionsResetPost(requestParameters: LogsCodeDebugIdActionsResetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.logsCodeDebugIdActionsResetPostRaw(requestParameters, initOverrides);
    }

    /**
     * Download Debug Log Files
     */
    async logsCodeDebugIdFilesGetRaw(requestParameters: LogsCodeDebugIdFilesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling logsCodeDebugIdFilesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/logs/code/debug/{id}/files`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download Debug Log Files
     */
    async logsCodeDebugIdFilesGet(requestParameters: LogsCodeDebugIdFilesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.logsCodeDebugIdFilesGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Single Debug Log
     */
    async logsCodeDebugIdGetRaw(requestParameters: LogsCodeDebugIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling logsCodeDebugIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/logs/code/debug/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Single Debug Log
     */
    async logsCodeDebugIdGet(requestParameters: LogsCodeDebugIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.logsCodeDebugIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Create Debug Log
     */
    async logsCodeDebugPostRaw(requestParameters: LogsCodeDebugPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/logs/code/debug`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Debug Log
     */
    async logsCodeDebugPost(requestParameters: LogsCodeDebugPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.logsCodeDebugPostRaw(requestParameters, initOverrides);
    }

    /**
     * Download SDK Runtime Log
     */
    async logsCodeRuntimeGetRaw(requestParameters: LogsCodeRuntimeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['date'] != null) {
            queryParameters['date'] = requestParameters['date'];
        }

        if (requestParameters['logFormat'] != null) {
            queryParameters['log_format'] = requestParameters['logFormat'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/logs/code/runtime`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download SDK Runtime Log
     */
    async logsCodeRuntimeGet(requestParameters: LogsCodeRuntimeGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.logsCodeRuntimeGetRaw(requestParameters, initOverrides);
    }

    /**
     * Import Bulk Translation File
     */
    async messagesMessageTypeActionsImportPostRaw(requestParameters: MessagesMessageTypeActionsImportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['messageType'] == null) {
            throw new runtime.RequiredError(
                'messageType',
                'Required parameter "messageType" was null or undefined when calling messagesMessageTypeActionsImportPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/messages/{message_type}/actions/import`;
        urlPath = urlPath.replace(`{${"message_type"}}`, encodeURIComponent(String(requestParameters['messageType'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Import Bulk Translation File
     */
    async messagesMessageTypeActionsImportPost(requestParameters: MessagesMessageTypeActionsImportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.messagesMessageTypeActionsImportPostRaw(requestParameters, initOverrides);
    }

    /**
     * Export Bulk Translation File
     */
    async messagesMessageTypeLanguageLangActionsExportPostRaw(requestParameters: MessagesMessageTypeLanguageLangActionsExportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['messageType'] == null) {
            throw new runtime.RequiredError(
                'messageType',
                'Required parameter "messageType" was null or undefined when calling messagesMessageTypeLanguageLangActionsExportPost().'
            );
        }

        if (requestParameters['lang'] == null) {
            throw new runtime.RequiredError(
                'lang',
                'Required parameter "lang" was null or undefined when calling messagesMessageTypeLanguageLangActionsExportPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/messages/{message_type}/language/{lang}/actions/export`;
        urlPath = urlPath.replace(`{${"message_type"}}`, encodeURIComponent(String(requestParameters['messageType'])));
        urlPath = urlPath.replace(`{${"lang"}}`, encodeURIComponent(String(requestParameters['lang'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Export Bulk Translation File
     */
    async messagesMessageTypeLanguageLangActionsExportPost(requestParameters: MessagesMessageTypeLanguageLangActionsExportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.messagesMessageTypeLanguageLangActionsExportPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Audit Metadata
     */
    async metadataAudittrailAuditTrailTypeGetRaw(requestParameters: MetadataAudittrailAuditTrailTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['auditTrailType'] == null) {
            throw new runtime.RequiredError(
                'auditTrailType',
                'Required parameter "auditTrailType" was null or undefined when calling metadataAudittrailAuditTrailTypeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/audittrail/{audit_trail_type}`;
        urlPath = urlPath.replace(`{${"audit_trail_type"}}`, encodeURIComponent(String(requestParameters['auditTrailType'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Audit Metadata
     */
    async metadataAudittrailAuditTrailTypeGet(requestParameters: MetadataAudittrailAuditTrailTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataAudittrailAuditTrailTypeGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Audit Types
     */
    async metadataAudittrailGetRaw(requestParameters: MetadataAudittrailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/audittrail`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Audit Types
     */
    async metadataAudittrailGet(requestParameters: MetadataAudittrailGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataAudittrailGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Component Type Metadata
     */
    async metadataComponentsComponentTypeGetRaw(requestParameters: MetadataComponentsComponentTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['componentType'] == null) {
            throw new runtime.RequiredError(
                'componentType',
                'Required parameter "componentType" was null or undefined when calling metadataComponentsComponentTypeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/components/{component_type}`;
        urlPath = urlPath.replace(`{${"component_type"}}`, encodeURIComponent(String(requestParameters['componentType'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Component Type Metadata
     */
    async metadataComponentsComponentTypeGet(requestParameters: MetadataComponentsComponentTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataComponentsComponentTypeGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve All Component Metadata
     */
    async metadataComponentsGetRaw(requestParameters: MetadataComponentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/components`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve All Component Metadata
     */
    async metadataComponentsGet(requestParameters: MetadataComponentsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataComponentsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Binder Template Node Metadata
     */
    async metadataObjectsBindersTemplatesBindernodesGetRaw(requestParameters: MetadataObjectsBindersTemplatesBindernodesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/objects/binders/templates/bindernodes`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Binder Template Node Metadata
     */
    async metadataObjectsBindersTemplatesBindernodesGet(requestParameters: MetadataObjectsBindersTemplatesBindernodesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataObjectsBindersTemplatesBindernodesGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Binder Template Metadata
     */
    async metadataObjectsBindersTemplatesGetRaw(requestParameters: MetadataObjectsBindersTemplatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/objects/binders/templates`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Binder Template Metadata
     */
    async metadataObjectsBindersTemplatesGet(requestParameters: MetadataObjectsBindersTemplatesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataObjectsBindersTemplatesGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Annotation Placemark Type Metadata
     */
    async metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetRaw(requestParameters: MetadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['placemarkType'] == null) {
            throw new runtime.RequiredError(
                'placemarkType',
                'Required parameter "placemarkType" was null or undefined when calling metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/objects/documents/annotations/placemarks/types/{placemark_type}`;
        urlPath = urlPath.replace(`{${"placemark_type"}}`, encodeURIComponent(String(requestParameters['placemarkType'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Annotation Placemark Type Metadata
     */
    async metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(requestParameters: MetadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Annotation Reference Type Metadata
     */
    async metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetRaw(requestParameters: MetadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['referenceType'] == null) {
            throw new runtime.RequiredError(
                'referenceType',
                'Required parameter "referenceType" was null or undefined when calling metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/objects/documents/annotations/references/types/{reference_type}`;
        urlPath = urlPath.replace(`{${"reference_type"}}`, encodeURIComponent(String(requestParameters['referenceType'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Annotation Reference Type Metadata
     */
    async metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(requestParameters: MetadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Annotation Type Metadata
     */
    async metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetRaw(requestParameters: MetadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['annotationType'] == null) {
            throw new runtime.RequiredError(
                'annotationType',
                'Required parameter "annotationType" was null or undefined when calling metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/objects/documents/annotations/types/{annotation_type}`;
        urlPath = urlPath.replace(`{${"annotation_type"}}`, encodeURIComponent(String(requestParameters['annotationType'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Annotation Type Metadata
     */
    async metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(requestParameters: MetadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Event SubType Metadata
     */
    async metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetRaw(requestParameters: MetadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['eventType'] == null) {
            throw new runtime.RequiredError(
                'eventType',
                'Required parameter "eventType" was null or undefined when calling metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet().'
            );
        }

        if (requestParameters['eventSubtype'] == null) {
            throw new runtime.RequiredError(
                'eventSubtype',
                'Required parameter "eventSubtype" was null or undefined when calling metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/objects/documents/events/{event_type}/types/{event_subtype}`;
        urlPath = urlPath.replace(`{${"event_type"}}`, encodeURIComponent(String(requestParameters['eventType'])));
        urlPath = urlPath.replace(`{${"event_subtype"}}`, encodeURIComponent(String(requestParameters['eventSubtype'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Event SubType Metadata
     */
    async metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(requestParameters: MetadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Event Types and Subtypes
     */
    async metadataObjectsDocumentsEventsGetRaw(requestParameters: MetadataObjectsDocumentsEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/objects/documents/events`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Event Types and Subtypes
     */
    async metadataObjectsDocumentsEventsGet(requestParameters: MetadataObjectsDocumentsEventsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataObjectsDocumentsEventsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Lock Metadata
     */
    async metadataObjectsDocumentsLockGetRaw(requestParameters: MetadataObjectsDocumentsLockGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/objects/documents/lock`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Lock Metadata
     */
    async metadataObjectsDocumentsLockGet(requestParameters: MetadataObjectsDocumentsLockGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataObjectsDocumentsLockGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Common Document Fields
     */
    async metadataObjectsDocumentsPropertiesFindCommonPostRaw(requestParameters: MetadataObjectsDocumentsPropertiesFindCommonPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/objects/documents/properties/find_common`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Common Document Fields
     */
    async metadataObjectsDocumentsPropertiesFindCommonPost(requestParameters: MetadataObjectsDocumentsPropertiesFindCommonPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataObjectsDocumentsPropertiesFindCommonPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve All Document Fields
     */
    async metadataObjectsDocumentsPropertiesGetRaw(requestParameters: MetadataObjectsDocumentsPropertiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/objects/documents/properties`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve All Document Fields
     */
    async metadataObjectsDocumentsPropertiesGet(requestParameters: MetadataObjectsDocumentsPropertiesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataObjectsDocumentsPropertiesGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Template Metadata
     */
    async metadataObjectsDocumentsTemplatesGetRaw(requestParameters: MetadataObjectsDocumentsTemplatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/objects/documents/templates`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Template Metadata
     */
    async metadataObjectsDocumentsTemplatesGet(requestParameters: MetadataObjectsDocumentsTemplatesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataObjectsDocumentsTemplatesGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve All Document Types
     */
    async metadataObjectsDocumentsTypesGetRaw(requestParameters: MetadataObjectsDocumentsTypesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/objects/documents/types`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve All Document Types
     */
    async metadataObjectsDocumentsTypesGet(requestParameters: MetadataObjectsDocumentsTypesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataObjectsDocumentsTypesGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Type
     */
    async metadataObjectsDocumentsTypesTypeGetRaw(requestParameters: MetadataObjectsDocumentsTypesTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling metadataObjectsDocumentsTypesTypeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/objects/documents/types/{type}`;
        urlPath = urlPath.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Type
     */
    async metadataObjectsDocumentsTypesTypeGet(requestParameters: MetadataObjectsDocumentsTypesTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataObjectsDocumentsTypesTypeGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Type Relationships
     */
    async metadataObjectsDocumentsTypesTypeRelationshipsGetRaw(requestParameters: MetadataObjectsDocumentsTypesTypeRelationshipsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling metadataObjectsDocumentsTypesTypeRelationshipsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/objects/documents/types/{type}/relationships`;
        urlPath = urlPath.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Type Relationships
     */
    async metadataObjectsDocumentsTypesTypeRelationshipsGet(requestParameters: MetadataObjectsDocumentsTypesTypeRelationshipsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataObjectsDocumentsTypesTypeRelationshipsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Classification
     */
    async metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetRaw(requestParameters: MetadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet().'
            );
        }

        if (requestParameters['subtype'] == null) {
            throw new runtime.RequiredError(
                'subtype',
                'Required parameter "subtype" was null or undefined when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet().'
            );
        }

        if (requestParameters['classification'] == null) {
            throw new runtime.RequiredError(
                'classification',
                'Required parameter "classification" was null or undefined when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}`;
        urlPath = urlPath.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type'])));
        urlPath = urlPath.replace(`{${"subtype"}}`, encodeURIComponent(String(requestParameters['subtype'])));
        urlPath = urlPath.replace(`{${"classification"}}`, encodeURIComponent(String(requestParameters['classification'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Classification
     */
    async metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(requestParameters: MetadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Subtype
     */
    async metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetRaw(requestParameters: MetadataObjectsDocumentsTypesTypeSubtypesSubtypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet().'
            );
        }

        if (requestParameters['subtype'] == null) {
            throw new runtime.RequiredError(
                'subtype',
                'Required parameter "subtype" was null or undefined when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/objects/documents/types/{type}/subtypes/{subtype}`;
        urlPath = urlPath.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type'])));
        urlPath = urlPath.replace(`{${"subtype"}}`, encodeURIComponent(String(requestParameters['subtype'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Subtype
     */
    async metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(requestParameters: MetadataObjectsDocumentsTypesTypeSubtypesSubtypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Group Metadata
     */
    async metadataObjectsGroupsGetRaw(requestParameters: MetadataObjectsGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/objects/groups`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Group Metadata
     */
    async metadataObjectsGroupsGet(requestParameters: MetadataObjectsGroupsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataObjectsGroupsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Security Policy Metadata
     */
    async metadataObjectsSecuritypoliciesGetRaw(requestParameters: MetadataObjectsSecuritypoliciesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/objects/securitypolicies`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Security Policy Metadata
     */
    async metadataObjectsSecuritypoliciesGet(requestParameters: MetadataObjectsSecuritypoliciesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataObjectsSecuritypoliciesGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve User Metadata
     */
    async metadataObjectsUsersGetRaw(requestParameters: MetadataObjectsUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/objects/users`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve User Metadata
     */
    async metadataObjectsUsersGet(requestParameters: MetadataObjectsUsersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataObjectsUsersGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Archived Document Signature Metadata
     */
    async metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetRaw(requestParameters: MetadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/query/archived_documents/relationships/document_signature__sysr`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Archived Document Signature Metadata
     */
    async metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(requestParameters: MetadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Signature Metadata
     */
    async metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetRaw(requestParameters: MetadataQueryDocumentsRelationshipsDocumentSignatureSysrGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/query/documents/relationships/document_signature__sysr`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Signature Metadata
     */
    async metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(requestParameters: MetadataQueryDocumentsRelationshipsDocumentSignatureSysrGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Object Collection
     */
    async metadataVobjectsGetRaw(requestParameters: MetadataVobjectsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['loc'] != null) {
            queryParameters['loc'] = requestParameters['loc'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/vobjects`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Object Collection
     */
    async metadataVobjectsGet(requestParameters: MetadataVobjectsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataVobjectsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Cancel Raw Object Deployment
     */
    async metadataVobjectsObjectNameActionsCanceldeploymentPostRaw(requestParameters: MetadataVobjectsObjectNameActionsCanceldeploymentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling metadataVobjectsObjectNameActionsCanceldeploymentPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/vobjects/{object_name}/actions/canceldeployment`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancel Raw Object Deployment
     */
    async metadataVobjectsObjectNameActionsCanceldeploymentPost(requestParameters: MetadataVobjectsObjectNameActionsCanceldeploymentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataVobjectsObjectNameActionsCanceldeploymentPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Object Field Metadata
     */
    async metadataVobjectsObjectNameFieldsObjectFieldNameGetRaw(requestParameters: MetadataVobjectsObjectNameFieldsObjectFieldNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling metadataVobjectsObjectNameFieldsObjectFieldNameGet().'
            );
        }

        if (requestParameters['objectFieldName'] == null) {
            throw new runtime.RequiredError(
                'objectFieldName',
                'Required parameter "objectFieldName" was null or undefined when calling metadataVobjectsObjectNameFieldsObjectFieldNameGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['loc'] != null) {
            queryParameters['loc'] = requestParameters['loc'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/vobjects/{object_name}/fields/{object_field_name}`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"object_field_name"}}`, encodeURIComponent(String(requestParameters['objectFieldName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Object Field Metadata
     */
    async metadataVobjectsObjectNameFieldsObjectFieldNameGet(requestParameters: MetadataVobjectsObjectNameFieldsObjectFieldNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataVobjectsObjectNameFieldsObjectFieldNameGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Object Metadata
     */
    async metadataVobjectsObjectNameGetRaw(requestParameters: MetadataVobjectsObjectNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling metadataVobjectsObjectNameGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['loc'] != null) {
            queryParameters['loc'] = requestParameters['loc'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/vobjects/{object_name}`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Object Metadata
     */
    async metadataVobjectsObjectNameGet(requestParameters: MetadataVobjectsObjectNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataVobjectsObjectNameGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Page Layouts
     */
    async metadataVobjectsObjectNamePageLayoutsGetRaw(requestParameters: MetadataVobjectsObjectNamePageLayoutsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling metadataVobjectsObjectNamePageLayoutsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/vobjects/{object_name}/page_layouts`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Page Layouts
     */
    async metadataVobjectsObjectNamePageLayoutsGet(requestParameters: MetadataVobjectsObjectNamePageLayoutsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataVobjectsObjectNamePageLayoutsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Page Layout Metadata
     */
    async metadataVobjectsObjectNamePageLayoutsLayoutNameGetRaw(requestParameters: MetadataVobjectsObjectNamePageLayoutsLayoutNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling metadataVobjectsObjectNamePageLayoutsLayoutNameGet().'
            );
        }

        if (requestParameters['layoutName'] == null) {
            throw new runtime.RequiredError(
                'layoutName',
                'Required parameter "layoutName" was null or undefined when calling metadataVobjectsObjectNamePageLayoutsLayoutNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/metadata/vobjects/{object_name}/page_layouts/{layout_name}`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"layout_name"}}`, encodeURIComponent(String(requestParameters['layoutName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Page Layout Metadata
     */
    async metadataVobjectsObjectNamePageLayoutsLayoutNameGet(requestParameters: MetadataVobjectsObjectNamePageLayoutsLayoutNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metadataVobjectsObjectNamePageLayoutsLayoutNameGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Email Notification Histories
     */
    async notificationsHistoriesGetRaw(requestParameters: NotificationsHistoriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = requestParameters['endDate'];
        }

        if (requestParameters['allDates'] != null) {
            queryParameters['all_dates'] = requestParameters['allDates'];
        }

        if (requestParameters['formatResult'] != null) {
            queryParameters['format_result'] = requestParameters['formatResult'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/notifications/histories`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Email Notification Histories
     */
    async notificationsHistoriesGet(requestParameters: NotificationsHistoriesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationsHistoriesGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Bulk Workflow Action Details
     */
    async objectWorkflowActionsActionGetRaw(requestParameters: ObjectWorkflowActionsActionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['action'] == null) {
            throw new runtime.RequiredError(
                'action',
                'Required parameter "action" was null or undefined when calling objectWorkflowActionsActionGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/object/workflow/actions/{action}`;
        urlPath = urlPath.replace(`{${"action"}}`, encodeURIComponent(String(requestParameters['action'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Bulk Workflow Action Details
     */
    async objectWorkflowActionsActionGet(requestParameters: ObjectWorkflowActionsActionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectWorkflowActionsActionGetRaw(requestParameters, initOverrides);
    }

    /**
     * Initiate Workflow Actions on Multiple Workflows
     */
    async objectWorkflowActionsActionPostRaw(requestParameters: ObjectWorkflowActionsActionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['action'] == null) {
            throw new runtime.RequiredError(
                'action',
                'Required parameter "action" was null or undefined when calling objectWorkflowActionsActionPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/object/workflow/actions/{action}`;
        urlPath = urlPath.replace(`{${"action"}}`, encodeURIComponent(String(requestParameters['action'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Initiate Workflow Actions on Multiple Workflows
     */
    async objectWorkflowActionsActionPost(requestParameters: ObjectWorkflowActionsActionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectWorkflowActionsActionPostRaw(requestParameters, initOverrides);
    }

    /**
     * Cancel Workflow Tasks
     */
    async objectWorkflowActionsCanceltasksPostRaw(requestParameters: ObjectWorkflowActionsCanceltasksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/object/workflow/actions/canceltasks`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancel Workflow Tasks
     */
    async objectWorkflowActionsCanceltasksPost(requestParameters: ObjectWorkflowActionsCanceltasksPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectWorkflowActionsCanceltasksPostRaw(requestParameters, initOverrides);
    }

    /**
     * Cancel Workflows
     */
    async objectWorkflowActionsCancelworkflowsPostRaw(requestParameters: ObjectWorkflowActionsCancelworkflowsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/object/workflow/actions/cancelworkflows`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancel Workflows
     */
    async objectWorkflowActionsCancelworkflowsPost(requestParameters: ObjectWorkflowActionsCancelworkflowsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectWorkflowActionsCancelworkflowsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Bulk Workflow Actions
     */
    async objectWorkflowActionsGetRaw(requestParameters: ObjectWorkflowActionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/object/workflow/actions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Bulk Workflow Actions
     */
    async objectWorkflowActionsGet(requestParameters: ObjectWorkflowActionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectWorkflowActionsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Reassign Workflow Tasks
     */
    async objectWorkflowActionsReassigntasksPostRaw(requestParameters: ObjectWorkflowActionsReassigntasksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/object/workflow/actions/reassigntasks`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reassign Workflow Tasks
     */
    async objectWorkflowActionsReassigntasksPost(requestParameters: ObjectWorkflowActionsReassigntasksPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectWorkflowActionsReassigntasksPostRaw(requestParameters, initOverrides);
    }

    /**
     * Replace Workflow Owner
     */
    async objectWorkflowActionsReplaceworkflowownerPostRaw(requestParameters: ObjectWorkflowActionsReplaceworkflowownerPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/object/workflow/actions/replaceworkflowowner`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Replace Workflow Owner
     */
    async objectWorkflowActionsReplaceworkflowownerPost(requestParameters: ObjectWorkflowActionsReplaceworkflowownerPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectWorkflowActionsReplaceworkflowownerPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Binder Export Results
     */
    async objectsBindersActionsExportJobIdResultsGetRaw(requestParameters: ObjectsBindersActionsExportJobIdResultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling objectsBindersActionsExportJobIdResultsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/actions/export/{job_id}/results`;
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Binder Export Results
     */
    async objectsBindersActionsExportJobIdResultsGet(requestParameters: ObjectsBindersActionsExportJobIdResultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersActionsExportJobIdResultsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Export Binder (Latest Version)
     */
    async objectsBindersBinderIdActionsExportPostRaw(requestParameters: ObjectsBindersBinderIdActionsExportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binderId'] == null) {
            throw new runtime.RequiredError(
                'binderId',
                'Required parameter "binderId" was null or undefined when calling objectsBindersBinderIdActionsExportPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['source'] != null) {
            queryParameters['source'] = requestParameters['source'];
        }

        if (requestParameters['renditiontype'] != null) {
            queryParameters['renditiontype'] = requestParameters['renditiontype'];
        }

        if (requestParameters['docversion'] != null) {
            queryParameters['docversion'] = requestParameters['docversion'];
        }

        if (requestParameters['attachments'] != null) {
            queryParameters['attachments'] = requestParameters['attachments'];
        }

        if (requestParameters['_export'] != null) {
            queryParameters['export'] = requestParameters['_export'];
        }

        if (requestParameters['docfield'] != null) {
            queryParameters['docfield'] = requestParameters['docfield'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{binder_id}/actions/export`;
        urlPath = urlPath.replace(`{${"binder_id"}}`, encodeURIComponent(String(requestParameters['binderId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Export Binder (Latest Version)
     */
    async objectsBindersBinderIdActionsExportPost(requestParameters: ObjectsBindersBinderIdActionsExportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersBinderIdActionsExportPostRaw(requestParameters, initOverrides);
    }

    /**
     * Refresh Binder Auto-Filing
     */
    async objectsBindersBinderIdActionsPostRaw(requestParameters: ObjectsBindersBinderIdActionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binderId'] == null) {
            throw new runtime.RequiredError(
                'binderId',
                'Required parameter "binderId" was null or undefined when calling objectsBindersBinderIdActionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{binder_id}/actions`;
        urlPath = urlPath.replace(`{${"binder_id"}}`, encodeURIComponent(String(requestParameters['binderId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Refresh Binder Auto-Filing
     */
    async objectsBindersBinderIdActionsPost(requestParameters: ObjectsBindersBinderIdActionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersBinderIdActionsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Update Binding Rule
     */
    async objectsBindersBinderIdBindingRulePutRaw(requestParameters: ObjectsBindersBinderIdBindingRulePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binderId'] == null) {
            throw new runtime.RequiredError(
                'binderId',
                'Required parameter "binderId" was null or undefined when calling objectsBindersBinderIdBindingRulePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{binder_id}/binding_rule`;
        urlPath = urlPath.replace(`{${"binder_id"}}`, encodeURIComponent(String(requestParameters['binderId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Binding Rule
     */
    async objectsBindersBinderIdBindingRulePut(requestParameters: ObjectsBindersBinderIdBindingRulePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersBinderIdBindingRulePutRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Binder
     */
    async objectsBindersBinderIdDeleteRaw(requestParameters: ObjectsBindersBinderIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binderId'] == null) {
            throw new runtime.RequiredError(
                'binderId',
                'Required parameter "binderId" was null or undefined when calling objectsBindersBinderIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{binder_id}`;
        urlPath = urlPath.replace(`{${"binder_id"}}`, encodeURIComponent(String(requestParameters['binderId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Binder
     */
    async objectsBindersBinderIdDelete(requestParameters: ObjectsBindersBinderIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersBinderIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Update Binder Document Binding Rule
     */
    async objectsBindersBinderIdDocumentsNodeIdBindingRulePutRaw(requestParameters: ObjectsBindersBinderIdDocumentsNodeIdBindingRulePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binderId'] == null) {
            throw new runtime.RequiredError(
                'binderId',
                'Required parameter "binderId" was null or undefined when calling objectsBindersBinderIdDocumentsNodeIdBindingRulePut().'
            );
        }

        if (requestParameters['nodeId'] == null) {
            throw new runtime.RequiredError(
                'nodeId',
                'Required parameter "nodeId" was null or undefined when calling objectsBindersBinderIdDocumentsNodeIdBindingRulePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{binder_id}/documents/{node_id}/binding_rule`;
        urlPath = urlPath.replace(`{${"binder_id"}}`, encodeURIComponent(String(requestParameters['binderId'])));
        urlPath = urlPath.replace(`{${"node_id"}}`, encodeURIComponent(String(requestParameters['nodeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Binder Document Binding Rule
     */
    async objectsBindersBinderIdDocumentsNodeIdBindingRulePut(requestParameters: ObjectsBindersBinderIdDocumentsNodeIdBindingRulePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersBinderIdDocumentsNodeIdBindingRulePutRaw(requestParameters, initOverrides);
    }

    /**
     * Add Document to Binder
     */
    async objectsBindersBinderIdDocumentsPostRaw(requestParameters: ObjectsBindersBinderIdDocumentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binderId'] == null) {
            throw new runtime.RequiredError(
                'binderId',
                'Required parameter "binderId" was null or undefined when calling objectsBindersBinderIdDocumentsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{binder_id}/documents`;
        urlPath = urlPath.replace(`{${"binder_id"}}`, encodeURIComponent(String(requestParameters['binderId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add Document to Binder
     */
    async objectsBindersBinderIdDocumentsPost(requestParameters: ObjectsBindersBinderIdDocumentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersBinderIdDocumentsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Remove Document from Binder
     */
    async objectsBindersBinderIdDocumentsSectionIdDeleteRaw(requestParameters: ObjectsBindersBinderIdDocumentsSectionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binderId'] == null) {
            throw new runtime.RequiredError(
                'binderId',
                'Required parameter "binderId" was null or undefined when calling objectsBindersBinderIdDocumentsSectionIdDelete().'
            );
        }

        if (requestParameters['sectionId'] == null) {
            throw new runtime.RequiredError(
                'sectionId',
                'Required parameter "sectionId" was null or undefined when calling objectsBindersBinderIdDocumentsSectionIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{binder_id}/documents/{section_id}`;
        urlPath = urlPath.replace(`{${"binder_id"}}`, encodeURIComponent(String(requestParameters['binderId'])));
        urlPath = urlPath.replace(`{${"section_id"}}`, encodeURIComponent(String(requestParameters['sectionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove Document from Binder
     */
    async objectsBindersBinderIdDocumentsSectionIdDelete(requestParameters: ObjectsBindersBinderIdDocumentsSectionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersBinderIdDocumentsSectionIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Move Document in Binder
     */
    async objectsBindersBinderIdDocumentsSectionIdPutRaw(requestParameters: ObjectsBindersBinderIdDocumentsSectionIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binderId'] == null) {
            throw new runtime.RequiredError(
                'binderId',
                'Required parameter "binderId" was null or undefined when calling objectsBindersBinderIdDocumentsSectionIdPut().'
            );
        }

        if (requestParameters['sectionId'] == null) {
            throw new runtime.RequiredError(
                'sectionId',
                'Required parameter "sectionId" was null or undefined when calling objectsBindersBinderIdDocumentsSectionIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{binder_id}/documents/{section_id}`;
        urlPath = urlPath.replace(`{${"binder_id"}}`, encodeURIComponent(String(requestParameters['binderId'])));
        urlPath = urlPath.replace(`{${"section_id"}}`, encodeURIComponent(String(requestParameters['sectionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Move Document in Binder
     */
    async objectsBindersBinderIdDocumentsSectionIdPut(requestParameters: ObjectsBindersBinderIdDocumentsSectionIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersBinderIdDocumentsSectionIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Binder
     */
    async objectsBindersBinderIdGetRaw(requestParameters: ObjectsBindersBinderIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binderId'] == null) {
            throw new runtime.RequiredError(
                'binderId',
                'Required parameter "binderId" was null or undefined when calling objectsBindersBinderIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['depth'] != null) {
            queryParameters['depth'] = requestParameters['depth'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{binder_id}`;
        urlPath = urlPath.replace(`{${"binder_id"}}`, encodeURIComponent(String(requestParameters['binderId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Binder
     */
    async objectsBindersBinderIdGet(requestParameters: ObjectsBindersBinderIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersBinderIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Create Binder Version
     */
    async objectsBindersBinderIdPostRaw(requestParameters: ObjectsBindersBinderIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binderId'] == null) {
            throw new runtime.RequiredError(
                'binderId',
                'Required parameter "binderId" was null or undefined when calling objectsBindersBinderIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{binder_id}`;
        urlPath = urlPath.replace(`{${"binder_id"}}`, encodeURIComponent(String(requestParameters['binderId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Binder Version
     */
    async objectsBindersBinderIdPost(requestParameters: ObjectsBindersBinderIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersBinderIdPostRaw(requestParameters, initOverrides);
    }

    /**
     * Update Binder
     */
    async objectsBindersBinderIdPutRaw(requestParameters: ObjectsBindersBinderIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binderId'] == null) {
            throw new runtime.RequiredError(
                'binderId',
                'Required parameter "binderId" was null or undefined when calling objectsBindersBinderIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{binder_id}`;
        urlPath = urlPath.replace(`{${"binder_id"}}`, encodeURIComponent(String(requestParameters['binderId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Binder
     */
    async objectsBindersBinderIdPut(requestParameters: ObjectsBindersBinderIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersBinderIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Remove Users & Groups from Roles on a Single Binder
     */
    async objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteRaw(requestParameters: ObjectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binderId'] == null) {
            throw new runtime.RequiredError(
                'binderId',
                'Required parameter "binderId" was null or undefined when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete().'
            );
        }

        if (requestParameters['roleNameAndUserOrGroup'] == null) {
            throw new runtime.RequiredError(
                'roleNameAndUserOrGroup',
                'Required parameter "roleNameAndUserOrGroup" was null or undefined when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}`;
        urlPath = urlPath.replace(`{${"binder_id"}}`, encodeURIComponent(String(requestParameters['binderId'])));
        urlPath = urlPath.replace(`{${"role_name_and_user_or_group"}}`, encodeURIComponent(String(requestParameters['roleNameAndUserOrGroup'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove Users & Groups from Roles on a Single Binder
     */
    async objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(requestParameters: ObjectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Update Binder Section Binding Rule
     */
    async objectsBindersBinderIdSectionsNodeIdBindingRulePutRaw(requestParameters: ObjectsBindersBinderIdSectionsNodeIdBindingRulePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binderId'] == null) {
            throw new runtime.RequiredError(
                'binderId',
                'Required parameter "binderId" was null or undefined when calling objectsBindersBinderIdSectionsNodeIdBindingRulePut().'
            );
        }

        if (requestParameters['nodeId'] == null) {
            throw new runtime.RequiredError(
                'nodeId',
                'Required parameter "nodeId" was null or undefined when calling objectsBindersBinderIdSectionsNodeIdBindingRulePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{binder_id}/sections/{node_id}/binding_rule`;
        urlPath = urlPath.replace(`{${"binder_id"}}`, encodeURIComponent(String(requestParameters['binderId'])));
        urlPath = urlPath.replace(`{${"node_id"}}`, encodeURIComponent(String(requestParameters['nodeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Binder Section Binding Rule
     */
    async objectsBindersBinderIdSectionsNodeIdBindingRulePut(requestParameters: ObjectsBindersBinderIdSectionsNodeIdBindingRulePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersBinderIdSectionsNodeIdBindingRulePutRaw(requestParameters, initOverrides);
    }

    /**
     * Update Binder Section
     */
    async objectsBindersBinderIdSectionsNodeIdPutRaw(requestParameters: ObjectsBindersBinderIdSectionsNodeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binderId'] == null) {
            throw new runtime.RequiredError(
                'binderId',
                'Required parameter "binderId" was null or undefined when calling objectsBindersBinderIdSectionsNodeIdPut().'
            );
        }

        if (requestParameters['nodeId'] == null) {
            throw new runtime.RequiredError(
                'nodeId',
                'Required parameter "nodeId" was null or undefined when calling objectsBindersBinderIdSectionsNodeIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{binder_id}/sections/{node_id}`;
        urlPath = urlPath.replace(`{${"binder_id"}}`, encodeURIComponent(String(requestParameters['binderId'])));
        urlPath = urlPath.replace(`{${"node_id"}}`, encodeURIComponent(String(requestParameters['nodeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Binder Section
     */
    async objectsBindersBinderIdSectionsNodeIdPut(requestParameters: ObjectsBindersBinderIdSectionsNodeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersBinderIdSectionsNodeIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Create Binder Section
     */
    async objectsBindersBinderIdSectionsPostRaw(requestParameters: ObjectsBindersBinderIdSectionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binderId'] == null) {
            throw new runtime.RequiredError(
                'binderId',
                'Required parameter "binderId" was null or undefined when calling objectsBindersBinderIdSectionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{binder_id}/sections`;
        urlPath = urlPath.replace(`{${"binder_id"}}`, encodeURIComponent(String(requestParameters['binderId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Binder Section
     */
    async objectsBindersBinderIdSectionsPost(requestParameters: ObjectsBindersBinderIdSectionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersBinderIdSectionsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Binder Section
     */
    async objectsBindersBinderIdSectionsSectionIdDeleteRaw(requestParameters: ObjectsBindersBinderIdSectionsSectionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binderId'] == null) {
            throw new runtime.RequiredError(
                'binderId',
                'Required parameter "binderId" was null or undefined when calling objectsBindersBinderIdSectionsSectionIdDelete().'
            );
        }

        if (requestParameters['sectionId'] == null) {
            throw new runtime.RequiredError(
                'sectionId',
                'Required parameter "sectionId" was null or undefined when calling objectsBindersBinderIdSectionsSectionIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{binder_id}/sections/{section_id}`;
        urlPath = urlPath.replace(`{${"binder_id"}}`, encodeURIComponent(String(requestParameters['binderId'])));
        urlPath = urlPath.replace(`{${"section_id"}}`, encodeURIComponent(String(requestParameters['sectionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Binder Section
     */
    async objectsBindersBinderIdSectionsSectionIdDelete(requestParameters: ObjectsBindersBinderIdSectionsSectionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersBinderIdSectionsSectionIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Binder Sections
     */
    async objectsBindersBinderIdSectionsSectionIdGetRaw(requestParameters: ObjectsBindersBinderIdSectionsSectionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binderId'] == null) {
            throw new runtime.RequiredError(
                'binderId',
                'Required parameter "binderId" was null or undefined when calling objectsBindersBinderIdSectionsSectionIdGet().'
            );
        }

        if (requestParameters['sectionId'] == null) {
            throw new runtime.RequiredError(
                'sectionId',
                'Required parameter "sectionId" was null or undefined when calling objectsBindersBinderIdSectionsSectionIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{binder_id}/sections/{section_id}`;
        urlPath = urlPath.replace(`{${"binder_id"}}`, encodeURIComponent(String(requestParameters['binderId'])));
        urlPath = urlPath.replace(`{${"section_id"}}`, encodeURIComponent(String(requestParameters['sectionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Binder Sections
     */
    async objectsBindersBinderIdSectionsSectionIdGet(requestParameters: ObjectsBindersBinderIdSectionsSectionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersBinderIdSectionsSectionIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve All Binder Versions
     */
    async objectsBindersBinderIdVersionsGetRaw(requestParameters: ObjectsBindersBinderIdVersionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binderId'] == null) {
            throw new runtime.RequiredError(
                'binderId',
                'Required parameter "binderId" was null or undefined when calling objectsBindersBinderIdVersionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{binder_id}/versions`;
        urlPath = urlPath.replace(`{${"binder_id"}}`, encodeURIComponent(String(requestParameters['binderId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve All Binder Versions
     */
    async objectsBindersBinderIdVersionsGet(requestParameters: ObjectsBindersBinderIdVersionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersBinderIdVersionsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Export Binder (Specific Version)
     */
    async objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostRaw(requestParameters: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binderId'] == null) {
            throw new runtime.RequiredError(
                'binderId',
                'Required parameter "binderId" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['source'] != null) {
            queryParameters['source'] = requestParameters['source'];
        }

        if (requestParameters['renditiontype'] != null) {
            queryParameters['renditiontype'] = requestParameters['renditiontype'];
        }

        if (requestParameters['docversion'] != null) {
            queryParameters['docversion'] = requestParameters['docversion'];
        }

        if (requestParameters['attachments'] != null) {
            queryParameters['attachments'] = requestParameters['attachments'];
        }

        if (requestParameters['_export'] != null) {
            queryParameters['export'] = requestParameters['_export'];
        }

        if (requestParameters['docfield'] != null) {
            queryParameters['docfield'] = requestParameters['docfield'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export`;
        urlPath = urlPath.replace(`{${"binder_id"}}`, encodeURIComponent(String(requestParameters['binderId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Export Binder (Specific Version)
     */
    async objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(requestParameters: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Binder Version
     */
    async objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteRaw(requestParameters: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binderId'] == null) {
            throw new runtime.RequiredError(
                'binderId',
                'Required parameter "binderId" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{binder_id}/versions/{major_version}/{minor_version}`;
        urlPath = urlPath.replace(`{${"binder_id"}}`, encodeURIComponent(String(requestParameters['binderId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Binder Version
     */
    async objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(requestParameters: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Binder Version
     */
    async objectsBindersBinderIdVersionsMajorVersionMinorVersionGetRaw(requestParameters: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binderId'] == null) {
            throw new runtime.RequiredError(
                'binderId',
                'Required parameter "binderId" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{binder_id}/versions/{major_version}/{minor_version}`;
        urlPath = urlPath.replace(`{${"binder_id"}}`, encodeURIComponent(String(requestParameters['binderId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Binder Version
     */
    async objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(requestParameters: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersBinderIdVersionsMajorVersionMinorVersionGetRaw(requestParameters, initOverrides);
    }

    /**
     * Update Binder Version
     */
    async objectsBindersBinderIdVersionsMajorVersionMinorVersionPutRaw(requestParameters: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binderId'] == null) {
            throw new runtime.RequiredError(
                'binderId',
                'Required parameter "binderId" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{binder_id}/versions/{major_version}/{minor_version}`;
        urlPath = urlPath.replace(`{${"binder_id"}}`, encodeURIComponent(String(requestParameters['binderId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Binder Version
     */
    async objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(requestParameters: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersBinderIdVersionsMajorVersionMinorVersionPutRaw(requestParameters, initOverrides);
    }

    /**
     * Create Binder Relationship
     */
    async objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostRaw(requestParameters: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binderId'] == null) {
            throw new runtime.RequiredError(
                'binderId',
                'Required parameter "binderId" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships`;
        urlPath = urlPath.replace(`{${"binder_id"}}`, encodeURIComponent(String(requestParameters['binderId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Binder Relationship
     */
    async objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(requestParameters: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Binder Relationship
     */
    async objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteRaw(requestParameters: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binderId'] == null) {
            throw new runtime.RequiredError(
                'binderId',
                'Required parameter "binderId" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete().'
            );
        }

        if (requestParameters['relationshipId'] == null) {
            throw new runtime.RequiredError(
                'relationshipId',
                'Required parameter "relationshipId" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}`;
        urlPath = urlPath.replace(`{${"binder_id"}}`, encodeURIComponent(String(requestParameters['binderId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));
        urlPath = urlPath.replace(`{${"relationship_id"}}`, encodeURIComponent(String(requestParameters['relationshipId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Binder Relationship
     */
    async objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(requestParameters: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Binder Relationship
     */
    async objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetRaw(requestParameters: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binderId'] == null) {
            throw new runtime.RequiredError(
                'binderId',
                'Required parameter "binderId" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet().'
            );
        }

        if (requestParameters['relationshipId'] == null) {
            throw new runtime.RequiredError(
                'relationshipId',
                'Required parameter "relationshipId" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}`;
        urlPath = urlPath.replace(`{${"binder_id"}}`, encodeURIComponent(String(requestParameters['binderId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));
        urlPath = urlPath.replace(`{${"relationship_id"}}`, encodeURIComponent(String(requestParameters['relationshipId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Binder Relationship
     */
    async objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(requestParameters: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Binder Version Section
     */
    async objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetRaw(requestParameters: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binderId'] == null) {
            throw new runtime.RequiredError(
                'binderId',
                'Required parameter "binderId" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet().'
            );
        }

        if (requestParameters['sectionId'] == null) {
            throw new runtime.RequiredError(
                'sectionId',
                'Required parameter "sectionId" was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}`;
        urlPath = urlPath.replace(`{${"binder_id"}}`, encodeURIComponent(String(requestParameters['binderId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));
        urlPath = urlPath.replace(`{${"section_id"}}`, encodeURIComponent(String(requestParameters['sectionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Binder Version Section
     */
    async objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(requestParameters: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve All Binder Roles
     */
    async objectsBindersIdRolesGetRaw(requestParameters: ObjectsBindersIdRolesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling objectsBindersIdRolesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{id}/roles`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve All Binder Roles
     */
    async objectsBindersIdRolesGet(requestParameters: ObjectsBindersIdRolesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersIdRolesGetRaw(requestParameters, initOverrides);
    }

    /**
     * Assign Users & Groups to Roles on a Single Binder
     */
    async objectsBindersIdRolesPostRaw(requestParameters: ObjectsBindersIdRolesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling objectsBindersIdRolesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{id}/roles`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Assign Users & Groups to Roles on a Single Binder
     */
    async objectsBindersIdRolesPost(requestParameters: ObjectsBindersIdRolesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersIdRolesPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Role
     */
    async objectsBindersIdRolesRoleNameGetRaw(requestParameters: ObjectsBindersIdRolesRoleNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling objectsBindersIdRolesRoleNameGet().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling objectsBindersIdRolesRoleNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{id}/roles/{role_name}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Role
     */
    async objectsBindersIdRolesRoleNameGet(requestParameters: ObjectsBindersIdRolesRoleNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersIdRolesRoleNameGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Binder User Actions
     */
    async objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetRaw(requestParameters: ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Binder User Actions
     */
    async objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(requestParameters: ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Binder Entry Criteria
     */
    async objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetRaw(requestParameters: ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet().'
            );
        }

        if (requestParameters['nameV'] == null) {
            throw new runtime.RequiredError(
                'nameV',
                'Required parameter "nameV" was null or undefined when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));
        urlPath = urlPath.replace(`{${"name__v"}}`, encodeURIComponent(String(requestParameters['nameV'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Binder Entry Criteria
     */
    async objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(requestParameters: ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Initiate Binder User Action
     */
    async objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutRaw(requestParameters: ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut().'
            );
        }

        if (requestParameters['nameV'] == null) {
            throw new runtime.RequiredError(
                'nameV',
                'Required parameter "nameV" was null or undefined when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));
        urlPath = urlPath.replace(`{${"name__v"}}`, encodeURIComponent(String(requestParameters['nameV'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Initiate Binder User Action
     */
    async objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(requestParameters: ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve User Actions on Multiple Binders
     */
    async objectsBindersLifecycleActionsPostRaw(requestParameters: ObjectsBindersLifecycleActionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/lifecycle_actions`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve User Actions on Multiple Binders
     */
    async objectsBindersLifecycleActionsPost(requestParameters: ObjectsBindersLifecycleActionsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersLifecycleActionsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Initiate Bulk Binder User Actions
     */
    async objectsBindersLifecycleActionsUserActionNamePutRaw(requestParameters: ObjectsBindersLifecycleActionsUserActionNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userActionName'] == null) {
            throw new runtime.RequiredError(
                'userActionName',
                'Required parameter "userActionName" was null or undefined when calling objectsBindersLifecycleActionsUserActionNamePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/lifecycle_actions/{user_action_name}`;
        urlPath = urlPath.replace(`{${"user_action_name"}}`, encodeURIComponent(String(requestParameters['userActionName'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Initiate Bulk Binder User Actions
     */
    async objectsBindersLifecycleActionsUserActionNamePut(requestParameters: ObjectsBindersLifecycleActionsUserActionNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersLifecycleActionsUserActionNamePutRaw(requestParameters, initOverrides);
    }

    /**
     * Create Binder
     */
    async objectsBindersPostRaw(requestParameters: ObjectsBindersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['async'] != null) {
            queryParameters['async'] = requestParameters['async'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Binder
     */
    async objectsBindersPost(requestParameters: ObjectsBindersPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Binder Template Collection
     */
    async objectsBindersTemplatesGetRaw(requestParameters: ObjectsBindersTemplatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/templates`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Binder Template Collection
     */
    async objectsBindersTemplatesGet(requestParameters: ObjectsBindersTemplatesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersTemplatesGetRaw(requestParameters, initOverrides);
    }

    /**
     * Create Binder Template
     */
    async objectsBindersTemplatesPostRaw(requestParameters: ObjectsBindersTemplatesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/templates`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Binder Template
     */
    async objectsBindersTemplatesPost(requestParameters: ObjectsBindersTemplatesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersTemplatesPostRaw(requestParameters, initOverrides);
    }

    /**
     * Update Binder Template
     */
    async objectsBindersTemplatesPutRaw(requestParameters: ObjectsBindersTemplatesPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/templates`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Binder Template
     */
    async objectsBindersTemplatesPut(requestParameters: ObjectsBindersTemplatesPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersTemplatesPutRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Binder Template Node Attributes
     */
    async objectsBindersTemplatesTemplateNameBindernodesGetRaw(requestParameters: ObjectsBindersTemplatesTemplateNameBindernodesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['templateName'] == null) {
            throw new runtime.RequiredError(
                'templateName',
                'Required parameter "templateName" was null or undefined when calling objectsBindersTemplatesTemplateNameBindernodesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/templates/{template_name}/bindernodes`;
        urlPath = urlPath.replace(`{${"template_name"}}`, encodeURIComponent(String(requestParameters['templateName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Binder Template Node Attributes
     */
    async objectsBindersTemplatesTemplateNameBindernodesGet(requestParameters: ObjectsBindersTemplatesTemplateNameBindernodesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersTemplatesTemplateNameBindernodesGetRaw(requestParameters, initOverrides);
    }

    /**
     * Create Binder Template Node
     */
    async objectsBindersTemplatesTemplateNameBindernodesPostRaw(requestParameters: ObjectsBindersTemplatesTemplateNameBindernodesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['templateName'] == null) {
            throw new runtime.RequiredError(
                'templateName',
                'Required parameter "templateName" was null or undefined when calling objectsBindersTemplatesTemplateNameBindernodesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/templates/{template_name}/bindernodes`;
        urlPath = urlPath.replace(`{${"template_name"}}`, encodeURIComponent(String(requestParameters['templateName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Binder Template Node
     */
    async objectsBindersTemplatesTemplateNameBindernodesPost(requestParameters: ObjectsBindersTemplatesTemplateNameBindernodesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersTemplatesTemplateNameBindernodesPostRaw(requestParameters, initOverrides);
    }

    /**
     * Replace Binder Template Nodes
     */
    async objectsBindersTemplatesTemplateNameBindernodesPutRaw(requestParameters: ObjectsBindersTemplatesTemplateNameBindernodesPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['templateName'] == null) {
            throw new runtime.RequiredError(
                'templateName',
                'Required parameter "templateName" was null or undefined when calling objectsBindersTemplatesTemplateNameBindernodesPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/templates/{template_name}/bindernodes`;
        urlPath = urlPath.replace(`{${"template_name"}}`, encodeURIComponent(String(requestParameters['templateName'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Replace Binder Template Nodes
     */
    async objectsBindersTemplatesTemplateNameBindernodesPut(requestParameters: ObjectsBindersTemplatesTemplateNameBindernodesPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersTemplatesTemplateNameBindernodesPutRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Binder Template
     */
    async objectsBindersTemplatesTemplateNameDeleteRaw(requestParameters: ObjectsBindersTemplatesTemplateNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['templateName'] == null) {
            throw new runtime.RequiredError(
                'templateName',
                'Required parameter "templateName" was null or undefined when calling objectsBindersTemplatesTemplateNameDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/templates/{template_name}`;
        urlPath = urlPath.replace(`{${"template_name"}}`, encodeURIComponent(String(requestParameters['templateName'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Binder Template
     */
    async objectsBindersTemplatesTemplateNameDelete(requestParameters: ObjectsBindersTemplatesTemplateNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersTemplatesTemplateNameDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Binder Template Attributes
     */
    async objectsBindersTemplatesTemplateNameGetRaw(requestParameters: ObjectsBindersTemplatesTemplateNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['templateName'] == null) {
            throw new runtime.RequiredError(
                'templateName',
                'Required parameter "templateName" was null or undefined when calling objectsBindersTemplatesTemplateNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/binders/templates/{template_name}`;
        urlPath = urlPath.replace(`{${"template_name"}}`, encodeURIComponent(String(requestParameters['templateName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Binder Template Attributes
     */
    async objectsBindersTemplatesTemplateNameGet(requestParameters: ObjectsBindersTemplatesTemplateNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsBindersTemplatesTemplateNameGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Deleted Document IDs
     */
    async objectsDeletionsDocumentsGetRaw(requestParameters: ObjectsDeletionsDocumentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/deletions/documents`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Deleted Document IDs
     */
    async objectsDeletionsDocumentsGet(requestParameters: ObjectsDeletionsDocumentsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDeletionsDocumentsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Deleted Object Record ID
     */
    async objectsDeletionsVobjectsObjectNameGetRaw(requestParameters: ObjectsDeletionsVobjectsObjectNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling objectsDeletionsVobjectsObjectNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/deletions/vobjects/{object_name}`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Deleted Object Record ID
     */
    async objectsDeletionsVobjectsObjectNameGet(requestParameters: ObjectsDeletionsVobjectsObjectNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDeletionsVobjectsObjectNameGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve All Document Workflows
     */
    async objectsDocumentsActionsGetRaw(requestParameters: ObjectsDocumentsActionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['loc'] != null) {
            queryParameters['loc'] = requestParameters['loc'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/actions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve All Document Workflows
     */
    async objectsDocumentsActionsGet(requestParameters: ObjectsDocumentsActionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsActionsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Download Controlled Copy Job Results
     */
    async objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetRaw(requestParameters: ObjectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['lifecycleAndStateAndAction'] == null) {
            throw new runtime.RequiredError(
                'lifecycleAndStateAndAction',
                'Required parameter "lifecycleAndStateAndAction" was null or undefined when calling objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet().'
            );
        }

        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results`;
        urlPath = urlPath.replace(`{${"lifecycle_and_state_and_action"}}`, encodeURIComponent(String(requestParameters['lifecycleAndStateAndAction'])));
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download Controlled Copy Job Results
     */
    async objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(requestParameters: ObjectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Workflow Details
     */
    async objectsDocumentsActionsWorkflowNameGetRaw(requestParameters: ObjectsDocumentsActionsWorkflowNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workflowName'] == null) {
            throw new runtime.RequiredError(
                'workflowName',
                'Required parameter "workflowName" was null or undefined when calling objectsDocumentsActionsWorkflowNameGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['loc'] != null) {
            queryParameters['loc'] = requestParameters['loc'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/actions/{workflow_name}`;
        urlPath = urlPath.replace(`{${"workflow_name"}}`, encodeURIComponent(String(requestParameters['workflowName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Workflow Details
     */
    async objectsDocumentsActionsWorkflowNameGet(requestParameters: ObjectsDocumentsActionsWorkflowNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsActionsWorkflowNameGetRaw(requestParameters, initOverrides);
    }

    /**
     * Initiate Document Workflow
     */
    async objectsDocumentsActionsWorkflowNamePostRaw(requestParameters: ObjectsDocumentsActionsWorkflowNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workflowName'] == null) {
            throw new runtime.RequiredError(
                'workflowName',
                'Required parameter "workflowName" was null or undefined when calling objectsDocumentsActionsWorkflowNamePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/actions/{workflow_name}`;
        urlPath = urlPath.replace(`{${"workflow_name"}}`, encodeURIComponent(String(requestParameters['workflowName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Initiate Document Workflow
     */
    async objectsDocumentsActionsWorkflowNamePost(requestParameters: ObjectsDocumentsActionsWorkflowNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsActionsWorkflowNamePostRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Annotations
     */
    async objectsDocumentsAnnotationsBatchDeleteRaw(requestParameters: ObjectsDocumentsAnnotationsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/annotations/batch`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Annotations
     */
    async objectsDocumentsAnnotationsBatchDelete(requestParameters: ObjectsDocumentsAnnotationsBatchDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsAnnotationsBatchDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Create Multiple Annotations
     */
    async objectsDocumentsAnnotationsBatchPostRaw(requestParameters: ObjectsDocumentsAnnotationsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling objectsDocumentsAnnotationsBatchPost().'
            );
        }

        if (requestParameters['contentType'] == null) {
            throw new runtime.RequiredError(
                'contentType',
                'Required parameter "contentType" was null or undefined when calling objectsDocumentsAnnotationsBatchPost().'
            );
        }

        if (requestParameters['accept'] == null) {
            throw new runtime.RequiredError(
                'accept',
                'Required parameter "accept" was null or undefined when calling objectsDocumentsAnnotationsBatchPost().'
            );
        }

        if (requestParameters['xVaultAPIClientID'] == null) {
            throw new runtime.RequiredError(
                'xVaultAPIClientID',
                'Required parameter "xVaultAPIClientID" was null or undefined when calling objectsDocumentsAnnotationsBatchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/annotations/batch`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Multiple Annotations
     */
    async objectsDocumentsAnnotationsBatchPost(requestParameters: ObjectsDocumentsAnnotationsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsAnnotationsBatchPostRaw(requestParameters, initOverrides);
    }

    /**
     * Update Annotations
     */
    async objectsDocumentsAnnotationsBatchPutRaw(requestParameters: ObjectsDocumentsAnnotationsBatchPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/annotations/batch`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Annotations
     */
    async objectsDocumentsAnnotationsBatchPut(requestParameters: ObjectsDocumentsAnnotationsBatchPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsAnnotationsBatchPutRaw(requestParameters, initOverrides);
    }

    /**
     * Add Annotation Replies
     */
    async objectsDocumentsAnnotationsRepliesBatchPostRaw(requestParameters: ObjectsDocumentsAnnotationsRepliesBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/annotations/replies/batch`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add Annotation Replies
     */
    async objectsDocumentsAnnotationsRepliesBatchPost(requestParameters: ObjectsDocumentsAnnotationsRepliesBatchPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsAnnotationsRepliesBatchPostRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Multiple Document Attachments
     */
    async objectsDocumentsAttachmentsBatchDeleteRaw(requestParameters: ObjectsDocumentsAttachmentsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/attachments/batch`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Multiple Document Attachments
     */
    async objectsDocumentsAttachmentsBatchDelete(requestParameters: ObjectsDocumentsAttachmentsBatchDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsAttachmentsBatchDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Create Multiple Document Attachments
     */
    async objectsDocumentsAttachmentsBatchPostRaw(requestParameters: ObjectsDocumentsAttachmentsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/attachments/batch`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Multiple Document Attachments
     */
    async objectsDocumentsAttachmentsBatchPost(requestParameters: ObjectsDocumentsAttachmentsBatchPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsAttachmentsBatchPostRaw(requestParameters, initOverrides);
    }

    /**
     * Update Multiple Document Attachment Descriptions
     */
    async objectsDocumentsAttachmentsBatchPutRaw(requestParameters: ObjectsDocumentsAttachmentsBatchPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/attachments/batch`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Multiple Document Attachment Descriptions
     */
    async objectsDocumentsAttachmentsBatchPut(requestParameters: ObjectsDocumentsAttachmentsBatchPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsAttachmentsBatchPutRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Export Results
     */
    async objectsDocumentsBatchActionsFileextractJobIdResultsGetRaw(requestParameters: ObjectsDocumentsBatchActionsFileextractJobIdResultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling objectsDocumentsBatchActionsFileextractJobIdResultsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/batch/actions/fileextract/{job_id}/results`;
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Export Results
     */
    async objectsDocumentsBatchActionsFileextractJobIdResultsGet(requestParameters: ObjectsDocumentsBatchActionsFileextractJobIdResultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsBatchActionsFileextractJobIdResultsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Export Documents
     */
    async objectsDocumentsBatchActionsFileextractPostRaw(requestParameters: ObjectsDocumentsBatchActionsFileextractPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['source'] != null) {
            queryParameters['source'] = requestParameters['source'];
        }

        if (requestParameters['renditions'] != null) {
            queryParameters['renditions'] = requestParameters['renditions'];
        }

        if (requestParameters['allversions'] != null) {
            queryParameters['allversions'] = requestParameters['allversions'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/batch/actions/fileextract`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Export Documents
     */
    async objectsDocumentsBatchActionsFileextractPost(requestParameters: ObjectsDocumentsBatchActionsFileextractPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsBatchActionsFileextractPostRaw(requestParameters, initOverrides);
    }

    /**
     * Reclassify Multiple Documents
     */
    async objectsDocumentsBatchActionsReclassifyPutRaw(requestParameters: ObjectsDocumentsBatchActionsReclassifyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIMigrationMode'] != null) {
            headerParameters['X-VaultAPI-MigrationMode'] = String(requestParameters['xVaultAPIMigrationMode']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/batch/actions/reclassify`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reclassify Multiple Documents
     */
    async objectsDocumentsBatchActionsReclassifyPut(requestParameters: ObjectsDocumentsBatchActionsReclassifyPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsBatchActionsReclassifyPutRaw(requestParameters, initOverrides);
    }

    /**
     * Update Multiple Document Renditions
     */
    async objectsDocumentsBatchActionsRerenderPostRaw(requestParameters: ObjectsDocumentsBatchActionsRerenderPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/batch/actions/rerender`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Multiple Document Renditions
     */
    async objectsDocumentsBatchActionsRerenderPost(requestParameters: ObjectsDocumentsBatchActionsRerenderPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsBatchActionsRerenderPostRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Multiple Documents
     */
    async objectsDocumentsBatchDeleteRaw(requestParameters: ObjectsDocumentsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['idParam'] != null) {
            queryParameters['idParam'] = requestParameters['idParam'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/batch`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Multiple Documents
     */
    async objectsDocumentsBatchDelete(requestParameters: ObjectsDocumentsBatchDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsBatchDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Undo Collaborative Authoring Checkout
     */
    async objectsDocumentsBatchLockDeleteRaw(requestParameters: ObjectsDocumentsBatchLockDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/batch/lock`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Undo Collaborative Authoring Checkout
     */
    async objectsDocumentsBatchLockDelete(requestParameters: ObjectsDocumentsBatchLockDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsBatchLockDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Create Multiple Documents
     */
    async objectsDocumentsBatchPostRaw(requestParameters: ObjectsDocumentsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIMigrationMode'] != null) {
            headerParameters['X-VaultAPI-MigrationMode'] = String(requestParameters['xVaultAPIMigrationMode']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/batch`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Multiple Documents
     */
    async objectsDocumentsBatchPost(requestParameters: ObjectsDocumentsBatchPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsBatchPostRaw(requestParameters, initOverrides);
    }

    /**
     * Update Multiple Documents
     */
    async objectsDocumentsBatchPutRaw(requestParameters: ObjectsDocumentsBatchPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIMigrationMode'] != null) {
            headerParameters['X-VaultAPI-MigrationMode'] = String(requestParameters['xVaultAPIMigrationMode']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/batch`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Multiple Documents
     */
    async objectsDocumentsBatchPut(requestParameters: ObjectsDocumentsBatchPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsBatchPutRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Anchor IDs
     */
    async objectsDocumentsDocIdAnchorsGetRaw(requestParameters: ObjectsDocumentsDocIdAnchorsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdAnchorsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/anchors`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Anchor IDs
     */
    async objectsDocumentsDocIdAnchorsGet(requestParameters: ObjectsDocumentsDocIdAnchorsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdAnchorsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Export Document Annotations to PDF
     */
    async objectsDocumentsDocIdAnnotationsFileGetRaw(requestParameters: ObjectsDocumentsDocIdAnnotationsFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdAnnotationsFileGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/annotations/file`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Export Document Annotations to PDF
     */
    async objectsDocumentsDocIdAnnotationsFileGet(requestParameters: ObjectsDocumentsDocIdAnnotationsFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdAnnotationsFileGetRaw(requestParameters, initOverrides);
    }

    /**
     * Import Document Annotations from PDF
     */
    async objectsDocumentsDocIdAnnotationsFilePostRaw(requestParameters: ObjectsDocumentsDocIdAnnotationsFilePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdAnnotationsFilePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/annotations/file`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Import Document Annotations from PDF
     */
    async objectsDocumentsDocIdAnnotationsFilePost(requestParameters: ObjectsDocumentsDocIdAnnotationsFilePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdAnnotationsFilePostRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Single Document Attachment
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdDeleteRaw(requestParameters: ObjectsDocumentsDocIdAttachmentsAttachmentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdDelete().'
            );
        }

        if (requestParameters['attachmentId'] == null) {
            throw new runtime.RequiredError(
                'attachmentId',
                'Required parameter "attachmentId" was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/attachments/{attachment_id}`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"attachment_id"}}`, encodeURIComponent(String(requestParameters['attachmentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Single Document Attachment
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdDelete(requestParameters: ObjectsDocumentsDocIdAttachmentsAttachmentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdAttachmentsAttachmentIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Download Document Attachment
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdFileGetRaw(requestParameters: ObjectsDocumentsDocIdAttachmentsAttachmentIdFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdFileGet().'
            );
        }

        if (requestParameters['attachmentId'] == null) {
            throw new runtime.RequiredError(
                'attachmentId',
                'Required parameter "attachmentId" was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdFileGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/attachments/{attachment_id}/file`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"attachment_id"}}`, encodeURIComponent(String(requestParameters['attachmentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download Document Attachment
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(requestParameters: ObjectsDocumentsDocIdAttachmentsAttachmentIdFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdAttachmentsAttachmentIdFileGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Attachment Metadata
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdGetRaw(requestParameters: ObjectsDocumentsDocIdAttachmentsAttachmentIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdGet().'
            );
        }

        if (requestParameters['attachmentId'] == null) {
            throw new runtime.RequiredError(
                'attachmentId',
                'Required parameter "attachmentId" was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/attachments/{attachment_id}`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"attachment_id"}}`, encodeURIComponent(String(requestParameters['attachmentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Attachment Metadata
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdGet(requestParameters: ObjectsDocumentsDocIdAttachmentsAttachmentIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdAttachmentsAttachmentIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Update Document Attachment Description
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdPutRaw(requestParameters: ObjectsDocumentsDocIdAttachmentsAttachmentIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdPut().'
            );
        }

        if (requestParameters['attachmentId'] == null) {
            throw new runtime.RequiredError(
                'attachmentId',
                'Required parameter "attachmentId" was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/attachments/{attachment_id}`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"attachment_id"}}`, encodeURIComponent(String(requestParameters['attachmentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Document Attachment Description
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdPut(requestParameters: ObjectsDocumentsDocIdAttachmentsAttachmentIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdAttachmentsAttachmentIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Single Document Attachment Version
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteRaw(requestParameters: ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete().'
            );
        }

        if (requestParameters['attachmentId'] == null) {
            throw new runtime.RequiredError(
                'attachmentId',
                'Required parameter "attachmentId" was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete().'
            );
        }

        if (requestParameters['attachmentVersion'] == null) {
            throw new runtime.RequiredError(
                'attachmentVersion',
                'Required parameter "attachmentVersion" was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"attachment_id"}}`, encodeURIComponent(String(requestParameters['attachmentId'])));
        urlPath = urlPath.replace(`{${"attachment_version"}}`, encodeURIComponent(String(requestParameters['attachmentVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Single Document Attachment Version
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(requestParameters: ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Download Document Attachment Version
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRaw(requestParameters: ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet().'
            );
        }

        if (requestParameters['attachmentId'] == null) {
            throw new runtime.RequiredError(
                'attachmentId',
                'Required parameter "attachmentId" was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet().'
            );
        }

        if (requestParameters['attachmentVersion'] == null) {
            throw new runtime.RequiredError(
                'attachmentVersion',
                'Required parameter "attachmentVersion" was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"attachment_id"}}`, encodeURIComponent(String(requestParameters['attachmentId'])));
        urlPath = urlPath.replace(`{${"attachment_version"}}`, encodeURIComponent(String(requestParameters['attachmentVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download Document Attachment Version
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(requestParameters: ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Attachment Version Metadata
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetRaw(requestParameters: ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet().'
            );
        }

        if (requestParameters['attachmentId'] == null) {
            throw new runtime.RequiredError(
                'attachmentId',
                'Required parameter "attachmentId" was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet().'
            );
        }

        if (requestParameters['attachmentVersion'] == null) {
            throw new runtime.RequiredError(
                'attachmentVersion',
                'Required parameter "attachmentVersion" was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"attachment_id"}}`, encodeURIComponent(String(requestParameters['attachmentId'])));
        urlPath = urlPath.replace(`{${"attachment_version"}}`, encodeURIComponent(String(requestParameters['attachmentVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Attachment Version Metadata
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(requestParameters: ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetRaw(requestParameters, initOverrides);
    }

    /**
     * Restore Document Attachment Version
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostRaw(requestParameters: ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost().'
            );
        }

        if (requestParameters['attachmentId'] == null) {
            throw new runtime.RequiredError(
                'attachmentId',
                'Required parameter "attachmentId" was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost().'
            );
        }

        if (requestParameters['attachmentVersion'] == null) {
            throw new runtime.RequiredError(
                'attachmentVersion',
                'Required parameter "attachmentVersion" was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['restore'] != null) {
            queryParameters['restore'] = requestParameters['restore'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"attachment_id"}}`, encodeURIComponent(String(requestParameters['attachmentId'])));
        urlPath = urlPath.replace(`{${"attachment_version"}}`, encodeURIComponent(String(requestParameters['attachmentVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Restore Document Attachment Version
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(requestParameters: ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Attachment Versions
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetRaw(requestParameters: ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet().'
            );
        }

        if (requestParameters['attachmentId'] == null) {
            throw new runtime.RequiredError(
                'attachmentId',
                'Required parameter "attachmentId" was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/attachments/{attachment_id}/versions`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"attachment_id"}}`, encodeURIComponent(String(requestParameters['attachmentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Attachment Versions
     */
    async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(requestParameters: ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Download All Document Attachments
     */
    async objectsDocumentsDocIdAttachmentsFileGetRaw(requestParameters: ObjectsDocumentsDocIdAttachmentsFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdAttachmentsFileGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/attachments/file`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download All Document Attachments
     */
    async objectsDocumentsDocIdAttachmentsFileGet(requestParameters: ObjectsDocumentsDocIdAttachmentsFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdAttachmentsFileGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Attachments
     */
    async objectsDocumentsDocIdAttachmentsGetRaw(requestParameters: ObjectsDocumentsDocIdAttachmentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdAttachmentsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/attachments`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Attachments
     */
    async objectsDocumentsDocIdAttachmentsGet(requestParameters: ObjectsDocumentsDocIdAttachmentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdAttachmentsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Create Document Attachment
     */
    async objectsDocumentsDocIdAttachmentsPostRaw(requestParameters: ObjectsDocumentsDocIdAttachmentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdAttachmentsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/attachments`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Document Attachment
     */
    async objectsDocumentsDocIdAttachmentsPost(requestParameters: ObjectsDocumentsDocIdAttachmentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdAttachmentsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Complete Audit History for a Single Document
     */
    async objectsDocumentsDocIdAudittrailGetRaw(requestParameters: ObjectsDocumentsDocIdAudittrailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdAudittrailGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = requestParameters['endDate'];
        }

        if (requestParameters['formatResult'] != null) {
            queryParameters['format_result'] = requestParameters['formatResult'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['events'] != null) {
            queryParameters['events'] = requestParameters['events'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/audittrail`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Complete Audit History for a Single Document
     */
    async objectsDocumentsDocIdAudittrailGet(requestParameters: ObjectsDocumentsDocIdAudittrailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdAudittrailGetRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Single Document
     */
    async objectsDocumentsDocIdDeleteRaw(requestParameters: ObjectsDocumentsDocIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Single Document
     */
    async objectsDocumentsDocIdDelete(requestParameters: ObjectsDocumentsDocIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Events
     */
    async objectsDocumentsDocIdEventsGetRaw(requestParameters: ObjectsDocumentsDocIdEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdEventsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/events`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Events
     */
    async objectsDocumentsDocIdEventsGet(requestParameters: ObjectsDocumentsDocIdEventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdEventsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Download Document File
     */
    async objectsDocumentsDocIdFileGetRaw(requestParameters: ObjectsDocumentsDocIdFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdFileGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['lockDocument'] != null) {
            queryParameters['lockDocument'] = requestParameters['lockDocument'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/file`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download Document File
     */
    async objectsDocumentsDocIdFileGet(requestParameters: ObjectsDocumentsDocIdFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdFileGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document
     */
    async objectsDocumentsDocIdGetRaw(requestParameters: ObjectsDocumentsDocIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document
     */
    async objectsDocumentsDocIdGet(requestParameters: ObjectsDocumentsDocIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Document Lock
     */
    async objectsDocumentsDocIdLockDeleteRaw(requestParameters: ObjectsDocumentsDocIdLockDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdLockDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/lock`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Document Lock
     */
    async objectsDocumentsDocIdLockDelete(requestParameters: ObjectsDocumentsDocIdLockDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdLockDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Lock
     */
    async objectsDocumentsDocIdLockGetRaw(requestParameters: ObjectsDocumentsDocIdLockGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdLockGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/lock`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Lock
     */
    async objectsDocumentsDocIdLockGet(requestParameters: ObjectsDocumentsDocIdLockGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdLockGetRaw(requestParameters, initOverrides);
    }

    /**
     * Create Document Lock
     */
    async objectsDocumentsDocIdLockPostRaw(requestParameters: ObjectsDocumentsDocIdLockPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdLockPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/lock`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Document Lock
     */
    async objectsDocumentsDocIdLockPost(requestParameters: ObjectsDocumentsDocIdLockPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdLockPostRaw(requestParameters, initOverrides);
    }

    /**
     * Download All Document Version Attachments
     */
    async objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetRaw(requestParameters: ObjectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download All Document Version Attachments
     */
    async objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(requestParameters: ObjectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetRaw(requestParameters, initOverrides);
    }

    /**
     * Create Single Document Version
     */
    async objectsDocumentsDocIdPostRaw(requestParameters: ObjectsDocumentsDocIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['suppressRendition'] != null) {
            queryParameters['suppressRendition'] = requestParameters['suppressRendition'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Single Document Version
     */
    async objectsDocumentsDocIdPost(requestParameters: ObjectsDocumentsDocIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdPostRaw(requestParameters, initOverrides);
    }

    /**
     * Update Single Document
     */
    async objectsDocumentsDocIdPutRaw(requestParameters: ObjectsDocumentsDocIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIMigrationMode'] != null) {
            headerParameters['X-VaultAPI-MigrationMode'] = String(requestParameters['xVaultAPIMigrationMode']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Single Document
     */
    async objectsDocumentsDocIdPut(requestParameters: ObjectsDocumentsDocIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Renditions
     */
    async objectsDocumentsDocIdRenditionsGetRaw(requestParameters: ObjectsDocumentsDocIdRenditionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdRenditionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/renditions`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Renditions
     */
    async objectsDocumentsDocIdRenditionsGet(requestParameters: ObjectsDocumentsDocIdRenditionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdRenditionsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Single Document Rendition
     */
    async objectsDocumentsDocIdRenditionsRenditionTypeDeleteRaw(requestParameters: ObjectsDocumentsDocIdRenditionsRenditionTypeDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdRenditionsRenditionTypeDelete().'
            );
        }

        if (requestParameters['renditionType'] == null) {
            throw new runtime.RequiredError(
                'renditionType',
                'Required parameter "renditionType" was null or undefined when calling objectsDocumentsDocIdRenditionsRenditionTypeDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/renditions/{rendition_type}`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"rendition_type"}}`, encodeURIComponent(String(requestParameters['renditionType'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Single Document Rendition
     */
    async objectsDocumentsDocIdRenditionsRenditionTypeDelete(requestParameters: ObjectsDocumentsDocIdRenditionsRenditionTypeDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdRenditionsRenditionTypeDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Download Document Rendition File
     */
    async objectsDocumentsDocIdRenditionsRenditionTypeGetRaw(requestParameters: ObjectsDocumentsDocIdRenditionsRenditionTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdRenditionsRenditionTypeGet().'
            );
        }

        if (requestParameters['renditionType'] == null) {
            throw new runtime.RequiredError(
                'renditionType',
                'Required parameter "renditionType" was null or undefined when calling objectsDocumentsDocIdRenditionsRenditionTypeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['steadyState'] != null) {
            queryParameters['steadyState'] = requestParameters['steadyState'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/renditions/{rendition_type}`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"rendition_type"}}`, encodeURIComponent(String(requestParameters['renditionType'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download Document Rendition File
     */
    async objectsDocumentsDocIdRenditionsRenditionTypeGet(requestParameters: ObjectsDocumentsDocIdRenditionsRenditionTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdRenditionsRenditionTypeGetRaw(requestParameters, initOverrides);
    }

    /**
     * Add Single Document Rendition
     */
    async objectsDocumentsDocIdRenditionsRenditionTypePostRaw(requestParameters: ObjectsDocumentsDocIdRenditionsRenditionTypePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdRenditionsRenditionTypePost().'
            );
        }

        if (requestParameters['renditionType'] == null) {
            throw new runtime.RequiredError(
                'renditionType',
                'Required parameter "renditionType" was null or undefined when calling objectsDocumentsDocIdRenditionsRenditionTypePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/renditions/{rendition_type}`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"rendition_type"}}`, encodeURIComponent(String(requestParameters['renditionType'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add Single Document Rendition
     */
    async objectsDocumentsDocIdRenditionsRenditionTypePost(requestParameters: ObjectsDocumentsDocIdRenditionsRenditionTypePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdRenditionsRenditionTypePostRaw(requestParameters, initOverrides);
    }

    /**
     * Replace Document Rendition
     */
    async objectsDocumentsDocIdRenditionsRenditionTypePutRaw(requestParameters: ObjectsDocumentsDocIdRenditionsRenditionTypePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdRenditionsRenditionTypePut().'
            );
        }

        if (requestParameters['renditionType'] == null) {
            throw new runtime.RequiredError(
                'renditionType',
                'Required parameter "renditionType" was null or undefined when calling objectsDocumentsDocIdRenditionsRenditionTypePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/renditions/{rendition_type}`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"rendition_type"}}`, encodeURIComponent(String(requestParameters['renditionType'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Replace Document Rendition
     */
    async objectsDocumentsDocIdRenditionsRenditionTypePut(requestParameters: ObjectsDocumentsDocIdRenditionsRenditionTypePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdRenditionsRenditionTypePutRaw(requestParameters, initOverrides);
    }

    /**
     * Remove Users & Groups from Roles on a Single Document
     */
    async objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteRaw(requestParameters: ObjectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete().'
            );
        }

        if (requestParameters['roleNameAndUserOrGroup'] == null) {
            throw new runtime.RequiredError(
                'roleNameAndUserOrGroup',
                'Required parameter "roleNameAndUserOrGroup" was null or undefined when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"role_name_and_user_or_group"}}`, encodeURIComponent(String(requestParameters['roleNameAndUserOrGroup'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove Users & Groups from Roles on a Single Document
     */
    async objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(requestParameters: ObjectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Version Attachments
     */
    async objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetRaw(requestParameters: ObjectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Version Attachments
     */
    async objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(requestParameters: ObjectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Versions
     */
    async objectsDocumentsDocIdVersionsGetRaw(requestParameters: ObjectsDocumentsDocIdVersionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdVersionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/versions`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Versions
     */
    async objectsDocumentsDocIdVersionsGet(requestParameters: ObjectsDocumentsDocIdVersionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdVersionsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Read Annotations by ID
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetRaw(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet().'
            );
        }

        if (requestParameters['annotationId'] == null) {
            throw new runtime.RequiredError(
                'annotationId',
                'Required parameter "annotationId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));
        urlPath = urlPath.replace(`{${"annotation_id"}}`, encodeURIComponent(String(requestParameters['annotationId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read Annotations by ID
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Read Replies of Parent Annotation
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetRaw(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet().'
            );
        }

        if (requestParameters['annotationId'] == null) {
            throw new runtime.RequiredError(
                'annotationId',
                'Required parameter "annotationId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));
        urlPath = urlPath.replace(`{${"annotation_id"}}`, encodeURIComponent(String(requestParameters['annotationId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read Replies of Parent Annotation
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetRaw(requestParameters, initOverrides);
    }

    /**
     * Export Document Version Annotations to PDF
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetRaw(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Export Document Version Annotations to PDF
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetRaw(requestParameters, initOverrides);
    }

    /**
     * Import Document Version Annotations from PDF
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostRaw(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Import Document Version Annotations from PDF
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostRaw(requestParameters, initOverrides);
    }

    /**
     * Read Annotations by Document Version and Type
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetRaw(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['annotationTypes'] != null) {
            queryParameters['annotation_types'] = requestParameters['annotationTypes'];
        }

        if (requestParameters['paginationId'] != null) {
            queryParameters['pagination_id'] = requestParameters['paginationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Read Annotations by Document Version and Type
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Download Document Version Attachment Version
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRaw(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet().'
            );
        }

        if (requestParameters['attachmentId'] == null) {
            throw new runtime.RequiredError(
                'attachmentId',
                'Required parameter "attachmentId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet().'
            );
        }

        if (requestParameters['attachmentVersion'] == null) {
            throw new runtime.RequiredError(
                'attachmentVersion',
                'Required parameter "attachmentVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));
        urlPath = urlPath.replace(`{${"attachment_id"}}`, encodeURIComponent(String(requestParameters['attachmentId'])));
        urlPath = urlPath.replace(`{${"attachment_version"}}`, encodeURIComponent(String(requestParameters['attachmentVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download Document Version Attachment Version
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Version Attachment Versions
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetRaw(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet().'
            );
        }

        if (requestParameters['attachmentId'] == null) {
            throw new runtime.RequiredError(
                'attachmentId',
                'Required parameter "attachmentId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet().'
            );
        }

        if (requestParameters['attachmentVersion'] == null) {
            throw new runtime.RequiredError(
                'attachmentVersion',
                'Required parameter "attachmentVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));
        urlPath = urlPath.replace(`{${"attachment_id"}}`, encodeURIComponent(String(requestParameters['attachmentId'])));
        urlPath = urlPath.replace(`{${"attachment_version"}}`, encodeURIComponent(String(requestParameters['attachmentVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Version Attachment Versions
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Single Document Version
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteRaw(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Single Document Version
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Version Notes as CSV
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetRaw(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Version Notes as CSV
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetRaw(requestParameters, initOverrides);
    }

    /**
     * Create Document Event
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostRaw(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Document Event
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Video Annotations
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetRaw(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Video Annotations
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Download Document Version File
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetRaw(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download Document Version File
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Version
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetRaw(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Version
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetRaw(requestParameters, initOverrides);
    }

    /**
     * Update Document Version
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutRaw(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIMigrationMode'] != null) {
            headerParameters['X-VaultAPI-MigrationMode'] = String(requestParameters['xVaultAPIMigrationMode']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Document Version
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Relationships
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetRaw(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Relationships
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Create Single Document Relationship
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostRaw(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Single Document Relationship
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Single Document Relationship
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteRaw(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete().'
            );
        }

        if (requestParameters['relationshipId'] == null) {
            throw new runtime.RequiredError(
                'relationshipId',
                'Required parameter "relationshipId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));
        urlPath = urlPath.replace(`{${"relationship_id"}}`, encodeURIComponent(String(requestParameters['relationshipId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Single Document Relationship
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Relationship
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetRaw(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet().'
            );
        }

        if (requestParameters['relationshipId'] == null) {
            throw new runtime.RequiredError(
                'relationshipId',
                'Required parameter "relationshipId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));
        urlPath = urlPath.replace(`{${"relationship_id"}}`, encodeURIComponent(String(requestParameters['relationshipId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Relationship
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Version Renditions
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetRaw(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Version Renditions
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Document Version Rendition
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteRaw(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete().'
            );
        }

        if (requestParameters['renditionType'] == null) {
            throw new runtime.RequiredError(
                'renditionType',
                'Required parameter "renditionType" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));
        urlPath = urlPath.replace(`{${"rendition_type"}}`, encodeURIComponent(String(requestParameters['renditionType'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Document Version Rendition
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Download Document Version Rendition File
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetRaw(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet().'
            );
        }

        if (requestParameters['renditionType'] == null) {
            throw new runtime.RequiredError(
                'renditionType',
                'Required parameter "renditionType" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));
        urlPath = urlPath.replace(`{${"rendition_type"}}`, encodeURIComponent(String(requestParameters['renditionType'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download Document Version Rendition File
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetRaw(requestParameters, initOverrides);
    }

    /**
     * Upload Document Version Rendition
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostRaw(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost().'
            );
        }

        if (requestParameters['renditionType'] == null) {
            throw new runtime.RequiredError(
                'renditionType',
                'Required parameter "renditionType" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));
        urlPath = urlPath.replace(`{${"rendition_type"}}`, encodeURIComponent(String(requestParameters['renditionType'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Upload Document Version Rendition
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostRaw(requestParameters, initOverrides);
    }

    /**
     * Replace Document Version Rendition
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutRaw(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut().'
            );
        }

        if (requestParameters['renditionType'] == null) {
            throw new runtime.RequiredError(
                'renditionType',
                'Required parameter "renditionType" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));
        urlPath = urlPath.replace(`{${"rendition_type"}}`, encodeURIComponent(String(requestParameters['renditionType'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Replace Document Version Rendition
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutRaw(requestParameters, initOverrides);
    }

    /**
     * Download Document Version Thumbnail File
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetRaw(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail`;
        urlPath = urlPath.replace(`{${"doc_id"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download Document Version Thumbnail File
     */
    async objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(requestParameters: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve All Documents
     */
    async objectsDocumentsGetRaw(requestParameters: ObjectsDocumentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['namedFilter'] != null) {
            queryParameters['named_filter'] = requestParameters['namedFilter'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['versionscope'] != null) {
            queryParameters['versionscope'] = requestParameters['versionscope'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve All Documents
     */
    async objectsDocumentsGet(requestParameters: ObjectsDocumentsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve All Document Roles
     */
    async objectsDocumentsIdRolesGetRaw(requestParameters: ObjectsDocumentsIdRolesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling objectsDocumentsIdRolesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{id}/roles`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve All Document Roles
     */
    async objectsDocumentsIdRolesGet(requestParameters: ObjectsDocumentsIdRolesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsIdRolesGetRaw(requestParameters, initOverrides);
    }

    /**
     * Assign Users & Groups to Roles on a Single Document
     */
    async objectsDocumentsIdRolesPostRaw(requestParameters: ObjectsDocumentsIdRolesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling objectsDocumentsIdRolesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{id}/roles`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Assign Users & Groups to Roles on a Single Document
     */
    async objectsDocumentsIdRolesPost(requestParameters: ObjectsDocumentsIdRolesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsIdRolesPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Role
     */
    async objectsDocumentsIdRolesRoleNameGetRaw(requestParameters: ObjectsDocumentsIdRolesRoleNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling objectsDocumentsIdRolesRoleNameGet().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling objectsDocumentsIdRolesRoleNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{id}/roles/{role_name}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Role
     */
    async objectsDocumentsIdRolesRoleNameGet(requestParameters: ObjectsDocumentsIdRolesRoleNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsIdRolesRoleNameGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document User Actions
     */
    async objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetRaw(requestParameters: ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document User Actions
     */
    async objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(requestParameters: ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Entry Criteria
     */
    async objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetRaw(requestParameters: ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet().'
            );
        }

        if (requestParameters['nameV'] == null) {
            throw new runtime.RequiredError(
                'nameV',
                'Required parameter "nameV" was null or undefined when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));
        urlPath = urlPath.replace(`{${"name__v"}}`, encodeURIComponent(String(requestParameters['nameV'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Entry Criteria
     */
    async objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(requestParameters: ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Initiate Document User Action
     */
    async objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutRaw(requestParameters: ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut().'
            );
        }

        if (requestParameters['majorVersion'] == null) {
            throw new runtime.RequiredError(
                'majorVersion',
                'Required parameter "majorVersion" was null or undefined when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut().'
            );
        }

        if (requestParameters['minorVersion'] == null) {
            throw new runtime.RequiredError(
                'minorVersion',
                'Required parameter "minorVersion" was null or undefined when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut().'
            );
        }

        if (requestParameters['nameV'] == null) {
            throw new runtime.RequiredError(
                'nameV',
                'Required parameter "nameV" was null or undefined when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"major_version"}}`, encodeURIComponent(String(requestParameters['majorVersion'])));
        urlPath = urlPath.replace(`{${"minor_version"}}`, encodeURIComponent(String(requestParameters['minorVersion'])));
        urlPath = urlPath.replace(`{${"name__v"}}`, encodeURIComponent(String(requestParameters['nameV'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Initiate Document User Action
     */
    async objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(requestParameters: ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve User Actions on Multiple Documents
     */
    async objectsDocumentsLifecycleActionsPostRaw(requestParameters: ObjectsDocumentsLifecycleActionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/lifecycle_actions`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve User Actions on Multiple Documents
     */
    async objectsDocumentsLifecycleActionsPost(requestParameters: ObjectsDocumentsLifecycleActionsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsLifecycleActionsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Initiate Bulk Document User Actions
     */
    async objectsDocumentsLifecycleActionsUserActionNamePutRaw(requestParameters: ObjectsDocumentsLifecycleActionsUserActionNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userActionName'] == null) {
            throw new runtime.RequiredError(
                'userActionName',
                'Required parameter "userActionName" was null or undefined when calling objectsDocumentsLifecycleActionsUserActionNamePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/lifecycle_actions/{user_action_name}`;
        urlPath = urlPath.replace(`{${"user_action_name"}}`, encodeURIComponent(String(requestParameters['userActionName'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Initiate Bulk Document User Actions
     */
    async objectsDocumentsLifecycleActionsUserActionNamePut(requestParameters: ObjectsDocumentsLifecycleActionsUserActionNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsLifecycleActionsUserActionNamePutRaw(requestParameters, initOverrides);
    }

    /**
     * Create Single Document
     */
    async objectsDocumentsPostRaw(requestParameters: ObjectsDocumentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIMigrationMode'] != null) {
            headerParameters['X-VaultAPI-MigrationMode'] = String(requestParameters['xVaultAPIMigrationMode']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Single Document
     */
    async objectsDocumentsPost(requestParameters: ObjectsDocumentsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Multiple Document Relationships
     */
    async objectsDocumentsRelationshipsBatchDeleteRaw(requestParameters: ObjectsDocumentsRelationshipsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/relationships/batch`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Multiple Document Relationships
     */
    async objectsDocumentsRelationshipsBatchDelete(requestParameters: ObjectsDocumentsRelationshipsBatchDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsRelationshipsBatchDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Create Multiple Document Relationships
     */
    async objectsDocumentsRelationshipsBatchPostRaw(requestParameters: ObjectsDocumentsRelationshipsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/relationships/batch`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Multiple Document Relationships
     */
    async objectsDocumentsRelationshipsBatchPost(requestParameters: ObjectsDocumentsRelationshipsBatchPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsRelationshipsBatchPostRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Multiple Document Renditions
     */
    async objectsDocumentsRenditionsBatchDeleteRaw(requestParameters: ObjectsDocumentsRenditionsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/renditions/batch`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Multiple Document Renditions
     */
    async objectsDocumentsRenditionsBatchDelete(requestParameters: ObjectsDocumentsRenditionsBatchDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsRenditionsBatchDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Add Multiple Document Renditions
     */
    async objectsDocumentsRenditionsBatchPostRaw(requestParameters: ObjectsDocumentsRenditionsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['idParam'] != null) {
            queryParameters['idParam'] = requestParameters['idParam'];
        }

        if (requestParameters['largeSizeAsset'] != null) {
            queryParameters['largeSizeAsset'] = requestParameters['largeSizeAsset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIMigrationMode'] != null) {
            headerParameters['X-VaultAPI-MigrationMode'] = String(requestParameters['xVaultAPIMigrationMode']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/renditions/batch`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add Multiple Document Renditions
     */
    async objectsDocumentsRenditionsBatchPost(requestParameters: ObjectsDocumentsRenditionsBatchPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsRenditionsBatchPostRaw(requestParameters, initOverrides);
    }

    /**
     * Remove Users and Groups from Roles on Multiple Documents & Binders
     */
    async objectsDocumentsRolesBatchDeleteRaw(requestParameters: ObjectsDocumentsRolesBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/roles/batch`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove Users and Groups from Roles on Multiple Documents & Binders
     */
    async objectsDocumentsRolesBatchDelete(requestParameters: ObjectsDocumentsRolesBatchDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsRolesBatchDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Assign Users & Groups to Roles on Multiple Documents & Binders
     */
    async objectsDocumentsRolesBatchPostRaw(requestParameters: ObjectsDocumentsRolesBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/roles/batch`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Assign Users & Groups to Roles on Multiple Documents & Binders
     */
    async objectsDocumentsRolesBatchPost(requestParameters: ObjectsDocumentsRolesBatchPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsRolesBatchPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Template Collection
     */
    async objectsDocumentsTemplatesGetRaw(requestParameters: ObjectsDocumentsTemplatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/templates`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Template Collection
     */
    async objectsDocumentsTemplatesGet(requestParameters: ObjectsDocumentsTemplatesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsTemplatesGetRaw(requestParameters, initOverrides);
    }

    /**
     * Create Single Document Template
     */
    async objectsDocumentsTemplatesPostRaw(requestParameters: ObjectsDocumentsTemplatesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/templates`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Single Document Template
     */
    async objectsDocumentsTemplatesPost(requestParameters: ObjectsDocumentsTemplatesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsTemplatesPostRaw(requestParameters, initOverrides);
    }

    /**
     * Update Multiple Document Templates
     */
    async objectsDocumentsTemplatesPutRaw(requestParameters: ObjectsDocumentsTemplatesPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/templates`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Multiple Document Templates
     */
    async objectsDocumentsTemplatesPut(requestParameters: ObjectsDocumentsTemplatesPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsTemplatesPutRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Basic Document Template
     */
    async objectsDocumentsTemplatesTemplateNameDeleteRaw(requestParameters: ObjectsDocumentsTemplatesTemplateNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['templateName'] == null) {
            throw new runtime.RequiredError(
                'templateName',
                'Required parameter "templateName" was null or undefined when calling objectsDocumentsTemplatesTemplateNameDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/templates/{template_name}`;
        urlPath = urlPath.replace(`{${"template_name"}}`, encodeURIComponent(String(requestParameters['templateName'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Basic Document Template
     */
    async objectsDocumentsTemplatesTemplateNameDelete(requestParameters: ObjectsDocumentsTemplatesTemplateNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsTemplatesTemplateNameDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Download Document Template File
     */
    async objectsDocumentsTemplatesTemplateNameFileGetRaw(requestParameters: ObjectsDocumentsTemplatesTemplateNameFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['templateName'] == null) {
            throw new runtime.RequiredError(
                'templateName',
                'Required parameter "templateName" was null or undefined when calling objectsDocumentsTemplatesTemplateNameFileGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/templates/{template_name}/file`;
        urlPath = urlPath.replace(`{${"template_name"}}`, encodeURIComponent(String(requestParameters['templateName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download Document Template File
     */
    async objectsDocumentsTemplatesTemplateNameFileGet(requestParameters: ObjectsDocumentsTemplatesTemplateNameFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsTemplatesTemplateNameFileGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Document Template Attributes
     */
    async objectsDocumentsTemplatesTemplateNameGetRaw(requestParameters: ObjectsDocumentsTemplatesTemplateNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['templateName'] == null) {
            throw new runtime.RequiredError(
                'templateName',
                'Required parameter "templateName" was null or undefined when calling objectsDocumentsTemplatesTemplateNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/templates/{template_name}`;
        urlPath = urlPath.replace(`{${"template_name"}}`, encodeURIComponent(String(requestParameters['templateName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Document Template Attributes
     */
    async objectsDocumentsTemplatesTemplateNameGet(requestParameters: ObjectsDocumentsTemplatesTemplateNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsTemplatesTemplateNameGetRaw(requestParameters, initOverrides);
    }

    /**
     * Update Single Document Template
     */
    async objectsDocumentsTemplatesTemplateNamePutRaw(requestParameters: ObjectsDocumentsTemplatesTemplateNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['templateName'] == null) {
            throw new runtime.RequiredError(
                'templateName',
                'Required parameter "templateName" was null or undefined when calling objectsDocumentsTemplatesTemplateNamePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/templates/{template_name}`;
        urlPath = urlPath.replace(`{${"template_name"}}`, encodeURIComponent(String(requestParameters['templateName'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Single Document Template
     */
    async objectsDocumentsTemplatesTemplateNamePut(requestParameters: ObjectsDocumentsTemplatesTemplateNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsTemplatesTemplateNamePutRaw(requestParameters, initOverrides);
    }

    /**
     * Document Tokens
     */
    async objectsDocumentsTokensPostRaw(requestParameters: ObjectsDocumentsTokensPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/tokens`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Document Tokens
     */
    async objectsDocumentsTokensPost(requestParameters: ObjectsDocumentsTokensPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsTokensPostRaw(requestParameters, initOverrides);
    }

    /**
     * Export Document Versions
     */
    async objectsDocumentsVersionsBatchActionsFileextractPostRaw(requestParameters: ObjectsDocumentsVersionsBatchActionsFileextractPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['source'] != null) {
            queryParameters['source'] = requestParameters['source'];
        }

        if (requestParameters['renditions'] != null) {
            queryParameters['renditions'] = requestParameters['renditions'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/versions/batch/actions/fileextract`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Export Document Versions
     */
    async objectsDocumentsVersionsBatchActionsFileextractPost(requestParameters: ObjectsDocumentsVersionsBatchActionsFileextractPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsVersionsBatchActionsFileextractPostRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Multiple Document Versions
     */
    async objectsDocumentsVersionsBatchDeleteRaw(requestParameters: ObjectsDocumentsVersionsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['idParam'] != null) {
            queryParameters['idParam'] = requestParameters['idParam'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/versions/batch`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Multiple Document Versions
     */
    async objectsDocumentsVersionsBatchDelete(requestParameters: ObjectsDocumentsVersionsBatchDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsVersionsBatchDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Create Multiple Document Versions
     */
    async objectsDocumentsVersionsBatchPostRaw(requestParameters: ObjectsDocumentsVersionsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['idParam'] != null) {
            queryParameters['idParam'] = requestParameters['idParam'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIMigrationMode'] != null) {
            headerParameters['X-VaultAPI-MigrationMode'] = String(requestParameters['xVaultAPIMigrationMode']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/documents/versions/batch`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Multiple Document Versions
     */
    async objectsDocumentsVersionsBatchPost(requestParameters: ObjectsDocumentsVersionsBatchPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDocumentsVersionsBatchPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Domain Information
     */
    async objectsDomainGetRaw(requestParameters: ObjectsDomainGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['includeApplication'] != null) {
            queryParameters['include_application'] = requestParameters['includeApplication'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/domain`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Domain Information
     */
    async objectsDomainGet(requestParameters: ObjectsDomainGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDomainGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Domains
     */
    async objectsDomainsGetRaw(requestParameters: ObjectsDomainsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/domains`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Domains
     */
    async objectsDomainsGet(requestParameters: ObjectsDomainsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsDomainsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Add EDL Matched Documents
     */
    async objectsEdlMatchedDocumentsBatchActionsAddPostRaw(requestParameters: ObjectsEdlMatchedDocumentsBatchActionsAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/edl_matched_documents/batch/actions/add`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add EDL Matched Documents
     */
    async objectsEdlMatchedDocumentsBatchActionsAddPost(requestParameters: ObjectsEdlMatchedDocumentsBatchActionsAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsEdlMatchedDocumentsBatchActionsAddPostRaw(requestParameters, initOverrides);
    }

    /**
     * Remove EDL Matched Documents
     */
    async objectsEdlMatchedDocumentsBatchActionsRemovePostRaw(requestParameters: ObjectsEdlMatchedDocumentsBatchActionsRemovePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/edl_matched_documents/batch/actions/remove`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove EDL Matched Documents
     */
    async objectsEdlMatchedDocumentsBatchActionsRemovePost(requestParameters: ObjectsEdlMatchedDocumentsBatchActionsRemovePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsEdlMatchedDocumentsBatchActionsRemovePostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Auto Managed Groups
     */
    async objectsGroupsAutoGetRaw(requestParameters: ObjectsGroupsAutoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/groups/auto`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Auto Managed Groups
     */
    async objectsGroupsAutoGet(requestParameters: ObjectsGroupsAutoGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsGroupsAutoGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve All Groups
     */
    async objectsGroupsGetRaw(requestParameters: ObjectsGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['includeImplied'] != null) {
            queryParameters['includeImplied'] = requestParameters['includeImplied'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/groups`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve All Groups
     */
    async objectsGroupsGet(requestParameters: ObjectsGroupsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsGroupsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Group
     */
    async objectsGroupsGroupIdDeleteRaw(requestParameters: ObjectsGroupsGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling objectsGroupsGroupIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/groups/{group_id}`;
        urlPath = urlPath.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters['groupId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Group
     */
    async objectsGroupsGroupIdDelete(requestParameters: ObjectsGroupsGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsGroupsGroupIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Group
     */
    async objectsGroupsGroupIdGetRaw(requestParameters: ObjectsGroupsGroupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling objectsGroupsGroupIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeImplied'] != null) {
            queryParameters['includeImplied'] = requestParameters['includeImplied'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/groups/{group_id}`;
        urlPath = urlPath.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters['groupId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Group
     */
    async objectsGroupsGroupIdGet(requestParameters: ObjectsGroupsGroupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsGroupsGroupIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Update Group
     */
    async objectsGroupsGroupIdPutRaw(requestParameters: ObjectsGroupsGroupIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling objectsGroupsGroupIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/groups/{group_id}`;
        urlPath = urlPath.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters['groupId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Group
     */
    async objectsGroupsGroupIdPut(requestParameters: ObjectsGroupsGroupIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsGroupsGroupIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Create Group 
     */
    async objectsGroupsPostRaw(requestParameters: ObjectsGroupsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/groups`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Group 
     */
    async objectsGroupsPost(requestParameters: ObjectsGroupsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsGroupsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Application License Usage
     */
    async objectsLicensesGetRaw(requestParameters: ObjectsLicensesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/licenses`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Application License Usage
     */
    async objectsLicensesGet(requestParameters: ObjectsLicensesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsLicensesGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve All Multi-Record Workflows
     */
    async objectsObjectworkflowsActionsGetRaw(requestParameters: ObjectsObjectworkflowsActionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/objectworkflows/actions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve All Multi-Record Workflows
     */
    async objectsObjectworkflowsActionsGet(requestParameters: ObjectsObjectworkflowsActionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsObjectworkflowsActionsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Multi-Record Workflow Details
     */
    async objectsObjectworkflowsActionsWorkflowNameGetRaw(requestParameters: ObjectsObjectworkflowsActionsWorkflowNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workflowName'] == null) {
            throw new runtime.RequiredError(
                'workflowName',
                'Required parameter "workflowName" was null or undefined when calling objectsObjectworkflowsActionsWorkflowNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/objectworkflows/actions/{workflow_name}`;
        urlPath = urlPath.replace(`{${"workflow_name"}}`, encodeURIComponent(String(requestParameters['workflowName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Multi-Record Workflow Details
     */
    async objectsObjectworkflowsActionsWorkflowNameGet(requestParameters: ObjectsObjectworkflowsActionsWorkflowNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsObjectworkflowsActionsWorkflowNameGetRaw(requestParameters, initOverrides);
    }

    /**
     * Initiate Multi-Record Workflow
     */
    async objectsObjectworkflowsActionsWorkflowNamePostRaw(requestParameters: ObjectsObjectworkflowsActionsWorkflowNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workflowName'] == null) {
            throw new runtime.RequiredError(
                'workflowName',
                'Required parameter "workflowName" was null or undefined when calling objectsObjectworkflowsActionsWorkflowNamePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/objectworkflows/actions/{workflow_name}`;
        urlPath = urlPath.replace(`{${"workflow_name"}}`, encodeURIComponent(String(requestParameters['workflowName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Initiate Multi-Record Workflow
     */
    async objectsObjectworkflowsActionsWorkflowNamePost(requestParameters: ObjectsObjectworkflowsActionsWorkflowNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsObjectworkflowsActionsWorkflowNamePostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Workflows
     */
    async objectsObjectworkflowsGetRaw(requestParameters: ObjectsObjectworkflowsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['objectV'] != null) {
            queryParameters['object__v'] = requestParameters['objectV'];
        }

        if (requestParameters['recordIdV'] != null) {
            queryParameters['record_id__v'] = requestParameters['recordIdV'];
        }

        if (requestParameters['participant'] != null) {
            queryParameters['participant'] = requestParameters['participant'];
        }

        if (requestParameters['statusV'] != null) {
            queryParameters['status__v'] = requestParameters['statusV'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['loc'] != null) {
            queryParameters['loc'] = requestParameters['loc'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/objectworkflows`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Workflows
     */
    async objectsObjectworkflowsGet(requestParameters: ObjectsObjectworkflowsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsObjectworkflowsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Workflow Tasks
     */
    async objectsObjectworkflowsTasksGetRaw(requestParameters: ObjectsObjectworkflowsTasksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['objectV'] != null) {
            queryParameters['object__v'] = requestParameters['objectV'];
        }

        if (requestParameters['recordIdV'] != null) {
            queryParameters['record_id__v'] = requestParameters['recordIdV'];
        }

        if (requestParameters['assigneeV'] != null) {
            queryParameters['assignee__v'] = requestParameters['assigneeV'];
        }

        if (requestParameters['statusV'] != null) {
            queryParameters['status__v'] = requestParameters['statusV'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['loc'] != null) {
            queryParameters['loc'] = requestParameters['loc'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/objectworkflows/tasks`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Workflow Tasks
     */
    async objectsObjectworkflowsTasksGet(requestParameters: ObjectsObjectworkflowsTasksGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsObjectworkflowsTasksGetRaw(requestParameters, initOverrides);
    }

    /**
     * Accept Single Record Workflow Task
     */
    async objectsObjectworkflowsTasksTaskIdActionsAcceptPostRaw(requestParameters: ObjectsObjectworkflowsTasksTaskIdActionsAcceptPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling objectsObjectworkflowsTasksTaskIdActionsAcceptPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/objectworkflows/tasks/{task_id}/actions/accept`;
        urlPath = urlPath.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Accept Single Record Workflow Task
     */
    async objectsObjectworkflowsTasksTaskIdActionsAcceptPost(requestParameters: ObjectsObjectworkflowsTasksTaskIdActionsAcceptPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsObjectworkflowsTasksTaskIdActionsAcceptPostRaw(requestParameters, initOverrides);
    }

    /**
     * Cancel Workflow Task
     */
    async objectsObjectworkflowsTasksTaskIdActionsCancelPostRaw(requestParameters: ObjectsObjectworkflowsTasksTaskIdActionsCancelPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling objectsObjectworkflowsTasksTaskIdActionsCancelPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/objectworkflows/tasks/{task_id}/actions/cancel`;
        urlPath = urlPath.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancel Workflow Task
     */
    async objectsObjectworkflowsTasksTaskIdActionsCancelPost(requestParameters: ObjectsObjectworkflowsTasksTaskIdActionsCancelPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsObjectworkflowsTasksTaskIdActionsCancelPostRaw(requestParameters, initOverrides);
    }

    /**
     * Complete Single Record Workflow Task
     */
    async objectsObjectworkflowsTasksTaskIdActionsCompletePostRaw(requestParameters: ObjectsObjectworkflowsTasksTaskIdActionsCompletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling objectsObjectworkflowsTasksTaskIdActionsCompletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/objectworkflows/tasks/{task_id}/actions/complete`;
        urlPath = urlPath.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Complete Single Record Workflow Task
     */
    async objectsObjectworkflowsTasksTaskIdActionsCompletePost(requestParameters: ObjectsObjectworkflowsTasksTaskIdActionsCompletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsObjectworkflowsTasksTaskIdActionsCompletePostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Workflow Task Actions
     */
    async objectsObjectworkflowsTasksTaskIdActionsGetRaw(requestParameters: ObjectsObjectworkflowsTasksTaskIdActionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling objectsObjectworkflowsTasksTaskIdActionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/objectworkflows/tasks/{task_id}/actions`;
        urlPath = urlPath.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Workflow Task Actions
     */
    async objectsObjectworkflowsTasksTaskIdActionsGet(requestParameters: ObjectsObjectworkflowsTasksTaskIdActionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsObjectworkflowsTasksTaskIdActionsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Accept Multi-item Workflow Task
     */
    async objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostRaw(requestParameters: ObjectsObjectworkflowsTasksTaskIdActionsMdwacceptPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/objectworkflows/tasks/{task_id}/actions/mdwaccept`;
        urlPath = urlPath.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Accept Multi-item Workflow Task
     */
    async objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(requestParameters: ObjectsObjectworkflowsTasksTaskIdActionsMdwacceptPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostRaw(requestParameters, initOverrides);
    }

    /**
     * Complete Multi-item Workflow Task
     */
    async objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostRaw(requestParameters: ObjectsObjectworkflowsTasksTaskIdActionsMdwcompletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete`;
        urlPath = urlPath.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Complete Multi-item Workflow Task
     */
    async objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(requestParameters: ObjectsObjectworkflowsTasksTaskIdActionsMdwcompletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostRaw(requestParameters, initOverrides);
    }

    /**
     * Manage Multi-Item Workflow Content
     */
    async objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostRaw(requestParameters: ObjectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent`;
        urlPath = urlPath.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manage Multi-Item Workflow Content
     */
    async objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(requestParameters: ObjectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostRaw(requestParameters, initOverrides);
    }

    /**
     * Reassign Multi-item Workflow Task
     */
    async objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostRaw(requestParameters: ObjectsObjectworkflowsTasksTaskIdActionsMdwreassignPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/objectworkflows/tasks/{task_id}/actions/mdwreassign`;
        urlPath = urlPath.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reassign Multi-item Workflow Task
     */
    async objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(requestParameters: ObjectsObjectworkflowsTasksTaskIdActionsMdwreassignPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostRaw(requestParameters, initOverrides);
    }

    /**
     * Reassign Single Record Workflow Task
     */
    async objectsObjectworkflowsTasksTaskIdActionsReassignPostRaw(requestParameters: ObjectsObjectworkflowsTasksTaskIdActionsReassignPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling objectsObjectworkflowsTasksTaskIdActionsReassignPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/objectworkflows/tasks/{task_id}/actions/reassign`;
        urlPath = urlPath.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reassign Single Record Workflow Task
     */
    async objectsObjectworkflowsTasksTaskIdActionsReassignPost(requestParameters: ObjectsObjectworkflowsTasksTaskIdActionsReassignPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsObjectworkflowsTasksTaskIdActionsReassignPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Workflow Task Action Details
     */
    async objectsObjectworkflowsTasksTaskIdActionsTaskActionGetRaw(requestParameters: ObjectsObjectworkflowsTasksTaskIdActionsTaskActionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling objectsObjectworkflowsTasksTaskIdActionsTaskActionGet().'
            );
        }

        if (requestParameters['taskAction'] == null) {
            throw new runtime.RequiredError(
                'taskAction',
                'Required parameter "taskAction" was null or undefined when calling objectsObjectworkflowsTasksTaskIdActionsTaskActionGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['loc'] != null) {
            queryParameters['loc'] = requestParameters['loc'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/objectworkflows/tasks/{task_id}/actions/{task_action}`;
        urlPath = urlPath.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId'])));
        urlPath = urlPath.replace(`{${"task_action"}}`, encodeURIComponent(String(requestParameters['taskAction'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Workflow Task Action Details
     */
    async objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(requestParameters: ObjectsObjectworkflowsTasksTaskIdActionsTaskActionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsObjectworkflowsTasksTaskIdActionsTaskActionGetRaw(requestParameters, initOverrides);
    }

    /**
     * Undo Workflow Task Acceptance
     */
    async objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostRaw(requestParameters: ObjectsObjectworkflowsTasksTaskIdActionsUndoacceptPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/objectworkflows/tasks/{task_id}/actions/undoaccept`;
        urlPath = urlPath.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Undo Workflow Task Acceptance
     */
    async objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(requestParameters: ObjectsObjectworkflowsTasksTaskIdActionsUndoacceptPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostRaw(requestParameters, initOverrides);
    }

    /**
     * Update Workflow Task Due Date
     */
    async objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostRaw(requestParameters: ObjectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/objectworkflows/tasks/{task_id}/actions/updateduedate`;
        urlPath = urlPath.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Workflow Task Due Date
     */
    async objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(requestParameters: ObjectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Workflow Task Details
     */
    async objectsObjectworkflowsTasksTaskIdGetRaw(requestParameters: ObjectsObjectworkflowsTasksTaskIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling objectsObjectworkflowsTasksTaskIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['loc'] != null) {
            queryParameters['loc'] = requestParameters['loc'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/objectworkflows/tasks/{task_id}`;
        urlPath = urlPath.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Workflow Task Details
     */
    async objectsObjectworkflowsTasksTaskIdGet(requestParameters: ObjectsObjectworkflowsTasksTaskIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsObjectworkflowsTasksTaskIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Workflow Actions
     */
    async objectsObjectworkflowsWorkflowIdActionsGetRaw(requestParameters: ObjectsObjectworkflowsWorkflowIdActionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workflowId'] == null) {
            throw new runtime.RequiredError(
                'workflowId',
                'Required parameter "workflowId" was null or undefined when calling objectsObjectworkflowsWorkflowIdActionsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['loc'] != null) {
            queryParameters['loc'] = requestParameters['loc'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/objectworkflows/{workflow_id}/actions`;
        urlPath = urlPath.replace(`{${"workflow_id"}}`, encodeURIComponent(String(requestParameters['workflowId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Workflow Actions
     */
    async objectsObjectworkflowsWorkflowIdActionsGet(requestParameters: ObjectsObjectworkflowsWorkflowIdActionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsObjectworkflowsWorkflowIdActionsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Workflow Action Details
     */
    async objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetRaw(requestParameters: ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workflowId'] == null) {
            throw new runtime.RequiredError(
                'workflowId',
                'Required parameter "workflowId" was null or undefined when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet().'
            );
        }

        if (requestParameters['workflowAction'] == null) {
            throw new runtime.RequiredError(
                'workflowAction',
                'Required parameter "workflowAction" was null or undefined when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/objectworkflows/{workflow_id}/actions/{workflow_action}`;
        urlPath = urlPath.replace(`{${"workflow_id"}}`, encodeURIComponent(String(requestParameters['workflowId'])));
        urlPath = urlPath.replace(`{${"workflow_action"}}`, encodeURIComponent(String(requestParameters['workflowAction'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Workflow Action Details
     */
    async objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(requestParameters: ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetRaw(requestParameters, initOverrides);
    }

    /**
     * Initiate Workflow Action
     */
    async objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostRaw(requestParameters: ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workflowId'] == null) {
            throw new runtime.RequiredError(
                'workflowId',
                'Required parameter "workflowId" was null or undefined when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost().'
            );
        }

        if (requestParameters['workflowAction'] == null) {
            throw new runtime.RequiredError(
                'workflowAction',
                'Required parameter "workflowAction" was null or undefined when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['documentsSys'] != null) {
            queryParameters['documents__sys'] = requestParameters['documentsSys'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/objectworkflows/{workflow_id}/actions/{workflow_action}`;
        urlPath = urlPath.replace(`{${"workflow_id"}}`, encodeURIComponent(String(requestParameters['workflowId'])));
        urlPath = urlPath.replace(`{${"workflow_action"}}`, encodeURIComponent(String(requestParameters['workflowAction'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Initiate Workflow Action
     */
    async objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(requestParameters: ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Workflow Details
     */
    async objectsObjectworkflowsWorkflowIdGetRaw(requestParameters: ObjectsObjectworkflowsWorkflowIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workflowId'] == null) {
            throw new runtime.RequiredError(
                'workflowId',
                'Required parameter "workflowId" was null or undefined when calling objectsObjectworkflowsWorkflowIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['loc'] != null) {
            queryParameters['loc'] = requestParameters['loc'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/objectworkflows/{workflow_id}`;
        urlPath = urlPath.replace(`{${"workflow_id"}}`, encodeURIComponent(String(requestParameters['workflowId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Workflow Details
     */
    async objectsObjectworkflowsWorkflowIdGet(requestParameters: ObjectsObjectworkflowsWorkflowIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsObjectworkflowsWorkflowIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve All Picklists
     */
    async objectsPicklistsGetRaw(requestParameters: ObjectsPicklistsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/picklists`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve All Picklists
     */
    async objectsPicklistsGet(requestParameters: ObjectsPicklistsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsPicklistsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Picklist Values
     */
    async objectsPicklistsPicklistNameGetRaw(requestParameters: ObjectsPicklistsPicklistNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['picklistName'] == null) {
            throw new runtime.RequiredError(
                'picklistName',
                'Required parameter "picklistName" was null or undefined when calling objectsPicklistsPicklistNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/picklists/{picklist_name}`;
        urlPath = urlPath.replace(`{${"picklist_name"}}`, encodeURIComponent(String(requestParameters['picklistName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Picklist Values
     */
    async objectsPicklistsPicklistNameGet(requestParameters: ObjectsPicklistsPicklistNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsPicklistsPicklistNameGetRaw(requestParameters, initOverrides);
    }

    /**
     * Inactivate Picklist Value
     */
    async objectsPicklistsPicklistNamePicklistValueNameDeleteRaw(requestParameters: ObjectsPicklistsPicklistNamePicklistValueNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['picklistName'] == null) {
            throw new runtime.RequiredError(
                'picklistName',
                'Required parameter "picklistName" was null or undefined when calling objectsPicklistsPicklistNamePicklistValueNameDelete().'
            );
        }

        if (requestParameters['picklistValueName'] == null) {
            throw new runtime.RequiredError(
                'picklistValueName',
                'Required parameter "picklistValueName" was null or undefined when calling objectsPicklistsPicklistNamePicklistValueNameDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/picklists/{picklist_name}/{picklist_value_name}`;
        urlPath = urlPath.replace(`{${"picklist_name"}}`, encodeURIComponent(String(requestParameters['picklistName'])));
        urlPath = urlPath.replace(`{${"picklist_value_name"}}`, encodeURIComponent(String(requestParameters['picklistValueName'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Inactivate Picklist Value
     */
    async objectsPicklistsPicklistNamePicklistValueNameDelete(requestParameters: ObjectsPicklistsPicklistNamePicklistValueNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsPicklistsPicklistNamePicklistValueNameDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Update Picklist Value
     */
    async objectsPicklistsPicklistNamePicklistValueNamePutRaw(requestParameters: ObjectsPicklistsPicklistNamePicklistValueNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['picklistName'] == null) {
            throw new runtime.RequiredError(
                'picklistName',
                'Required parameter "picklistName" was null or undefined when calling objectsPicklistsPicklistNamePicklistValueNamePut().'
            );
        }

        if (requestParameters['picklistValueName'] == null) {
            throw new runtime.RequiredError(
                'picklistValueName',
                'Required parameter "picklistValueName" was null or undefined when calling objectsPicklistsPicklistNamePicklistValueNamePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/picklists/{picklist_name}/{picklist_value_name}`;
        urlPath = urlPath.replace(`{${"picklist_name"}}`, encodeURIComponent(String(requestParameters['picklistName'])));
        urlPath = urlPath.replace(`{${"picklist_value_name"}}`, encodeURIComponent(String(requestParameters['picklistValueName'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Picklist Value
     */
    async objectsPicklistsPicklistNamePicklistValueNamePut(requestParameters: ObjectsPicklistsPicklistNamePicklistValueNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsPicklistsPicklistNamePicklistValueNamePutRaw(requestParameters, initOverrides);
    }

    /**
     * Create Picklist Values
     */
    async objectsPicklistsPicklistNamePostRaw(requestParameters: ObjectsPicklistsPicklistNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['picklistName'] == null) {
            throw new runtime.RequiredError(
                'picklistName',
                'Required parameter "picklistName" was null or undefined when calling objectsPicklistsPicklistNamePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/picklists/{picklist_name}`;
        urlPath = urlPath.replace(`{${"picklist_name"}}`, encodeURIComponent(String(requestParameters['picklistName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Picklist Values
     */
    async objectsPicklistsPicklistNamePost(requestParameters: ObjectsPicklistsPicklistNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsPicklistsPicklistNamePostRaw(requestParameters, initOverrides);
    }

    /**
     * Update Picklist Value Label
     */
    async objectsPicklistsPicklistNamePutRaw(requestParameters: ObjectsPicklistsPicklistNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['picklistName'] == null) {
            throw new runtime.RequiredError(
                'picklistName',
                'Required parameter "picklistName" was null or undefined when calling objectsPicklistsPicklistNamePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/picklists/{picklist_name}`;
        urlPath = urlPath.replace(`{${"picklist_name"}}`, encodeURIComponent(String(requestParameters['picklistName'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Picklist Value Label
     */
    async objectsPicklistsPicklistNamePut(requestParameters: ObjectsPicklistsPicklistNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsPicklistsPicklistNamePutRaw(requestParameters, initOverrides);
    }

    /**
     * Build Production Vault
     */
    async objectsSandboxActionsBuildproductionPostRaw(requestParameters: ObjectsSandboxActionsBuildproductionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/sandbox/actions/buildproduction`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Build Production Vault
     */
    async objectsSandboxActionsBuildproductionPost(requestParameters: ObjectsSandboxActionsBuildproductionPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsSandboxActionsBuildproductionPostRaw(requestParameters, initOverrides);
    }

    /**
     * Promote to Production
     */
    async objectsSandboxActionsPromoteproductionPostRaw(requestParameters: ObjectsSandboxActionsPromoteproductionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/sandbox/actions/promoteproduction`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Promote to Production
     */
    async objectsSandboxActionsPromoteproductionPost(requestParameters: ObjectsSandboxActionsPromoteproductionPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsSandboxActionsPromoteproductionPostRaw(requestParameters, initOverrides);
    }

    /**
     * Recheck Sandbox Usage Limit
     */
    async objectsSandboxActionsRecheckusagePostRaw(requestParameters: ObjectsSandboxActionsRecheckusagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/sandbox/actions/recheckusage`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Recheck Sandbox Usage Limit
     */
    async objectsSandboxActionsRecheckusagePost(requestParameters: ObjectsSandboxActionsRecheckusagePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsSandboxActionsRecheckusagePostRaw(requestParameters, initOverrides);
    }

    /**
     * Change Sandbox Size
     */
    async objectsSandboxBatchChangesizePostRaw(requestParameters: ObjectsSandboxBatchChangesizePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/sandbox/batch/changesize`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Change Sandbox Size
     */
    async objectsSandboxBatchChangesizePost(requestParameters: ObjectsSandboxBatchChangesizePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsSandboxBatchChangesizePostRaw(requestParameters, initOverrides);
    }

    /**
     * Set Sandbox Entitlements
     */
    async objectsSandboxEntitlementsSetPostRaw(requestParameters: ObjectsSandboxEntitlementsSetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/sandbox/entitlements/set`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set Sandbox Entitlements
     */
    async objectsSandboxEntitlementsSetPost(requestParameters: ObjectsSandboxEntitlementsSetPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsSandboxEntitlementsSetPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Sandboxes
     */
    async objectsSandboxGetRaw(requestParameters: ObjectsSandboxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/sandbox`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Sandboxes
     */
    async objectsSandboxGet(requestParameters: ObjectsSandboxGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsSandboxGetRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Sandbox
     */
    async objectsSandboxNameDeleteRaw(requestParameters: ObjectsSandboxNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling objectsSandboxNameDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/sandbox/{name}`;
        urlPath = urlPath.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Sandbox
     */
    async objectsSandboxNameDelete(requestParameters: ObjectsSandboxNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsSandboxNameDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Create or Refresh Sandbox
     */
    async objectsSandboxPostRaw(requestParameters: ObjectsSandboxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/sandbox`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create or Refresh Sandbox
     */
    async objectsSandboxPost(requestParameters: ObjectsSandboxPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsSandboxPostRaw(requestParameters, initOverrides);
    }

    /**
     * Update Sandbox Snapshot
     */
    async objectsSandboxSnapshotApiNameActionsUpdatePostRaw(requestParameters: ObjectsSandboxSnapshotApiNameActionsUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['apiName'] == null) {
            throw new runtime.RequiredError(
                'apiName',
                'Required parameter "apiName" was null or undefined when calling objectsSandboxSnapshotApiNameActionsUpdatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/sandbox/snapshot/{api_name}/actions/update`;
        urlPath = urlPath.replace(`{${"api_name"}}`, encodeURIComponent(String(requestParameters['apiName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Sandbox Snapshot
     */
    async objectsSandboxSnapshotApiNameActionsUpdatePost(requestParameters: ObjectsSandboxSnapshotApiNameActionsUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsSandboxSnapshotApiNameActionsUpdatePostRaw(requestParameters, initOverrides);
    }

    /**
     * Upgrade Sandbox Snapshot
     */
    async objectsSandboxSnapshotApiNameActionsUpgradePostRaw(requestParameters: ObjectsSandboxSnapshotApiNameActionsUpgradePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['apiName'] == null) {
            throw new runtime.RequiredError(
                'apiName',
                'Required parameter "apiName" was null or undefined when calling objectsSandboxSnapshotApiNameActionsUpgradePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/sandbox/snapshot/{api_name}/actions/upgrade`;
        urlPath = urlPath.replace(`{${"api_name"}}`, encodeURIComponent(String(requestParameters['apiName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Upgrade Sandbox Snapshot
     */
    async objectsSandboxSnapshotApiNameActionsUpgradePost(requestParameters: ObjectsSandboxSnapshotApiNameActionsUpgradePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsSandboxSnapshotApiNameActionsUpgradePostRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Sandbox Snapshot
     */
    async objectsSandboxSnapshotApiNameDeleteRaw(requestParameters: ObjectsSandboxSnapshotApiNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['apiName'] == null) {
            throw new runtime.RequiredError(
                'apiName',
                'Required parameter "apiName" was null or undefined when calling objectsSandboxSnapshotApiNameDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/sandbox/snapshot/{api_name}`;
        urlPath = urlPath.replace(`{${"api_name"}}`, encodeURIComponent(String(requestParameters['apiName'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Sandbox Snapshot
     */
    async objectsSandboxSnapshotApiNameDelete(requestParameters: ObjectsSandboxSnapshotApiNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsSandboxSnapshotApiNameDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Sandbox Snapshots
     */
    async objectsSandboxSnapshotGetRaw(requestParameters: ObjectsSandboxSnapshotGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/sandbox/snapshot`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Sandbox Snapshots
     */
    async objectsSandboxSnapshotGet(requestParameters: ObjectsSandboxSnapshotGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsSandboxSnapshotGetRaw(requestParameters, initOverrides);
    }

    /**
     * Create Sandbox Snapshot
     */
    async objectsSandboxSnapshotPostRaw(requestParameters: ObjectsSandboxSnapshotPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/sandbox/snapshot`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Sandbox Snapshot
     */
    async objectsSandboxSnapshotPost(requestParameters: ObjectsSandboxSnapshotPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsSandboxSnapshotPostRaw(requestParameters, initOverrides);
    }

    /**
     * Refresh Sandbox from Snapshot
     */
    async objectsSandboxVaultIdActionsRefreshPostRaw(requestParameters: ObjectsSandboxVaultIdActionsRefreshPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['vaultId'] == null) {
            throw new runtime.RequiredError(
                'vaultId',
                'Required parameter "vaultId" was null or undefined when calling objectsSandboxVaultIdActionsRefreshPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/sandbox/{vault_id}/actions/refresh`;
        urlPath = urlPath.replace(`{${"vault_id"}}`, encodeURIComponent(String(requestParameters['vaultId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Refresh Sandbox from Snapshot
     */
    async objectsSandboxVaultIdActionsRefreshPost(requestParameters: ObjectsSandboxVaultIdActionsRefreshPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsSandboxVaultIdActionsRefreshPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Sandbox Details by ID
     */
    async objectsSandboxVaultIdGetRaw(requestParameters: ObjectsSandboxVaultIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['vaultId'] == null) {
            throw new runtime.RequiredError(
                'vaultId',
                'Required parameter "vaultId" was null or undefined when calling objectsSandboxVaultIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/sandbox/{vault_id}`;
        urlPath = urlPath.replace(`{${"vault_id"}}`, encodeURIComponent(String(requestParameters['vaultId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Sandbox Details by ID
     */
    async objectsSandboxVaultIdGet(requestParameters: ObjectsSandboxVaultIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsSandboxVaultIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve All Security Policies
     */
    async objectsSecuritypoliciesGetRaw(requestParameters: ObjectsSecuritypoliciesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/securitypolicies`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve All Security Policies
     */
    async objectsSecuritypoliciesGet(requestParameters: ObjectsSecuritypoliciesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsSecuritypoliciesGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Security Policy
     */
    async objectsSecuritypoliciesSecurityPolicyNameGetRaw(requestParameters: ObjectsSecuritypoliciesSecurityPolicyNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['securityPolicyName'] == null) {
            throw new runtime.RequiredError(
                'securityPolicyName',
                'Required parameter "securityPolicyName" was null or undefined when calling objectsSecuritypoliciesSecurityPolicyNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/securitypolicies/{security_policy_name}`;
        urlPath = urlPath.replace(`{${"security_policy_name"}}`, encodeURIComponent(String(requestParameters['securityPolicyName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Security Policy
     */
    async objectsSecuritypoliciesSecurityPolicyNameGet(requestParameters: ObjectsSecuritypoliciesSecurityPolicyNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsSecuritypoliciesSecurityPolicyNameGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve All Users
     */
    async objectsUsersGetRaw(requestParameters: ObjectsUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['vaults'] != null) {
            queryParameters['vaults'] = requestParameters['vaults'];
        }

        if (requestParameters['excludeVaultMembership'] != null) {
            queryParameters['exclude_vault_membership'] = requestParameters['excludeVaultMembership'];
        }

        if (requestParameters['excludeAppLicensing'] != null) {
            queryParameters['exclude_app_licensing'] = requestParameters['excludeAppLicensing'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/users/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve All Users
     */
    async objectsUsersGet(requestParameters: ObjectsUsersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsUsersGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve User
     */
    async objectsUsersIdGetRaw(requestParameters: ObjectsUsersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling objectsUsersIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['excludeVaultMembership'] != null) {
            queryParameters['exclude_vault_membership'] = requestParameters['excludeVaultMembership'];
        }

        if (requestParameters['excludeAppLicensing'] != null) {
            queryParameters['exclude_app_licensing'] = requestParameters['excludeAppLicensing'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/users/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve User
     */
    async objectsUsersIdGet(requestParameters: ObjectsUsersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsUsersIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve User Permissions
     */
    async objectsUsersIdPermissionsGetRaw(requestParameters: ObjectsUsersIdPermissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling objectsUsersIdPermissionsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/users/{id}/permissions`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve User Permissions
     */
    async objectsUsersIdPermissionsGet(requestParameters: ObjectsUsersIdPermissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsUsersIdPermissionsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Update Single User
     */
    async objectsUsersIdPutRaw(requestParameters: ObjectsUsersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling objectsUsersIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/users/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Single User
     */
    async objectsUsersIdPut(requestParameters: ObjectsUsersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsUsersIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Validate Session User
     */
    async objectsUsersMeGetRaw(requestParameters: ObjectsUsersMeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['excludeVaultMembership'] != null) {
            queryParameters['exclude_vault_membership'] = requestParameters['excludeVaultMembership'];
        }

        if (requestParameters['excludeAppLicensing'] != null) {
            queryParameters['exclude_app_licensing'] = requestParameters['excludeAppLicensing'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/users/me`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Validate Session User
     */
    async objectsUsersMeGet(requestParameters: ObjectsUsersMeGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsUsersMeGetRaw(requestParameters, initOverrides);
    }

    /**
     * Change My Password
     */
    async objectsUsersMePasswordPostRaw(requestParameters: ObjectsUsersMePasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/users/me/password`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Change My Password
     */
    async objectsUsersMePasswordPost(requestParameters: ObjectsUsersMePasswordPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsUsersMePasswordPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve My User Permissions
     */
    async objectsUsersMePermissionsGetRaw(requestParameters: ObjectsUsersMePermissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/users/me/permissions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve My User Permissions
     */
    async objectsUsersMePermissionsGet(requestParameters: ObjectsUsersMePermissionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsUsersMePermissionsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Update My User
     */
    async objectsUsersMePutRaw(requestParameters: ObjectsUsersMePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/users/me`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update My User
     */
    async objectsUsersMePut(requestParameters: ObjectsUsersMePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsUsersMePutRaw(requestParameters, initOverrides);
    }

    /**
     * Create Single User
     */
    async objectsUsersPostRaw(requestParameters: ObjectsUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/users`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Single User
     */
    async objectsUsersPost(requestParameters: ObjectsUsersPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsUsersPostRaw(requestParameters, initOverrides);
    }

    /**
     * Update Multiple Users
     */
    async objectsUsersPutRaw(requestParameters: ObjectsUsersPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/users`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Multiple Users
     */
    async objectsUsersPut(requestParameters: ObjectsUsersPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsUsersPutRaw(requestParameters, initOverrides);
    }

    /**
     * Disable User
     */
    async objectsUsersUserIdDeleteRaw(requestParameters: ObjectsUsersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling objectsUsersUserIdDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['domain'] != null) {
            queryParameters['domain'] = requestParameters['domain'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/users/{user_id}`;
        urlPath = urlPath.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disable User
     */
    async objectsUsersUserIdDelete(requestParameters: ObjectsUsersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsUsersUserIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Update Vault Membership
     */
    async objectsUsersUserIdVaultMembershipVaultIdPutRaw(requestParameters: ObjectsUsersUserIdVaultMembershipVaultIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling objectsUsersUserIdVaultMembershipVaultIdPut().'
            );
        }

        if (requestParameters['vaultId'] == null) {
            throw new runtime.RequiredError(
                'vaultId',
                'Required parameter "vaultId" was null or undefined when calling objectsUsersUserIdVaultMembershipVaultIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/users/{user_id}/vault_membership/{vault_id}`;
        urlPath = urlPath.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId'])));
        urlPath = urlPath.replace(`{${"vault_id"}}`, encodeURIComponent(String(requestParameters['vaultId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Vault Membership
     */
    async objectsUsersUserIdVaultMembershipVaultIdPut(requestParameters: ObjectsUsersUserIdVaultMembershipVaultIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsUsersUserIdVaultMembershipVaultIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Vault Compare
     */
    async objectsVaultActionsComparePostRaw(requestParameters: ObjectsVaultActionsComparePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/vault/actions/compare`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Vault Compare
     */
    async objectsVaultActionsComparePost(requestParameters: ObjectsVaultActionsComparePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsVaultActionsComparePostRaw(requestParameters, initOverrides);
    }

    /**
     * Vault Configuration Report
     */
    async objectsVaultActionsConfigreportPostRaw(requestParameters: ObjectsVaultActionsConfigreportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/objects/vault/actions/configreport`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Vault Configuration Report
     */
    async objectsVaultActionsConfigreportPost(requestParameters: ObjectsVaultActionsConfigreportPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectsVaultActionsConfigreportPostRaw(requestParameters, initOverrides);
    }

    /**
     * Component Definition Query
     */
    async queryComponentsPostRaw(requestParameters: QueryComponentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/query/components`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Component Definition Query
     */
    async queryComponentsPost(requestParameters: QueryComponentsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.queryComponentsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Next Page URL
     */
    async queryNextPagePostRaw(requestParameters: QueryNextPagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['nextPage'] == null) {
            throw new runtime.RequiredError(
                'nextPage',
                'Required parameter "nextPage" was null or undefined when calling queryNextPagePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIDescribeQuery'] != null) {
            headerParameters['X-VaultAPI-DescribeQuery'] = String(requestParameters['xVaultAPIDescribeQuery']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/query/{next_page}`;
        urlPath = urlPath.replace(`{${"next_page"}}`, encodeURIComponent(String(requestParameters['nextPage'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Next Page URL
     */
    async queryNextPagePost(requestParameters: QueryNextPagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.queryNextPagePostRaw(requestParameters, initOverrides);
    }

    /**
     * Submitting a Query
     */
    async queryPostRaw(requestParameters: QueryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIDescribeQuery'] != null) {
            headerParameters['X-VaultAPI-DescribeQuery'] = String(requestParameters['xVaultAPIDescribeQuery']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/query`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Submitting a Query
     */
    async queryPost(requestParameters: QueryPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.queryPostRaw(requestParameters, initOverrides);
    }

    /**
     * Previous Page URL
     */
    async queryPreviousPagePostRaw(requestParameters: QueryPreviousPagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['previousPage'] == null) {
            throw new runtime.RequiredError(
                'previousPage',
                'Required parameter "previousPage" was null or undefined when calling queryPreviousPagePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIDescribeQuery'] != null) {
            headerParameters['X-VaultAPI-DescribeQuery'] = String(requestParameters['xVaultAPIDescribeQuery']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/query/{previous_page}`;
        urlPath = urlPath.replace(`{${"previous_page"}}`, encodeURIComponent(String(requestParameters['previousPage'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Previous Page URL
     */
    async queryPreviousPagePost(requestParameters: QueryPreviousPagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.queryPreviousPagePostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Current User with SCIM
     */
    async scimV2MeGetRaw(requestParameters: ScimV2MeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['attributes'] != null) {
            queryParameters['attributes'] = requestParameters['attributes'];
        }

        if (requestParameters['excludedAttributes'] != null) {
            queryParameters['excludedAttributes'] = requestParameters['excludedAttributes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/scim/v2/Me`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Current User with SCIM
     */
    async scimV2MeGet(requestParameters: ScimV2MeGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scimV2MeGetRaw(requestParameters, initOverrides);
    }

    /**
     * Update Current User with SCIM
     */
    async scimV2MePutRaw(requestParameters: ScimV2MePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['attributes'] != null) {
            queryParameters['attributes'] = requestParameters['attributes'];
        }

        if (requestParameters['excludedAttributes'] != null) {
            queryParameters['excludedAttributes'] = requestParameters['excludedAttributes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/scim/v2/Me`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Current User with SCIM
     */
    async scimV2MePut(requestParameters: ScimV2MePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scimV2MePutRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve All SCIM Resource Types
     */
    async scimV2ResourceTypesGetRaw(requestParameters: ScimV2ResourceTypesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/scim/v2/ResourceTypes`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve All SCIM Resource Types
     */
    async scimV2ResourceTypesGet(requestParameters: ScimV2ResourceTypesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scimV2ResourceTypesGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Single SCIM Resource Type
     */
    async scimV2ResourceTypesTypeGetRaw(requestParameters: ScimV2ResourceTypesTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling scimV2ResourceTypesTypeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/scim/v2/ResourceTypes/{type}`;
        urlPath = urlPath.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Single SCIM Resource Type
     */
    async scimV2ResourceTypesTypeGet(requestParameters: ScimV2ResourceTypesTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scimV2ResourceTypesTypeGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve All SCIM Schema Information
     */
    async scimV2SchemasGetRaw(requestParameters: ScimV2SchemasGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/scim/v2/Schemas`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve All SCIM Schema Information
     */
    async scimV2SchemasGet(requestParameters: ScimV2SchemasGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scimV2SchemasGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Single SCIM Schema Information
     */
    async scimV2SchemasIdGetRaw(requestParameters: ScimV2SchemasIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling scimV2SchemasIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/scim/v2/Schemas/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Single SCIM Schema Information
     */
    async scimV2SchemasIdGet(requestParameters: ScimV2SchemasIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scimV2SchemasIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve SCIM Provider
     */
    async scimV2ServiceProviderConfigGetRaw(requestParameters: ScimV2ServiceProviderConfigGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/scim/v2/ServiceProviderConfig`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve SCIM Provider
     */
    async scimV2ServiceProviderConfigGet(requestParameters: ScimV2ServiceProviderConfigGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scimV2ServiceProviderConfigGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve SCIM Resources
     */
    async scimV2TypeGetRaw(requestParameters: ScimV2TypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling scimV2TypeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['attributes'] != null) {
            queryParameters['attributes'] = requestParameters['attributes'];
        }

        if (requestParameters['excludedAttributes'] != null) {
            queryParameters['excludedAttributes'] = requestParameters['excludedAttributes'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['startIndex'] != null) {
            queryParameters['startIndex'] = requestParameters['startIndex'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/scim/v2/{type}`;
        urlPath = urlPath.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve SCIM Resources
     */
    async scimV2TypeGet(requestParameters: ScimV2TypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scimV2TypeGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Single SCIM Resource
     */
    async scimV2TypeIdGetRaw(requestParameters: ScimV2TypeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling scimV2TypeIdGet().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling scimV2TypeIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['attributes'] != null) {
            queryParameters['attributes'] = requestParameters['attributes'];
        }

        if (requestParameters['excludedAttributes'] != null) {
            queryParameters['excludedAttributes'] = requestParameters['excludedAttributes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/scim/v2/{type}/{id}`;
        urlPath = urlPath.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Single SCIM Resource
     */
    async scimV2TypeIdGet(requestParameters: ScimV2TypeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scimV2TypeIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve All Users with SCIM
     */
    async scimV2UsersGetRaw(requestParameters: ScimV2UsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['attributes'] != null) {
            queryParameters['attributes'] = requestParameters['attributes'];
        }

        if (requestParameters['excludedAttributes'] != null) {
            queryParameters['excludedAttributes'] = requestParameters['excludedAttributes'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['startIndex'] != null) {
            queryParameters['startIndex'] = requestParameters['startIndex'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/scim/v2/Users`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve All Users with SCIM
     */
    async scimV2UsersGet(requestParameters: ScimV2UsersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scimV2UsersGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Single User with SCIM
     */
    async scimV2UsersIdGetRaw(requestParameters: ScimV2UsersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling scimV2UsersIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['attributes'] != null) {
            queryParameters['attributes'] = requestParameters['attributes'];
        }

        if (requestParameters['excludedAttributes'] != null) {
            queryParameters['excludedAttributes'] = requestParameters['excludedAttributes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/scim/v2/Users/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Single User with SCIM
     */
    async scimV2UsersIdGet(requestParameters: ScimV2UsersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scimV2UsersIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Update User with SCIM
     */
    async scimV2UsersIdPutRaw(requestParameters: ScimV2UsersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling scimV2UsersIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/scim/v2/Users/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update User with SCIM
     */
    async scimV2UsersIdPut(requestParameters: ScimV2UsersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scimV2UsersIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Create User with SCIM
     */
    async scimV2UsersPostRaw(requestParameters: ScimV2UsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/scim/v2/Users`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create User with SCIM
     */
    async scimV2UsersPost(requestParameters: ScimV2UsersPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.scimV2UsersPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Signing Certificate
     */
    async servicesCertificateCertIdGetRaw(requestParameters: ServicesCertificateCertIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['certId'] == null) {
            throw new runtime.RequiredError(
                'certId',
                'Required parameter "certId" was null or undefined when calling servicesCertificateCertIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/certificate/{cert_id}`;
        urlPath = urlPath.replace(`{${"cert_id"}}`, encodeURIComponent(String(requestParameters['certId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Signing Certificate
     */
    async servicesCertificateCertIdGet(requestParameters: ServicesCertificateCertIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesCertificateCertIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Disable Configuration Mode
     */
    async servicesConfigurationModeActionsDisablePostRaw(requestParameters: ServicesConfigurationModeActionsDisablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/configuration_mode/actions/disable`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disable Configuration Mode
     */
    async servicesConfigurationModeActionsDisablePost(requestParameters: ServicesConfigurationModeActionsDisablePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesConfigurationModeActionsDisablePostRaw(requestParameters, initOverrides);
    }

    /**
     * Enable Configuration Mode
     */
    async servicesConfigurationModeActionsEnablePostRaw(requestParameters: ServicesConfigurationModeActionsEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/configuration_mode/actions/enable`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Enable Configuration Mode
     */
    async servicesConfigurationModeActionsEnablePost(requestParameters: ServicesConfigurationModeActionsEnablePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesConfigurationModeActionsEnablePostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Available Direct Data Files
     */
    async servicesDirectdataFilesGetRaw(requestParameters: ServicesDirectdataFilesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['extractType'] != null) {
            queryParameters['extract_type'] = requestParameters['extractType'];
        }

        if (requestParameters['startTime'] != null) {
            queryParameters['start_time'] = requestParameters['startTime'];
        }

        if (requestParameters['stopTime'] != null) {
            queryParameters['stop_time'] = requestParameters['stopTime'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/directdata/files`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Available Direct Data Files
     */
    async servicesDirectdataFilesGet(requestParameters: ServicesDirectdataFilesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesDirectdataFilesGetRaw(requestParameters, initOverrides);
    }

    /**
     * Download Direct Data File
     */
    async servicesDirectdataFilesNameGetRaw(requestParameters: ServicesDirectdataFilesNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling servicesDirectdataFilesNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/directdata/files/{name}`;
        urlPath = urlPath.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download Direct Data File
     */
    async servicesDirectdataFilesNameGet(requestParameters: ServicesDirectdataFilesNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesDirectdataFilesNameGetRaw(requestParameters, initOverrides);
    }

    /**
     * Download Item Content
     */
    async servicesFileStagingItemsContentItemGetRaw(requestParameters: ServicesFileStagingItemsContentItemGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['item'] == null) {
            throw new runtime.RequiredError(
                'item',
                'Required parameter "item" was null or undefined when calling servicesFileStagingItemsContentItemGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['range'] != null) {
            headerParameters['Range'] = String(requestParameters['range']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/file_staging/items/content/{item}`;
        urlPath = urlPath.replace(`{${"item"}}`, encodeURIComponent(String(requestParameters['item'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download Item Content
     */
    async servicesFileStagingItemsContentItemGet(requestParameters: ServicesFileStagingItemsContentItemGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesFileStagingItemsContentItemGetRaw(requestParameters, initOverrides);
    }

    /**
     * Delete File or Folder
     */
    async servicesFileStagingItemsItemDeleteRaw(requestParameters: ServicesFileStagingItemsItemDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['item'] == null) {
            throw new runtime.RequiredError(
                'item',
                'Required parameter "item" was null or undefined when calling servicesFileStagingItemsItemDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['recursive'] != null) {
            queryParameters['recursive'] = requestParameters['recursive'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/file_staging/items/{item}`;
        urlPath = urlPath.replace(`{${"item"}}`, encodeURIComponent(String(requestParameters['item'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete File or Folder
     */
    async servicesFileStagingItemsItemDelete(requestParameters: ServicesFileStagingItemsItemDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesFileStagingItemsItemDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * List Items at a Path
     */
    async servicesFileStagingItemsItemGetRaw(requestParameters: ServicesFileStagingItemsItemGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['item'] == null) {
            throw new runtime.RequiredError(
                'item',
                'Required parameter "item" was null or undefined when calling servicesFileStagingItemsItemGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['recursive'] != null) {
            queryParameters['recursive'] = requestParameters['recursive'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['formatResult'] != null) {
            queryParameters['format_result'] = requestParameters['formatResult'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/file_staging/items/{item}`;
        urlPath = urlPath.replace(`{${"item"}}`, encodeURIComponent(String(requestParameters['item'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * List Items at a Path
     */
    async servicesFileStagingItemsItemGet(requestParameters: ServicesFileStagingItemsItemGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesFileStagingItemsItemGetRaw(requestParameters, initOverrides);
    }

    /**
     * Update Folder or File
     */
    async servicesFileStagingItemsItemPutRaw(requestParameters: ServicesFileStagingItemsItemPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['item'] == null) {
            throw new runtime.RequiredError(
                'item',
                'Required parameter "item" was null or undefined when calling servicesFileStagingItemsItemPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/file_staging/items/{item}`;
        urlPath = urlPath.replace(`{${"item"}}`, encodeURIComponent(String(requestParameters['item'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Folder or File
     */
    async servicesFileStagingItemsItemPut(requestParameters: ServicesFileStagingItemsItemPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesFileStagingItemsItemPutRaw(requestParameters, initOverrides);
    }

    /**
     * Create Folder or File
     */
    async servicesFileStagingItemsPostRaw(requestParameters: ServicesFileStagingItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentMD5'] != null) {
            headerParameters['Content-MD5'] = String(requestParameters['contentMD5']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/file_staging/items`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Folder or File
     */
    async servicesFileStagingItemsPost(requestParameters: ServicesFileStagingItemsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesFileStagingItemsPostRaw(requestParameters, initOverrides);
    }

    /**
     * List Upload Sessions
     */
    async servicesFileStagingUploadGetRaw(requestParameters: ServicesFileStagingUploadGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/file_staging/upload/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * List Upload Sessions
     */
    async servicesFileStagingUploadGet(requestParameters: ServicesFileStagingUploadGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesFileStagingUploadGetRaw(requestParameters, initOverrides);
    }

    /**
     * Create Resumable Upload Session
     */
    async servicesFileStagingUploadPostRaw(requestParameters: ServicesFileStagingUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/file_staging/upload`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Resumable Upload Session
     */
    async servicesFileStagingUploadPost(requestParameters: ServicesFileStagingUploadPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesFileStagingUploadPostRaw(requestParameters, initOverrides);
    }

    /**
     * Abort Upload Session
     */
    async servicesFileStagingUploadUploadSessionIdDeleteRaw(requestParameters: ServicesFileStagingUploadUploadSessionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['uploadSessionId'] == null) {
            throw new runtime.RequiredError(
                'uploadSessionId',
                'Required parameter "uploadSessionId" was null or undefined when calling servicesFileStagingUploadUploadSessionIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/file_staging/upload/{upload_session_id}`;
        urlPath = urlPath.replace(`{${"upload_session_id"}}`, encodeURIComponent(String(requestParameters['uploadSessionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Abort Upload Session
     */
    async servicesFileStagingUploadUploadSessionIdDelete(requestParameters: ServicesFileStagingUploadUploadSessionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesFileStagingUploadUploadSessionIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get Upload Session Details
     */
    async servicesFileStagingUploadUploadSessionIdGetRaw(requestParameters: ServicesFileStagingUploadUploadSessionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['uploadSessionId'] == null) {
            throw new runtime.RequiredError(
                'uploadSessionId',
                'Required parameter "uploadSessionId" was null or undefined when calling servicesFileStagingUploadUploadSessionIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/file_staging/upload/{upload_session_id}`;
        urlPath = urlPath.replace(`{${"upload_session_id"}}`, encodeURIComponent(String(requestParameters['uploadSessionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get Upload Session Details
     */
    async servicesFileStagingUploadUploadSessionIdGet(requestParameters: ServicesFileStagingUploadUploadSessionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesFileStagingUploadUploadSessionIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * List File Parts Uploaded to Session
     */
    async servicesFileStagingUploadUploadSessionIdPartsGetRaw(requestParameters: ServicesFileStagingUploadUploadSessionIdPartsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['uploadSessionId'] == null) {
            throw new runtime.RequiredError(
                'uploadSessionId',
                'Required parameter "uploadSessionId" was null or undefined when calling servicesFileStagingUploadUploadSessionIdPartsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/file_staging/upload/{upload_session_id}/parts`;
        urlPath = urlPath.replace(`{${"upload_session_id"}}`, encodeURIComponent(String(requestParameters['uploadSessionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * List File Parts Uploaded to Session
     */
    async servicesFileStagingUploadUploadSessionIdPartsGet(requestParameters: ServicesFileStagingUploadUploadSessionIdPartsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesFileStagingUploadUploadSessionIdPartsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Commit Upload Session
     */
    async servicesFileStagingUploadUploadSessionIdPostRaw(requestParameters: ServicesFileStagingUploadUploadSessionIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['uploadSessionId'] == null) {
            throw new runtime.RequiredError(
                'uploadSessionId',
                'Required parameter "uploadSessionId" was null or undefined when calling servicesFileStagingUploadUploadSessionIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/file_staging/upload/{upload_session_id}`;
        urlPath = urlPath.replace(`{${"upload_session_id"}}`, encodeURIComponent(String(requestParameters['uploadSessionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Commit Upload Session
     */
    async servicesFileStagingUploadUploadSessionIdPost(requestParameters: ServicesFileStagingUploadUploadSessionIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesFileStagingUploadUploadSessionIdPostRaw(requestParameters, initOverrides);
    }

    /**
     * Upload to a Session
     */
    async servicesFileStagingUploadUploadSessionIdPutRaw(requestParameters: ServicesFileStagingUploadUploadSessionIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['uploadSessionId'] == null) {
            throw new runtime.RequiredError(
                'uploadSessionId',
                'Required parameter "uploadSessionId" was null or undefined when calling servicesFileStagingUploadUploadSessionIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIFilePartNumber'] != null) {
            headerParameters['X-VaultAPI-FilePartNumber'] = String(requestParameters['xVaultAPIFilePartNumber']);
        }

        if (requestParameters['contentMD5'] != null) {
            headerParameters['Content-MD5'] = String(requestParameters['contentMD5']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/file_staging/upload/{upload_session_id}`;
        urlPath = urlPath.replace(`{${"upload_session_id"}}`, encodeURIComponent(String(requestParameters['uploadSessionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Upload to a Session
     */
    async servicesFileStagingUploadUploadSessionIdPut(requestParameters: ServicesFileStagingUploadUploadSessionIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesFileStagingUploadUploadSessionIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Job Histories
     */
    async servicesJobsHistoriesGetRaw(requestParameters: ServicesJobsHistoriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = requestParameters['endDate'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/jobs/histories`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Job Histories
     */
    async servicesJobsHistoriesGet(requestParameters: ServicesJobsHistoriesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesJobsHistoriesGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Import Bulk Translation File Job Errors
     */
    async servicesJobsJobIdErrorsGetRaw(requestParameters: ServicesJobsJobIdErrorsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling servicesJobsJobIdErrorsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/jobs/{job_id}/errors`;
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Import Bulk Translation File Job Errors
     */
    async servicesJobsJobIdErrorsGet(requestParameters: ServicesJobsJobIdErrorsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesJobsJobIdErrorsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Job Status
     */
    async servicesJobsJobIdGetRaw(requestParameters: ServicesJobsJobIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling servicesJobsJobIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/jobs/{job_id}`;
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Job Status
     */
    async servicesJobsJobIdGet(requestParameters: ServicesJobsJobIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesJobsJobIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Import Bulk Translation File Job Summary
     */
    async servicesJobsJobIdSummaryGetRaw(requestParameters: ServicesJobsJobIdSummaryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling servicesJobsJobIdSummaryGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/jobs/{job_id}/summary`;
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Import Bulk Translation File Job Summary
     */
    async servicesJobsJobIdSummaryGet(requestParameters: ServicesJobsJobIdSummaryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesJobsJobIdSummaryGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve SDK Job Tasks
     */
    async servicesJobsJobIdTasksGetRaw(requestParameters: ServicesJobsJobIdTasksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling servicesJobsJobIdTasksGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/jobs/{job_id}/tasks`;
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve SDK Job Tasks
     */
    async servicesJobsJobIdTasksGet(requestParameters: ServicesJobsJobIdTasksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesJobsJobIdTasksGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Job Monitors
     */
    async servicesJobsMonitorsGetRaw(requestParameters: ServicesJobsMonitorsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = requestParameters['endDate'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/jobs/monitors`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Job Monitors
     */
    async servicesJobsMonitorsGet(requestParameters: ServicesJobsMonitorsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesJobsMonitorsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Start Job
     */
    async servicesJobsStartNowJobIdPostRaw(requestParameters: ServicesJobsStartNowJobIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling servicesJobsStartNowJobIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/jobs/start_now/{job_id}`;
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Start Job
     */
    async servicesJobsStartNowJobIdPost(requestParameters: ServicesJobsStartNowJobIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesJobsStartNowJobIdPostRaw(requestParameters, initOverrides);
    }

    /**
     * Extract Data Files
     */
    async servicesLoaderExtractPostRaw(requestParameters: ServicesLoaderExtractPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/loader/extract`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Extract Data Files
     */
    async servicesLoaderExtractPost(requestParameters: ServicesLoaderExtractPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesLoaderExtractPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Load Failure Log Results
     */
    async servicesLoaderJobIdTasksTaskIdFailurelogGetRaw(requestParameters: ServicesLoaderJobIdTasksTaskIdFailurelogGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling servicesLoaderJobIdTasksTaskIdFailurelogGet().'
            );
        }

        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling servicesLoaderJobIdTasksTaskIdFailurelogGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/loader/{job_id}/tasks/{task_id}/failurelog`;
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));
        urlPath = urlPath.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Load Failure Log Results
     */
    async servicesLoaderJobIdTasksTaskIdFailurelogGet(requestParameters: ServicesLoaderJobIdTasksTaskIdFailurelogGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesLoaderJobIdTasksTaskIdFailurelogGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Loader Extract Results
     */
    async servicesLoaderJobIdTasksTaskIdResultsGetRaw(requestParameters: ServicesLoaderJobIdTasksTaskIdResultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling servicesLoaderJobIdTasksTaskIdResultsGet().'
            );
        }

        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling servicesLoaderJobIdTasksTaskIdResultsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/loader/{job_id}/tasks/{task_id}/results`;
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));
        urlPath = urlPath.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Loader Extract Results
     */
    async servicesLoaderJobIdTasksTaskIdResultsGet(requestParameters: ServicesLoaderJobIdTasksTaskIdResultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesLoaderJobIdTasksTaskIdResultsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Loader Extract Renditions Results
     */
    async servicesLoaderJobIdTasksTaskIdResultsRenditionsGetRaw(requestParameters: ServicesLoaderJobIdTasksTaskIdResultsRenditionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling servicesLoaderJobIdTasksTaskIdResultsRenditionsGet().'
            );
        }

        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling servicesLoaderJobIdTasksTaskIdResultsRenditionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/loader/{job_id}/tasks/{task_id}/results/renditions`;
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));
        urlPath = urlPath.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Loader Extract Renditions Results
     */
    async servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(requestParameters: ServicesLoaderJobIdTasksTaskIdResultsRenditionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesLoaderJobIdTasksTaskIdResultsRenditionsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Load Success Log Results
     */
    async servicesLoaderJobIdTasksTaskIdSuccesslogGetRaw(requestParameters: ServicesLoaderJobIdTasksTaskIdSuccesslogGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling servicesLoaderJobIdTasksTaskIdSuccesslogGet().'
            );
        }

        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling servicesLoaderJobIdTasksTaskIdSuccesslogGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/loader/{job_id}/tasks/{task_id}/successlog`;
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));
        urlPath = urlPath.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Load Success Log Results
     */
    async servicesLoaderJobIdTasksTaskIdSuccesslogGet(requestParameters: ServicesLoaderJobIdTasksTaskIdSuccesslogGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesLoaderJobIdTasksTaskIdSuccesslogGetRaw(requestParameters, initOverrides);
    }

    /**
     * Load Data Objects
     */
    async servicesLoaderLoadPostRaw(requestParameters: ServicesLoaderLoadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/loader/load`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Load Data Objects
     */
    async servicesLoaderLoadPost(requestParameters: ServicesLoaderLoadPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesLoaderLoadPostRaw(requestParameters, initOverrides);
    }

    /**
     * Validate Package
     */
    async servicesPackageActionsValidatePostRaw(requestParameters: ServicesPackageActionsValidatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/package/actions/validate`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Validate Package
     */
    async servicesPackageActionsValidatePost(requestParameters: ServicesPackageActionsValidatePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesPackageActionsValidatePostRaw(requestParameters, initOverrides);
    }

    /**
     * Export Package
     */
    async servicesPackagePostRaw(requestParameters: ServicesPackagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/package`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Export Package
     */
    async servicesPackagePost(requestParameters: ServicesPackagePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesPackagePostRaw(requestParameters, initOverrides);
    }

    /**
     * Import Package
     */
    async servicesPackagePutRaw(requestParameters: ServicesPackagePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/package`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Import Package
     */
    async servicesPackagePut(requestParameters: ServicesPackagePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesPackagePutRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve All Queues
     */
    async servicesQueuesGetRaw(requestParameters: ServicesQueuesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/queues`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve All Queues
     */
    async servicesQueuesGet(requestParameters: ServicesQueuesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesQueuesGetRaw(requestParameters, initOverrides);
    }

    /**
     * Disable Delivery
     */
    async servicesQueuesQueueNameActionsDisableDeliveryPutRaw(requestParameters: ServicesQueuesQueueNameActionsDisableDeliveryPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['queueName'] == null) {
            throw new runtime.RequiredError(
                'queueName',
                'Required parameter "queueName" was null or undefined when calling servicesQueuesQueueNameActionsDisableDeliveryPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/queues/{queue_name}/actions/disable_delivery`;
        urlPath = urlPath.replace(`{${"queue_name"}}`, encodeURIComponent(String(requestParameters['queueName'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disable Delivery
     */
    async servicesQueuesQueueNameActionsDisableDeliveryPut(requestParameters: ServicesQueuesQueueNameActionsDisableDeliveryPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesQueuesQueueNameActionsDisableDeliveryPutRaw(requestParameters, initOverrides);
    }

    /**
     * Enable Delivery
     */
    async servicesQueuesQueueNameActionsEnableDeliveryPutRaw(requestParameters: ServicesQueuesQueueNameActionsEnableDeliveryPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['queueName'] == null) {
            throw new runtime.RequiredError(
                'queueName',
                'Required parameter "queueName" was null or undefined when calling servicesQueuesQueueNameActionsEnableDeliveryPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/queues/{queue_name}/actions/enable_delivery`;
        urlPath = urlPath.replace(`{${"queue_name"}}`, encodeURIComponent(String(requestParameters['queueName'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Enable Delivery
     */
    async servicesQueuesQueueNameActionsEnableDeliveryPut(requestParameters: ServicesQueuesQueueNameActionsEnableDeliveryPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesQueuesQueueNameActionsEnableDeliveryPutRaw(requestParameters, initOverrides);
    }

    /**
     * Reset Queue
     */
    async servicesQueuesQueueNameActionsResetPutRaw(requestParameters: ServicesQueuesQueueNameActionsResetPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['queueName'] == null) {
            throw new runtime.RequiredError(
                'queueName',
                'Required parameter "queueName" was null or undefined when calling servicesQueuesQueueNameActionsResetPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/queues/{queue_name}/actions/reset`;
        urlPath = urlPath.replace(`{${"queue_name"}}`, encodeURIComponent(String(requestParameters['queueName'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reset Queue
     */
    async servicesQueuesQueueNameActionsResetPut(requestParameters: ServicesQueuesQueueNameActionsResetPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesQueuesQueueNameActionsResetPutRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Queue Status
     */
    async servicesQueuesQueueNameGetRaw(requestParameters: ServicesQueuesQueueNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['queueName'] == null) {
            throw new runtime.RequiredError(
                'queueName',
                'Required parameter "queueName" was null or undefined when calling servicesQueuesQueueNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/queues/{queue_name}`;
        urlPath = urlPath.replace(`{${"queue_name"}}`, encodeURIComponent(String(requestParameters['queueName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Queue Status
     */
    async servicesQueuesQueueNameGet(requestParameters: ServicesQueuesQueueNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesQueuesQueueNameGetRaw(requestParameters, initOverrides);
    }

    /**
     * Validate Imported Package
     */
    async servicesVobjectVaultPackageVPackageIdActionsValidatePostRaw(requestParameters: ServicesVobjectVaultPackageVPackageIdActionsValidatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['packageId'] == null) {
            throw new runtime.RequiredError(
                'packageId',
                'Required parameter "packageId" was null or undefined when calling servicesVobjectVaultPackageVPackageIdActionsValidatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/services/vobject/vault_package__v/{package_id}/actions/validate`;
        urlPath = urlPath.replace(`{${"package_id"}}`, encodeURIComponent(String(requestParameters['packageId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Validate Imported Package
     */
    async servicesVobjectVaultPackageVPackageIdActionsValidatePost(requestParameters: ServicesVobjectVaultPackageVPackageIdActionsValidatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesVobjectVaultPackageVPackageIdActionsValidatePostRaw(requestParameters, initOverrides);
    }

    /**
     * End Session
     */
    async sessionDeleteRaw(requestParameters: SessionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/session`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * End Session
     */
    async sessionDelete(requestParameters: SessionDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sessionDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Download Single Client Code Distribution
     */
    async uicodeDistributionsDistributionNameCodeGetRaw(requestParameters: UicodeDistributionsDistributionNameCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['distributionName'] == null) {
            throw new runtime.RequiredError(
                'distributionName',
                'Required parameter "distributionName" was null or undefined when calling uicodeDistributionsDistributionNameCodeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/uicode/distributions/{distribution_name}/code`;
        urlPath = urlPath.replace(`{${"distribution_name"}}`, encodeURIComponent(String(requestParameters['distributionName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download Single Client Code Distribution
     */
    async uicodeDistributionsDistributionNameCodeGet(requestParameters: UicodeDistributionsDistributionNameCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.uicodeDistributionsDistributionNameCodeGetRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Single Client Code Distribution
     */
    async uicodeDistributionsDistributionNameDeleteRaw(requestParameters: UicodeDistributionsDistributionNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['distributionName'] == null) {
            throw new runtime.RequiredError(
                'distributionName',
                'Required parameter "distributionName" was null or undefined when calling uicodeDistributionsDistributionNameDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/uicode/distributions/{distribution_name}`;
        urlPath = urlPath.replace(`{${"distribution_name"}}`, encodeURIComponent(String(requestParameters['distributionName'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Single Client Code Distribution
     */
    async uicodeDistributionsDistributionNameDelete(requestParameters: UicodeDistributionsDistributionNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.uicodeDistributionsDistributionNameDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Single Client Code Distribution Metadata
     */
    async uicodeDistributionsDistributionNameGetRaw(requestParameters: UicodeDistributionsDistributionNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['distributionName'] == null) {
            throw new runtime.RequiredError(
                'distributionName',
                'Required parameter "distributionName" was null or undefined when calling uicodeDistributionsDistributionNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/uicode/distributions/{distribution_name}`;
        urlPath = urlPath.replace(`{${"distribution_name"}}`, encodeURIComponent(String(requestParameters['distributionName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Single Client Code Distribution Metadata
     */
    async uicodeDistributionsDistributionNameGet(requestParameters: UicodeDistributionsDistributionNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.uicodeDistributionsDistributionNameGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve All Client Code Distribution Metadata
     */
    async uicodeDistributionsGetRaw(requestParameters: UicodeDistributionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/uicode/distributions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve All Client Code Distribution Metadata
     */
    async uicodeDistributionsGet(requestParameters: UicodeDistributionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.uicodeDistributionsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Add or Replace Single Client Code Distribution
     */
    async uicodeDistributionsPostRaw(requestParameters: UicodeDistributionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/uicode/distributions`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add or Replace Single Client Code Distribution
     */
    async uicodeDistributionsPost(requestParameters: UicodeDistributionsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.uicodeDistributionsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Deploy Package
     */
    async vobjectVaultPackageVPackageIdActionsDeployPostRaw(requestParameters: VobjectVaultPackageVPackageIdActionsDeployPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['packageId'] == null) {
            throw new runtime.RequiredError(
                'packageId',
                'Required parameter "packageId" was null or undefined when calling vobjectVaultPackageVPackageIdActionsDeployPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobject/vault_package__v/{package_id}/actions/deploy`;
        urlPath = urlPath.replace(`{${"package_id"}}`, encodeURIComponent(String(requestParameters['packageId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deploy Package
     */
    async vobjectVaultPackageVPackageIdActionsDeployPost(requestParameters: VobjectVaultPackageVPackageIdActionsDeployPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectVaultPackageVPackageIdActionsDeployPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Package Deploy Results
     */
    async vobjectVaultPackageVPackageIdActionsDeployResultsGetRaw(requestParameters: VobjectVaultPackageVPackageIdActionsDeployResultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['packageId'] == null) {
            throw new runtime.RequiredError(
                'packageId',
                'Required parameter "packageId" was null or undefined when calling vobjectVaultPackageVPackageIdActionsDeployResultsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobject/vault_package__v/{package_id}/actions/deploy/results`;
        urlPath = urlPath.replace(`{${"package_id"}}`, encodeURIComponent(String(requestParameters['packageId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Package Deploy Results
     */
    async vobjectVaultPackageVPackageIdActionsDeployResultsGet(requestParameters: VobjectVaultPackageVPackageIdActionsDeployResultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectVaultPackageVPackageIdActionsDeployResultsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Results of Cascade Delete Job
     */
    async vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetRaw(requestParameters: VobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet().'
            );
        }

        if (requestParameters['jobStatus'] == null) {
            throw new runtime.RequiredError(
                'jobStatus',
                'Required parameter "jobStatus" was null or undefined when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet().'
            );
        }

        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"job_status"}}`, encodeURIComponent(String(requestParameters['jobStatus'])));
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Results of Cascade Delete Job
     */
    async vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(requestParameters: VobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Results of Deep Copy Job
     */
    async vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetRaw(requestParameters: VobjectsDeepcopyResultsObjectNameJobStatusJobIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet().'
            );
        }

        if (requestParameters['jobStatus'] == null) {
            throw new runtime.RequiredError(
                'jobStatus',
                'Required parameter "jobStatus" was null or undefined when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet().'
            );
        }

        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"job_status"}}`, encodeURIComponent(String(requestParameters['jobStatus'])));
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Results of Deep Copy Job
     */
    async vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(requestParameters: VobjectsDeepcopyResultsObjectNameJobStatusJobIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Create a Placeholder from an EDL Item
     */
    async vobjectsEdlItemVActionsCreateplaceholderPostRaw(requestParameters: VobjectsEdlItemVActionsCreateplaceholderPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/edl_item__v/actions/createplaceholder`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a Placeholder from an EDL Item
     */
    async vobjectsEdlItemVActionsCreateplaceholderPost(requestParameters: VobjectsEdlItemVActionsCreateplaceholderPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsEdlItemVActionsCreateplaceholderPostRaw(requestParameters, initOverrides);
    }

    /**
     * Download Merge Records Job Log
     */
    async vobjectsMergesJobIdLogGetRaw(requestParameters: VobjectsMergesJobIdLogGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling vobjectsMergesJobIdLogGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/merges/{job_id}/log`;
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download Merge Records Job Log
     */
    async vobjectsMergesJobIdLogGet(requestParameters: VobjectsMergesJobIdLogGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsMergesJobIdLogGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Record Merge Results
     */
    async vobjectsMergesJobIdResultsGetRaw(requestParameters: VobjectsMergesJobIdResultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling vobjectsMergesJobIdResultsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/merges/{job_id}/results`;
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Record Merge Results
     */
    async vobjectsMergesJobIdResultsGet(requestParameters: VobjectsMergesJobIdResultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsMergesJobIdResultsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Record Merge Status
     */
    async vobjectsMergesJobIdStatusGetRaw(requestParameters: VobjectsMergesJobIdStatusGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling vobjectsMergesJobIdStatusGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/merges/{job_id}/status`;
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Record Merge Status
     */
    async vobjectsMergesJobIdStatusGet(requestParameters: VobjectsMergesJobIdStatusGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsMergesJobIdStatusGetRaw(requestParameters, initOverrides);
    }

    /**
     * Initiate Object Action on Multiple Records
     */
    async vobjectsObjectNameActionsActionNamePostRaw(requestParameters: VobjectsObjectNameActionsActionNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameActionsActionNamePost().'
            );
        }

        if (requestParameters['actionName'] == null) {
            throw new runtime.RequiredError(
                'actionName',
                'Required parameter "actionName" was null or undefined when calling vobjectsObjectNameActionsActionNamePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/actions/{action_name}`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"action_name"}}`, encodeURIComponent(String(requestParameters['actionName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Initiate Object Action on Multiple Records
     */
    async vobjectsObjectNameActionsActionNamePost(requestParameters: VobjectsObjectNameActionsActionNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameActionsActionNamePostRaw(requestParameters, initOverrides);
    }

    /**
     * Change Object Type
     */
    async vobjectsObjectNameActionsChangetypePostRaw(requestParameters: VobjectsObjectNameActionsChangetypePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameActionsChangetypePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/actions/changetype`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Change Object Type
     */
    async vobjectsObjectNameActionsChangetypePost(requestParameters: VobjectsObjectNameActionsChangetypePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameActionsChangetypePostRaw(requestParameters, initOverrides);
    }

    /**
     * Initiate Record Merge
     */
    async vobjectsObjectNameActionsMergePostRaw(requestParameters: VobjectsObjectNameActionsMergePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameActionsMergePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/actions/merge`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['vobjectsObjectNameActionsMergePostRequestInner']!.map(VobjectsObjectNameActionsMergePostRequestInnerToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Initiate Record Merge
     */
    async vobjectsObjectNameActionsMergePost(requestParameters: VobjectsObjectNameActionsMergePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameActionsMergePostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Roll-up Field Recalculation Status
     */
    async vobjectsObjectNameActionsRecalculaterollupsGetRaw(requestParameters: VobjectsObjectNameActionsRecalculaterollupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameActionsRecalculaterollupsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/actions/recalculaterollups`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Roll-up Field Recalculation Status
     */
    async vobjectsObjectNameActionsRecalculaterollupsGet(requestParameters: VobjectsObjectNameActionsRecalculaterollupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameActionsRecalculaterollupsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Recalculate Roll-up Fields
     */
    async vobjectsObjectNameActionsRecalculaterollupsPostRaw(requestParameters: VobjectsObjectNameActionsRecalculaterollupsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameActionsRecalculaterollupsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/actions/recalculaterollups`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Recalculate Roll-up Fields
     */
    async vobjectsObjectNameActionsRecalculaterollupsPost(requestParameters: VobjectsObjectNameActionsRecalculaterollupsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameActionsRecalculaterollupsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Update Corporate Currency Fields
     */
    async vobjectsObjectNameActionsUpdatecorporatecurrencyPutRaw(requestParameters: VobjectsObjectNameActionsUpdatecorporatecurrencyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameActionsUpdatecorporatecurrencyPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/actions/updatecorporatecurrency`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Corporate Currency Fields
     */
    async vobjectsObjectNameActionsUpdatecorporatecurrencyPut(requestParameters: VobjectsObjectNameActionsUpdatecorporatecurrencyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameActionsUpdatecorporatecurrencyPutRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Multiple Object Record Attachments
     */
    async vobjectsObjectNameAttachmentsBatchDeleteRaw(requestParameters: VobjectsObjectNameAttachmentsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameAttachmentsBatchDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['idParam'] != null) {
            queryParameters['idParam'] = requestParameters['idParam'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/attachments/batch`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Multiple Object Record Attachments
     */
    async vobjectsObjectNameAttachmentsBatchDelete(requestParameters: VobjectsObjectNameAttachmentsBatchDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameAttachmentsBatchDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Create Multiple Object Record Attachments
     */
    async vobjectsObjectNameAttachmentsBatchPostRaw(requestParameters: VobjectsObjectNameAttachmentsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameAttachmentsBatchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/attachments/batch`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Multiple Object Record Attachments
     */
    async vobjectsObjectNameAttachmentsBatchPost(requestParameters: VobjectsObjectNameAttachmentsBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameAttachmentsBatchPostRaw(requestParameters, initOverrides);
    }

    /**
     * Update Multiple Object Record Attachment Descriptions
     */
    async vobjectsObjectNameAttachmentsBatchPutRaw(requestParameters: VobjectsObjectNameAttachmentsBatchPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameAttachmentsBatchPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/attachments/batch`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Multiple Object Record Attachment Descriptions
     */
    async vobjectsObjectNameAttachmentsBatchPut(requestParameters: VobjectsObjectNameAttachmentsBatchPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameAttachmentsBatchPutRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Object Records
     */
    async vobjectsObjectNameDeleteRaw(requestParameters: VobjectsObjectNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Object Records
     */
    async vobjectsObjectNameDelete(requestParameters: VobjectsObjectNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Object Record Roles
     */
    async vobjectsObjectNameIdRolesRoleNameGetRaw(requestParameters: VobjectsObjectNameIdRolesRoleNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameIdRolesRoleNameGet().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling vobjectsObjectNameIdRolesRoleNameGet().'
            );
        }

        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling vobjectsObjectNameIdRolesRoleNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/{id}/roles/{role_name}`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Object Record Roles
     */
    async vobjectsObjectNameIdRolesRoleNameGet(requestParameters: VobjectsObjectNameIdRolesRoleNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameIdRolesRoleNameGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Object User Actions Details
     */
    async vobjectsObjectNameObjectRecordIdActionsActionNameGetRaw(requestParameters: VobjectsObjectNameObjectRecordIdActionsActionNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet().'
            );
        }

        if (requestParameters['objectRecordId'] == null) {
            throw new runtime.RequiredError(
                'objectRecordId',
                'Required parameter "objectRecordId" was null or undefined when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet().'
            );
        }

        if (requestParameters['actionName'] == null) {
            throw new runtime.RequiredError(
                'actionName',
                'Required parameter "actionName" was null or undefined when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/{object_record_id}/actions/{action_name}`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"object_record_id"}}`, encodeURIComponent(String(requestParameters['objectRecordId'])));
        urlPath = urlPath.replace(`{${"action_name"}}`, encodeURIComponent(String(requestParameters['actionName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Object User Actions Details
     */
    async vobjectsObjectNameObjectRecordIdActionsActionNameGet(requestParameters: VobjectsObjectNameObjectRecordIdActionsActionNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameObjectRecordIdActionsActionNameGetRaw(requestParameters, initOverrides);
    }

    /**
     * Initiate Object Action on a Single Record
     */
    async vobjectsObjectNameObjectRecordIdActionsActionNamePostRaw(requestParameters: VobjectsObjectNameObjectRecordIdActionsActionNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost().'
            );
        }

        if (requestParameters['objectRecordId'] == null) {
            throw new runtime.RequiredError(
                'objectRecordId',
                'Required parameter "objectRecordId" was null or undefined when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost().'
            );
        }

        if (requestParameters['actionName'] == null) {
            throw new runtime.RequiredError(
                'actionName',
                'Required parameter "actionName" was null or undefined when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/{object_record_id}/actions/{action_name}`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"object_record_id"}}`, encodeURIComponent(String(requestParameters['objectRecordId'])));
        urlPath = urlPath.replace(`{${"action_name"}}`, encodeURIComponent(String(requestParameters['actionName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Initiate Object Action on a Single Record
     */
    async vobjectsObjectNameObjectRecordIdActionsActionNamePost(requestParameters: VobjectsObjectNameObjectRecordIdActionsActionNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameObjectRecordIdActionsActionNamePostRaw(requestParameters, initOverrides);
    }

    /**
     * Cascade Delete Object Record
     */
    async vobjectsObjectNameObjectRecordIdActionsCascadedeletePostRaw(requestParameters: VobjectsObjectNameObjectRecordIdActionsCascadedeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameObjectRecordIdActionsCascadedeletePost().'
            );
        }

        if (requestParameters['objectRecordId'] == null) {
            throw new runtime.RequiredError(
                'objectRecordId',
                'Required parameter "objectRecordId" was null or undefined when calling vobjectsObjectNameObjectRecordIdActionsCascadedeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/{object_record_id}/actions/cascadedelete`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"object_record_id"}}`, encodeURIComponent(String(requestParameters['objectRecordId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cascade Delete Object Record
     */
    async vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(requestParameters: VobjectsObjectNameObjectRecordIdActionsCascadedeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameObjectRecordIdActionsCascadedeletePostRaw(requestParameters, initOverrides);
    }

    /**
     * Deep Copy Object Record
     */
    async vobjectsObjectNameObjectRecordIdActionsDeepcopyPostRaw(requestParameters: VobjectsObjectNameObjectRecordIdActionsDeepcopyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameObjectRecordIdActionsDeepcopyPost().'
            );
        }

        if (requestParameters['objectRecordId'] == null) {
            throw new runtime.RequiredError(
                'objectRecordId',
                'Required parameter "objectRecordId" was null or undefined when calling vobjectsObjectNameObjectRecordIdActionsDeepcopyPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/{object_record_id}/actions/deepcopy`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"object_record_id"}}`, encodeURIComponent(String(requestParameters['objectRecordId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deep Copy Object Record
     */
    async vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(requestParameters: VobjectsObjectNameObjectRecordIdActionsDeepcopyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameObjectRecordIdActionsDeepcopyPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Object Record User Actions
     */
    async vobjectsObjectNameObjectRecordIdActionsGetRaw(requestParameters: VobjectsObjectNameObjectRecordIdActionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameObjectRecordIdActionsGet().'
            );
        }

        if (requestParameters['objectRecordId'] == null) {
            throw new runtime.RequiredError(
                'objectRecordId',
                'Required parameter "objectRecordId" was null or undefined when calling vobjectsObjectNameObjectRecordIdActionsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['loc'] != null) {
            queryParameters['loc'] = requestParameters['loc'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/{object_record_id}/actions`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"object_record_id"}}`, encodeURIComponent(String(requestParameters['objectRecordId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Object Record User Actions
     */
    async vobjectsObjectNameObjectRecordIdActionsGet(requestParameters: VobjectsObjectNameObjectRecordIdActionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameObjectRecordIdActionsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Download Attachment Field File
     */
    async vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetRaw(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet().'
            );
        }

        if (requestParameters['objectRecordId'] == null) {
            throw new runtime.RequiredError(
                'objectRecordId',
                'Required parameter "objectRecordId" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet().'
            );
        }

        if (requestParameters['attachmentFieldName'] == null) {
            throw new runtime.RequiredError(
                'attachmentFieldName',
                'Required parameter "attachmentFieldName" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"object_record_id"}}`, encodeURIComponent(String(requestParameters['objectRecordId'])));
        urlPath = urlPath.replace(`{${"attachment_field_name"}}`, encodeURIComponent(String(requestParameters['attachmentFieldName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download Attachment Field File
     */
    async vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetRaw(requestParameters, initOverrides);
    }

    /**
     * Update Attachment Field File
     */
    async vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostRaw(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost().'
            );
        }

        if (requestParameters['objectRecordId'] == null) {
            throw new runtime.RequiredError(
                'objectRecordId',
                'Required parameter "objectRecordId" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost().'
            );
        }

        if (requestParameters['attachmentFieldName'] == null) {
            throw new runtime.RequiredError(
                'attachmentFieldName',
                'Required parameter "attachmentFieldName" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"object_record_id"}}`, encodeURIComponent(String(requestParameters['objectRecordId'])));
        urlPath = urlPath.replace(`{${"attachment_field_name"}}`, encodeURIComponent(String(requestParameters['attachmentFieldName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Attachment Field File
     */
    async vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostRaw(requestParameters, initOverrides);
    }

    /**
     * Download All Attachment Field Files
     */
    async vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetRaw(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet().'
            );
        }

        if (requestParameters['objectRecordId'] == null) {
            throw new runtime.RequiredError(
                'objectRecordId',
                'Required parameter "objectRecordId" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/{object_record_id}/attachment_fields/file`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"object_record_id"}}`, encodeURIComponent(String(requestParameters['objectRecordId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download All Attachment Field Files
     */
    async vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Object Record Attachment
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteRaw(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete().'
            );
        }

        if (requestParameters['objectRecordId'] == null) {
            throw new runtime.RequiredError(
                'objectRecordId',
                'Required parameter "objectRecordId" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete().'
            );
        }

        if (requestParameters['attachmentId'] == null) {
            throw new runtime.RequiredError(
                'attachmentId',
                'Required parameter "attachmentId" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"object_record_id"}}`, encodeURIComponent(String(requestParameters['objectRecordId'])));
        urlPath = urlPath.replace(`{${"attachment_id"}}`, encodeURIComponent(String(requestParameters['attachmentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Object Record Attachment
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Object Record Attachment Metadata
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetRaw(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet().'
            );
        }

        if (requestParameters['objectRecordId'] == null) {
            throw new runtime.RequiredError(
                'objectRecordId',
                'Required parameter "objectRecordId" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet().'
            );
        }

        if (requestParameters['attachmentId'] == null) {
            throw new runtime.RequiredError(
                'attachmentId',
                'Required parameter "attachmentId" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"object_record_id"}}`, encodeURIComponent(String(requestParameters['objectRecordId'])));
        urlPath = urlPath.replace(`{${"attachment_id"}}`, encodeURIComponent(String(requestParameters['attachmentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Object Record Attachment Metadata
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Update Object Record Attachment Description
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutRaw(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut().'
            );
        }

        if (requestParameters['objectRecordId'] == null) {
            throw new runtime.RequiredError(
                'objectRecordId',
                'Required parameter "objectRecordId" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut().'
            );
        }

        if (requestParameters['attachmentId'] == null) {
            throw new runtime.RequiredError(
                'attachmentId',
                'Required parameter "attachmentId" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"object_record_id"}}`, encodeURIComponent(String(requestParameters['objectRecordId'])));
        urlPath = urlPath.replace(`{${"attachment_id"}}`, encodeURIComponent(String(requestParameters['attachmentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Object Record Attachment Description
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Object Record Attachment Version
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteRaw(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete().'
            );
        }

        if (requestParameters['objectRecordId'] == null) {
            throw new runtime.RequiredError(
                'objectRecordId',
                'Required parameter "objectRecordId" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete().'
            );
        }

        if (requestParameters['attachmentId'] == null) {
            throw new runtime.RequiredError(
                'attachmentId',
                'Required parameter "attachmentId" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete().'
            );
        }

        if (requestParameters['attachmentVersion'] == null) {
            throw new runtime.RequiredError(
                'attachmentVersion',
                'Required parameter "attachmentVersion" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"object_record_id"}}`, encodeURIComponent(String(requestParameters['objectRecordId'])));
        urlPath = urlPath.replace(`{${"attachment_id"}}`, encodeURIComponent(String(requestParameters['attachmentId'])));
        urlPath = urlPath.replace(`{${"attachment_version"}}`, encodeURIComponent(String(requestParameters['attachmentVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Object Record Attachment Version
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Download Object Record Attachment File
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRaw(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet().'
            );
        }

        if (requestParameters['objectRecordId'] == null) {
            throw new runtime.RequiredError(
                'objectRecordId',
                'Required parameter "objectRecordId" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet().'
            );
        }

        if (requestParameters['attachmentId'] == null) {
            throw new runtime.RequiredError(
                'attachmentId',
                'Required parameter "attachmentId" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet().'
            );
        }

        if (requestParameters['attachmentVersion'] == null) {
            throw new runtime.RequiredError(
                'attachmentVersion',
                'Required parameter "attachmentVersion" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"object_record_id"}}`, encodeURIComponent(String(requestParameters['objectRecordId'])));
        urlPath = urlPath.replace(`{${"attachment_id"}}`, encodeURIComponent(String(requestParameters['attachmentId'])));
        urlPath = urlPath.replace(`{${"attachment_version"}}`, encodeURIComponent(String(requestParameters['attachmentVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download Object Record Attachment File
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Object Record Attachment Version Metadata
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetRaw(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet().'
            );
        }

        if (requestParameters['objectRecordId'] == null) {
            throw new runtime.RequiredError(
                'objectRecordId',
                'Required parameter "objectRecordId" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet().'
            );
        }

        if (requestParameters['attachmentId'] == null) {
            throw new runtime.RequiredError(
                'attachmentId',
                'Required parameter "attachmentId" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet().'
            );
        }

        if (requestParameters['attachmentVersion'] == null) {
            throw new runtime.RequiredError(
                'attachmentVersion',
                'Required parameter "attachmentVersion" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"object_record_id"}}`, encodeURIComponent(String(requestParameters['objectRecordId'])));
        urlPath = urlPath.replace(`{${"attachment_id"}}`, encodeURIComponent(String(requestParameters['attachmentId'])));
        urlPath = urlPath.replace(`{${"attachment_version"}}`, encodeURIComponent(String(requestParameters['attachmentVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Object Record Attachment Version Metadata
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetRaw(requestParameters, initOverrides);
    }

    /**
     * Restore Object Record Attachment Version
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostRaw(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost().'
            );
        }

        if (requestParameters['objectRecordId'] == null) {
            throw new runtime.RequiredError(
                'objectRecordId',
                'Required parameter "objectRecordId" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost().'
            );
        }

        if (requestParameters['attachmentId'] == null) {
            throw new runtime.RequiredError(
                'attachmentId',
                'Required parameter "attachmentId" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost().'
            );
        }

        if (requestParameters['attachmentVersion'] == null) {
            throw new runtime.RequiredError(
                'attachmentVersion',
                'Required parameter "attachmentVersion" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['restore'] != null) {
            queryParameters['restore'] = requestParameters['restore'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"object_record_id"}}`, encodeURIComponent(String(requestParameters['objectRecordId'])));
        urlPath = urlPath.replace(`{${"attachment_id"}}`, encodeURIComponent(String(requestParameters['attachmentId'])));
        urlPath = urlPath.replace(`{${"attachment_version"}}`, encodeURIComponent(String(requestParameters['attachmentVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Restore Object Record Attachment Version
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Object Record Attachment Versions
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetRaw(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet().'
            );
        }

        if (requestParameters['objectRecordId'] == null) {
            throw new runtime.RequiredError(
                'objectRecordId',
                'Required parameter "objectRecordId" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet().'
            );
        }

        if (requestParameters['attachmentId'] == null) {
            throw new runtime.RequiredError(
                'attachmentId',
                'Required parameter "attachmentId" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"object_record_id"}}`, encodeURIComponent(String(requestParameters['objectRecordId'])));
        urlPath = urlPath.replace(`{${"attachment_id"}}`, encodeURIComponent(String(requestParameters['attachmentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Object Record Attachment Versions
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Download All Object Record Attachment Files
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsFileGetRaw(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentsFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsFileGet().'
            );
        }

        if (requestParameters['objectRecordId'] == null) {
            throw new runtime.RequiredError(
                'objectRecordId',
                'Required parameter "objectRecordId" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsFileGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/{object_record_id}/attachments/file`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"object_record_id"}}`, encodeURIComponent(String(requestParameters['objectRecordId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download All Object Record Attachment Files
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsFileGet(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentsFileGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameObjectRecordIdAttachmentsFileGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Object Record Attachments
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsGetRaw(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsGet().'
            );
        }

        if (requestParameters['objectRecordId'] == null) {
            throw new runtime.RequiredError(
                'objectRecordId',
                'Required parameter "objectRecordId" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/{object_record_id}/attachments`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"object_record_id"}}`, encodeURIComponent(String(requestParameters['objectRecordId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Object Record Attachments
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsGet(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameObjectRecordIdAttachmentsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Create Object Record Attachment
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsPostRaw(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsPost().'
            );
        }

        if (requestParameters['objectRecordId'] == null) {
            throw new runtime.RequiredError(
                'objectRecordId',
                'Required parameter "objectRecordId" was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/{object_record_id}/attachments`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"object_record_id"}}`, encodeURIComponent(String(requestParameters['objectRecordId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Object Record Attachment
     */
    async vobjectsObjectNameObjectRecordIdAttachmentsPost(requestParameters: VobjectsObjectNameObjectRecordIdAttachmentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameObjectRecordIdAttachmentsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Complete Audit History for a Single Object Record
     */
    async vobjectsObjectNameObjectRecordIdAudittrailGetRaw(requestParameters: VobjectsObjectNameObjectRecordIdAudittrailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameObjectRecordIdAudittrailGet().'
            );
        }

        if (requestParameters['objectRecordId'] == null) {
            throw new runtime.RequiredError(
                'objectRecordId',
                'Required parameter "objectRecordId" was null or undefined when calling vobjectsObjectNameObjectRecordIdAudittrailGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = requestParameters['endDate'];
        }

        if (requestParameters['formatResult'] != null) {
            queryParameters['format_result'] = requestParameters['formatResult'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['events'] != null) {
            queryParameters['events'] = requestParameters['events'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/{object_record_id}/audittrail`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"object_record_id"}}`, encodeURIComponent(String(requestParameters['objectRecordId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Complete Audit History for a Single Object Record
     */
    async vobjectsObjectNameObjectRecordIdAudittrailGet(requestParameters: VobjectsObjectNameObjectRecordIdAudittrailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameObjectRecordIdAudittrailGetRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Object Record
     */
    async vobjectsObjectNameObjectRecordIdGetRaw(requestParameters: VobjectsObjectNameObjectRecordIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameObjectRecordIdGet().'
            );
        }

        if (requestParameters['objectRecordId'] == null) {
            throw new runtime.RequiredError(
                'objectRecordId',
                'Required parameter "objectRecordId" was null or undefined when calling vobjectsObjectNameObjectRecordIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/{object_record_id}`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));
        urlPath = urlPath.replace(`{${"object_record_id"}}`, encodeURIComponent(String(requestParameters['objectRecordId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Object Record
     */
    async vobjectsObjectNameObjectRecordIdGet(requestParameters: VobjectsObjectNameObjectRecordIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameObjectRecordIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Create & Upsert Object Records
     */
    async vobjectsObjectNamePostRaw(requestParameters: VobjectsObjectNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNamePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['idParam'] != null) {
            queryParameters['idParam'] = requestParameters['idParam'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIMigrationMode'] != null) {
            headerParameters['X-VaultAPI-MigrationMode'] = String(requestParameters['xVaultAPIMigrationMode']);
        }

        if (requestParameters['xVaultAPINoTriggers'] != null) {
            headerParameters['X-VaultAPI-NoTriggers'] = String(requestParameters['xVaultAPINoTriggers']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create & Upsert Object Records
     */
    async vobjectsObjectNamePost(requestParameters: VobjectsObjectNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNamePostRaw(requestParameters, initOverrides);
    }

    /**
     * Update Object Records
     */
    async vobjectsObjectNamePutRaw(requestParameters: VobjectsObjectNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNamePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIMigrationMode'] != null) {
            headerParameters['X-VaultAPI-MigrationMode'] = String(requestParameters['xVaultAPIMigrationMode']);
        }

        if (requestParameters['xVaultAPINoTriggers'] != null) {
            headerParameters['X-VaultAPI-NoTriggers'] = String(requestParameters['xVaultAPINoTriggers']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Object Records
     */
    async vobjectsObjectNamePut(requestParameters: VobjectsObjectNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNamePutRaw(requestParameters, initOverrides);
    }

    /**
     * Remove Users & Groups from Roles on Object Records
     */
    async vobjectsObjectNameRolesDeleteRaw(requestParameters: VobjectsObjectNameRolesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameRolesDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/roles`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove Users & Groups from Roles on Object Records
     */
    async vobjectsObjectNameRolesDelete(requestParameters: VobjectsObjectNameRolesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameRolesDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Assign Users & Groups to Roles on Object Records
     */
    async vobjectsObjectNameRolesPostRaw(requestParameters: VobjectsObjectNameRolesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectName'] == null) {
            throw new runtime.RequiredError(
                'objectName',
                'Required parameter "objectName" was null or undefined when calling vobjectsObjectNameRolesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/{object_name}/roles`;
        urlPath = urlPath.replace(`{${"object_name"}}`, encodeURIComponent(String(requestParameters['objectName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Assign Users & Groups to Roles on Object Records
     */
    async vobjectsObjectNameRolesPost(requestParameters: VobjectsObjectNameRolesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsObjectNameRolesPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve Outbound Package Dependencies
     */
    async vobjectsOutboundPackageVPackageIdDependenciesGetRaw(requestParameters: VobjectsOutboundPackageVPackageIdDependenciesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['packageId'] == null) {
            throw new runtime.RequiredError(
                'packageId',
                'Required parameter "packageId" was null or undefined when calling vobjectsOutboundPackageVPackageIdDependenciesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['xVaultAPIClientID'] != null) {
            headerParameters['X-VaultAPI-ClientID'] = String(requestParameters['xVaultAPIClientID']);
        }


        let urlPath = `/vobjects/outbound_package__v/{package_id}/dependencies`;
        urlPath = urlPath.replace(`{${"package_id"}}`, encodeURIComponent(String(requestParameters['packageId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve Outbound Package Dependencies
     */
    async vobjectsOutboundPackageVPackageIdDependenciesGet(requestParameters: VobjectsOutboundPackageVPackageIdDependenciesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.vobjectsOutboundPackageVPackageIdDependenciesGetRaw(requestParameters, initOverrides);
    }

}
