/**
 * Veeva Vault API v25.1
 * The latest GA version of the Vault REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.api;

import org.openapitools.model.VobjectsObjectNameActionsMergePostRequestInner;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.validation.Valid;
import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * Veeva Vault API v25.1
 *
 * <p>The latest GA version of the Vault REST API.
 *
 * API tests for DefaultApi
 */
public class DefaultApiTest {


    private DefaultApi api;

    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);

        api = JAXRSClientFactory.create("http://}/api/v25.1", DefaultApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);

        ClientConfiguration config = WebClient.getConfig(client);
    }

    
    /**
     * Retrieve API Versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.apiGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Content File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiMdlComponentsComponentTypeAndRecordNameFilesGetTest() {
        String componentTypeAndRecordName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.apiMdlComponentsComponentTypeAndRecordNameFilesGet(componentTypeAndRecordName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Component Record (MDL)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiMdlComponentsComponentTypeAndRecordNameGetTest() {
        String componentTypeAndRecordName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.apiMdlComponentsComponentTypeAndRecordNameGet(componentTypeAndRecordName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Asynchronous MDL Script Results
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiMdlExecuteAsyncJobIdResultsGetTest() {
        String jobId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.apiMdlExecuteAsyncJobIdResultsGet(jobId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Execute MDL Script Asynchronously
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiMdlExecuteAsyncPostTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.apiMdlExecuteAsyncPost(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Execute MDL Script
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiMdlExecutePostTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.apiMdlExecutePost(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Upload Content File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiMdlFilesPostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.apiMdlFilesPost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Audit Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void audittrailAuditTrailTypeGetTest() {
        String auditTrailType = null;
        String startDate = null;
        String endDate = null;
        String allDates = null;
        String formatResult = null;
        String limit = null;
        String offset = null;
        String objects = null;
        String events = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.audittrailAuditTrailTypeGet(auditTrailType, startDate, endDate, allDates, formatResult, limit, offset, objects, events, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Authentication Type Discovery
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authDiscoveryPostTest() {
        String accept = null;
        String xVaultAPIClientID = null;
        //api.authDiscoveryPost(accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * OAuth 2.0 / OpenID Connect
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authOauthSessionOathOidcProfileIdPostTest() {
        String oathOidcProfileId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.authOauthSessionOathOidcProfileIdPost(oathOidcProfileId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * User Name and Password
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authPostTest() {
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.authPost(contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Single Source Code File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void codeClassNameDeleteTest() {
        String className = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.codeClassNameDelete(className, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Disable Vault Extension
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void codeClassNameDisablePutTest() {
        String className = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.codeClassNameDisablePut(className, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Enable Vault Extension
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void codeClassNameEnablePutTest() {
        String className = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.codeClassNameEnablePut(className, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Single Source Code File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void codeClassNameGetTest() {
        String className = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.codeClassNameGet(className, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve All Profiling Sessions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void codeProfilerGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.codeProfilerGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Profiling Session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void codeProfilerPostTest() {
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.codeProfilerPost(authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * End Profiling Session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void codeProfilerSessionNameActionsEndPostTest() {
        String sessionName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.codeProfilerSessionNameActionsEndPost(sessionName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Profiling Session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void codeProfilerSessionNameDeleteTest() {
        String sessionName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.codeProfilerSessionNameDelete(sessionName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Profiling Session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void codeProfilerSessionNameGetTest() {
        String sessionName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.codeProfilerSessionNameGet(sessionName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Download Profiling Session Results
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void codeProfilerSessionNameResultsGetTest() {
        String sessionName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.codeProfilerSessionNameResultsGet(sessionName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Add or Replace Single Source Code File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void codePutTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.codePut(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Specific Root Nodes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compositesTreesEdlHierarchyOrTemplateActionsListnodesPostTest() {
        String edlHierarchyOrTemplate = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve All Root Nodes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compositesTreesEdlHierarchyOrTemplateGetTest() {
        String edlHierarchyOrTemplate = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.compositesTreesEdlHierarchyOrTemplateGet(edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve a Node&#39;s Children
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compositesTreesEdlHierarchyVParentNodeIdChildrenGetTest() {
        String parentNodeId = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.compositesTreesEdlHierarchyVParentNodeIdChildrenGet(parentNodeId, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Node Order
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compositesTreesEdlHierarchyVParentNodeIdChildrenPutTest() {
        String parentNodeId = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.compositesTreesEdlHierarchyVParentNodeIdChildrenPut(parentNodeId, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Component Record (XML/JSON)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configurationComponentTypeAndRecordNameGetTest() {
        String componentTypeAndRecordName = null;
        String loc = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.configurationComponentTypeAndRecordNameGet(componentTypeAndRecordName, loc, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Component Record Collection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configurationComponentTypeGetTest() {
        String componentType = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.configurationComponentTypeGet(componentType, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Details from a Specific Object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configurationObjectNameAndObjectTypeGetTest() {
        String objectNameAndObjectType = null;
        String loc = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.configurationObjectNameAndObjectTypeGet(objectNameAndObjectType, loc, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Details from All Object Types
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configurationObjecttypeGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.configurationObjecttypeGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Lifecycle Role Assignment Override Rules
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configurationRoleAssignmentRuleDeleteTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.configurationRoleAssignmentRuleDelete(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Lifecycle Role Assignment Rules (Default &amp; Override)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configurationRoleAssignmentRuleGetTest() {
        String lifecycleV = null;
        String roleV = null;
        String productV = null;
        String countryV = null;
        String studyV = null;
        String studyCountryV = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.configurationRoleAssignmentRuleGet(lifecycleV, roleV, productV, countryV, studyV, studyCountryV, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Lifecycle Role Assignment Override Rules
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configurationRoleAssignmentRulePostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.configurationRoleAssignmentRulePost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Lifecycle Role Assignment Rules (Default &amp; Override)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configurationRoleAssignmentRulePutTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.configurationRoleAssignmentRulePut(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Initiate Delegated Session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void delegationLoginPostTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.delegationLoginPost(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Delegations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void delegationVaultsGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.delegationVaultsGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Session Keep Alive
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void keepAlivePostTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.keepAlivePost(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Limits on Objects
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void limitsGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.limitsGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Download Daily API Usage
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logsApiUsageGetTest() {
        String date = null;
        String logFormat = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.logsApiUsageGet(date, logFormat, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve All Debug Logs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logsCodeDebugGetTest() {
        String userId = null;
        Boolean includeInactive = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.logsCodeDebugGet(userId, includeInactive, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Debug Log
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logsCodeDebugIdActionsResetDeleteTest() {
        String id = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.logsCodeDebugIdActionsResetDelete(id, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Reset Debug Log
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logsCodeDebugIdActionsResetPostTest() {
        String id = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.logsCodeDebugIdActionsResetPost(id, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Download Debug Log Files
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logsCodeDebugIdFilesGetTest() {
        String id = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.logsCodeDebugIdFilesGet(id, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Single Debug Log
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logsCodeDebugIdGetTest() {
        String id = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.logsCodeDebugIdGet(id, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Debug Log
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logsCodeDebugPostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.logsCodeDebugPost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Download SDK Runtime Log
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logsCodeRuntimeGetTest() {
        String date = null;
        String logFormat = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.logsCodeRuntimeGet(date, logFormat, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Import Bulk Translation File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void messagesMessageTypeActionsImportPostTest() {
        String messageType = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.messagesMessageTypeActionsImportPost(messageType, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Export Bulk Translation File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void messagesMessageTypeLanguageLangActionsExportPostTest() {
        String messageType = null;
        String lang = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.messagesMessageTypeLanguageLangActionsExportPost(messageType, lang, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Audit Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataAudittrailAuditTrailTypeGetTest() {
        String auditTrailType = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataAudittrailAuditTrailTypeGet(auditTrailType, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Audit Types
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataAudittrailGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataAudittrailGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Component Type Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataComponentsComponentTypeGetTest() {
        String componentType = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataComponentsComponentTypeGet(componentType, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve All Component Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataComponentsGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataComponentsGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Binder Template Node Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsBindersTemplatesBindernodesGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataObjectsBindersTemplatesBindernodesGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Binder Template Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsBindersTemplatesGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataObjectsBindersTemplatesGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Annotation Placemark Type Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetTest() {
        String placemarkType = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(placemarkType, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Annotation Reference Type Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetTest() {
        String referenceType = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(referenceType, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Annotation Type Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetTest() {
        String annotationType = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(annotationType, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Event SubType Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetTest() {
        String eventType = null;
        String eventSubtype = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(eventType, eventSubtype, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Event Types and Subtypes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsEventsGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataObjectsDocumentsEventsGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Lock Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsLockGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataObjectsDocumentsLockGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Common Document Fields
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsPropertiesFindCommonPostTest() {
        String contentType = null;
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.metadataObjectsDocumentsPropertiesFindCommonPost(contentType, accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve All Document Fields
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsPropertiesGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataObjectsDocumentsPropertiesGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Template Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsTemplatesGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataObjectsDocumentsTemplatesGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve All Document Types
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsTypesGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataObjectsDocumentsTypesGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsTypesTypeGetTest() {
        String type = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataObjectsDocumentsTypesTypeGet(type, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Type Relationships
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsTypesTypeRelationshipsGetTest() {
        String type = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataObjectsDocumentsTypesTypeRelationshipsGet(type, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Classification
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetTest() {
        String type = null;
        String subtype = null;
        String classification = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(type, subtype, classification, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Subtype
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetTest() {
        String type = null;
        String subtype = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(type, subtype, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Group Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsGroupsGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataObjectsGroupsGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Security Policy Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsSecuritypoliciesGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataObjectsSecuritypoliciesGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve User Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataObjectsUsersGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataObjectsUsersGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Archived Document Signature Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Signature Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Object Collection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataVobjectsGetTest() {
        Boolean loc = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataVobjectsGet(loc, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Cancel Raw Object Deployment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataVobjectsObjectNameActionsCanceldeploymentPostTest() {
        String objectName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataVobjectsObjectNameActionsCanceldeploymentPost(objectName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Object Field Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataVobjectsObjectNameFieldsObjectFieldNameGetTest() {
        String objectName = null;
        String objectFieldName = null;
        Boolean loc = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataVobjectsObjectNameFieldsObjectFieldNameGet(objectName, objectFieldName, loc, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Object Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataVobjectsObjectNameGetTest() {
        String objectName = null;
        Boolean loc = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataVobjectsObjectNameGet(objectName, loc, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Page Layouts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataVobjectsObjectNamePageLayoutsGetTest() {
        String objectName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataVobjectsObjectNamePageLayoutsGet(objectName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Page Layout Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void metadataVobjectsObjectNamePageLayoutsLayoutNameGetTest() {
        String objectName = null;
        String layoutName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.metadataVobjectsObjectNamePageLayoutsLayoutNameGet(objectName, layoutName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Email Notification Histories
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationsHistoriesGetTest() {
        String startDate = null;
        String endDate = null;
        Boolean allDates = null;
        String formatResult = null;
        String limit = null;
        String offset = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.notificationsHistoriesGet(startDate, endDate, allDates, formatResult, limit, offset, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Bulk Workflow Action Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectWorkflowActionsActionGetTest() {
        String action = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectWorkflowActionsActionGet(action, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Initiate Workflow Actions on Multiple Workflows
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectWorkflowActionsActionPostTest() {
        String action = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectWorkflowActionsActionPost(action, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Cancel Workflow Tasks
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectWorkflowActionsCanceltasksPostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectWorkflowActionsCanceltasksPost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Cancel Workflows
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectWorkflowActionsCancelworkflowsPostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectWorkflowActionsCancelworkflowsPost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Bulk Workflow Actions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectWorkflowActionsGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectWorkflowActionsGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Reassign Workflow Tasks
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectWorkflowActionsReassigntasksPostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectWorkflowActionsReassigntasksPost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Replace Workflow Owner
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectWorkflowActionsReplaceworkflowownerPostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectWorkflowActionsReplaceworkflowownerPost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Binder Export Results
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersActionsExportJobIdResultsGetTest() {
        String jobId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersActionsExportJobIdResultsGet(jobId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Export Binder (Latest Version)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdActionsExportPostTest() {
        String binderId = null;
        Boolean source = null;
        String renditiontype = null;
        String docversion = null;
        String attachments = null;
        String export = null;
        Boolean docfield = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersBinderIdActionsExportPost(binderId, source, renditiontype, docversion, attachments, export, docfield, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Refresh Binder Auto-Filing
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdActionsPostTest() {
        String binderId = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersBinderIdActionsPost(binderId, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Binding Rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdBindingRulePutTest() {
        String binderId = null;
        String contentType = null;
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersBinderIdBindingRulePut(binderId, contentType, accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Binder
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdDeleteTest() {
        String binderId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersBinderIdDelete(binderId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Binder Document Binding Rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdDocumentsNodeIdBindingRulePutTest() {
        String binderId = null;
        String nodeId = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersBinderIdDocumentsNodeIdBindingRulePut(binderId, nodeId, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Add Document to Binder
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdDocumentsPostTest() {
        String binderId = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersBinderIdDocumentsPost(binderId, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Remove Document from Binder
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdDocumentsSectionIdDeleteTest() {
        String binderId = null;
        String sectionId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersBinderIdDocumentsSectionIdDelete(binderId, sectionId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Move Document in Binder
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdDocumentsSectionIdPutTest() {
        String binderId = null;
        String sectionId = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersBinderIdDocumentsSectionIdPut(binderId, sectionId, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Binder
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdGetTest() {
        String binderId = null;
        String depth = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersBinderIdGet(binderId, depth, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Binder Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdPostTest() {
        String binderId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersBinderIdPost(binderId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Binder
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdPutTest() {
        String binderId = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersBinderIdPut(binderId, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Remove Users &amp; Groups from Roles on a Single Binder
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteTest() {
        String binderId = null;
        String roleNameAndUserOrGroup = null;
        String id = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(binderId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Binder Section Binding Rule
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdSectionsNodeIdBindingRulePutTest() {
        String binderId = null;
        String nodeId = null;
        String contentType = null;
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersBinderIdSectionsNodeIdBindingRulePut(binderId, nodeId, contentType, accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Binder Section
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdSectionsNodeIdPutTest() {
        String binderId = null;
        String nodeId = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersBinderIdSectionsNodeIdPut(binderId, nodeId, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Binder Section
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdSectionsPostTest() {
        String binderId = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersBinderIdSectionsPost(binderId, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Binder Section
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdSectionsSectionIdDeleteTest() {
        String binderId = null;
        String sectionId = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersBinderIdSectionsSectionIdDelete(binderId, sectionId, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Binder Sections
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdSectionsSectionIdGetTest() {
        String binderId = null;
        String sectionId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersBinderIdSectionsSectionIdGet(binderId, sectionId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve All Binder Versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdVersionsGetTest() {
        String binderId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersBinderIdVersionsGet(binderId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Export Binder (Specific Version)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostTest() {
        String binderId = null;
        String majorVersion = null;
        String minorVersion = null;
        Boolean source = null;
        String renditiontype = null;
        String docversion = null;
        String attachments = null;
        String export = null;
        Boolean docfield = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(binderId, majorVersion, minorVersion, source, renditiontype, docversion, attachments, export, docfield, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Binder Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteTest() {
        String binderId = null;
        String majorVersion = null;
        String minorVersion = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Binder Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdVersionsMajorVersionMinorVersionGetTest() {
        String binderId = null;
        String majorVersion = null;
        String minorVersion = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Binder Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdVersionsMajorVersionMinorVersionPutTest() {
        String binderId = null;
        String majorVersion = null;
        String minorVersion = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Binder Relationship
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostTest() {
        String binderId = null;
        String majorVersion = null;
        String minorVersion = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Binder Relationship
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteTest() {
        String binderId = null;
        String majorVersion = null;
        String minorVersion = null;
        String relationshipId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Binder Relationship
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetTest() {
        String binderId = null;
        String majorVersion = null;
        String minorVersion = null;
        String relationshipId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Binder Version Section
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetTest() {
        String binderId = null;
        String majorVersion = null;
        String minorVersion = null;
        String sectionId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(binderId, majorVersion, minorVersion, sectionId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve All Binder Roles
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersIdRolesGetTest() {
        String id = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersIdRolesGet(id, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Assign Users &amp; Groups to Roles on a Single Binder
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersIdRolesPostTest() {
        String id = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersIdRolesPost(id, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersIdRolesRoleNameGetTest() {
        String id = null;
        String roleName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersIdRolesRoleNameGet(id, roleName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Binder User Actions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetTest() {
        String id = null;
        String majorVersion = null;
        String minorVersion = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Binder Entry Criteria
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetTest() {
        String id = null;
        String majorVersion = null;
        String minorVersion = null;
        String nameV = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Initiate Binder User Action
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutTest() {
        String id = null;
        String majorVersion = null;
        String minorVersion = null;
        String nameV = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve User Actions on Multiple Binders
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersLifecycleActionsPostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersLifecycleActionsPost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Initiate Bulk Binder User Actions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersLifecycleActionsUserActionNamePutTest() {
        String userActionName = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersLifecycleActionsUserActionNamePut(userActionName, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Binder
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersPostTest() {
        Boolean async = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersPost(async, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Binder Template Collection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersTemplatesGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersTemplatesGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Binder Template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersTemplatesPostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersTemplatesPost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Binder Template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersTemplatesPutTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersTemplatesPut(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Binder Template Node Attributes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersTemplatesTemplateNameBindernodesGetTest() {
        String templateName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersTemplatesTemplateNameBindernodesGet(templateName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Binder Template Node
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersTemplatesTemplateNameBindernodesPostTest() {
        String templateName = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersTemplatesTemplateNameBindernodesPost(templateName, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Replace Binder Template Nodes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersTemplatesTemplateNameBindernodesPutTest() {
        String templateName = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersTemplatesTemplateNameBindernodesPut(templateName, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Binder Template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersTemplatesTemplateNameDeleteTest() {
        String templateName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersTemplatesTemplateNameDelete(templateName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Binder Template Attributes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsBindersTemplatesTemplateNameGetTest() {
        String templateName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsBindersTemplatesTemplateNameGet(templateName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Deleted Document IDs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDeletionsDocumentsGetTest() {
        String startDate = null;
        String endDate = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDeletionsDocumentsGet(startDate, endDate, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Deleted Object Record ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDeletionsVobjectsObjectNameGetTest() {
        String objectName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDeletionsVobjectsObjectNameGet(objectName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve All Document Workflows
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsActionsGetTest() {
        Boolean loc = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsActionsGet(loc, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Download Controlled Copy Job Results
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetTest() {
        String lifecycleAndStateAndAction = null;
        String jobId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(lifecycleAndStateAndAction, jobId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Workflow Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsActionsWorkflowNameGetTest() {
        String workflowName = null;
        Boolean loc = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsActionsWorkflowNameGet(workflowName, loc, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Initiate Document Workflow
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsActionsWorkflowNamePostTest() {
        String workflowName = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsActionsWorkflowNamePost(workflowName, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Annotations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsAnnotationsBatchDeleteTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsAnnotationsBatchDelete(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Multiple Annotations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsAnnotationsBatchPostTest() {
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsAnnotationsBatchPost(authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Annotations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsAnnotationsBatchPutTest() {
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsAnnotationsBatchPut(authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Add Annotation Replies
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsAnnotationsRepliesBatchPostTest() {
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsAnnotationsRepliesBatchPost(authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Multiple Document Attachments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsAttachmentsBatchDeleteTest() {
        String accept = null;
        String authorization = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsAttachmentsBatchDelete(accept, authorization, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Multiple Document Attachments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsAttachmentsBatchPostTest() {
        String accept = null;
        String authorization = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsAttachmentsBatchPost(accept, authorization, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Multiple Document Attachment Descriptions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsAttachmentsBatchPutTest() {
        String accept = null;
        String authorization = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsAttachmentsBatchPut(accept, authorization, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Export Results
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsBatchActionsFileextractJobIdResultsGetTest() {
        String jobId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsBatchActionsFileextractJobIdResultsGet(jobId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Export Documents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsBatchActionsFileextractPostTest() {
        Boolean source = null;
        Boolean renditions = null;
        Boolean allversions = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsBatchActionsFileextractPost(source, renditions, allversions, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Reclassify Multiple Documents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsBatchActionsReclassifyPutTest() {
        String authorization = null;
        String contentType = null;
        String accept = null;
        Boolean xVaultAPIMigrationMode = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsBatchActionsReclassifyPut(authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Multiple Document Renditions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsBatchActionsRerenderPostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsBatchActionsRerenderPost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Multiple Documents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsBatchDeleteTest() {
        String idParam = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsBatchDelete(idParam, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Undo Collaborative Authoring Checkout
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsBatchLockDeleteTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsBatchLockDelete(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Multiple Documents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsBatchPostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        Boolean xVaultAPIMigrationMode = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsBatchPost(authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Multiple Documents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsBatchPutTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        Boolean xVaultAPIMigrationMode = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsBatchPut(authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Anchor IDs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAnchorsGetTest() {
        String docId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdAnchorsGet(docId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Export Document Annotations to PDF
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAnnotationsFileGetTest() {
        String docId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdAnnotationsFileGet(docId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Import Document Annotations from PDF
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAnnotationsFilePostTest() {
        String docId = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdAnnotationsFilePost(docId, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Single Document Attachment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAttachmentsAttachmentIdDeleteTest() {
        String docId = null;
        String attachmentId = null;
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdAttachmentsAttachmentIdDelete(docId, attachmentId, accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Download Document Attachment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAttachmentsAttachmentIdFileGetTest() {
        String docId = null;
        String attachmentId = null;
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(docId, attachmentId, accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Attachment Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAttachmentsAttachmentIdGetTest() {
        String docId = null;
        String attachmentId = null;
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdAttachmentsAttachmentIdGet(docId, attachmentId, accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Document Attachment Description
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAttachmentsAttachmentIdPutTest() {
        String docId = null;
        String attachmentId = null;
        String accept = null;
        String authorization = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdAttachmentsAttachmentIdPut(docId, attachmentId, accept, authorization, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Single Document Attachment Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteTest() {
        String docId = null;
        String attachmentId = null;
        String attachmentVersion = null;
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Download Document Attachment Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetTest() {
        String docId = null;
        String attachmentId = null;
        String attachmentVersion = null;
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Attachment Version Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetTest() {
        String docId = null;
        String attachmentId = null;
        String attachmentVersion = null;
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Restore Document Attachment Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostTest() {
        String docId = null;
        String attachmentId = null;
        String attachmentVersion = null;
        Boolean restore = null;
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(docId, attachmentId, attachmentVersion, restore, accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Attachment Versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetTest() {
        String docId = null;
        String attachmentId = null;
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(docId, attachmentId, accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Download All Document Attachments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAttachmentsFileGetTest() {
        String docId = null;
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdAttachmentsFileGet(docId, accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Attachments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAttachmentsGetTest() {
        String docId = null;
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdAttachmentsGet(docId, accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Document Attachment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAttachmentsPostTest() {
        String docId = null;
        String accept = null;
        String authorization = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdAttachmentsPost(docId, accept, authorization, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Complete Audit History for a Single Document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdAudittrailGetTest() {
        String docId = null;
        String startDate = null;
        String endDate = null;
        String formatResult = null;
        String limit = null;
        String offset = null;
        String events = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdAudittrailGet(docId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Single Document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdDeleteTest() {
        String docId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdDelete(docId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Events
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdEventsGetTest() {
        String docId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdEventsGet(docId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Download Document File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdFileGetTest() {
        String docId = null;
        Boolean lockDocument = null;
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdFileGet(docId, lockDocument, accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdGetTest() {
        String docId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdGet(docId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Document Lock
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdLockDeleteTest() {
        String docId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdLockDelete(docId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Lock
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdLockGetTest() {
        String docId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdLockGet(docId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Document Lock
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdLockPostTest() {
        String docId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdLockPost(docId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Download All Document Version Attachments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetTest() {
        String docId = null;
        String majorVersion = null;
        String minorVersion = null;
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Single Document Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdPostTest() {
        String docId = null;
        String suppressRendition = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdPost(docId, suppressRendition, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Single Document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdPutTest() {
        String docId = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        Boolean xVaultAPIMigrationMode = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdPut(docId, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Renditions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdRenditionsGetTest() {
        String docId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdRenditionsGet(docId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Single Document Rendition
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdRenditionsRenditionTypeDeleteTest() {
        String docId = null;
        String renditionType = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdRenditionsRenditionTypeDelete(docId, renditionType, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Download Document Rendition File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdRenditionsRenditionTypeGetTest() {
        String docId = null;
        String renditionType = null;
        String steadyState = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdRenditionsRenditionTypeGet(docId, renditionType, steadyState, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Add Single Document Rendition
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdRenditionsRenditionTypePostTest() {
        String docId = null;
        String renditionType = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdRenditionsRenditionTypePost(docId, renditionType, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Replace Document Rendition
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdRenditionsRenditionTypePutTest() {
        String docId = null;
        String renditionType = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdRenditionsRenditionTypePut(docId, renditionType, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Remove Users &amp; Groups from Roles on a Single Document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteTest() {
        String docId = null;
        String roleNameAndUserOrGroup = null;
        String id = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(docId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Version Attachments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetTest() {
        String docId = null;
        String majorVersion = null;
        String minorVersion = null;
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsGetTest() {
        String docId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdVersionsGet(docId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Read Annotations by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetTest() {
        String docId = null;
        String majorVersion = null;
        String minorVersion = null;
        String annotationId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Read Replies of Parent Annotation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetTest() {
        String docId = null;
        String majorVersion = null;
        String minorVersion = null;
        String annotationId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Export Document Version Annotations to PDF
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetTest() {
        String docId = null;
        String majorVersion = null;
        String minorVersion = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Import Document Version Annotations from PDF
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostTest() {
        String docId = null;
        String majorVersion = null;
        String minorVersion = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Read Annotations by Document Version and Type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetTest() {
        String docId = null;
        String majorVersion = null;
        String minorVersion = null;
        String limit = null;
        String offset = null;
        String annotationTypes = null;
        String paginationId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(docId, majorVersion, minorVersion, limit, offset, annotationTypes, paginationId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Download Document Version Attachment Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetTest() {
        String docId = null;
        String majorVersion = null;
        String minorVersion = null;
        String attachmentId = null;
        String attachmentVersion = null;
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Version Attachment Versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetTest() {
        String docId = null;
        String majorVersion = null;
        String minorVersion = null;
        String attachmentId = null;
        String attachmentVersion = null;
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Single Document Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteTest() {
        String docId = null;
        String majorVersion = null;
        String minorVersion = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Version Notes as CSV
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetTest() {
        String docId = null;
        String majorVersion = null;
        String minorVersion = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Document Event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostTest() {
        String docId = null;
        String majorVersion = null;
        String minorVersion = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Video Annotations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetTest() {
        String docId = null;
        String majorVersion = null;
        String minorVersion = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Download Document Version File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetTest() {
        String docId = null;
        String majorVersion = null;
        String minorVersion = null;
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetTest() {
        String docId = null;
        String majorVersion = null;
        String minorVersion = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Document Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutTest() {
        String docId = null;
        String majorVersion = null;
        String minorVersion = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        Boolean xVaultAPIMigrationMode = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(docId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Relationships
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetTest() {
        String docId = null;
        String majorVersion = null;
        String minorVersion = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Single Document Relationship
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostTest() {
        String docId = null;
        String majorVersion = null;
        String minorVersion = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Single Document Relationship
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteTest() {
        String docId = null;
        String majorVersion = null;
        String minorVersion = null;
        String relationshipId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Relationship
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetTest() {
        String docId = null;
        String majorVersion = null;
        String minorVersion = null;
        String relationshipId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Version Renditions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetTest() {
        String docId = null;
        String majorVersion = null;
        String minorVersion = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Document Version Rendition
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteTest() {
        String docId = null;
        String majorVersion = null;
        String minorVersion = null;
        String renditionType = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Download Document Version Rendition File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetTest() {
        String docId = null;
        String majorVersion = null;
        String minorVersion = null;
        String renditionType = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Upload Document Version Rendition
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostTest() {
        String docId = null;
        String majorVersion = null;
        String minorVersion = null;
        String renditionType = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Replace Document Version Rendition
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutTest() {
        String docId = null;
        String majorVersion = null;
        String minorVersion = null;
        String renditionType = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Download Document Version Thumbnail File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetTest() {
        String docId = null;
        String majorVersion = null;
        String minorVersion = null;
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve All Documents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsGetTest() {
        String namedFilter = null;
        String scope = null;
        String versionscope = null;
        String search = null;
        String limit = null;
        String sort = null;
        String start = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsGet(namedFilter, scope, versionscope, search, limit, sort, start, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve All Document Roles
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsIdRolesGetTest() {
        String id = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsIdRolesGet(id, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Assign Users &amp; Groups to Roles on a Single Document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsIdRolesPostTest() {
        String id = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsIdRolesPost(id, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsIdRolesRoleNameGetTest() {
        String id = null;
        String roleName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsIdRolesRoleNameGet(id, roleName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document User Actions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetTest() {
        String id = null;
        String majorVersion = null;
        String minorVersion = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Entry Criteria
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetTest() {
        String id = null;
        String majorVersion = null;
        String minorVersion = null;
        String nameV = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Initiate Document User Action
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutTest() {
        String id = null;
        String majorVersion = null;
        String minorVersion = null;
        String nameV = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve User Actions on Multiple Documents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsLifecycleActionsPostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsLifecycleActionsPost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Initiate Bulk Document User Actions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsLifecycleActionsUserActionNamePutTest() {
        String userActionName = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsLifecycleActionsUserActionNamePut(userActionName, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Single Document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsPostTest() {
        String authorization = null;
        String accept = null;
        Boolean xVaultAPIMigrationMode = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsPost(authorization, accept, xVaultAPIMigrationMode, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Multiple Document Relationships
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsRelationshipsBatchDeleteTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsRelationshipsBatchDelete(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Multiple Document Relationships
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsRelationshipsBatchPostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsRelationshipsBatchPost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Multiple Document Renditions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsRenditionsBatchDeleteTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsRenditionsBatchDelete(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Add Multiple Document Renditions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsRenditionsBatchPostTest() {
        String idParam = null;
        String largeSizeAsset = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        Boolean xVaultAPIMigrationMode = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsRenditionsBatchPost(idParam, largeSizeAsset, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Remove Users and Groups from Roles on Multiple Documents &amp; Binders
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsRolesBatchDeleteTest() {
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsRolesBatchDelete(authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Assign Users &amp; Groups to Roles on Multiple Documents &amp; Binders
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsRolesBatchPostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsRolesBatchPost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Template Collection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsTemplatesGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsTemplatesGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Single Document Template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsTemplatesPostTest() {
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsTemplatesPost(authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Multiple Document Templates
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsTemplatesPutTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsTemplatesPut(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Basic Document Template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsTemplatesTemplateNameDeleteTest() {
        String templateName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsTemplatesTemplateNameDelete(templateName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Download Document Template File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsTemplatesTemplateNameFileGetTest() {
        String templateName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsTemplatesTemplateNameFileGet(templateName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Document Template Attributes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsTemplatesTemplateNameGetTest() {
        String templateName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsTemplatesTemplateNameGet(templateName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Single Document Template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsTemplatesTemplateNamePutTest() {
        String templateName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsTemplatesTemplateNamePut(templateName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Document Tokens
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsTokensPostTest() {
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsTokensPost(authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Export Document Versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsVersionsBatchActionsFileextractPostTest() {
        Boolean source = null;
        Boolean renditions = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsVersionsBatchActionsFileextractPost(source, renditions, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Multiple Document Versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsVersionsBatchDeleteTest() {
        String idParam = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsVersionsBatchDelete(idParam, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Multiple Document Versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDocumentsVersionsBatchPostTest() {
        String idParam = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIMigrationMode = null;
        String xVaultAPIClientID = null;
        //api.objectsDocumentsVersionsBatchPost(idParam, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Domain Information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDomainGetTest() {
        Boolean includeApplication = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDomainGet(includeApplication, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Domains
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsDomainsGetTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsDomainsGet(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Add EDL Matched Documents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsEdlMatchedDocumentsBatchActionsAddPostTest() {
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsEdlMatchedDocumentsBatchActionsAddPost(authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Remove EDL Matched Documents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsEdlMatchedDocumentsBatchActionsRemovePostTest() {
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsEdlMatchedDocumentsBatchActionsRemovePost(authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Auto Managed Groups
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsGroupsAutoGetTest() {
        String limit = null;
        String offset = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsGroupsAutoGet(limit, offset, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve All Groups
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsGroupsGetTest() {
        String includeImplied = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsGroupsGet(includeImplied, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsGroupsGroupIdDeleteTest() {
        String groupId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsGroupsGroupIdDelete(groupId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsGroupsGroupIdGetTest() {
        String groupId = null;
        Boolean includeImplied = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsGroupsGroupIdGet(groupId, includeImplied, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsGroupsGroupIdPutTest() {
        String groupId = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsGroupsGroupIdPut(groupId, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Group 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsGroupsPostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsGroupsPost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Application License Usage
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsLicensesGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsLicensesGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve All Multi-Record Workflows
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsActionsGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsObjectworkflowsActionsGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Multi-Record Workflow Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsActionsWorkflowNameGetTest() {
        String workflowName = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.objectsObjectworkflowsActionsWorkflowNameGet(workflowName, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Initiate Multi-Record Workflow
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsActionsWorkflowNamePostTest() {
        String workflowName = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsObjectworkflowsActionsWorkflowNamePost(workflowName, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Workflows
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsGetTest() {
        String objectV = null;
        String recordIdV = null;
        String participant = null;
        String statusV = null;
        String offset = null;
        String pageSize = null;
        String loc = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsObjectworkflowsGet(objectV, recordIdV, participant, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Workflow Tasks
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksGetTest() {
        String objectV = null;
        String recordIdV = null;
        String assigneeV = null;
        String statusV = null;
        String offset = null;
        String pageSize = null;
        String loc = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsObjectworkflowsTasksGet(objectV, recordIdV, assigneeV, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Accept Single Record Workflow Task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksTaskIdActionsAcceptPostTest() {
        String taskId = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsObjectworkflowsTasksTaskIdActionsAcceptPost(taskId, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Cancel Workflow Task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksTaskIdActionsCancelPostTest() {
        String taskId = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsObjectworkflowsTasksTaskIdActionsCancelPost(taskId, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Complete Single Record Workflow Task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksTaskIdActionsCompletePostTest() {
        String taskId = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsObjectworkflowsTasksTaskIdActionsCompletePost(taskId, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Workflow Task Actions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksTaskIdActionsGetTest() {
        String taskId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsObjectworkflowsTasksTaskIdActionsGet(taskId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Accept Multi-item Workflow Task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostTest() {
        String taskId = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(taskId, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Complete Multi-item Workflow Task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostTest() {
        String taskId = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(taskId, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Manage Multi-Item Workflow Content
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostTest() {
        String taskId = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(taskId, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Reassign Multi-item Workflow Task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostTest() {
        String taskId = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(taskId, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Reassign Single Record Workflow Task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksTaskIdActionsReassignPostTest() {
        String taskId = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsObjectworkflowsTasksTaskIdActionsReassignPost(taskId, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Workflow Task Action Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksTaskIdActionsTaskActionGetTest() {
        String taskId = null;
        String taskAction = null;
        String loc = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(taskId, taskAction, loc, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Undo Workflow Task Acceptance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostTest() {
        String taskId = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(taskId, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Workflow Task Due Date
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostTest() {
        String taskId = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(taskId, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Workflow Task Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsTasksTaskIdGetTest() {
        String taskId = null;
        Boolean loc = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsObjectworkflowsTasksTaskIdGet(taskId, loc, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Workflow Actions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsWorkflowIdActionsGetTest() {
        String workflowId = null;
        String loc = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsObjectworkflowsWorkflowIdActionsGet(workflowId, loc, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Workflow Action Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetTest() {
        String workflowId = null;
        String workflowAction = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(workflowId, workflowAction, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Initiate Workflow Action
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostTest() {
        String workflowId = null;
        String workflowAction = null;
        String documentsSys = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(workflowId, workflowAction, documentsSys, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Workflow Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsObjectworkflowsWorkflowIdGetTest() {
        String workflowId = null;
        Boolean loc = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsObjectworkflowsWorkflowIdGet(workflowId, loc, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve All Picklists
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsPicklistsGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsPicklistsGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Picklist Values
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsPicklistsPicklistNameGetTest() {
        String picklistName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsPicklistsPicklistNameGet(picklistName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Inactivate Picklist Value
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsPicklistsPicklistNamePicklistValueNameDeleteTest() {
        String picklistName = null;
        String picklistValueName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsPicklistsPicklistNamePicklistValueNameDelete(picklistName, picklistValueName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Picklist Value
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsPicklistsPicklistNamePicklistValueNamePutTest() {
        String picklistName = null;
        String picklistValueName = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsPicklistsPicklistNamePicklistValueNamePut(picklistName, picklistValueName, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Picklist Values
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsPicklistsPicklistNamePostTest() {
        String picklistName = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsPicklistsPicklistNamePost(picklistName, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Picklist Value Label
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsPicklistsPicklistNamePutTest() {
        String picklistName = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsPicklistsPicklistNamePut(picklistName, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Build Production Vault
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxActionsBuildproductionPostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsSandboxActionsBuildproductionPost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Promote to Production
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxActionsPromoteproductionPostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsSandboxActionsPromoteproductionPost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Recheck Sandbox Usage Limit
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxActionsRecheckusagePostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsSandboxActionsRecheckusagePost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Change Sandbox Size
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxBatchChangesizePostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsSandboxBatchChangesizePost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Set Sandbox Entitlements
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxEntitlementsSetPostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsSandboxEntitlementsSetPost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Sandboxes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsSandboxGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Sandbox
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxNameDeleteTest() {
        String name = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsSandboxNameDelete(name, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create or Refresh Sandbox
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxPostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsSandboxPost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Sandbox Snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxSnapshotApiNameActionsUpdatePostTest() {
        String apiName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsSandboxSnapshotApiNameActionsUpdatePost(apiName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Upgrade Sandbox Snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxSnapshotApiNameActionsUpgradePostTest() {
        String apiName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsSandboxSnapshotApiNameActionsUpgradePost(apiName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Sandbox Snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxSnapshotApiNameDeleteTest() {
        String apiName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsSandboxSnapshotApiNameDelete(apiName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Sandbox Snapshots
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxSnapshotGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsSandboxSnapshotGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Sandbox Snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxSnapshotPostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsSandboxSnapshotPost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Refresh Sandbox from Snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxVaultIdActionsRefreshPostTest() {
        String vaultId = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsSandboxVaultIdActionsRefreshPost(vaultId, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Sandbox Details by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSandboxVaultIdGetTest() {
        String vaultId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsSandboxVaultIdGet(vaultId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve All Security Policies
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSecuritypoliciesGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsSecuritypoliciesGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Security Policy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsSecuritypoliciesSecurityPolicyNameGetTest() {
        String securityPolicyName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsSecuritypoliciesSecurityPolicyNameGet(securityPolicyName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve All Users
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsUsersGetTest() {
        String vaults = null;
        String excludeVaultMembership = null;
        String excludeAppLicensing = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsUsersGet(vaults, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsUsersIdGetTest() {
        String id = null;
        String excludeVaultMembership = null;
        String excludeAppLicensing = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsUsersIdGet(id, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve User Permissions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsUsersIdPermissionsGetTest() {
        String id = null;
        String filter = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsUsersIdPermissionsGet(id, filter, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Single User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsUsersIdPutTest() {
        String id = null;
        String authorization = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsUsersIdPut(id, authorization, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Validate Session User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsUsersMeGetTest() {
        String excludeVaultMembership = null;
        String excludeAppLicensing = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsUsersMeGet(excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Change My Password
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsUsersMePasswordPostTest() {
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsUsersMePasswordPost(authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve My User Permissions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsUsersMePermissionsGetTest() {
        String filter = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsUsersMePermissionsGet(filter, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update My User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsUsersMePutTest() {
        String authorization = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsUsersMePut(authorization, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Single User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsUsersPostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsUsersPost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Multiple Users
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsUsersPutTest() {
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsUsersPut(authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Disable User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsUsersUserIdDeleteTest() {
        String userId = null;
        Boolean domain = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsUsersUserIdDelete(userId, domain, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Vault Membership
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsUsersUserIdVaultMembershipVaultIdPutTest() {
        String userId = null;
        String vaultId = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.objectsUsersUserIdVaultMembershipVaultIdPut(userId, vaultId, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Vault Compare
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsVaultActionsComparePostTest() {
        String authorization = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsVaultActionsComparePost(authorization, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Vault Configuration Report
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectsVaultActionsConfigreportPostTest() {
        String authorization = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.objectsVaultActionsConfigreportPost(authorization, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Component Definition Query
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryComponentsPostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.queryComponentsPost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Next Page URL
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryNextPagePostTest() {
        String nextPage = null;
        String authorization = null;
        String accept = null;
        Boolean xVaultAPIDescribeQuery = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.queryNextPagePost(nextPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Submitting a Query
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryPostTest() {
        String authorization = null;
        String accept = null;
        Boolean xVaultAPIDescribeQuery = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.queryPost(authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Previous Page URL
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryPreviousPagePostTest() {
        String previousPage = null;
        String authorization = null;
        String accept = null;
        Boolean xVaultAPIDescribeQuery = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.queryPreviousPagePost(previousPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Current User with SCIM
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scimV2MeGetTest() {
        String attributes = null;
        String excludedAttributes = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.scimV2MeGet(attributes, excludedAttributes, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Current User with SCIM
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scimV2MePutTest() {
        String attributes = null;
        String excludedAttributes = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.scimV2MePut(attributes, excludedAttributes, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve All SCIM Resource Types
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scimV2ResourceTypesGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.scimV2ResourceTypesGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Single SCIM Resource Type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scimV2ResourceTypesTypeGetTest() {
        String type = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.scimV2ResourceTypesTypeGet(type, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve All SCIM Schema Information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scimV2SchemasGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.scimV2SchemasGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Single SCIM Schema Information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scimV2SchemasIdGetTest() {
        String id = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.scimV2SchemasIdGet(id, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve SCIM Provider
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scimV2ServiceProviderConfigGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.scimV2ServiceProviderConfigGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve SCIM Resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scimV2TypeGetTest() {
        String type = null;
        String filter = null;
        String attributes = null;
        String excludedAttributes = null;
        String sortBy = null;
        String sortOrder = null;
        String startIndex = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.scimV2TypeGet(type, filter, attributes, excludedAttributes, sortBy, sortOrder, startIndex, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Single SCIM Resource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scimV2TypeIdGetTest() {
        String type = null;
        String id = null;
        String attributes = null;
        String excludedAttributes = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.scimV2TypeIdGet(type, id, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve All Users with SCIM
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scimV2UsersGetTest() {
        String filter = null;
        String attributes = null;
        String excludedAttributes = null;
        String sortBy = null;
        String sortOrder = null;
        String count = null;
        String startIndex = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.scimV2UsersGet(filter, attributes, excludedAttributes, sortBy, sortOrder, count, startIndex, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Single User with SCIM
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scimV2UsersIdGetTest() {
        String id = null;
        String filter = null;
        String attributes = null;
        String excludedAttributes = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.scimV2UsersIdGet(id, filter, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update User with SCIM
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scimV2UsersIdPutTest() {
        String id = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.scimV2UsersIdPut(id, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create User with SCIM
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scimV2UsersPostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.scimV2UsersPost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Signing Certificate
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesCertificateCertIdGetTest() {
        String certId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesCertificateCertIdGet(certId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Disable Configuration Mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesConfigurationModeActionsDisablePostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.servicesConfigurationModeActionsDisablePost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Enable Configuration Mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesConfigurationModeActionsEnablePostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.servicesConfigurationModeActionsEnablePost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Available Direct Data Files
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesDirectdataFilesGetTest() {
        String extractType = null;
        Integer startTime = null;
        Integer stopTime = null;
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.servicesDirectdataFilesGet(extractType, startTime, stopTime, accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Download Direct Data File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesDirectdataFilesNameGetTest() {
        String name = null;
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.servicesDirectdataFilesNameGet(name, accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Download Item Content
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesFileStagingItemsContentItemGetTest() {
        String item = null;
        String authorization = null;
        String accept = null;
        String range = null;
        String xVaultAPIClientID = null;
        //api.servicesFileStagingItemsContentItemGet(item, authorization, accept, range, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete File or Folder
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesFileStagingItemsItemDeleteTest() {
        String item = null;
        String recursive = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesFileStagingItemsItemDelete(item, recursive, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * List Items at a Path
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesFileStagingItemsItemGetTest() {
        String item = null;
        String recursive = null;
        String limit = null;
        String formatResult = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesFileStagingItemsItemGet(item, recursive, limit, formatResult, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Folder or File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesFileStagingItemsItemPutTest() {
        String item = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesFileStagingItemsItemPut(item, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Folder or File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesFileStagingItemsPostTest() {
        String authorization = null;
        String accept = null;
        String contentMD5 = null;
        String xVaultAPIClientID = null;
        //api.servicesFileStagingItemsPost(authorization, accept, contentMD5, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * List Upload Sessions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesFileStagingUploadGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesFileStagingUploadGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Resumable Upload Session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesFileStagingUploadPostTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesFileStagingUploadPost(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Abort Upload Session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesFileStagingUploadUploadSessionIdDeleteTest() {
        String uploadSessionId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesFileStagingUploadUploadSessionIdDelete(uploadSessionId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Get Upload Session Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesFileStagingUploadUploadSessionIdGetTest() {
        String uploadSessionId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesFileStagingUploadUploadSessionIdGet(uploadSessionId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * List File Parts Uploaded to Session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesFileStagingUploadUploadSessionIdPartsGetTest() {
        String uploadSessionId = null;
        String limit = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesFileStagingUploadUploadSessionIdPartsGet(uploadSessionId, limit, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Commit Upload Session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesFileStagingUploadUploadSessionIdPostTest() {
        String uploadSessionId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesFileStagingUploadUploadSessionIdPost(uploadSessionId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Upload to a Session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesFileStagingUploadUploadSessionIdPutTest() {
        String uploadSessionId = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIFilePartNumber = null;
        String contentMD5 = null;
        String xVaultAPIClientID = null;
        //api.servicesFileStagingUploadUploadSessionIdPut(uploadSessionId, authorization, accept, contentType, xVaultAPIFilePartNumber, contentMD5, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Job Histories
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesJobsHistoriesGetTest() {
        String startDate = null;
        String endDate = null;
        String status = null;
        String limit = null;
        String offset = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesJobsHistoriesGet(startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Import Bulk Translation File Job Errors
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesJobsJobIdErrorsGetTest() {
        String jobId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesJobsJobIdErrorsGet(jobId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Job Status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesJobsJobIdGetTest() {
        String jobId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesJobsJobIdGet(jobId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Import Bulk Translation File Job Summary
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesJobsJobIdSummaryGetTest() {
        String jobId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesJobsJobIdSummaryGet(jobId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve SDK Job Tasks
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesJobsJobIdTasksGetTest() {
        String jobId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesJobsJobIdTasksGet(jobId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Job Monitors
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesJobsMonitorsGetTest() {
        String startDate = null;
        String endDate = null;
        String status = null;
        String limit = null;
        String offset = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesJobsMonitorsGet(startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Start Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesJobsStartNowJobIdPostTest() {
        String jobId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesJobsStartNowJobIdPost(jobId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Extract Data Files
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesLoaderExtractPostTest() {
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.servicesLoaderExtractPost(authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Load Failure Log Results
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesLoaderJobIdTasksTaskIdFailurelogGetTest() {
        String jobId = null;
        String taskId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesLoaderJobIdTasksTaskIdFailurelogGet(jobId, taskId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Loader Extract Results
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesLoaderJobIdTasksTaskIdResultsGetTest() {
        String jobId = null;
        String taskId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesLoaderJobIdTasksTaskIdResultsGet(jobId, taskId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Loader Extract Renditions Results
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesLoaderJobIdTasksTaskIdResultsRenditionsGetTest() {
        String jobId = null;
        String taskId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(jobId, taskId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Load Success Log Results
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesLoaderJobIdTasksTaskIdSuccesslogGetTest() {
        String jobId = null;
        String taskId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesLoaderJobIdTasksTaskIdSuccesslogGet(jobId, taskId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Load Data Objects
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesLoaderLoadPostTest() {
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesLoaderLoadPost(authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Validate Package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesPackageActionsValidatePostTest() {
        String authorization = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.servicesPackageActionsValidatePost(authorization, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Export Package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesPackagePostTest() {
        String authorization = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.servicesPackagePost(authorization, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Import Package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesPackagePutTest() {
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesPackagePut(authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve All Queues
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesQueuesGetTest() {
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesQueuesGet(authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Disable Delivery
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesQueuesQueueNameActionsDisableDeliveryPutTest() {
        String queueName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesQueuesQueueNameActionsDisableDeliveryPut(queueName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Enable Delivery
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesQueuesQueueNameActionsEnableDeliveryPutTest() {
        String queueName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesQueuesQueueNameActionsEnableDeliveryPut(queueName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Reset Queue
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesQueuesQueueNameActionsResetPutTest() {
        String queueName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesQueuesQueueNameActionsResetPut(queueName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Queue Status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesQueuesQueueNameGetTest() {
        String queueName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesQueuesQueueNameGet(queueName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Validate Imported Package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void servicesVobjectVaultPackageVPackageIdActionsValidatePostTest() {
        String packageId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.servicesVobjectVaultPackageVPackageIdActionsValidatePost(packageId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * End Session
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sessionDeleteTest() {
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.sessionDelete(accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Download Single Client Code Distribution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uicodeDistributionsDistributionNameCodeGetTest() {
        String distributionName = null;
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.uicodeDistributionsDistributionNameCodeGet(distributionName, accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Single Client Code Distribution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uicodeDistributionsDistributionNameDeleteTest() {
        String distributionName = null;
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.uicodeDistributionsDistributionNameDelete(distributionName, accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Single Client Code Distribution Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uicodeDistributionsDistributionNameGetTest() {
        String distributionName = null;
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.uicodeDistributionsDistributionNameGet(distributionName, accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve All Client Code Distribution Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uicodeDistributionsGetTest() {
        String accept = null;
        String authorization = null;
        String xVaultAPIClientID = null;
        //api.uicodeDistributionsGet(accept, authorization, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Add or Replace Single Client Code Distribution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uicodeDistributionsPostTest() {
        String accept = null;
        String authorization = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.uicodeDistributionsPost(accept, authorization, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Deploy Package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectVaultPackageVPackageIdActionsDeployPostTest() {
        String packageId = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectVaultPackageVPackageIdActionsDeployPost(packageId, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Package Deploy Results
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectVaultPackageVPackageIdActionsDeployResultsGetTest() {
        String packageId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectVaultPackageVPackageIdActionsDeployResultsGet(packageId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Results of Cascade Delete Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetTest() {
        String objectName = null;
        String jobStatus = null;
        String jobId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Results of Deep Copy Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetTest() {
        String objectName = null;
        String jobStatus = null;
        String jobId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create a Placeholder from an EDL Item
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsEdlItemVActionsCreateplaceholderPostTest() {
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsEdlItemVActionsCreateplaceholderPost(authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Download Merge Records Job Log
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsMergesJobIdLogGetTest() {
        String jobId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsMergesJobIdLogGet(jobId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Record Merge Results
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsMergesJobIdResultsGetTest() {
        String jobId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsMergesJobIdResultsGet(jobId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Record Merge Status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsMergesJobIdStatusGetTest() {
        String jobId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsMergesJobIdStatusGet(jobId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Initiate Object Action on Multiple Records
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameActionsActionNamePostTest() {
        String objectName = null;
        String actionName = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameActionsActionNamePost(objectName, actionName, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Change Object Type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameActionsChangetypePostTest() {
        String objectName = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameActionsChangetypePost(objectName, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Initiate Record Merge
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameActionsMergePostTest() {
        String objectName = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        List<VobjectsObjectNameActionsMergePostRequestInner> vobjectsObjectNameActionsMergePostRequestInner = null;
        //api.vobjectsObjectNameActionsMergePost(objectName, authorization, contentType, accept, xVaultAPIClientID, vobjectsObjectNameActionsMergePostRequestInner);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Roll-up Field Recalculation Status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameActionsRecalculaterollupsGetTest() {
        String objectName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameActionsRecalculaterollupsGet(objectName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Recalculate Roll-up Fields
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameActionsRecalculaterollupsPostTest() {
        String objectName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameActionsRecalculaterollupsPost(objectName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Corporate Currency Fields
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameActionsUpdatecorporatecurrencyPutTest() {
        String objectName = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameActionsUpdatecorporatecurrencyPut(objectName, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Multiple Object Record Attachments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameAttachmentsBatchDeleteTest() {
        String objectName = null;
        String idParam = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameAttachmentsBatchDelete(objectName, idParam, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Multiple Object Record Attachments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameAttachmentsBatchPostTest() {
        String objectName = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameAttachmentsBatchPost(objectName, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Multiple Object Record Attachment Descriptions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameAttachmentsBatchPutTest() {
        String objectName = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameAttachmentsBatchPut(objectName, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Object Records
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameDeleteTest() {
        String objectName = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameDelete(objectName, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Object Record Roles
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameIdRolesRoleNameGetTest() {
        String objectName = null;
        String id = null;
        String roleName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameIdRolesRoleNameGet(objectName, id, roleName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Object User Actions Details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdActionsActionNameGetTest() {
        String objectName = null;
        String objectRecordId = null;
        String actionName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameObjectRecordIdActionsActionNameGet(objectName, objectRecordId, actionName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Initiate Object Action on a Single Record
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdActionsActionNamePostTest() {
        String objectName = null;
        String objectRecordId = null;
        String actionName = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameObjectRecordIdActionsActionNamePost(objectName, objectRecordId, actionName, authorization, contentType, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Cascade Delete Object Record
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdActionsCascadedeletePostTest() {
        String objectName = null;
        String objectRecordId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(objectName, objectRecordId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Deep Copy Object Record
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdActionsDeepcopyPostTest() {
        String objectName = null;
        String objectRecordId = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Object Record User Actions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdActionsGetTest() {
        String objectName = null;
        String objectRecordId = null;
        Boolean loc = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameObjectRecordIdActionsGet(objectName, objectRecordId, loc, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Download Attachment Field File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetTest() {
        String objectName = null;
        String objectRecordId = null;
        String attachmentFieldName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Attachment Field File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostTest() {
        String objectName = null;
        String objectRecordId = null;
        String attachmentFieldName = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Download All Attachment Field Files
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetTest() {
        String objectName = null;
        String objectRecordId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(objectName, objectRecordId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Object Record Attachment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteTest() {
        String objectName = null;
        String objectRecordId = null;
        String attachmentId = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Object Record Attachment Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetTest() {
        String objectName = null;
        String objectRecordId = null;
        String attachmentId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Object Record Attachment Description
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutTest() {
        String objectName = null;
        String objectRecordId = null;
        String attachmentId = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Delete Object Record Attachment Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteTest() {
        String objectName = null;
        String objectRecordId = null;
        String attachmentId = null;
        String attachmentVersion = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Download Object Record Attachment File
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetTest() {
        String objectName = null;
        String objectRecordId = null;
        String attachmentId = null;
        String attachmentVersion = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Object Record Attachment Version Metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetTest() {
        String objectName = null;
        String objectRecordId = null;
        String attachmentId = null;
        String attachmentVersion = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Restore Object Record Attachment Version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostTest() {
        String objectName = null;
        String objectRecordId = null;
        String attachmentId = null;
        String attachmentVersion = null;
        Boolean restore = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(objectName, objectRecordId, attachmentId, attachmentVersion, restore, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Object Record Attachment Versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetTest() {
        String objectName = null;
        String objectRecordId = null;
        String attachmentId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Download All Object Record Attachment Files
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentsFileGetTest() {
        String objectName = null;
        String objectRecordId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameObjectRecordIdAttachmentsFileGet(objectName, objectRecordId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Object Record Attachments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentsGetTest() {
        String objectName = null;
        String objectRecordId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameObjectRecordIdAttachmentsGet(objectName, objectRecordId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create Object Record Attachment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAttachmentsPostTest() {
        String objectName = null;
        String objectRecordId = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameObjectRecordIdAttachmentsPost(objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Complete Audit History for a Single Object Record
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdAudittrailGetTest() {
        String objectName = null;
        String objectRecordId = null;
        String startDate = null;
        String endDate = null;
        String formatResult = null;
        String limit = null;
        String offset = null;
        String events = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameObjectRecordIdAudittrailGet(objectName, objectRecordId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Object Record
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameObjectRecordIdGetTest() {
        String objectName = null;
        String objectRecordId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameObjectRecordIdGet(objectName, objectRecordId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Create &amp; Upsert Object Records
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNamePostTest() {
        String objectName = null;
        String idParam = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        Boolean xVaultAPIMigrationMode = null;
        Boolean xVaultAPINoTriggers = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNamePost(objectName, idParam, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Update Object Records
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNamePutTest() {
        String objectName = null;
        String authorization = null;
        String contentType = null;
        String accept = null;
        Boolean xVaultAPIMigrationMode = null;
        Boolean xVaultAPINoTriggers = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNamePut(objectName, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Remove Users &amp; Groups from Roles on Object Records
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameRolesDeleteTest() {
        String objectName = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameRolesDelete(objectName, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Assign Users &amp; Groups to Roles on Object Records
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsObjectNameRolesPostTest() {
        String objectName = null;
        String authorization = null;
        String accept = null;
        String contentType = null;
        String xVaultAPIClientID = null;
        //api.vobjectsObjectNameRolesPost(objectName, authorization, accept, contentType, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
    /**
     * Retrieve Outbound Package Dependencies
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vobjectsOutboundPackageVPackageIdDependenciesGetTest() {
        String packageId = null;
        String authorization = null;
        String accept = null;
        String xVaultAPIClientID = null;
        //api.vobjectsOutboundPackageVPackageIdDependenciesGet(packageId, authorization, accept, xVaultAPIClientID);
        
        // TODO: test validations


    }
    
}
