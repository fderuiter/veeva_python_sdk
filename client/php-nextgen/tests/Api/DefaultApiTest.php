<?php
/**
 * DefaultApiTest
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Veeva Vault API v25.1
 *
 * The latest GA version of the Vault REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use OpenAPI\Client\Configuration;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * DefaultApiTest Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for apiGet
     *
     * Retrieve API Versions.
     *
     */
    public function testApiGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiMdlComponentsComponentTypeAndRecordNameFilesGet
     *
     * Retrieve Content File.
     *
     */
    public function testApiMdlComponentsComponentTypeAndRecordNameFilesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiMdlComponentsComponentTypeAndRecordNameGet
     *
     * Retrieve Component Record (MDL).
     *
     */
    public function testApiMdlComponentsComponentTypeAndRecordNameGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiMdlExecuteAsyncJobIdResultsGet
     *
     * Retrieve Asynchronous MDL Script Results.
     *
     */
    public function testApiMdlExecuteAsyncJobIdResultsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiMdlExecuteAsyncPost
     *
     * Execute MDL Script Asynchronously.
     *
     */
    public function testApiMdlExecuteAsyncPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiMdlExecutePost
     *
     * Execute MDL Script.
     *
     */
    public function testApiMdlExecutePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for apiMdlFilesPost
     *
     * Upload Content File.
     *
     */
    public function testApiMdlFilesPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for audittrailAuditTrailTypeGet
     *
     * Retrieve Audit Details.
     *
     */
    public function testAudittrailAuditTrailTypeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for authDiscoveryPost
     *
     * Authentication Type Discovery.
     *
     */
    public function testAuthDiscoveryPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for authOauthSessionOathOidcProfileIdPost
     *
     * OAuth 2.0 / OpenID Connect.
     *
     */
    public function testAuthOauthSessionOathOidcProfileIdPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for authPost
     *
     * User Name and Password.
     *
     */
    public function testAuthPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for codeClassNameDelete
     *
     * Delete Single Source Code File.
     *
     */
    public function testCodeClassNameDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for codeClassNameDisablePut
     *
     * Disable Vault Extension.
     *
     */
    public function testCodeClassNameDisablePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for codeClassNameEnablePut
     *
     * Enable Vault Extension.
     *
     */
    public function testCodeClassNameEnablePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for codeClassNameGet
     *
     * Retrieve Single Source Code File.
     *
     */
    public function testCodeClassNameGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for codeProfilerGet
     *
     * Retrieve All Profiling Sessions.
     *
     */
    public function testCodeProfilerGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for codeProfilerPost
     *
     * Create Profiling Session.
     *
     */
    public function testCodeProfilerPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for codeProfilerSessionNameActionsEndPost
     *
     * End Profiling Session.
     *
     */
    public function testCodeProfilerSessionNameActionsEndPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for codeProfilerSessionNameDelete
     *
     * Delete Profiling Session.
     *
     */
    public function testCodeProfilerSessionNameDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for codeProfilerSessionNameGet
     *
     * Retrieve Profiling Session.
     *
     */
    public function testCodeProfilerSessionNameGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for codeProfilerSessionNameResultsGet
     *
     * Download Profiling Session Results.
     *
     */
    public function testCodeProfilerSessionNameResultsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for codePut
     *
     * Add or Replace Single Source Code File.
     *
     */
    public function testCodePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for compositesTreesEdlHierarchyOrTemplateActionsListnodesPost
     *
     * Retrieve Specific Root Nodes.
     *
     */
    public function testCompositesTreesEdlHierarchyOrTemplateActionsListnodesPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for compositesTreesEdlHierarchyOrTemplateGet
     *
     * Retrieve All Root Nodes.
     *
     */
    public function testCompositesTreesEdlHierarchyOrTemplateGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for compositesTreesEdlHierarchyVParentNodeIdChildrenGet
     *
     * Retrieve a Node's Children.
     *
     */
    public function testCompositesTreesEdlHierarchyVParentNodeIdChildrenGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for compositesTreesEdlHierarchyVParentNodeIdChildrenPut
     *
     * Update Node Order.
     *
     */
    public function testCompositesTreesEdlHierarchyVParentNodeIdChildrenPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationComponentTypeAndRecordNameGet
     *
     * Retrieve Component Record (XML/JSON).
     *
     */
    public function testConfigurationComponentTypeAndRecordNameGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationComponentTypeGet
     *
     * Retrieve Component Record Collection.
     *
     */
    public function testConfigurationComponentTypeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationObjectNameAndObjectTypeGet
     *
     * Retrieve Details from a Specific Object.
     *
     */
    public function testConfigurationObjectNameAndObjectTypeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationObjecttypeGet
     *
     * Retrieve Details from All Object Types.
     *
     */
    public function testConfigurationObjecttypeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationRoleAssignmentRuleDelete
     *
     * Delete Lifecycle Role Assignment Override Rules.
     *
     */
    public function testConfigurationRoleAssignmentRuleDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationRoleAssignmentRuleGet
     *
     * Retrieve Lifecycle Role Assignment Rules (Default & Override).
     *
     */
    public function testConfigurationRoleAssignmentRuleGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationRoleAssignmentRulePost
     *
     * Create Lifecycle Role Assignment Override Rules.
     *
     */
    public function testConfigurationRoleAssignmentRulePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for configurationRoleAssignmentRulePut
     *
     * Update Lifecycle Role Assignment Rules (Default & Override).
     *
     */
    public function testConfigurationRoleAssignmentRulePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for delegationLoginPost
     *
     * Initiate Delegated Session.
     *
     */
    public function testDelegationLoginPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for delegationVaultsGet
     *
     * Retrieve Delegations.
     *
     */
    public function testDelegationVaultsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for keepAlivePost
     *
     * Session Keep Alive.
     *
     */
    public function testKeepAlivePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for limitsGet
     *
     * Retrieve Limits on Objects.
     *
     */
    public function testLimitsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for logsApiUsageGet
     *
     * Download Daily API Usage.
     *
     */
    public function testLogsApiUsageGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for logsCodeDebugGet
     *
     * Retrieve All Debug Logs.
     *
     */
    public function testLogsCodeDebugGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for logsCodeDebugIdActionsResetDelete
     *
     * Delete Debug Log.
     *
     */
    public function testLogsCodeDebugIdActionsResetDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for logsCodeDebugIdActionsResetPost
     *
     * Reset Debug Log.
     *
     */
    public function testLogsCodeDebugIdActionsResetPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for logsCodeDebugIdFilesGet
     *
     * Download Debug Log Files.
     *
     */
    public function testLogsCodeDebugIdFilesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for logsCodeDebugIdGet
     *
     * Retrieve Single Debug Log.
     *
     */
    public function testLogsCodeDebugIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for logsCodeDebugPost
     *
     * Create Debug Log.
     *
     */
    public function testLogsCodeDebugPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for logsCodeRuntimeGet
     *
     * Download SDK Runtime Log.
     *
     */
    public function testLogsCodeRuntimeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for messagesMessageTypeActionsImportPost
     *
     * Import Bulk Translation File.
     *
     */
    public function testMessagesMessageTypeActionsImportPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for messagesMessageTypeLanguageLangActionsExportPost
     *
     * Export Bulk Translation File.
     *
     */
    public function testMessagesMessageTypeLanguageLangActionsExportPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataAudittrailAuditTrailTypeGet
     *
     * Retrieve Audit Metadata.
     *
     */
    public function testMetadataAudittrailAuditTrailTypeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataAudittrailGet
     *
     * Retrieve Audit Types.
     *
     */
    public function testMetadataAudittrailGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataComponentsComponentTypeGet
     *
     * Retrieve Component Type Metadata.
     *
     */
    public function testMetadataComponentsComponentTypeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataComponentsGet
     *
     * Retrieve All Component Metadata.
     *
     */
    public function testMetadataComponentsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataObjectsBindersTemplatesBindernodesGet
     *
     * Retrieve Binder Template Node Metadata.
     *
     */
    public function testMetadataObjectsBindersTemplatesBindernodesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataObjectsBindersTemplatesGet
     *
     * Retrieve Binder Template Metadata.
     *
     */
    public function testMetadataObjectsBindersTemplatesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet
     *
     * Retrieve Annotation Placemark Type Metadata.
     *
     */
    public function testMetadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet
     *
     * Retrieve Annotation Reference Type Metadata.
     *
     */
    public function testMetadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet
     *
     * Retrieve Annotation Type Metadata.
     *
     */
    public function testMetadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet
     *
     * Retrieve Document Event SubType Metadata.
     *
     */
    public function testMetadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataObjectsDocumentsEventsGet
     *
     * Retrieve Document Event Types and Subtypes.
     *
     */
    public function testMetadataObjectsDocumentsEventsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataObjectsDocumentsLockGet
     *
     * Retrieve Document Lock Metadata.
     *
     */
    public function testMetadataObjectsDocumentsLockGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataObjectsDocumentsPropertiesFindCommonPost
     *
     * Retrieve Common Document Fields.
     *
     */
    public function testMetadataObjectsDocumentsPropertiesFindCommonPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataObjectsDocumentsPropertiesGet
     *
     * Retrieve All Document Fields.
     *
     */
    public function testMetadataObjectsDocumentsPropertiesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataObjectsDocumentsTemplatesGet
     *
     * Retrieve Document Template Metadata.
     *
     */
    public function testMetadataObjectsDocumentsTemplatesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataObjectsDocumentsTypesGet
     *
     * Retrieve All Document Types.
     *
     */
    public function testMetadataObjectsDocumentsTypesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataObjectsDocumentsTypesTypeGet
     *
     * Retrieve Document Type.
     *
     */
    public function testMetadataObjectsDocumentsTypesTypeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataObjectsDocumentsTypesTypeRelationshipsGet
     *
     * Retrieve Document Type Relationships.
     *
     */
    public function testMetadataObjectsDocumentsTypesTypeRelationshipsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet
     *
     * Retrieve Document Classification.
     *
     */
    public function testMetadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet
     *
     * Retrieve Document Subtype.
     *
     */
    public function testMetadataObjectsDocumentsTypesTypeSubtypesSubtypeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataObjectsGroupsGet
     *
     * Retrieve Group Metadata.
     *
     */
    public function testMetadataObjectsGroupsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataObjectsSecuritypoliciesGet
     *
     * Retrieve Security Policy Metadata.
     *
     */
    public function testMetadataObjectsSecuritypoliciesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataObjectsUsersGet
     *
     * Retrieve User Metadata.
     *
     */
    public function testMetadataObjectsUsersGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet
     *
     * Retrieve Archived Document Signature Metadata.
     *
     */
    public function testMetadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet
     *
     * Retrieve Document Signature Metadata.
     *
     */
    public function testMetadataQueryDocumentsRelationshipsDocumentSignatureSysrGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataVobjectsGet
     *
     * Retrieve Object Collection.
     *
     */
    public function testMetadataVobjectsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataVobjectsObjectNameActionsCanceldeploymentPost
     *
     * Cancel Raw Object Deployment.
     *
     */
    public function testMetadataVobjectsObjectNameActionsCanceldeploymentPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataVobjectsObjectNameFieldsObjectFieldNameGet
     *
     * Retrieve Object Field Metadata.
     *
     */
    public function testMetadataVobjectsObjectNameFieldsObjectFieldNameGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataVobjectsObjectNameGet
     *
     * Retrieve Object Metadata.
     *
     */
    public function testMetadataVobjectsObjectNameGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataVobjectsObjectNamePageLayoutsGet
     *
     * Retrieve Page Layouts.
     *
     */
    public function testMetadataVobjectsObjectNamePageLayoutsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for metadataVobjectsObjectNamePageLayoutsLayoutNameGet
     *
     * Retrieve Page Layout Metadata.
     *
     */
    public function testMetadataVobjectsObjectNamePageLayoutsLayoutNameGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for notificationsHistoriesGet
     *
     * Retrieve Email Notification Histories.
     *
     */
    public function testNotificationsHistoriesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectWorkflowActionsActionGet
     *
     * Retrieve Bulk Workflow Action Details.
     *
     */
    public function testObjectWorkflowActionsActionGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectWorkflowActionsActionPost
     *
     * Initiate Workflow Actions on Multiple Workflows.
     *
     */
    public function testObjectWorkflowActionsActionPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectWorkflowActionsCanceltasksPost
     *
     * Cancel Workflow Tasks.
     *
     */
    public function testObjectWorkflowActionsCanceltasksPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectWorkflowActionsCancelworkflowsPost
     *
     * Cancel Workflows.
     *
     */
    public function testObjectWorkflowActionsCancelworkflowsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectWorkflowActionsGet
     *
     * Retrieve Bulk Workflow Actions.
     *
     */
    public function testObjectWorkflowActionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectWorkflowActionsReassigntasksPost
     *
     * Reassign Workflow Tasks.
     *
     */
    public function testObjectWorkflowActionsReassigntasksPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectWorkflowActionsReplaceworkflowownerPost
     *
     * Replace Workflow Owner.
     *
     */
    public function testObjectWorkflowActionsReplaceworkflowownerPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersActionsExportJobIdResultsGet
     *
     * Retrieve Binder Export Results.
     *
     */
    public function testObjectsBindersActionsExportJobIdResultsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersBinderIdActionsExportPost
     *
     * Export Binder (Latest Version).
     *
     */
    public function testObjectsBindersBinderIdActionsExportPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersBinderIdActionsPost
     *
     * Refresh Binder Auto-Filing.
     *
     */
    public function testObjectsBindersBinderIdActionsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersBinderIdBindingRulePut
     *
     * Update Binding Rule.
     *
     */
    public function testObjectsBindersBinderIdBindingRulePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersBinderIdDelete
     *
     * Delete Binder.
     *
     */
    public function testObjectsBindersBinderIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersBinderIdDocumentsNodeIdBindingRulePut
     *
     * Update Binder Document Binding Rule.
     *
     */
    public function testObjectsBindersBinderIdDocumentsNodeIdBindingRulePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersBinderIdDocumentsPost
     *
     * Add Document to Binder.
     *
     */
    public function testObjectsBindersBinderIdDocumentsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersBinderIdDocumentsSectionIdDelete
     *
     * Remove Document from Binder.
     *
     */
    public function testObjectsBindersBinderIdDocumentsSectionIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersBinderIdDocumentsSectionIdPut
     *
     * Move Document in Binder.
     *
     */
    public function testObjectsBindersBinderIdDocumentsSectionIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersBinderIdGet
     *
     * Retrieve Binder.
     *
     */
    public function testObjectsBindersBinderIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersBinderIdPost
     *
     * Create Binder Version.
     *
     */
    public function testObjectsBindersBinderIdPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersBinderIdPut
     *
     * Update Binder.
     *
     */
    public function testObjectsBindersBinderIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete
     *
     * Remove Users & Groups from Roles on a Single Binder.
     *
     */
    public function testObjectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersBinderIdSectionsNodeIdBindingRulePut
     *
     * Update Binder Section Binding Rule.
     *
     */
    public function testObjectsBindersBinderIdSectionsNodeIdBindingRulePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersBinderIdSectionsNodeIdPut
     *
     * Update Binder Section.
     *
     */
    public function testObjectsBindersBinderIdSectionsNodeIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersBinderIdSectionsPost
     *
     * Create Binder Section.
     *
     */
    public function testObjectsBindersBinderIdSectionsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersBinderIdSectionsSectionIdDelete
     *
     * Delete Binder Section.
     *
     */
    public function testObjectsBindersBinderIdSectionsSectionIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersBinderIdSectionsSectionIdGet
     *
     * Retrieve Binder Sections.
     *
     */
    public function testObjectsBindersBinderIdSectionsSectionIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersBinderIdVersionsGet
     *
     * Retrieve All Binder Versions.
     *
     */
    public function testObjectsBindersBinderIdVersionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost
     *
     * Export Binder (Specific Version).
     *
     */
    public function testObjectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete
     *
     * Delete Binder Version.
     *
     */
    public function testObjectsBindersBinderIdVersionsMajorVersionMinorVersionDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersBinderIdVersionsMajorVersionMinorVersionGet
     *
     * Retrieve Binder Version.
     *
     */
    public function testObjectsBindersBinderIdVersionsMajorVersionMinorVersionGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersBinderIdVersionsMajorVersionMinorVersionPut
     *
     * Update Binder Version.
     *
     */
    public function testObjectsBindersBinderIdVersionsMajorVersionMinorVersionPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost
     *
     * Create Binder Relationship.
     *
     */
    public function testObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete
     *
     * Delete Binder Relationship.
     *
     */
    public function testObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet
     *
     * Retrieve Binder Relationship.
     *
     */
    public function testObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet
     *
     * Retrieve Binder Version Section.
     *
     */
    public function testObjectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersIdRolesGet
     *
     * Retrieve All Binder Roles.
     *
     */
    public function testObjectsBindersIdRolesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersIdRolesPost
     *
     * Assign Users & Groups to Roles on a Single Binder.
     *
     */
    public function testObjectsBindersIdRolesPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersIdRolesRoleNameGet
     *
     * Retrieve Document Role.
     *
     */
    public function testObjectsBindersIdRolesRoleNameGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet
     *
     * Retrieve Binder User Actions.
     *
     */
    public function testObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet
     *
     * Retrieve Binder Entry Criteria.
     *
     */
    public function testObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut
     *
     * Initiate Binder User Action.
     *
     */
    public function testObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersLifecycleActionsPost
     *
     * Retrieve User Actions on Multiple Binders.
     *
     */
    public function testObjectsBindersLifecycleActionsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersLifecycleActionsUserActionNamePut
     *
     * Initiate Bulk Binder User Actions.
     *
     */
    public function testObjectsBindersLifecycleActionsUserActionNamePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersPost
     *
     * Create Binder.
     *
     */
    public function testObjectsBindersPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersTemplatesGet
     *
     * Retrieve Binder Template Collection.
     *
     */
    public function testObjectsBindersTemplatesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersTemplatesPost
     *
     * Create Binder Template.
     *
     */
    public function testObjectsBindersTemplatesPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersTemplatesPut
     *
     * Update Binder Template.
     *
     */
    public function testObjectsBindersTemplatesPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersTemplatesTemplateNameBindernodesGet
     *
     * Retrieve Binder Template Node Attributes.
     *
     */
    public function testObjectsBindersTemplatesTemplateNameBindernodesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersTemplatesTemplateNameBindernodesPost
     *
     * Create Binder Template Node.
     *
     */
    public function testObjectsBindersTemplatesTemplateNameBindernodesPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersTemplatesTemplateNameBindernodesPut
     *
     * Replace Binder Template Nodes.
     *
     */
    public function testObjectsBindersTemplatesTemplateNameBindernodesPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersTemplatesTemplateNameDelete
     *
     * Delete Binder Template.
     *
     */
    public function testObjectsBindersTemplatesTemplateNameDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsBindersTemplatesTemplateNameGet
     *
     * Retrieve Binder Template Attributes.
     *
     */
    public function testObjectsBindersTemplatesTemplateNameGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDeletionsDocumentsGet
     *
     * Retrieve Deleted Document IDs.
     *
     */
    public function testObjectsDeletionsDocumentsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDeletionsVobjectsObjectNameGet
     *
     * Retrieve Deleted Object Record ID.
     *
     */
    public function testObjectsDeletionsVobjectsObjectNameGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsActionsGet
     *
     * Retrieve All Document Workflows.
     *
     */
    public function testObjectsDocumentsActionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet
     *
     * Download Controlled Copy Job Results.
     *
     */
    public function testObjectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsActionsWorkflowNameGet
     *
     * Retrieve Document Workflow Details.
     *
     */
    public function testObjectsDocumentsActionsWorkflowNameGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsActionsWorkflowNamePost
     *
     * Initiate Document Workflow.
     *
     */
    public function testObjectsDocumentsActionsWorkflowNamePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsAnnotationsBatchDelete
     *
     * Delete Annotations.
     *
     */
    public function testObjectsDocumentsAnnotationsBatchDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsAnnotationsBatchPost
     *
     * Create Multiple Annotations.
     *
     */
    public function testObjectsDocumentsAnnotationsBatchPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsAnnotationsBatchPut
     *
     * Update Annotations.
     *
     */
    public function testObjectsDocumentsAnnotationsBatchPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsAnnotationsRepliesBatchPost
     *
     * Add Annotation Replies.
     *
     */
    public function testObjectsDocumentsAnnotationsRepliesBatchPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsAttachmentsBatchDelete
     *
     * Delete Multiple Document Attachments.
     *
     */
    public function testObjectsDocumentsAttachmentsBatchDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsAttachmentsBatchPost
     *
     * Create Multiple Document Attachments.
     *
     */
    public function testObjectsDocumentsAttachmentsBatchPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsAttachmentsBatchPut
     *
     * Update Multiple Document Attachment Descriptions.
     *
     */
    public function testObjectsDocumentsAttachmentsBatchPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsBatchActionsFileextractJobIdResultsGet
     *
     * Retrieve Document Export Results.
     *
     */
    public function testObjectsDocumentsBatchActionsFileextractJobIdResultsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsBatchActionsFileextractPost
     *
     * Export Documents.
     *
     */
    public function testObjectsDocumentsBatchActionsFileextractPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsBatchActionsReclassifyPut
     *
     * Reclassify Multiple Documents.
     *
     */
    public function testObjectsDocumentsBatchActionsReclassifyPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsBatchActionsRerenderPost
     *
     * Update Multiple Document Renditions.
     *
     */
    public function testObjectsDocumentsBatchActionsRerenderPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsBatchDelete
     *
     * Delete Multiple Documents.
     *
     */
    public function testObjectsDocumentsBatchDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsBatchLockDelete
     *
     * Undo Collaborative Authoring Checkout.
     *
     */
    public function testObjectsDocumentsBatchLockDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsBatchPost
     *
     * Create Multiple Documents.
     *
     */
    public function testObjectsDocumentsBatchPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsBatchPut
     *
     * Update Multiple Documents.
     *
     */
    public function testObjectsDocumentsBatchPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdAnchorsGet
     *
     * Retrieve Anchor IDs.
     *
     */
    public function testObjectsDocumentsDocIdAnchorsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdAnnotationsFileGet
     *
     * Export Document Annotations to PDF.
     *
     */
    public function testObjectsDocumentsDocIdAnnotationsFileGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdAnnotationsFilePost
     *
     * Import Document Annotations from PDF.
     *
     */
    public function testObjectsDocumentsDocIdAnnotationsFilePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdAttachmentsAttachmentIdDelete
     *
     * Delete Single Document Attachment.
     *
     */
    public function testObjectsDocumentsDocIdAttachmentsAttachmentIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdAttachmentsAttachmentIdFileGet
     *
     * Download Document Attachment.
     *
     */
    public function testObjectsDocumentsDocIdAttachmentsAttachmentIdFileGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdAttachmentsAttachmentIdGet
     *
     * Retrieve Document Attachment Metadata.
     *
     */
    public function testObjectsDocumentsDocIdAttachmentsAttachmentIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdAttachmentsAttachmentIdPut
     *
     * Update Document Attachment Description.
     *
     */
    public function testObjectsDocumentsDocIdAttachmentsAttachmentIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete
     *
     * Delete Single Document Attachment Version.
     *
     */
    public function testObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet
     *
     * Download Document Attachment Version.
     *
     */
    public function testObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet
     *
     * Retrieve Document Attachment Version Metadata.
     *
     */
    public function testObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost
     *
     * Restore Document Attachment Version.
     *
     */
    public function testObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet
     *
     * Retrieve Document Attachment Versions.
     *
     */
    public function testObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdAttachmentsFileGet
     *
     * Download All Document Attachments.
     *
     */
    public function testObjectsDocumentsDocIdAttachmentsFileGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdAttachmentsGet
     *
     * Retrieve Document Attachments.
     *
     */
    public function testObjectsDocumentsDocIdAttachmentsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdAttachmentsPost
     *
     * Create Document Attachment.
     *
     */
    public function testObjectsDocumentsDocIdAttachmentsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdAudittrailGet
     *
     * Retrieve Complete Audit History for a Single Document.
     *
     */
    public function testObjectsDocumentsDocIdAudittrailGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdDelete
     *
     * Delete Single Document.
     *
     */
    public function testObjectsDocumentsDocIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdEventsGet
     *
     * Retrieve Document Events.
     *
     */
    public function testObjectsDocumentsDocIdEventsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdFileGet
     *
     * Download Document File.
     *
     */
    public function testObjectsDocumentsDocIdFileGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdGet
     *
     * Retrieve Document.
     *
     */
    public function testObjectsDocumentsDocIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdLockDelete
     *
     * Delete Document Lock.
     *
     */
    public function testObjectsDocumentsDocIdLockDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdLockGet
     *
     * Retrieve Document Lock.
     *
     */
    public function testObjectsDocumentsDocIdLockGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdLockPost
     *
     * Create Document Lock.
     *
     */
    public function testObjectsDocumentsDocIdLockPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet
     *
     * Download All Document Version Attachments.
     *
     */
    public function testObjectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdPost
     *
     * Create Single Document Version.
     *
     */
    public function testObjectsDocumentsDocIdPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdPut
     *
     * Update Single Document.
     *
     */
    public function testObjectsDocumentsDocIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdRenditionsGet
     *
     * Retrieve Document Renditions.
     *
     */
    public function testObjectsDocumentsDocIdRenditionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdRenditionsRenditionTypeDelete
     *
     * Delete Single Document Rendition.
     *
     */
    public function testObjectsDocumentsDocIdRenditionsRenditionTypeDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdRenditionsRenditionTypeGet
     *
     * Download Document Rendition File.
     *
     */
    public function testObjectsDocumentsDocIdRenditionsRenditionTypeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdRenditionsRenditionTypePost
     *
     * Add Single Document Rendition.
     *
     */
    public function testObjectsDocumentsDocIdRenditionsRenditionTypePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdRenditionsRenditionTypePut
     *
     * Replace Document Rendition.
     *
     */
    public function testObjectsDocumentsDocIdRenditionsRenditionTypePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete
     *
     * Remove Users & Groups from Roles on a Single Document.
     *
     */
    public function testObjectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet
     *
     * Retrieve Document Version Attachments.
     *
     */
    public function testObjectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdVersionsGet
     *
     * Retrieve Document Versions.
     *
     */
    public function testObjectsDocumentsDocIdVersionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet
     *
     * Read Annotations by ID.
     *
     */
    public function testObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet
     *
     * Read Replies of Parent Annotation.
     *
     */
    public function testObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet
     *
     * Export Document Version Annotations to PDF.
     *
     */
    public function testObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost
     *
     * Import Document Version Annotations from PDF.
     *
     */
    public function testObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet
     *
     * Read Annotations by Document Version and Type.
     *
     */
    public function testObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet
     *
     * Download Document Version Attachment Version.
     *
     */
    public function testObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet
     *
     * Retrieve Document Version Attachment Versions.
     *
     */
    public function testObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete
     *
     * Delete Single Document Version.
     *
     */
    public function testObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet
     *
     * Retrieve Document Version Notes as CSV.
     *
     */
    public function testObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost
     *
     * Create Document Event.
     *
     */
    public function testObjectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet
     *
     * Retrieve Video Annotations.
     *
     */
    public function testObjectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet
     *
     * Download Document Version File.
     *
     */
    public function testObjectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet
     *
     * Retrieve Document Version.
     *
     */
    public function testObjectsDocumentsDocIdVersionsMajorVersionMinorVersionGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut
     *
     * Update Document Version.
     *
     */
    public function testObjectsDocumentsDocIdVersionsMajorVersionMinorVersionPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet
     *
     * Retrieve Document Relationships.
     *
     */
    public function testObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost
     *
     * Create Single Document Relationship.
     *
     */
    public function testObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete
     *
     * Delete Single Document Relationship.
     *
     */
    public function testObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet
     *
     * Retrieve Document Relationship.
     *
     */
    public function testObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet
     *
     * Retrieve Document Version Renditions.
     *
     */
    public function testObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete
     *
     * Delete Document Version Rendition.
     *
     */
    public function testObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet
     *
     * Download Document Version Rendition File.
     *
     */
    public function testObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost
     *
     * Upload Document Version Rendition.
     *
     */
    public function testObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut
     *
     * Replace Document Version Rendition.
     *
     */
    public function testObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet
     *
     * Download Document Version Thumbnail File.
     *
     */
    public function testObjectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsGet
     *
     * Retrieve All Documents.
     *
     */
    public function testObjectsDocumentsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsIdRolesGet
     *
     * Retrieve All Document Roles.
     *
     */
    public function testObjectsDocumentsIdRolesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsIdRolesPost
     *
     * Assign Users & Groups to Roles on a Single Document.
     *
     */
    public function testObjectsDocumentsIdRolesPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsIdRolesRoleNameGet
     *
     * Retrieve Document Role.
     *
     */
    public function testObjectsDocumentsIdRolesRoleNameGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet
     *
     * Retrieve Document User Actions.
     *
     */
    public function testObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet
     *
     * Retrieve Document Entry Criteria.
     *
     */
    public function testObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut
     *
     * Initiate Document User Action.
     *
     */
    public function testObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsLifecycleActionsPost
     *
     * Retrieve User Actions on Multiple Documents.
     *
     */
    public function testObjectsDocumentsLifecycleActionsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsLifecycleActionsUserActionNamePut
     *
     * Initiate Bulk Document User Actions.
     *
     */
    public function testObjectsDocumentsLifecycleActionsUserActionNamePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsPost
     *
     * Create Single Document.
     *
     */
    public function testObjectsDocumentsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsRelationshipsBatchDelete
     *
     * Delete Multiple Document Relationships.
     *
     */
    public function testObjectsDocumentsRelationshipsBatchDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsRelationshipsBatchPost
     *
     * Create Multiple Document Relationships.
     *
     */
    public function testObjectsDocumentsRelationshipsBatchPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsRenditionsBatchDelete
     *
     * Delete Multiple Document Renditions.
     *
     */
    public function testObjectsDocumentsRenditionsBatchDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsRenditionsBatchPost
     *
     * Add Multiple Document Renditions.
     *
     */
    public function testObjectsDocumentsRenditionsBatchPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsRolesBatchDelete
     *
     * Remove Users and Groups from Roles on Multiple Documents & Binders.
     *
     */
    public function testObjectsDocumentsRolesBatchDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsRolesBatchPost
     *
     * Assign Users & Groups to Roles on Multiple Documents & Binders.
     *
     */
    public function testObjectsDocumentsRolesBatchPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsTemplatesGet
     *
     * Retrieve Document Template Collection.
     *
     */
    public function testObjectsDocumentsTemplatesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsTemplatesPost
     *
     * Create Single Document Template.
     *
     */
    public function testObjectsDocumentsTemplatesPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsTemplatesPut
     *
     * Update Multiple Document Templates.
     *
     */
    public function testObjectsDocumentsTemplatesPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsTemplatesTemplateNameDelete
     *
     * Delete Basic Document Template.
     *
     */
    public function testObjectsDocumentsTemplatesTemplateNameDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsTemplatesTemplateNameFileGet
     *
     * Download Document Template File.
     *
     */
    public function testObjectsDocumentsTemplatesTemplateNameFileGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsTemplatesTemplateNameGet
     *
     * Retrieve Document Template Attributes.
     *
     */
    public function testObjectsDocumentsTemplatesTemplateNameGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsTemplatesTemplateNamePut
     *
     * Update Single Document Template.
     *
     */
    public function testObjectsDocumentsTemplatesTemplateNamePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsTokensPost
     *
     * Document Tokens.
     *
     */
    public function testObjectsDocumentsTokensPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsVersionsBatchActionsFileextractPost
     *
     * Export Document Versions.
     *
     */
    public function testObjectsDocumentsVersionsBatchActionsFileextractPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsVersionsBatchDelete
     *
     * Delete Multiple Document Versions.
     *
     */
    public function testObjectsDocumentsVersionsBatchDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDocumentsVersionsBatchPost
     *
     * Create Multiple Document Versions.
     *
     */
    public function testObjectsDocumentsVersionsBatchPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDomainGet
     *
     * Retrieve Domain Information.
     *
     */
    public function testObjectsDomainGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsDomainsGet
     *
     * Retrieve Domains.
     *
     */
    public function testObjectsDomainsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsEdlMatchedDocumentsBatchActionsAddPost
     *
     * Add EDL Matched Documents.
     *
     */
    public function testObjectsEdlMatchedDocumentsBatchActionsAddPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsEdlMatchedDocumentsBatchActionsRemovePost
     *
     * Remove EDL Matched Documents.
     *
     */
    public function testObjectsEdlMatchedDocumentsBatchActionsRemovePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsGroupsAutoGet
     *
     * Retrieve Auto Managed Groups.
     *
     */
    public function testObjectsGroupsAutoGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsGroupsGet
     *
     * Retrieve All Groups.
     *
     */
    public function testObjectsGroupsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsGroupsGroupIdDelete
     *
     * Delete Group.
     *
     */
    public function testObjectsGroupsGroupIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsGroupsGroupIdGet
     *
     * Retrieve Group.
     *
     */
    public function testObjectsGroupsGroupIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsGroupsGroupIdPut
     *
     * Update Group.
     *
     */
    public function testObjectsGroupsGroupIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsGroupsPost
     *
     * Create Group.
     *
     */
    public function testObjectsGroupsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsLicensesGet
     *
     * Retrieve Application License Usage.
     *
     */
    public function testObjectsLicensesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsObjectworkflowsActionsGet
     *
     * Retrieve All Multi-Record Workflows.
     *
     */
    public function testObjectsObjectworkflowsActionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsObjectworkflowsActionsWorkflowNameGet
     *
     * Retrieve Multi-Record Workflow Details.
     *
     */
    public function testObjectsObjectworkflowsActionsWorkflowNameGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsObjectworkflowsActionsWorkflowNamePost
     *
     * Initiate Multi-Record Workflow.
     *
     */
    public function testObjectsObjectworkflowsActionsWorkflowNamePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsObjectworkflowsGet
     *
     * Retrieve Workflows.
     *
     */
    public function testObjectsObjectworkflowsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsObjectworkflowsTasksGet
     *
     * Retrieve Workflow Tasks.
     *
     */
    public function testObjectsObjectworkflowsTasksGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsObjectworkflowsTasksTaskIdActionsAcceptPost
     *
     * Accept Single Record Workflow Task.
     *
     */
    public function testObjectsObjectworkflowsTasksTaskIdActionsAcceptPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsObjectworkflowsTasksTaskIdActionsCancelPost
     *
     * Cancel Workflow Task.
     *
     */
    public function testObjectsObjectworkflowsTasksTaskIdActionsCancelPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsObjectworkflowsTasksTaskIdActionsCompletePost
     *
     * Complete Single Record Workflow Task.
     *
     */
    public function testObjectsObjectworkflowsTasksTaskIdActionsCompletePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsObjectworkflowsTasksTaskIdActionsGet
     *
     * Retrieve Workflow Task Actions.
     *
     */
    public function testObjectsObjectworkflowsTasksTaskIdActionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost
     *
     * Accept Multi-item Workflow Task.
     *
     */
    public function testObjectsObjectworkflowsTasksTaskIdActionsMdwacceptPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost
     *
     * Complete Multi-item Workflow Task.
     *
     */
    public function testObjectsObjectworkflowsTasksTaskIdActionsMdwcompletePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost
     *
     * Manage Multi-Item Workflow Content.
     *
     */
    public function testObjectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost
     *
     * Reassign Multi-item Workflow Task.
     *
     */
    public function testObjectsObjectworkflowsTasksTaskIdActionsMdwreassignPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsObjectworkflowsTasksTaskIdActionsReassignPost
     *
     * Reassign Single Record Workflow Task.
     *
     */
    public function testObjectsObjectworkflowsTasksTaskIdActionsReassignPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsObjectworkflowsTasksTaskIdActionsTaskActionGet
     *
     * Retrieve Workflow Task Action Details.
     *
     */
    public function testObjectsObjectworkflowsTasksTaskIdActionsTaskActionGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost
     *
     * Undo Workflow Task Acceptance.
     *
     */
    public function testObjectsObjectworkflowsTasksTaskIdActionsUndoacceptPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost
     *
     * Update Workflow Task Due Date.
     *
     */
    public function testObjectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsObjectworkflowsTasksTaskIdGet
     *
     * Retrieve Workflow Task Details.
     *
     */
    public function testObjectsObjectworkflowsTasksTaskIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsObjectworkflowsWorkflowIdActionsGet
     *
     * Retrieve Workflow Actions.
     *
     */
    public function testObjectsObjectworkflowsWorkflowIdActionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet
     *
     * Retrieve Workflow Action Details.
     *
     */
    public function testObjectsObjectworkflowsWorkflowIdActionsWorkflowActionGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost
     *
     * Initiate Workflow Action.
     *
     */
    public function testObjectsObjectworkflowsWorkflowIdActionsWorkflowActionPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsObjectworkflowsWorkflowIdGet
     *
     * Retrieve Workflow Details.
     *
     */
    public function testObjectsObjectworkflowsWorkflowIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsPicklistsGet
     *
     * Retrieve All Picklists.
     *
     */
    public function testObjectsPicklistsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsPicklistsPicklistNameGet
     *
     * Retrieve Picklist Values.
     *
     */
    public function testObjectsPicklistsPicklistNameGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsPicklistsPicklistNamePicklistValueNameDelete
     *
     * Inactivate Picklist Value.
     *
     */
    public function testObjectsPicklistsPicklistNamePicklistValueNameDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsPicklistsPicklistNamePicklistValueNamePut
     *
     * Update Picklist Value.
     *
     */
    public function testObjectsPicklistsPicklistNamePicklistValueNamePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsPicklistsPicklistNamePost
     *
     * Create Picklist Values.
     *
     */
    public function testObjectsPicklistsPicklistNamePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsPicklistsPicklistNamePut
     *
     * Update Picklist Value Label.
     *
     */
    public function testObjectsPicklistsPicklistNamePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsSandboxActionsBuildproductionPost
     *
     * Build Production Vault.
     *
     */
    public function testObjectsSandboxActionsBuildproductionPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsSandboxActionsPromoteproductionPost
     *
     * Promote to Production.
     *
     */
    public function testObjectsSandboxActionsPromoteproductionPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsSandboxActionsRecheckusagePost
     *
     * Recheck Sandbox Usage Limit.
     *
     */
    public function testObjectsSandboxActionsRecheckusagePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsSandboxBatchChangesizePost
     *
     * Change Sandbox Size.
     *
     */
    public function testObjectsSandboxBatchChangesizePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsSandboxEntitlementsSetPost
     *
     * Set Sandbox Entitlements.
     *
     */
    public function testObjectsSandboxEntitlementsSetPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsSandboxGet
     *
     * Retrieve Sandboxes.
     *
     */
    public function testObjectsSandboxGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsSandboxNameDelete
     *
     * Delete Sandbox.
     *
     */
    public function testObjectsSandboxNameDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsSandboxPost
     *
     * Create or Refresh Sandbox.
     *
     */
    public function testObjectsSandboxPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsSandboxSnapshotApiNameActionsUpdatePost
     *
     * Update Sandbox Snapshot.
     *
     */
    public function testObjectsSandboxSnapshotApiNameActionsUpdatePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsSandboxSnapshotApiNameActionsUpgradePost
     *
     * Upgrade Sandbox Snapshot.
     *
     */
    public function testObjectsSandboxSnapshotApiNameActionsUpgradePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsSandboxSnapshotApiNameDelete
     *
     * Delete Sandbox Snapshot.
     *
     */
    public function testObjectsSandboxSnapshotApiNameDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsSandboxSnapshotGet
     *
     * Retrieve Sandbox Snapshots.
     *
     */
    public function testObjectsSandboxSnapshotGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsSandboxSnapshotPost
     *
     * Create Sandbox Snapshot.
     *
     */
    public function testObjectsSandboxSnapshotPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsSandboxVaultIdActionsRefreshPost
     *
     * Refresh Sandbox from Snapshot.
     *
     */
    public function testObjectsSandboxVaultIdActionsRefreshPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsSandboxVaultIdGet
     *
     * Retrieve Sandbox Details by ID.
     *
     */
    public function testObjectsSandboxVaultIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsSecuritypoliciesGet
     *
     * Retrieve All Security Policies.
     *
     */
    public function testObjectsSecuritypoliciesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsSecuritypoliciesSecurityPolicyNameGet
     *
     * Retrieve Security Policy.
     *
     */
    public function testObjectsSecuritypoliciesSecurityPolicyNameGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsUsersGet
     *
     * Retrieve All Users.
     *
     */
    public function testObjectsUsersGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsUsersIdGet
     *
     * Retrieve User.
     *
     */
    public function testObjectsUsersIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsUsersIdPermissionsGet
     *
     * Retrieve User Permissions.
     *
     */
    public function testObjectsUsersIdPermissionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsUsersIdPut
     *
     * Update Single User.
     *
     */
    public function testObjectsUsersIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsUsersMeGet
     *
     * Validate Session User.
     *
     */
    public function testObjectsUsersMeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsUsersMePasswordPost
     *
     * Change My Password.
     *
     */
    public function testObjectsUsersMePasswordPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsUsersMePermissionsGet
     *
     * Retrieve My User Permissions.
     *
     */
    public function testObjectsUsersMePermissionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsUsersMePut
     *
     * Update My User.
     *
     */
    public function testObjectsUsersMePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsUsersPost
     *
     * Create Single User.
     *
     */
    public function testObjectsUsersPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsUsersPut
     *
     * Update Multiple Users.
     *
     */
    public function testObjectsUsersPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsUsersUserIdDelete
     *
     * Disable User.
     *
     */
    public function testObjectsUsersUserIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsUsersUserIdVaultMembershipVaultIdPut
     *
     * Update Vault Membership.
     *
     */
    public function testObjectsUsersUserIdVaultMembershipVaultIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsVaultActionsComparePost
     *
     * Vault Compare.
     *
     */
    public function testObjectsVaultActionsComparePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for objectsVaultActionsConfigreportPost
     *
     * Vault Configuration Report.
     *
     */
    public function testObjectsVaultActionsConfigreportPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queryComponentsPost
     *
     * Component Definition Query.
     *
     */
    public function testQueryComponentsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queryNextPagePost
     *
     * Next Page URL.
     *
     */
    public function testQueryNextPagePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queryPost
     *
     * Submitting a Query.
     *
     */
    public function testQueryPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queryPreviousPagePost
     *
     * Previous Page URL.
     *
     */
    public function testQueryPreviousPagePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for scimV2MeGet
     *
     * Retrieve Current User with SCIM.
     *
     */
    public function testScimV2MeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for scimV2MePut
     *
     * Update Current User with SCIM.
     *
     */
    public function testScimV2MePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for scimV2ResourceTypesGet
     *
     * Retrieve All SCIM Resource Types.
     *
     */
    public function testScimV2ResourceTypesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for scimV2ResourceTypesTypeGet
     *
     * Retrieve Single SCIM Resource Type.
     *
     */
    public function testScimV2ResourceTypesTypeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for scimV2SchemasGet
     *
     * Retrieve All SCIM Schema Information.
     *
     */
    public function testScimV2SchemasGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for scimV2SchemasIdGet
     *
     * Retrieve Single SCIM Schema Information.
     *
     */
    public function testScimV2SchemasIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for scimV2ServiceProviderConfigGet
     *
     * Retrieve SCIM Provider.
     *
     */
    public function testScimV2ServiceProviderConfigGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for scimV2TypeGet
     *
     * Retrieve SCIM Resources.
     *
     */
    public function testScimV2TypeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for scimV2TypeIdGet
     *
     * Retrieve Single SCIM Resource.
     *
     */
    public function testScimV2TypeIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for scimV2UsersGet
     *
     * Retrieve All Users with SCIM.
     *
     */
    public function testScimV2UsersGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for scimV2UsersIdGet
     *
     * Retrieve Single User with SCIM.
     *
     */
    public function testScimV2UsersIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for scimV2UsersIdPut
     *
     * Update User with SCIM.
     *
     */
    public function testScimV2UsersIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for scimV2UsersPost
     *
     * Create User with SCIM.
     *
     */
    public function testScimV2UsersPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesCertificateCertIdGet
     *
     * Retrieve Signing Certificate.
     *
     */
    public function testServicesCertificateCertIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesConfigurationModeActionsDisablePost
     *
     * Disable Configuration Mode.
     *
     */
    public function testServicesConfigurationModeActionsDisablePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesConfigurationModeActionsEnablePost
     *
     * Enable Configuration Mode.
     *
     */
    public function testServicesConfigurationModeActionsEnablePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesDirectdataFilesGet
     *
     * Retrieve Available Direct Data Files.
     *
     */
    public function testServicesDirectdataFilesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesDirectdataFilesNameGet
     *
     * Download Direct Data File.
     *
     */
    public function testServicesDirectdataFilesNameGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesFileStagingItemsContentItemGet
     *
     * Download Item Content.
     *
     */
    public function testServicesFileStagingItemsContentItemGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesFileStagingItemsItemDelete
     *
     * Delete File or Folder.
     *
     */
    public function testServicesFileStagingItemsItemDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesFileStagingItemsItemGet
     *
     * List Items at a Path.
     *
     */
    public function testServicesFileStagingItemsItemGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesFileStagingItemsItemPut
     *
     * Update Folder or File.
     *
     */
    public function testServicesFileStagingItemsItemPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesFileStagingItemsPost
     *
     * Create Folder or File.
     *
     */
    public function testServicesFileStagingItemsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesFileStagingUploadGet
     *
     * List Upload Sessions.
     *
     */
    public function testServicesFileStagingUploadGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesFileStagingUploadPost
     *
     * Create Resumable Upload Session.
     *
     */
    public function testServicesFileStagingUploadPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesFileStagingUploadUploadSessionIdDelete
     *
     * Abort Upload Session.
     *
     */
    public function testServicesFileStagingUploadUploadSessionIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesFileStagingUploadUploadSessionIdGet
     *
     * Get Upload Session Details.
     *
     */
    public function testServicesFileStagingUploadUploadSessionIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesFileStagingUploadUploadSessionIdPartsGet
     *
     * List File Parts Uploaded to Session.
     *
     */
    public function testServicesFileStagingUploadUploadSessionIdPartsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesFileStagingUploadUploadSessionIdPost
     *
     * Commit Upload Session.
     *
     */
    public function testServicesFileStagingUploadUploadSessionIdPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesFileStagingUploadUploadSessionIdPut
     *
     * Upload to a Session.
     *
     */
    public function testServicesFileStagingUploadUploadSessionIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesJobsHistoriesGet
     *
     * Retrieve Job Histories.
     *
     */
    public function testServicesJobsHistoriesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesJobsJobIdErrorsGet
     *
     * Retrieve Import Bulk Translation File Job Errors.
     *
     */
    public function testServicesJobsJobIdErrorsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesJobsJobIdGet
     *
     * Retrieve Job Status.
     *
     */
    public function testServicesJobsJobIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesJobsJobIdSummaryGet
     *
     * Retrieve Import Bulk Translation File Job Summary.
     *
     */
    public function testServicesJobsJobIdSummaryGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesJobsJobIdTasksGet
     *
     * Retrieve SDK Job Tasks.
     *
     */
    public function testServicesJobsJobIdTasksGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesJobsMonitorsGet
     *
     * Retrieve Job Monitors.
     *
     */
    public function testServicesJobsMonitorsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesJobsStartNowJobIdPost
     *
     * Start Job.
     *
     */
    public function testServicesJobsStartNowJobIdPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesLoaderExtractPost
     *
     * Extract Data Files.
     *
     */
    public function testServicesLoaderExtractPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesLoaderJobIdTasksTaskIdFailurelogGet
     *
     * Retrieve Load Failure Log Results.
     *
     */
    public function testServicesLoaderJobIdTasksTaskIdFailurelogGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesLoaderJobIdTasksTaskIdResultsGet
     *
     * Retrieve Loader Extract Results.
     *
     */
    public function testServicesLoaderJobIdTasksTaskIdResultsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesLoaderJobIdTasksTaskIdResultsRenditionsGet
     *
     * Retrieve Loader Extract Renditions Results.
     *
     */
    public function testServicesLoaderJobIdTasksTaskIdResultsRenditionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesLoaderJobIdTasksTaskIdSuccesslogGet
     *
     * Retrieve Load Success Log Results.
     *
     */
    public function testServicesLoaderJobIdTasksTaskIdSuccesslogGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesLoaderLoadPost
     *
     * Load Data Objects.
     *
     */
    public function testServicesLoaderLoadPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesPackageActionsValidatePost
     *
     * Validate Package.
     *
     */
    public function testServicesPackageActionsValidatePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesPackagePost
     *
     * Export Package.
     *
     */
    public function testServicesPackagePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesPackagePut
     *
     * Import Package.
     *
     */
    public function testServicesPackagePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesQueuesGet
     *
     * Retrieve All Queues.
     *
     */
    public function testServicesQueuesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesQueuesQueueNameActionsDisableDeliveryPut
     *
     * Disable Delivery.
     *
     */
    public function testServicesQueuesQueueNameActionsDisableDeliveryPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesQueuesQueueNameActionsEnableDeliveryPut
     *
     * Enable Delivery.
     *
     */
    public function testServicesQueuesQueueNameActionsEnableDeliveryPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesQueuesQueueNameActionsResetPut
     *
     * Reset Queue.
     *
     */
    public function testServicesQueuesQueueNameActionsResetPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesQueuesQueueNameGet
     *
     * Retrieve Queue Status.
     *
     */
    public function testServicesQueuesQueueNameGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesVobjectVaultPackageVPackageIdActionsValidatePost
     *
     * Validate Imported Package.
     *
     */
    public function testServicesVobjectVaultPackageVPackageIdActionsValidatePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sessionDelete
     *
     * End Session.
     *
     */
    public function testSessionDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uicodeDistributionsDistributionNameCodeGet
     *
     * Download Single Client Code Distribution.
     *
     */
    public function testUicodeDistributionsDistributionNameCodeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uicodeDistributionsDistributionNameDelete
     *
     * Delete Single Client Code Distribution.
     *
     */
    public function testUicodeDistributionsDistributionNameDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uicodeDistributionsDistributionNameGet
     *
     * Retrieve Single Client Code Distribution Metadata.
     *
     */
    public function testUicodeDistributionsDistributionNameGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uicodeDistributionsGet
     *
     * Retrieve All Client Code Distribution Metadata.
     *
     */
    public function testUicodeDistributionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uicodeDistributionsPost
     *
     * Add or Replace Single Client Code Distribution.
     *
     */
    public function testUicodeDistributionsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectVaultPackageVPackageIdActionsDeployPost
     *
     * Deploy Package.
     *
     */
    public function testVobjectVaultPackageVPackageIdActionsDeployPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectVaultPackageVPackageIdActionsDeployResultsGet
     *
     * Retrieve Package Deploy Results.
     *
     */
    public function testVobjectVaultPackageVPackageIdActionsDeployResultsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet
     *
     * Retrieve Results of Cascade Delete Job.
     *
     */
    public function testVobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet
     *
     * Retrieve Results of Deep Copy Job.
     *
     */
    public function testVobjectsDeepcopyResultsObjectNameJobStatusJobIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsEdlItemVActionsCreateplaceholderPost
     *
     * Create a Placeholder from an EDL Item.
     *
     */
    public function testVobjectsEdlItemVActionsCreateplaceholderPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsMergesJobIdLogGet
     *
     * Download Merge Records Job Log.
     *
     */
    public function testVobjectsMergesJobIdLogGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsMergesJobIdResultsGet
     *
     * Retrieve Record Merge Results.
     *
     */
    public function testVobjectsMergesJobIdResultsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsMergesJobIdStatusGet
     *
     * Retrieve Record Merge Status.
     *
     */
    public function testVobjectsMergesJobIdStatusGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameActionsActionNamePost
     *
     * Initiate Object Action on Multiple Records.
     *
     */
    public function testVobjectsObjectNameActionsActionNamePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameActionsChangetypePost
     *
     * Change Object Type.
     *
     */
    public function testVobjectsObjectNameActionsChangetypePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameActionsMergePost
     *
     * Initiate Record Merge.
     *
     */
    public function testVobjectsObjectNameActionsMergePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameActionsRecalculaterollupsGet
     *
     * Retrieve Roll-up Field Recalculation Status.
     *
     */
    public function testVobjectsObjectNameActionsRecalculaterollupsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameActionsRecalculaterollupsPost
     *
     * Recalculate Roll-up Fields.
     *
     */
    public function testVobjectsObjectNameActionsRecalculaterollupsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameActionsUpdatecorporatecurrencyPut
     *
     * Update Corporate Currency Fields.
     *
     */
    public function testVobjectsObjectNameActionsUpdatecorporatecurrencyPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameAttachmentsBatchDelete
     *
     * Delete Multiple Object Record Attachments.
     *
     */
    public function testVobjectsObjectNameAttachmentsBatchDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameAttachmentsBatchPost
     *
     * Create Multiple Object Record Attachments.
     *
     */
    public function testVobjectsObjectNameAttachmentsBatchPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameAttachmentsBatchPut
     *
     * Update Multiple Object Record Attachment Descriptions.
     *
     */
    public function testVobjectsObjectNameAttachmentsBatchPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameDelete
     *
     * Delete Object Records.
     *
     */
    public function testVobjectsObjectNameDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameIdRolesRoleNameGet
     *
     * Retrieve Object Record Roles.
     *
     */
    public function testVobjectsObjectNameIdRolesRoleNameGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameObjectRecordIdActionsActionNameGet
     *
     * Retrieve Object User Actions Details.
     *
     */
    public function testVobjectsObjectNameObjectRecordIdActionsActionNameGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameObjectRecordIdActionsActionNamePost
     *
     * Initiate Object Action on a Single Record.
     *
     */
    public function testVobjectsObjectNameObjectRecordIdActionsActionNamePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameObjectRecordIdActionsCascadedeletePost
     *
     * Cascade Delete Object Record.
     *
     */
    public function testVobjectsObjectNameObjectRecordIdActionsCascadedeletePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameObjectRecordIdActionsDeepcopyPost
     *
     * Deep Copy Object Record.
     *
     */
    public function testVobjectsObjectNameObjectRecordIdActionsDeepcopyPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameObjectRecordIdActionsGet
     *
     * Retrieve Object Record User Actions.
     *
     */
    public function testVobjectsObjectNameObjectRecordIdActionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet
     *
     * Download Attachment Field File.
     *
     */
    public function testVobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost
     *
     * Update Attachment Field File.
     *
     */
    public function testVobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet
     *
     * Download All Attachment Field Files.
     *
     */
    public function testVobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete
     *
     * Delete Object Record Attachment.
     *
     */
    public function testVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet
     *
     * Retrieve Object Record Attachment Metadata.
     *
     */
    public function testVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut
     *
     * Update Object Record Attachment Description.
     *
     */
    public function testVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete
     *
     * Delete Object Record Attachment Version.
     *
     */
    public function testVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet
     *
     * Download Object Record Attachment File.
     *
     */
    public function testVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet
     *
     * Retrieve Object Record Attachment Version Metadata.
     *
     */
    public function testVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost
     *
     * Restore Object Record Attachment Version.
     *
     */
    public function testVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet
     *
     * Retrieve Object Record Attachment Versions.
     *
     */
    public function testVobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameObjectRecordIdAttachmentsFileGet
     *
     * Download All Object Record Attachment Files.
     *
     */
    public function testVobjectsObjectNameObjectRecordIdAttachmentsFileGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameObjectRecordIdAttachmentsGet
     *
     * Retrieve Object Record Attachments.
     *
     */
    public function testVobjectsObjectNameObjectRecordIdAttachmentsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameObjectRecordIdAttachmentsPost
     *
     * Create Object Record Attachment.
     *
     */
    public function testVobjectsObjectNameObjectRecordIdAttachmentsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameObjectRecordIdAudittrailGet
     *
     * Retrieve Complete Audit History for a Single Object Record.
     *
     */
    public function testVobjectsObjectNameObjectRecordIdAudittrailGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameObjectRecordIdGet
     *
     * Retrieve Object Record.
     *
     */
    public function testVobjectsObjectNameObjectRecordIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNamePost
     *
     * Create & Upsert Object Records.
     *
     */
    public function testVobjectsObjectNamePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNamePut
     *
     * Update Object Records.
     *
     */
    public function testVobjectsObjectNamePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameRolesDelete
     *
     * Remove Users & Groups from Roles on Object Records.
     *
     */
    public function testVobjectsObjectNameRolesDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsObjectNameRolesPost
     *
     * Assign Users & Groups to Roles on Object Records.
     *
     */
    public function testVobjectsObjectNameRolesPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vobjectsOutboundPackageVPackageIdDependenciesGet
     *
     * Retrieve Outbound Package Dependencies.
     *
     */
    public function testVobjectsOutboundPackageVPackageIdDependenciesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
