/**
 * Veeva Vault API v25.1
 * The latest GA version of the Vault REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import VobjectsObjectNameActionsMergePostRequestInner from '../model/VobjectsObjectNameActionsMergePostRequestInner';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiGet operation.
     * @callback module:api/DefaultApi~apiGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve API Versions
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~apiGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['{{vaultDNS}}/api', 'login.veevavault.com/api'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/api/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMdlComponentsComponentTypeAndRecordNameFilesGet operation.
     * @callback module:api/DefaultApi~apiMdlComponentsComponentTypeAndRecordNameFilesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Content File
     * @param {String} componentTypeAndRecordName The component type of the record followed by the name of the record from which to retrieve the content file. The format is `{Componenttype}.{record_name}`. For example, `Formattedoutput.my_formatted_output__c`.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~apiMdlComponentsComponentTypeAndRecordNameFilesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiMdlComponentsComponentTypeAndRecordNameFilesGet(componentTypeAndRecordName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'componentTypeAndRecordName' is set
      if (componentTypeAndRecordName === undefined || componentTypeAndRecordName === null) {
        throw new Error("Missing the required parameter 'componentTypeAndRecordName' when calling apiMdlComponentsComponentTypeAndRecordNameFilesGet");
      }

      let pathParams = {
        'component_type_and_record_name': componentTypeAndRecordName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/mdl/components/{component_type_and_record_name}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMdlComponentsComponentTypeAndRecordNameGet operation.
     * @callback module:api/DefaultApi~apiMdlComponentsComponentTypeAndRecordNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Component Record (MDL)
     * @param {String} componentTypeAndRecordName The component type name (`Picklist`, `Docfield`, `Doctype`, etc.) followed by the name of the record from which to retrieve metadata. The format is `{Componenttype}.{record_name}`. For example, `Picklist.color__c`. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~apiMdlComponentsComponentTypeAndRecordNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiMdlComponentsComponentTypeAndRecordNameGet(componentTypeAndRecordName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'componentTypeAndRecordName' is set
      if (componentTypeAndRecordName === undefined || componentTypeAndRecordName === null) {
        throw new Error("Missing the required parameter 'componentTypeAndRecordName' when calling apiMdlComponentsComponentTypeAndRecordNameGet");
      }

      let pathParams = {
        'component_type_and_record_name': componentTypeAndRecordName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/mdl/components/{component_type_and_record_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMdlExecuteAsyncJobIdResultsGet operation.
     * @callback module:api/DefaultApi~apiMdlExecuteAsyncJobIdResultsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Asynchronous MDL Script Results
     * @param {String} jobId 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~apiMdlExecuteAsyncJobIdResultsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiMdlExecuteAsyncJobIdResultsGet(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling apiMdlExecuteAsyncJobIdResultsGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/mdl/execute_async/{job_id}/results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMdlExecuteAsyncPost operation.
     * @callback module:api/DefaultApi~apiMdlExecuteAsyncPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute MDL Script Asynchronously
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~apiMdlExecuteAsyncPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiMdlExecuteAsyncPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/mdl/execute_async', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMdlExecutePost operation.
     * @callback module:api/DefaultApi~apiMdlExecutePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute MDL Script
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~apiMdlExecutePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiMdlExecutePost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/mdl/execute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMdlFilesPost operation.
     * @callback module:api/DefaultApi~apiMdlFilesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload Content File
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~apiMdlFilesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiMdlFilesPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/mdl/files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the audittrailAuditTrailTypeGet operation.
     * @callback module:api/DefaultApi~audittrailAuditTrailTypeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Audit Details
     * @param {String} auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
     * @param {String} [endDate] Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
     * @param {String} [allDates] Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.
     * @param {String} [formatResult] To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.
     * @param {String} [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param {String} [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
     * @param {String} [objects] This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects=product__v,country__v. If omitted, defaults to all objects.
     * @param {String} [events] This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events=Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~audittrailAuditTrailTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    audittrailAuditTrailTypeGet(auditTrailType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'auditTrailType' is set
      if (auditTrailType === undefined || auditTrailType === null) {
        throw new Error("Missing the required parameter 'auditTrailType' when calling audittrailAuditTrailTypeGet");
      }

      let pathParams = {
        'audit_trail_type': auditTrailType
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'all_dates': opts['allDates'],
        'format_result': opts['formatResult'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'objects': opts['objects'],
        'events': opts['events']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/audittrail/{audit_trail_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authDiscoveryPost operation.
     * @callback module:api/DefaultApi~authDiscoveryPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authentication Type Discovery
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~authDiscoveryPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authDiscoveryPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/auth/discovery', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authOauthSessionOathOidcProfileIdPost operation.
     * @callback module:api/DefaultApi~authOauthSessionOathOidcProfileIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * OAuth 2.0 / OpenID Connect
     * @param {String} oathOidcProfileId 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~authOauthSessionOathOidcProfileIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authOauthSessionOathOidcProfileIdPost(oathOidcProfileId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'oathOidcProfileId' is set
      if (oathOidcProfileId === undefined || oathOidcProfileId === null) {
        throw new Error("Missing the required parameter 'oathOidcProfileId' when calling authOauthSessionOathOidcProfileIdPost");
      }

      let pathParams = {
        'oath_oidc_profile_id': oathOidcProfileId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/auth/oauth/session/{oath_oidc_profile_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authPost operation.
     * @callback module:api/DefaultApi~authPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User Name and Password
     * @param {Object} opts Optional parameters
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~authPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/auth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codeClassNameDelete operation.
     * @callback module:api/DefaultApi~codeClassNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Single Source Code File
     * @param {String} className The fully qualified class name of your file.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~codeClassNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codeClassNameDelete(className, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'className' is set
      if (className === undefined || className === null) {
        throw new Error("Missing the required parameter 'className' when calling codeClassNameDelete");
      }

      let pathParams = {
        'class_name': className
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/code/{class_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codeClassNameDisablePut operation.
     * @callback module:api/DefaultApi~codeClassNameDisablePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable Vault Extension
     * @param {String} className The fully qualified class name of your file.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~codeClassNameDisablePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codeClassNameDisablePut(className, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'className' is set
      if (className === undefined || className === null) {
        throw new Error("Missing the required parameter 'className' when calling codeClassNameDisablePut");
      }

      let pathParams = {
        'class_name': className
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/code/{class_name}/disable', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codeClassNameEnablePut operation.
     * @callback module:api/DefaultApi~codeClassNameEnablePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable Vault Extension
     * @param {String} className The fully qualified class name of your file.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~codeClassNameEnablePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codeClassNameEnablePut(className, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'className' is set
      if (className === undefined || className === null) {
        throw new Error("Missing the required parameter 'className' when calling codeClassNameEnablePut");
      }

      let pathParams = {
        'class_name': className
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/code/{class_name}/enable', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codeClassNameGet operation.
     * @callback module:api/DefaultApi~codeClassNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Single Source Code File
     * @param {String} className The fully qualified class name of your file.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~codeClassNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codeClassNameGet(className, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'className' is set
      if (className === undefined || className === null) {
        throw new Error("Missing the required parameter 'className' when calling codeClassNameGet");
      }

      let pathParams = {
        'class_name': className
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/code/{class_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codeProfilerGet operation.
     * @callback module:api/DefaultApi~codeProfilerGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve All Profiling Sessions
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~codeProfilerGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codeProfilerGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/code/profiler', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codeProfilerPost operation.
     * @callback module:api/DefaultApi~codeProfilerPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Profiling Session
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~codeProfilerPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codeProfilerPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/code/profiler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codeProfilerSessionNameActionsEndPost operation.
     * @callback module:api/DefaultApi~codeProfilerSessionNameActionsEndPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * End Profiling Session
     * @param {String} sessionName The name of the session, for example,  baseline__c.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~codeProfilerSessionNameActionsEndPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codeProfilerSessionNameActionsEndPost(sessionName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sessionName' is set
      if (sessionName === undefined || sessionName === null) {
        throw new Error("Missing the required parameter 'sessionName' when calling codeProfilerSessionNameActionsEndPost");
      }

      let pathParams = {
        'session_name': sessionName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/code/profiler/{session_name}/actions/end', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codeProfilerSessionNameDelete operation.
     * @callback module:api/DefaultApi~codeProfilerSessionNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Profiling Session
     * @param {String} sessionName The name of the session, for example,  baseline__c.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~codeProfilerSessionNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codeProfilerSessionNameDelete(sessionName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sessionName' is set
      if (sessionName === undefined || sessionName === null) {
        throw new Error("Missing the required parameter 'sessionName' when calling codeProfilerSessionNameDelete");
      }

      let pathParams = {
        'session_name': sessionName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/code/profiler/{session_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codeProfilerSessionNameGet operation.
     * @callback module:api/DefaultApi~codeProfilerSessionNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Profiling Session
     * @param {String} sessionName The name of the session, for example,  baseline__c.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~codeProfilerSessionNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codeProfilerSessionNameGet(sessionName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sessionName' is set
      if (sessionName === undefined || sessionName === null) {
        throw new Error("Missing the required parameter 'sessionName' when calling codeProfilerSessionNameGet");
      }

      let pathParams = {
        'session_name': sessionName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/code/profiler/{session_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codeProfilerSessionNameResultsGet operation.
     * @callback module:api/DefaultApi~codeProfilerSessionNameResultsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Profiling Session Results
     * @param {String} sessionName The name of the session, for example,  baseline__c.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~codeProfilerSessionNameResultsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codeProfilerSessionNameResultsGet(sessionName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sessionName' is set
      if (sessionName === undefined || sessionName === null) {
        throw new Error("Missing the required parameter 'sessionName' when calling codeProfilerSessionNameResultsGet");
      }

      let pathParams = {
        'session_name': sessionName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/code/profiler/{session_name}/results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codePut operation.
     * @callback module:api/DefaultApi~codePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or Replace Single Source Code File
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~codePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codePut(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/code', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the compositesTreesEdlHierarchyOrTemplateActionsListnodesPost operation.
     * @callback module:api/DefaultApi~compositesTreesEdlHierarchyOrTemplateActionsListnodesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Specific Root Nodes
     * @param {String} edlHierarchyOrTemplate Choose to retrieve either edl_hierarchy__v or edl_template__v
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~compositesTreesEdlHierarchyOrTemplateActionsListnodesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(edlHierarchyOrTemplate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'edlHierarchyOrTemplate' is set
      if (edlHierarchyOrTemplate === undefined || edlHierarchyOrTemplate === null) {
        throw new Error("Missing the required parameter 'edlHierarchyOrTemplate' when calling compositesTreesEdlHierarchyOrTemplateActionsListnodesPost");
      }

      let pathParams = {
        'edl_hierarchy_or_template': edlHierarchyOrTemplate
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/composites/trees/{edl_hierarchy_or_template}/actions/listnodes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the compositesTreesEdlHierarchyOrTemplateGet operation.
     * @callback module:api/DefaultApi~compositesTreesEdlHierarchyOrTemplateGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve All Root Nodes
     * @param {String} edlHierarchyOrTemplate 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~compositesTreesEdlHierarchyOrTemplateGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    compositesTreesEdlHierarchyOrTemplateGet(edlHierarchyOrTemplate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'edlHierarchyOrTemplate' is set
      if (edlHierarchyOrTemplate === undefined || edlHierarchyOrTemplate === null) {
        throw new Error("Missing the required parameter 'edlHierarchyOrTemplate' when calling compositesTreesEdlHierarchyOrTemplateGet");
      }

      let pathParams = {
        'edl_hierarchy_or_template': edlHierarchyOrTemplate
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/composites/trees/{edl_hierarchy_or_template}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the compositesTreesEdlHierarchyVParentNodeIdChildrenGet operation.
     * @callback module:api/DefaultApi~compositesTreesEdlHierarchyVParentNodeIdChildrenGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Node's Children
     * @param {String} parentNodeId The ID of a parent node in the hierarchy.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~compositesTreesEdlHierarchyVParentNodeIdChildrenGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    compositesTreesEdlHierarchyVParentNodeIdChildrenGet(parentNodeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'parentNodeId' is set
      if (parentNodeId === undefined || parentNodeId === null) {
        throw new Error("Missing the required parameter 'parentNodeId' when calling compositesTreesEdlHierarchyVParentNodeIdChildrenGet");
      }

      let pathParams = {
        'parent_node_id': parentNodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/composites/trees/edl_hierarchy__v/{parent_node_id}/children', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the compositesTreesEdlHierarchyVParentNodeIdChildrenPut operation.
     * @callback module:api/DefaultApi~compositesTreesEdlHierarchyVParentNodeIdChildrenPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Node Order
     * @param {String} parentNodeId The ID of a parent node in the hierarchy.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~compositesTreesEdlHierarchyVParentNodeIdChildrenPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    compositesTreesEdlHierarchyVParentNodeIdChildrenPut(parentNodeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'parentNodeId' is set
      if (parentNodeId === undefined || parentNodeId === null) {
        throw new Error("Missing the required parameter 'parentNodeId' when calling compositesTreesEdlHierarchyVParentNodeIdChildrenPut");
      }

      let pathParams = {
        'parent_node_id': parentNodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/composites/trees/edl_hierarchy__v/{parent_node_id}/children', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationComponentTypeAndRecordNameGet operation.
     * @callback module:api/DefaultApi~configurationComponentTypeAndRecordNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Component Record (XML/JSON)
     * @param {String} componentTypeAndRecordName The component type name (`Picklist`, `Docfield`, `Doctype`, etc.) followed by the name of the record from which to retrieve metadata. The format is `{Componenttype}.{record_name}`. For example, `Picklist.color__c`. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
     * @param {Object} opts Optional parameters
     * @param {String} [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~configurationComponentTypeAndRecordNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    configurationComponentTypeAndRecordNameGet(componentTypeAndRecordName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'componentTypeAndRecordName' is set
      if (componentTypeAndRecordName === undefined || componentTypeAndRecordName === null) {
        throw new Error("Missing the required parameter 'componentTypeAndRecordName' when calling configurationComponentTypeAndRecordNameGet");
      }

      let pathParams = {
        'component_type_and_record_name': componentTypeAndRecordName
      };
      let queryParams = {
        'loc': opts['loc']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/configuration/{component_type_and_record_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationComponentTypeGet operation.
     * @callback module:api/DefaultApi~configurationComponentTypeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Component Record Collection
     * @param {String} componentType 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~configurationComponentTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    configurationComponentTypeGet(componentType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'componentType' is set
      if (componentType === undefined || componentType === null) {
        throw new Error("Missing the required parameter 'componentType' when calling configurationComponentTypeGet");
      }

      let pathParams = {
        'component_type': componentType
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/configuration/{component_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationObjectNameAndObjectTypeGet operation.
     * @callback module:api/DefaultApi~configurationObjectNameAndObjectTypeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Details from a Specific Object
     * @param {String} objectNameAndObjectType The object name followed by the object type in the format `Objecttype.{object_name}.{object_type}`. For example, `Objecttype.product__v.base__v`.
     * @param {Object} opts Optional parameters
     * @param {String} [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~configurationObjectNameAndObjectTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    configurationObjectNameAndObjectTypeGet(objectNameAndObjectType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectNameAndObjectType' is set
      if (objectNameAndObjectType === undefined || objectNameAndObjectType === null) {
        throw new Error("Missing the required parameter 'objectNameAndObjectType' when calling configurationObjectNameAndObjectTypeGet");
      }

      let pathParams = {
        'object_name_and_object_type': objectNameAndObjectType
      };
      let queryParams = {
        'loc': opts['loc']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/configuration/{object_name_and_object_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationObjecttypeGet operation.
     * @callback module:api/DefaultApi~configurationObjecttypeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Details from All Object Types
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~configurationObjecttypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    configurationObjecttypeGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/configuration/Objecttype', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationRoleAssignmentRuleDelete operation.
     * @callback module:api/DefaultApi~configurationRoleAssignmentRuleDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Lifecycle Role Assignment Override Rules
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~configurationRoleAssignmentRuleDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    configurationRoleAssignmentRuleDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/configuration/role_assignment_rule', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationRoleAssignmentRuleGet operation.
     * @callback module:api/DefaultApi~configurationRoleAssignmentRuleGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Lifecycle Role Assignment Rules (Default & Override)
     * @param {Object} opts Optional parameters
     * @param {String} [lifecycleV] Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v=general_lifecycle__c
     * @param {String} [roleV] Include the name of the role from which to retrieve information. For example: role__v=editor__c
     * @param {String} [productV] Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v=0PR0011001 or product__v.name__v=CholeCap
     * @param {String} [countryV] Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v=0CR0022002 or country__v.name__v=United States
     * @param {String} [studyV] In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v=0ST0021J01 or study__v.name__v=CholeCap Study
     * @param {String} [studyCountryV] In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v=0SC0001001 or study_country__v.name__v=Germany
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~configurationRoleAssignmentRuleGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    configurationRoleAssignmentRuleGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'lifecycle__v': opts['lifecycleV'],
        'role__v': opts['roleV'],
        'product__v': opts['productV'],
        'country__v': opts['countryV'],
        'study__v': opts['studyV'],
        'study_country__v': opts['studyCountryV']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/configuration/role_assignment_rule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationRoleAssignmentRulePost operation.
     * @callback module:api/DefaultApi~configurationRoleAssignmentRulePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Lifecycle Role Assignment Override Rules
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~configurationRoleAssignmentRulePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    configurationRoleAssignmentRulePost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/configuration/role_assignment_rule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationRoleAssignmentRulePut operation.
     * @callback module:api/DefaultApi~configurationRoleAssignmentRulePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Lifecycle Role Assignment Rules (Default & Override)
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~configurationRoleAssignmentRulePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    configurationRoleAssignmentRulePut(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/configuration/role_assignment_rule', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delegationLoginPost operation.
     * @callback module:api/DefaultApi~delegationLoginPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate Delegated Session
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~delegationLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    delegationLoginPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/delegation/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delegationVaultsGet operation.
     * @callback module:api/DefaultApi~delegationVaultsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Delegations
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~delegationVaultsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    delegationVaultsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/delegation/vaults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the keepAlivePost operation.
     * @callback module:api/DefaultApi~keepAlivePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Session Keep Alive
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~keepAlivePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    keepAlivePost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/keep-alive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the limitsGet operation.
     * @callback module:api/DefaultApi~limitsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Limits on Objects
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~limitsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    limitsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/limits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsApiUsageGet operation.
     * @callback module:api/DefaultApi~logsApiUsageGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Daily API Usage
     * @param {Object} opts Optional parameters
     * @param {String} [date] The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.
     * @param {String} [logFormat] Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~logsApiUsageGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logsApiUsageGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'date': opts['date'],
        'log_format': opts['logFormat']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/api_usage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsCodeDebugGet operation.
     * @callback module:api/DefaultApi~logsCodeDebugGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve All Debug Logs
     * @param {Object} opts Optional parameters
     * @param {String} [userId] Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.
     * @param {Boolean} [includeInactive] Set to `true` to include debug log sessions with a status of `inactive__sys` in the response. If omitted, defaults to `false` and inactive sessions are not included in the response.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~logsCodeDebugGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logsCodeDebugGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'user_id': opts['userId'],
        'include_inactive': opts['includeInactive']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/code/debug', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsCodeDebugIdActionsResetDelete operation.
     * @callback module:api/DefaultApi~logsCodeDebugIdActionsResetDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Debug Log
     * @param {String} id The ID of the debug log to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~logsCodeDebugIdActionsResetDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logsCodeDebugIdActionsResetDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling logsCodeDebugIdActionsResetDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/code/debug/{id}/actions/reset', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsCodeDebugIdActionsResetPost operation.
     * @callback module:api/DefaultApi~logsCodeDebugIdActionsResetPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset Debug Log
     * @param {String} id The ID of the debug log to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~logsCodeDebugIdActionsResetPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logsCodeDebugIdActionsResetPost(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling logsCodeDebugIdActionsResetPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/code/debug/{id}/actions/reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsCodeDebugIdFilesGet operation.
     * @callback module:api/DefaultApi~logsCodeDebugIdFilesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Debug Log Files
     * @param {String} id The ID of the debug log to download.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~logsCodeDebugIdFilesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logsCodeDebugIdFilesGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling logsCodeDebugIdFilesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/code/debug/{id}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsCodeDebugIdGet operation.
     * @callback module:api/DefaultApi~logsCodeDebugIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Single Debug Log
     * @param {String} id The ID of the debug log to retrieve.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~logsCodeDebugIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logsCodeDebugIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling logsCodeDebugIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/code/debug/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsCodeDebugPost operation.
     * @callback module:api/DefaultApi~logsCodeDebugPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Debug Log
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~logsCodeDebugPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logsCodeDebugPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/code/debug', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsCodeRuntimeGet operation.
     * @callback module:api/DefaultApi~logsCodeRuntimeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download SDK Runtime Log
     * @param {Object} opts Optional parameters
     * @param {String} [date] 
     * @param {String} [logFormat] Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~logsCodeRuntimeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logsCodeRuntimeGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'date': opts['date'],
        'log_format': opts['logFormat']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/code/runtime', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagesMessageTypeActionsImportPost operation.
     * @callback module:api/DefaultApi~messagesMessageTypeActionsImportPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import Bulk Translation File
     * @param {String} messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~messagesMessageTypeActionsImportPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    messagesMessageTypeActionsImportPost(messageType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'messageType' is set
      if (messageType === undefined || messageType === null) {
        throw new Error("Missing the required parameter 'messageType' when calling messagesMessageTypeActionsImportPost");
      }

      let pathParams = {
        'message_type': messageType
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/messages/{message_type}/actions/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagesMessageTypeLanguageLangActionsExportPost operation.
     * @callback module:api/DefaultApi~messagesMessageTypeLanguageLangActionsExportPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export Bulk Translation File
     * @param {String} messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
     * @param {String} lang A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~messagesMessageTypeLanguageLangActionsExportPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    messagesMessageTypeLanguageLangActionsExportPost(messageType, lang, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'messageType' is set
      if (messageType === undefined || messageType === null) {
        throw new Error("Missing the required parameter 'messageType' when calling messagesMessageTypeLanguageLangActionsExportPost");
      }
      // verify the required parameter 'lang' is set
      if (lang === undefined || lang === null) {
        throw new Error("Missing the required parameter 'lang' when calling messagesMessageTypeLanguageLangActionsExportPost");
      }

      let pathParams = {
        'message_type': messageType,
        'lang': lang
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/messages/{message_type}/language/{lang}/actions/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataAudittrailAuditTrailTypeGet operation.
     * @callback module:api/DefaultApi~metadataAudittrailAuditTrailTypeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Audit Metadata
     * @param {String} auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc).
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataAudittrailAuditTrailTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataAudittrailAuditTrailTypeGet(auditTrailType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'auditTrailType' is set
      if (auditTrailType === undefined || auditTrailType === null) {
        throw new Error("Missing the required parameter 'auditTrailType' when calling metadataAudittrailAuditTrailTypeGet");
      }

      let pathParams = {
        'audit_trail_type': auditTrailType
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/audittrail/{audit_trail_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataAudittrailGet operation.
     * @callback module:api/DefaultApi~metadataAudittrailGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Audit Types
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataAudittrailGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataAudittrailGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/audittrail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataComponentsComponentTypeGet operation.
     * @callback module:api/DefaultApi~metadataComponentsComponentTypeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Component Type Metadata
     * @param {String} componentType The component type name (Picklist, Docfield, Doctype, etc.).
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataComponentsComponentTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataComponentsComponentTypeGet(componentType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'componentType' is set
      if (componentType === undefined || componentType === null) {
        throw new Error("Missing the required parameter 'componentType' when calling metadataComponentsComponentTypeGet");
      }

      let pathParams = {
        'component_type': componentType
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/components/{component_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataComponentsGet operation.
     * @callback module:api/DefaultApi~metadataComponentsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve All Component Metadata
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataComponentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataComponentsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/components', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataObjectsBindersTemplatesBindernodesGet operation.
     * @callback module:api/DefaultApi~metadataObjectsBindersTemplatesBindernodesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Binder Template Node Metadata
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataObjectsBindersTemplatesBindernodesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataObjectsBindersTemplatesBindernodesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/objects/binders/templates/bindernodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataObjectsBindersTemplatesGet operation.
     * @callback module:api/DefaultApi~metadataObjectsBindersTemplatesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Binder Template Metadata
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataObjectsBindersTemplatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataObjectsBindersTemplatesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/objects/binders/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet operation.
     * @callback module:api/DefaultApi~metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Annotation Placemark Type Metadata
     * @param {String} placemarkType The name of the placemark type. For example, sticky__sys.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(placemarkType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'placemarkType' is set
      if (placemarkType === undefined || placemarkType === null) {
        throw new Error("Missing the required parameter 'placemarkType' when calling metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet");
      }

      let pathParams = {
        'placemark_type': placemarkType
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/objects/documents/annotations/placemarks/types/{placemark_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet operation.
     * @callback module:api/DefaultApi~metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Annotation Reference Type Metadata
     * @param {String} referenceType 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(referenceType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'referenceType' is set
      if (referenceType === undefined || referenceType === null) {
        throw new Error("Missing the required parameter 'referenceType' when calling metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet");
      }

      let pathParams = {
        'reference_type': referenceType
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/objects/documents/annotations/references/types/{reference_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet operation.
     * @callback module:api/DefaultApi~metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Annotation Type Metadata
     * @param {String} annotationType The name of the annotation type. Valid annotation types include: `note__sys` `line__sys` `document_link__sys` `permalink_link__sys` `anchor__sys` `reply__sys` `external_link__sys`  The following annotation types are only valid in Medical and PromoMats Vaults:  `suggested_link__sys` `approved_link__sys` `auto_link__sys` `keyword_link__sys`
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(annotationType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'annotationType' is set
      if (annotationType === undefined || annotationType === null) {
        throw new Error("Missing the required parameter 'annotationType' when calling metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet");
      }

      let pathParams = {
        'annotation_type': annotationType
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/objects/documents/annotations/types/{annotation_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet operation.
     * @callback module:api/DefaultApi~metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Event SubType Metadata
     * @param {String} eventType The event type. For example, distribution__v.
     * @param {String} eventSubtype The event subtype. For example, approved_email__v.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(eventType, eventSubtype, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventType' is set
      if (eventType === undefined || eventType === null) {
        throw new Error("Missing the required parameter 'eventType' when calling metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet");
      }
      // verify the required parameter 'eventSubtype' is set
      if (eventSubtype === undefined || eventSubtype === null) {
        throw new Error("Missing the required parameter 'eventSubtype' when calling metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet");
      }

      let pathParams = {
        'event_type': eventType,
        'event_subtype': eventSubtype
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/objects/documents/events/{event_type}/types/{event_subtype}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataObjectsDocumentsEventsGet operation.
     * @callback module:api/DefaultApi~metadataObjectsDocumentsEventsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Event Types and Subtypes
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataObjectsDocumentsEventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataObjectsDocumentsEventsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/objects/documents/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataObjectsDocumentsLockGet operation.
     * @callback module:api/DefaultApi~metadataObjectsDocumentsLockGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Lock Metadata
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataObjectsDocumentsLockGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataObjectsDocumentsLockGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/objects/documents/lock', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataObjectsDocumentsPropertiesFindCommonPost operation.
     * @callback module:api/DefaultApi~metadataObjectsDocumentsPropertiesFindCommonPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Common Document Fields
     * @param {Object} opts Optional parameters
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataObjectsDocumentsPropertiesFindCommonPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataObjectsDocumentsPropertiesFindCommonPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/objects/documents/properties/find_common', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataObjectsDocumentsPropertiesGet operation.
     * @callback module:api/DefaultApi~metadataObjectsDocumentsPropertiesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve All Document Fields
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataObjectsDocumentsPropertiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataObjectsDocumentsPropertiesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/objects/documents/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataObjectsDocumentsTemplatesGet operation.
     * @callback module:api/DefaultApi~metadataObjectsDocumentsTemplatesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Template Metadata
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataObjectsDocumentsTemplatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataObjectsDocumentsTemplatesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/objects/documents/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataObjectsDocumentsTypesGet operation.
     * @callback module:api/DefaultApi~metadataObjectsDocumentsTypesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve All Document Types
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataObjectsDocumentsTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataObjectsDocumentsTypesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/objects/documents/types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataObjectsDocumentsTypesTypeGet operation.
     * @callback module:api/DefaultApi~metadataObjectsDocumentsTypesTypeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Type
     * @param {String} type The document type. See Retrieve Document Types.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataObjectsDocumentsTypesTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataObjectsDocumentsTypesTypeGet(type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeGet");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/objects/documents/types/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataObjectsDocumentsTypesTypeRelationshipsGet operation.
     * @callback module:api/DefaultApi~metadataObjectsDocumentsTypesTypeRelationshipsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Type Relationships
     * @param {String} type The document type. See Retrieve Document Types.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataObjectsDocumentsTypesTypeRelationshipsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataObjectsDocumentsTypesTypeRelationshipsGet(type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeRelationshipsGet");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/objects/documents/types/{type}/relationships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet operation.
     * @callback module:api/DefaultApi~metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Classification
     * @param {String} type The document type. See Retrieve Document Types.
     * @param {String} subtype The document subtype. See Retrieve Document Types.
     * @param {String} classification The document classification. See Retrieve Document Types.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(type, subtype, classification, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet");
      }
      // verify the required parameter 'subtype' is set
      if (subtype === undefined || subtype === null) {
        throw new Error("Missing the required parameter 'subtype' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet");
      }
      // verify the required parameter 'classification' is set
      if (classification === undefined || classification === null) {
        throw new Error("Missing the required parameter 'classification' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet");
      }

      let pathParams = {
        'type': type,
        'subtype': subtype,
        'classification': classification
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet operation.
     * @callback module:api/DefaultApi~metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Subtype
     * @param {String} type The document type. See Retrieve Document Types.
     * @param {String} subtype The document subtype. See Retrieve Document Types.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(type, subtype, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet");
      }
      // verify the required parameter 'subtype' is set
      if (subtype === undefined || subtype === null) {
        throw new Error("Missing the required parameter 'subtype' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet");
      }

      let pathParams = {
        'type': type,
        'subtype': subtype
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/objects/documents/types/{type}/subtypes/{subtype}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataObjectsGroupsGet operation.
     * @callback module:api/DefaultApi~metadataObjectsGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Group Metadata
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataObjectsGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataObjectsGroupsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/objects/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataObjectsSecuritypoliciesGet operation.
     * @callback module:api/DefaultApi~metadataObjectsSecuritypoliciesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Security Policy Metadata
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataObjectsSecuritypoliciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataObjectsSecuritypoliciesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/objects/securitypolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataObjectsUsersGet operation.
     * @callback module:api/DefaultApi~metadataObjectsUsersGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve User Metadata
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataObjectsUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataObjectsUsersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/objects/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet operation.
     * @callback module:api/DefaultApi~metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Archived Document Signature Metadata
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/query/archived_documents/relationships/document_signature__sysr', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet operation.
     * @callback module:api/DefaultApi~metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Signature Metadata
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/query/documents/relationships/document_signature__sysr', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataVobjectsGet operation.
     * @callback module:api/DefaultApi~metadataVobjectsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Object Collection
     * @param {Object} opts Optional parameters
     * @param {Boolean} [loc] To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataVobjectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataVobjectsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'loc': opts['loc']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/vobjects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataVobjectsObjectNameActionsCanceldeploymentPost operation.
     * @callback module:api/DefaultApi~metadataVobjectsObjectNameActionsCanceldeploymentPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel Raw Object Deployment
     * @param {String} objectName 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataVobjectsObjectNameActionsCanceldeploymentPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataVobjectsObjectNameActionsCanceldeploymentPost(objectName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling metadataVobjectsObjectNameActionsCanceldeploymentPost");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/vobjects/{object_name}/actions/canceldeployment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataVobjectsObjectNameFieldsObjectFieldNameGet operation.
     * @callback module:api/DefaultApi~metadataVobjectsObjectNameFieldsObjectFieldNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Object Field Metadata
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectFieldName The object field name value (id, name__v, external_id__v, etc.).
     * @param {Object} opts Optional parameters
     * @param {Boolean} [loc] To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataVobjectsObjectNameFieldsObjectFieldNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataVobjectsObjectNameFieldsObjectFieldNameGet(objectName, objectFieldName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling metadataVobjectsObjectNameFieldsObjectFieldNameGet");
      }
      // verify the required parameter 'objectFieldName' is set
      if (objectFieldName === undefined || objectFieldName === null) {
        throw new Error("Missing the required parameter 'objectFieldName' when calling metadataVobjectsObjectNameFieldsObjectFieldNameGet");
      }

      let pathParams = {
        'object_name': objectName,
        'object_field_name': objectFieldName
      };
      let queryParams = {
        'loc': opts['loc']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/vobjects/{object_name}/fields/{object_field_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataVobjectsObjectNameGet operation.
     * @callback module:api/DefaultApi~metadataVobjectsObjectNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Object Metadata
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {Object} opts Optional parameters
     * @param {Boolean} [loc] To retrieve localized (translated) strings, include the parameter loc=true. See the next request below for details.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataVobjectsObjectNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataVobjectsObjectNameGet(objectName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling metadataVobjectsObjectNameGet");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
        'loc': opts['loc']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/vobjects/{object_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataVobjectsObjectNamePageLayoutsGet operation.
     * @callback module:api/DefaultApi~metadataVobjectsObjectNamePageLayoutsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Page Layouts
     * @param {String} objectName 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataVobjectsObjectNamePageLayoutsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataVobjectsObjectNamePageLayoutsGet(objectName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling metadataVobjectsObjectNamePageLayoutsGet");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/vobjects/{object_name}/page_layouts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metadataVobjectsObjectNamePageLayoutsLayoutNameGet operation.
     * @callback module:api/DefaultApi~metadataVobjectsObjectNamePageLayoutsLayoutNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Page Layout Metadata
     * @param {String} objectName The name of the object from which to retrieve page layout metadata.
     * @param {String} layoutName The name of the page layout from which to retrieve metadata.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~metadataVobjectsObjectNamePageLayoutsLayoutNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metadataVobjectsObjectNamePageLayoutsLayoutNameGet(objectName, layoutName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling metadataVobjectsObjectNamePageLayoutsLayoutNameGet");
      }
      // verify the required parameter 'layoutName' is set
      if (layoutName === undefined || layoutName === null) {
        throw new Error("Missing the required parameter 'layoutName' when calling metadataVobjectsObjectNamePageLayoutsLayoutNameGet");
      }

      let pathParams = {
        'object_name': objectName,
        'layout_name': layoutName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metadata/vobjects/{object_name}/page_layouts/{layout_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsHistoriesGet operation.
     * @callback module:api/DefaultApi~notificationsHistoriesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Email Notification Histories
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.
     * @param {String} [endDate] Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.
     * @param {Boolean} [allDates] Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.
     * @param {String} [formatResult] To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.
     * @param {String} [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param {String} [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~notificationsHistoriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationsHistoriesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'all_dates': opts['allDates'],
        'format_result': opts['formatResult'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/histories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectWorkflowActionsActionGet operation.
     * @callback module:api/DefaultApi~objectWorkflowActionsActionGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Bulk Workflow Action Details
     * @param {String} action 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectWorkflowActionsActionGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectWorkflowActionsActionGet(action, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling objectWorkflowActionsActionGet");
      }

      let pathParams = {
        'action': action
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/object/workflow/actions/{action}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectWorkflowActionsActionPost operation.
     * @callback module:api/DefaultApi~objectWorkflowActionsActionPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate Workflow Actions on Multiple Workflows
     * @param {String} action 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectWorkflowActionsActionPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectWorkflowActionsActionPost(action, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling objectWorkflowActionsActionPost");
      }

      let pathParams = {
        'action': action
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/object/workflow/actions/{action}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectWorkflowActionsCanceltasksPost operation.
     * @callback module:api/DefaultApi~objectWorkflowActionsCanceltasksPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel Workflow Tasks
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectWorkflowActionsCanceltasksPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectWorkflowActionsCanceltasksPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/object/workflow/actions/canceltasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectWorkflowActionsCancelworkflowsPost operation.
     * @callback module:api/DefaultApi~objectWorkflowActionsCancelworkflowsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel Workflows
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectWorkflowActionsCancelworkflowsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectWorkflowActionsCancelworkflowsPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/object/workflow/actions/cancelworkflows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectWorkflowActionsGet operation.
     * @callback module:api/DefaultApi~objectWorkflowActionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Bulk Workflow Actions
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectWorkflowActionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectWorkflowActionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/object/workflow/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectWorkflowActionsReassigntasksPost operation.
     * @callback module:api/DefaultApi~objectWorkflowActionsReassigntasksPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reassign Workflow Tasks
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectWorkflowActionsReassigntasksPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectWorkflowActionsReassigntasksPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/object/workflow/actions/reassigntasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectWorkflowActionsReplaceworkflowownerPost operation.
     * @callback module:api/DefaultApi~objectWorkflowActionsReplaceworkflowownerPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace Workflow Owner
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectWorkflowActionsReplaceworkflowownerPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectWorkflowActionsReplaceworkflowownerPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/object/workflow/actions/replaceworkflowowner', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersActionsExportJobIdResultsGet operation.
     * @callback module:api/DefaultApi~objectsBindersActionsExportJobIdResultsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Binder Export Results
     * @param {String} jobId The id value of the requested export job. This is returned with the export binder requests above.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersActionsExportJobIdResultsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersActionsExportJobIdResultsGet(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling objectsBindersActionsExportJobIdResultsGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/actions/export/{job_id}/results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersBinderIdActionsExportPost operation.
     * @callback module:api/DefaultApi~objectsBindersBinderIdActionsExportPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export Binder (Latest Version)
     * @param {String} binderId The binder id field value.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [source] to include source content or not
     * @param {String} [renditiontype] to include viewable renditions
     * @param {String} [docversion] to include all major versions
     * @param {String} [attachments] to include all versions of attachments
     * @param {String} [_export] configurable filename metadata
     * @param {Boolean} [docfield] to exclude document metadata csv
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersBinderIdActionsExportPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersBinderIdActionsExportPost(binderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdActionsExportPost");
      }

      let pathParams = {
        'binder_id': binderId
      };
      let queryParams = {
        'source': opts['source'],
        'renditiontype': opts['renditiontype'],
        'docversion': opts['docversion'],
        'attachments': opts['attachments'],
        'export': opts['_export'],
        'docfield': opts['docfield']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{binder_id}/actions/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersBinderIdActionsPost operation.
     * @callback module:api/DefaultApi~objectsBindersBinderIdActionsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh Binder Auto-Filing
     * @param {String} binderId The binder id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersBinderIdActionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersBinderIdActionsPost(binderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdActionsPost");
      }

      let pathParams = {
        'binder_id': binderId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{binder_id}/actions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersBinderIdBindingRulePut operation.
     * @callback module:api/DefaultApi~objectsBindersBinderIdBindingRulePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Binding Rule
     * @param {String} binderId The binder id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersBinderIdBindingRulePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersBinderIdBindingRulePut(binderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdBindingRulePut");
      }

      let pathParams = {
        'binder_id': binderId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{binder_id}/binding_rule', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersBinderIdDelete operation.
     * @callback module:api/DefaultApi~objectsBindersBinderIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Binder
     * @param {String} binderId The binder id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersBinderIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersBinderIdDelete(binderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdDelete");
      }

      let pathParams = {
        'binder_id': binderId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{binder_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersBinderIdDocumentsNodeIdBindingRulePut operation.
     * @callback module:api/DefaultApi~objectsBindersBinderIdDocumentsNodeIdBindingRulePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Binder Document Binding Rule
     * @param {String} binderId The binder id field value.
     * @param {String} nodeId The binder node id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersBinderIdDocumentsNodeIdBindingRulePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersBinderIdDocumentsNodeIdBindingRulePut(binderId, nodeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsNodeIdBindingRulePut");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling objectsBindersBinderIdDocumentsNodeIdBindingRulePut");
      }

      let pathParams = {
        'binder_id': binderId,
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{binder_id}/documents/{node_id}/binding_rule', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersBinderIdDocumentsPost operation.
     * @callback module:api/DefaultApi~objectsBindersBinderIdDocumentsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Document to Binder
     * @param {String} binderId The binder id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersBinderIdDocumentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersBinderIdDocumentsPost(binderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsPost");
      }

      let pathParams = {
        'binder_id': binderId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{binder_id}/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersBinderIdDocumentsSectionIdDelete operation.
     * @callback module:api/DefaultApi~objectsBindersBinderIdDocumentsSectionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Document from Binder
     * @param {String} binderId The binder id field value.
     * @param {String} sectionId The binder node id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersBinderIdDocumentsSectionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersBinderIdDocumentsSectionIdDelete(binderId, sectionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsSectionIdDelete");
      }
      // verify the required parameter 'sectionId' is set
      if (sectionId === undefined || sectionId === null) {
        throw new Error("Missing the required parameter 'sectionId' when calling objectsBindersBinderIdDocumentsSectionIdDelete");
      }

      let pathParams = {
        'binder_id': binderId,
        'section_id': sectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{binder_id}/documents/{section_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersBinderIdDocumentsSectionIdPut operation.
     * @callback module:api/DefaultApi~objectsBindersBinderIdDocumentsSectionIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move Document in Binder
     * @param {String} binderId The binder id field value.
     * @param {String} sectionId The binder node id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersBinderIdDocumentsSectionIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersBinderIdDocumentsSectionIdPut(binderId, sectionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsSectionIdPut");
      }
      // verify the required parameter 'sectionId' is set
      if (sectionId === undefined || sectionId === null) {
        throw new Error("Missing the required parameter 'sectionId' when calling objectsBindersBinderIdDocumentsSectionIdPut");
      }

      let pathParams = {
        'binder_id': binderId,
        'section_id': sectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{binder_id}/documents/{section_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersBinderIdGet operation.
     * @callback module:api/DefaultApi~objectsBindersBinderIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Binder
     * @param {String} binderId The binder id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [depth] To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersBinderIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersBinderIdGet(binderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdGet");
      }

      let pathParams = {
        'binder_id': binderId
      };
      let queryParams = {
        'depth': opts['depth']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{binder_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersBinderIdPost operation.
     * @callback module:api/DefaultApi~objectsBindersBinderIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Binder Version
     * @param {String} binderId The binder id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersBinderIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersBinderIdPost(binderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdPost");
      }

      let pathParams = {
        'binder_id': binderId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{binder_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersBinderIdPut operation.
     * @callback module:api/DefaultApi~objectsBindersBinderIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Binder
     * @param {String} binderId The binder id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersBinderIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersBinderIdPut(binderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdPut");
      }

      let pathParams = {
        'binder_id': binderId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{binder_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete operation.
     * @callback module:api/DefaultApi~objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Users & Groups from Roles on a Single Binder
     * @param {String} binderId The id value of the binder from which to remove roles.
     * @param {String} roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either `user` or `group`. The format is `{role_name}.{user_or_group}`. For example, `consumer__v.user`.
     * @param {String} id The id value of the user or group to remove from the role.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(binderId, roleNameAndUserOrGroup, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete");
      }
      // verify the required parameter 'roleNameAndUserOrGroup' is set
      if (roleNameAndUserOrGroup === undefined || roleNameAndUserOrGroup === null) {
        throw new Error("Missing the required parameter 'roleNameAndUserOrGroup' when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete");
      }

      let pathParams = {
        'binder_id': binderId,
        'role_name_and_user_or_group': roleNameAndUserOrGroup,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersBinderIdSectionsNodeIdBindingRulePut operation.
     * @callback module:api/DefaultApi~objectsBindersBinderIdSectionsNodeIdBindingRulePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Binder Section Binding Rule
     * @param {String} binderId The binder id field value.
     * @param {String} nodeId The binder node id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersBinderIdSectionsNodeIdBindingRulePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersBinderIdSectionsNodeIdBindingRulePut(binderId, nodeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsNodeIdBindingRulePut");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling objectsBindersBinderIdSectionsNodeIdBindingRulePut");
      }

      let pathParams = {
        'binder_id': binderId,
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{binder_id}/sections/{node_id}/binding_rule', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersBinderIdSectionsNodeIdPut operation.
     * @callback module:api/DefaultApi~objectsBindersBinderIdSectionsNodeIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Binder Section
     * @param {String} binderId The binder id field value.
     * @param {String} nodeId The binder node id of the section.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersBinderIdSectionsNodeIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersBinderIdSectionsNodeIdPut(binderId, nodeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsNodeIdPut");
      }
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling objectsBindersBinderIdSectionsNodeIdPut");
      }

      let pathParams = {
        'binder_id': binderId,
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{binder_id}/sections/{node_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersBinderIdSectionsPost operation.
     * @callback module:api/DefaultApi~objectsBindersBinderIdSectionsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Binder Section
     * @param {String} binderId The binder id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersBinderIdSectionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersBinderIdSectionsPost(binderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsPost");
      }

      let pathParams = {
        'binder_id': binderId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{binder_id}/sections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersBinderIdSectionsSectionIdDelete operation.
     * @callback module:api/DefaultApi~objectsBindersBinderIdSectionsSectionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Binder Section
     * @param {String} binderId The binder id field value.
     * @param {String} sectionId The binder node id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersBinderIdSectionsSectionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersBinderIdSectionsSectionIdDelete(binderId, sectionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsSectionIdDelete");
      }
      // verify the required parameter 'sectionId' is set
      if (sectionId === undefined || sectionId === null) {
        throw new Error("Missing the required parameter 'sectionId' when calling objectsBindersBinderIdSectionsSectionIdDelete");
      }

      let pathParams = {
        'binder_id': binderId,
        'section_id': sectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{binder_id}/sections/{section_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersBinderIdSectionsSectionIdGet operation.
     * @callback module:api/DefaultApi~objectsBindersBinderIdSectionsSectionIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Binder Sections
     * @param {String} binderId The binder id field value.
     * @param {String} sectionId The binder node id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersBinderIdSectionsSectionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersBinderIdSectionsSectionIdGet(binderId, sectionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsSectionIdGet");
      }
      // verify the required parameter 'sectionId' is set
      if (sectionId === undefined || sectionId === null) {
        throw new Error("Missing the required parameter 'sectionId' when calling objectsBindersBinderIdSectionsSectionIdGet");
      }

      let pathParams = {
        'binder_id': binderId,
        'section_id': sectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{binder_id}/sections/{section_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersBinderIdVersionsGet operation.
     * @callback module:api/DefaultApi~objectsBindersBinderIdVersionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve All Binder Versions
     * @param {String} binderId The binder id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersBinderIdVersionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersBinderIdVersionsGet(binderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsGet");
      }

      let pathParams = {
        'binder_id': binderId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{binder_id}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost operation.
     * @callback module:api/DefaultApi~objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export Binder (Specific Version)
     * @param {String} binderId The binder id field value.
     * @param {String} majorVersion The binder major_version_number__v field value.
     * @param {String} minorVersion The binder minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [source] to include source content or not
     * @param {String} [renditiontype] to include viewable renditions
     * @param {String} [docversion] to include all major versions
     * @param {String} [attachments] to include all versions of attachments
     * @param {String} [_export] configurable filename metadata
     * @param {Boolean} [docfield] to exclude document metadata csv
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(binderId, majorVersion, minorVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost");
      }

      let pathParams = {
        'binder_id': binderId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
        'source': opts['source'],
        'renditiontype': opts['renditiontype'],
        'docversion': opts['docversion'],
        'attachments': opts['attachments'],
        'export': opts['_export'],
        'docfield': opts['docfield']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete operation.
     * @callback module:api/DefaultApi~objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Binder Version
     * @param {String} binderId The binder id field value.
     * @param {String} majorVersion The binder major_version_number__v field value.
     * @param {String} minorVersion The binder minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(binderId, majorVersion, minorVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete");
      }

      let pathParams = {
        'binder_id': binderId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersBinderIdVersionsMajorVersionMinorVersionGet operation.
     * @callback module:api/DefaultApi~objectsBindersBinderIdVersionsMajorVersionMinorVersionGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Binder Version
     * @param {String} binderId The binder id field value.
     * @param {String} majorVersion The binder major_version_number__v field value.
     * @param {String} minorVersion The binder minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersBinderIdVersionsMajorVersionMinorVersionGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(binderId, majorVersion, minorVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet");
      }

      let pathParams = {
        'binder_id': binderId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersBinderIdVersionsMajorVersionMinorVersionPut operation.
     * @callback module:api/DefaultApi~objectsBindersBinderIdVersionsMajorVersionMinorVersionPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Binder Version
     * @param {String} binderId The binder id field value.
     * @param {String} majorVersion The binder major_version_number__v field value.
     * @param {String} minorVersion The binder minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersBinderIdVersionsMajorVersionMinorVersionPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(binderId, majorVersion, minorVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut");
      }

      let pathParams = {
        'binder_id': binderId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost operation.
     * @callback module:api/DefaultApi~objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Binder Relationship
     * @param {String} binderId The binder id field value.
     * @param {String} majorVersion The binder major_version_number__v field value.
     * @param {String} minorVersion The binder minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(binderId, majorVersion, minorVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost");
      }

      let pathParams = {
        'binder_id': binderId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete operation.
     * @callback module:api/DefaultApi~objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Binder Relationship
     * @param {String} binderId The binder id field value.
     * @param {String} majorVersion The binder major_version_number__v field value.
     * @param {String} minorVersion The binder minor_version_number__v field value.
     * @param {String} relationshipId The binder relationship id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(binderId, majorVersion, minorVersion, relationshipId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete");
      }
      // verify the required parameter 'relationshipId' is set
      if (relationshipId === undefined || relationshipId === null) {
        throw new Error("Missing the required parameter 'relationshipId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete");
      }

      let pathParams = {
        'binder_id': binderId,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'relationship_id': relationshipId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet operation.
     * @callback module:api/DefaultApi~objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Binder Relationship
     * @param {String} binderId The binder id field value.
     * @param {String} majorVersion The binder major_version_number__v field value.
     * @param {String} minorVersion The binder minor_version_number__v field value.
     * @param {String} relationshipId The binder relationship id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(binderId, majorVersion, minorVersion, relationshipId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet");
      }
      // verify the required parameter 'relationshipId' is set
      if (relationshipId === undefined || relationshipId === null) {
        throw new Error("Missing the required parameter 'relationshipId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet");
      }

      let pathParams = {
        'binder_id': binderId,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'relationship_id': relationshipId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet operation.
     * @callback module:api/DefaultApi~objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Binder Version Section
     * @param {String} binderId The binder id field value.
     * @param {String} majorVersion The binder major_version_number__v field value.
     * @param {String} minorVersion The binder minor_version_number__v field value.
     * @param {String} sectionId Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(binderId, majorVersion, minorVersion, sectionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'binderId' is set
      if (binderId === undefined || binderId === null) {
        throw new Error("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet");
      }
      // verify the required parameter 'sectionId' is set
      if (sectionId === undefined || sectionId === null) {
        throw new Error("Missing the required parameter 'sectionId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet");
      }

      let pathParams = {
        'binder_id': binderId,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'section_id': sectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersIdRolesGet operation.
     * @callback module:api/DefaultApi~objectsBindersIdRolesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve All Binder Roles
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersIdRolesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersIdRolesGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsBindersIdRolesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{id}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersIdRolesPost operation.
     * @callback module:api/DefaultApi~objectsBindersIdRolesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign Users & Groups to Roles on a Single Binder
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersIdRolesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersIdRolesPost(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsBindersIdRolesPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{id}/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersIdRolesRoleNameGet operation.
     * @callback module:api/DefaultApi~objectsBindersIdRolesRoleNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Role
     * @param {String} id The binder `id`.
     * @param {String} roleName The name of the role to retrieve. For example, `owner__v`.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersIdRolesRoleNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersIdRolesRoleNameGet(id, roleName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsBindersIdRolesRoleNameGet");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling objectsBindersIdRolesRoleNameGet");
      }

      let pathParams = {
        'id': id,
        'role_name': roleName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{id}/roles/{role_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet operation.
     * @callback module:api/DefaultApi~objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Binder User Actions
     * @param {String} id The binder id field value from which to retrieve available user actions.
     * @param {String} majorVersion The major version number of the binder.
     * @param {String} minorVersion The minor version number of the binder.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id, majorVersion, minorVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet");
      }

      let pathParams = {
        'id': id,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet operation.
     * @callback module:api/DefaultApi~objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Binder Entry Criteria
     * @param {String} id The binder id field value from which to retrieve available user actions.
     * @param {String} majorVersion The major version number of the binder.
     * @param {String} minorVersion The minor version number of the binder.
     * @param {String} nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id, majorVersion, minorVersion, nameV, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet");
      }
      // verify the required parameter 'nameV' is set
      if (nameV === undefined || nameV === null) {
        throw new Error("Missing the required parameter 'nameV' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet");
      }

      let pathParams = {
        'id': id,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'name__v': nameV
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut operation.
     * @callback module:api/DefaultApi~objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate Binder User Action
     * @param {String} id The binder id field value from which to retrieve available user actions.
     * @param {String} majorVersion The major version number of the binder.
     * @param {String} minorVersion The minor version number of the binder.
     * @param {String} nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id, majorVersion, minorVersion, nameV, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut");
      }
      // verify the required parameter 'nameV' is set
      if (nameV === undefined || nameV === null) {
        throw new Error("Missing the required parameter 'nameV' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut");
      }

      let pathParams = {
        'id': id,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'name__v': nameV
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersLifecycleActionsPost operation.
     * @callback module:api/DefaultApi~objectsBindersLifecycleActionsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve User Actions on Multiple Binders
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersLifecycleActionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersLifecycleActionsPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/lifecycle_actions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersLifecycleActionsUserActionNamePut operation.
     * @callback module:api/DefaultApi~objectsBindersLifecycleActionsUserActionNamePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate Bulk Binder User Actions
     * @param {String} userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersLifecycleActionsUserActionNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersLifecycleActionsUserActionNamePut(userActionName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userActionName' is set
      if (userActionName === undefined || userActionName === null) {
        throw new Error("Missing the required parameter 'userActionName' when calling objectsBindersLifecycleActionsUserActionNamePut");
      }

      let pathParams = {
        'user_action_name': userActionName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/lifecycle_actions/{user_action_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersPost operation.
     * @callback module:api/DefaultApi~objectsBindersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Binder
     * @param {Object} opts Optional parameters
     * @param {Boolean} [async] When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async=true). This helps speed up the response time from Vault when processing large amounts of data. 
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'async': opts['async']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersTemplatesGet operation.
     * @callback module:api/DefaultApi~objectsBindersTemplatesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Binder Template Collection
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersTemplatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersTemplatesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersTemplatesPost operation.
     * @callback module:api/DefaultApi~objectsBindersTemplatesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Binder Template
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersTemplatesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersTemplatesPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersTemplatesPut operation.
     * @callback module:api/DefaultApi~objectsBindersTemplatesPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Binder Template
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersTemplatesPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersTemplatesPut(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/templates', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersTemplatesTemplateNameBindernodesGet operation.
     * @callback module:api/DefaultApi~objectsBindersTemplatesTemplateNameBindernodesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Binder Template Node Attributes
     * @param {String} templateName The binder template name__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersTemplatesTemplateNameBindernodesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersTemplatesTemplateNameBindernodesGet(templateName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameBindernodesGet");
      }

      let pathParams = {
        'template_name': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/templates/{template_name}/bindernodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersTemplatesTemplateNameBindernodesPost operation.
     * @callback module:api/DefaultApi~objectsBindersTemplatesTemplateNameBindernodesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Binder Template Node
     * @param {String} templateName The binder template name__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersTemplatesTemplateNameBindernodesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersTemplatesTemplateNameBindernodesPost(templateName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameBindernodesPost");
      }

      let pathParams = {
        'template_name': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/templates/{template_name}/bindernodes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersTemplatesTemplateNameBindernodesPut operation.
     * @callback module:api/DefaultApi~objectsBindersTemplatesTemplateNameBindernodesPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace Binder Template Nodes
     * @param {String} templateName The binder template name__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersTemplatesTemplateNameBindernodesPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersTemplatesTemplateNameBindernodesPut(templateName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameBindernodesPut");
      }

      let pathParams = {
        'template_name': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/templates/{template_name}/bindernodes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersTemplatesTemplateNameDelete operation.
     * @callback module:api/DefaultApi~objectsBindersTemplatesTemplateNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Binder Template
     * @param {String} templateName The binder template name__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersTemplatesTemplateNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersTemplatesTemplateNameDelete(templateName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameDelete");
      }

      let pathParams = {
        'template_name': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/templates/{template_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsBindersTemplatesTemplateNameGet operation.
     * @callback module:api/DefaultApi~objectsBindersTemplatesTemplateNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Binder Template Attributes
     * @param {String} templateName The binder template name__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsBindersTemplatesTemplateNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsBindersTemplatesTemplateNameGet(templateName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameGet");
      }

      let pathParams = {
        'template_name': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/binders/templates/{template_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDeletionsDocumentsGet operation.
     * @callback module:api/DefaultApi~objectsDeletionsDocumentsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Deleted Document IDs
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z
     * @param {String} [endDate] Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z 
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDeletionsDocumentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDeletionsDocumentsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/deletions/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDeletionsVobjectsObjectNameGet operation.
     * @callback module:api/DefaultApi~objectsDeletionsVobjectsObjectNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Deleted Object Record ID
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDeletionsVobjectsObjectNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDeletionsVobjectsObjectNameGet(objectName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling objectsDeletionsVobjectsObjectNameGet");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/deletions/vobjects/{object_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsActionsGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsActionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve All Document Workflows
     * @param {Object} opts Optional parameters
     * @param {Boolean} [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsActionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsActionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'loc': opts['loc']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Controlled Copy Job Results
     * @param {String} lifecycleAndStateAndAction The `name__v` values for the lifecycle, state, and action in the format `{lifecycle_name}.{state_name}.{action_name}`. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the `href` under the `artifacts` link.
     * @param {String} jobId 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(lifecycleAndStateAndAction, jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lifecycleAndStateAndAction' is set
      if (lifecycleAndStateAndAction === undefined || lifecycleAndStateAndAction === null) {
        throw new Error("Missing the required parameter 'lifecycleAndStateAndAction' when calling objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet");
      }

      let pathParams = {
        'lifecycle_and_state_and_action': lifecycleAndStateAndAction,
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsActionsWorkflowNameGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsActionsWorkflowNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Workflow Details
     * @param {String} workflowName The document workflow name value.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsActionsWorkflowNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsActionsWorkflowNameGet(workflowName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling objectsDocumentsActionsWorkflowNameGet");
      }

      let pathParams = {
        'workflow_name': workflowName
      };
      let queryParams = {
        'loc': opts['loc']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/actions/{workflow_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsActionsWorkflowNamePost operation.
     * @callback module:api/DefaultApi~objectsDocumentsActionsWorkflowNamePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate Document Workflow
     * @param {String} workflowName The document workflow name value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsActionsWorkflowNamePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsActionsWorkflowNamePost(workflowName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling objectsDocumentsActionsWorkflowNamePost");
      }

      let pathParams = {
        'workflow_name': workflowName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/actions/{workflow_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsAnnotationsBatchDelete operation.
     * @callback module:api/DefaultApi~objectsDocumentsAnnotationsBatchDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Annotations
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsAnnotationsBatchDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsAnnotationsBatchDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/annotations/batch', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsAnnotationsBatchPost operation.
     * @callback module:api/DefaultApi~objectsDocumentsAnnotationsBatchPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Multiple Annotations
     * @param {String} authorization 
     * @param {String} contentType 
     * @param {String} accept 
     * @param {String} xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsAnnotationsBatchPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsAnnotationsBatchPost(authorization, contentType, accept, xVaultAPIClientID, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling objectsDocumentsAnnotationsBatchPost");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling objectsDocumentsAnnotationsBatchPost");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling objectsDocumentsAnnotationsBatchPost");
      }
      // verify the required parameter 'xVaultAPIClientID' is set
      if (xVaultAPIClientID === undefined || xVaultAPIClientID === null) {
        throw new Error("Missing the required parameter 'xVaultAPIClientID' when calling objectsDocumentsAnnotationsBatchPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'Content-Type': contentType,
        'Accept': accept,
        'X-VaultAPI-ClientID': xVaultAPIClientID
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/annotations/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsAnnotationsBatchPut operation.
     * @callback module:api/DefaultApi~objectsDocumentsAnnotationsBatchPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Annotations
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsAnnotationsBatchPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsAnnotationsBatchPut(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/annotations/batch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsAnnotationsRepliesBatchPost operation.
     * @callback module:api/DefaultApi~objectsDocumentsAnnotationsRepliesBatchPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Annotation Replies
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsAnnotationsRepliesBatchPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsAnnotationsRepliesBatchPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/annotations/replies/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsAttachmentsBatchDelete operation.
     * @callback module:api/DefaultApi~objectsDocumentsAttachmentsBatchDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Multiple Document Attachments
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsAttachmentsBatchDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsAttachmentsBatchDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/attachments/batch', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsAttachmentsBatchPost operation.
     * @callback module:api/DefaultApi~objectsDocumentsAttachmentsBatchPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Multiple Document Attachments
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsAttachmentsBatchPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsAttachmentsBatchPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/attachments/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsAttachmentsBatchPut operation.
     * @callback module:api/DefaultApi~objectsDocumentsAttachmentsBatchPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Multiple Document Attachment Descriptions
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsAttachmentsBatchPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsAttachmentsBatchPut(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/attachments/batch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsBatchActionsFileextractJobIdResultsGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsBatchActionsFileextractJobIdResultsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Export Results
     * @param {String} jobId The id value of the requested export job. This is returned with the export document requests.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsBatchActionsFileextractJobIdResultsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsBatchActionsFileextractJobIdResultsGet(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling objectsDocumentsBatchActionsFileextractJobIdResultsGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/batch/actions/fileextract/{job_id}/results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsBatchActionsFileextractPost operation.
     * @callback module:api/DefaultApi~objectsDocumentsBatchActionsFileextractPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export Documents
     * @param {Object} opts Optional parameters
     * @param {Boolean} [source] Optional: To exclude source files, include a query parameter source=false. If omitted, defaults to true.
     * @param {Boolean} [renditions] Optional: To include renditions, include a query parameter renditions=true. If omitted, defaults to false.
     * @param {Boolean} [allversions] Optional: To include all versions or latest version, include a query parameter allversions=true. If omitted, defaults to false.
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsBatchActionsFileextractPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsBatchActionsFileextractPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'source': opts['source'],
        'renditions': opts['renditions'],
        'allversions': opts['allversions']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/batch/actions/fileextract', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsBatchActionsReclassifyPut operation.
     * @callback module:api/DefaultApi~objectsDocumentsBatchActionsReclassifyPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reclassify Multiple Documents
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {Boolean} [xVaultAPIMigrationMode] When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsBatchActionsReclassifyPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsBatchActionsReclassifyPut(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-MigrationMode': opts['xVaultAPIMigrationMode'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/batch/actions/reclassify', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsBatchActionsRerenderPost operation.
     * @callback module:api/DefaultApi~objectsDocumentsBatchActionsRerenderPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Multiple Document Renditions
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsBatchActionsRerenderPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsBatchActionsRerenderPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/batch/actions/rerender', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsBatchDelete operation.
     * @callback module:api/DefaultApi~objectsDocumentsBatchDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Multiple Documents
     * @param {Object} opts Optional parameters
     * @param {String} [idParam] If you’re identifying documents in your input by their external ID
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsBatchDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsBatchDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'idParam': opts['idParam']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/batch', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsBatchLockDelete operation.
     * @callback module:api/DefaultApi~objectsDocumentsBatchLockDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Undo Collaborative Authoring Checkout
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsBatchLockDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsBatchLockDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/batch/lock', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsBatchPost operation.
     * @callback module:api/DefaultApi~objectsDocumentsBatchPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Multiple Documents
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {Boolean} [xVaultAPIMigrationMode] When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsBatchPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsBatchPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-MigrationMode': opts['xVaultAPIMigrationMode'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsBatchPut operation.
     * @callback module:api/DefaultApi~objectsDocumentsBatchPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Multiple Documents
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {Boolean} [xVaultAPIMigrationMode] When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsBatchPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsBatchPut(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-MigrationMode': opts['xVaultAPIMigrationMode'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/batch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdAnchorsGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdAnchorsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Anchor IDs
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdAnchorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdAnchorsGet(docId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAnchorsGet");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/anchors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdAnnotationsFileGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdAnnotationsFileGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export Document Annotations to PDF
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdAnnotationsFileGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdAnnotationsFileGet(docId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAnnotationsFileGet");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/annotations/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdAnnotationsFilePost operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdAnnotationsFilePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import Document Annotations from PDF
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdAnnotationsFilePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdAnnotationsFilePost(docId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAnnotationsFilePost");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/annotations/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdAttachmentsAttachmentIdDelete operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdAttachmentsAttachmentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Single Document Attachment
     * @param {String} docId The document id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdAttachmentsAttachmentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdAttachmentsAttachmentIdDelete(docId, attachmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdDelete");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdDelete");
      }

      let pathParams = {
        'doc_id': docId,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/attachments/{attachment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdAttachmentsAttachmentIdFileGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdAttachmentsAttachmentIdFileGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Document Attachment
     * @param {String} docId The document id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdAttachmentsAttachmentIdFileGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(docId, attachmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdFileGet");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdFileGet");
      }

      let pathParams = {
        'doc_id': docId,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/attachments/{attachment_id}/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdAttachmentsAttachmentIdGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdAttachmentsAttachmentIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Attachment Metadata
     * @param {String} docId The document id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdAttachmentsAttachmentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdAttachmentsAttachmentIdGet(docId, attachmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdGet");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdGet");
      }

      let pathParams = {
        'doc_id': docId,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/attachments/{attachment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdAttachmentsAttachmentIdPut operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdAttachmentsAttachmentIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Document Attachment Description
     * @param {String} docId The document id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdAttachmentsAttachmentIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdAttachmentsAttachmentIdPut(docId, attachmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdPut");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdPut");
      }

      let pathParams = {
        'doc_id': docId,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/attachments/{attachment_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Single Document Attachment Version
     * @param {String} docId The document id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {String} attachmentVersion The attachment version__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(docId, attachmentId, attachmentVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete");
      }
      // verify the required parameter 'attachmentVersion' is set
      if (attachmentVersion === undefined || attachmentVersion === null) {
        throw new Error("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete");
      }

      let pathParams = {
        'doc_id': docId,
        'attachment_id': attachmentId,
        'attachment_version': attachmentVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Document Attachment Version
     * @param {String} docId The document id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {String} attachmentVersion The attachment version__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId, attachmentId, attachmentVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet");
      }
      // verify the required parameter 'attachmentVersion' is set
      if (attachmentVersion === undefined || attachmentVersion === null) {
        throw new Error("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet");
      }

      let pathParams = {
        'doc_id': docId,
        'attachment_id': attachmentId,
        'attachment_version': attachmentVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Attachment Version Metadata
     * @param {String} docId The document id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {String} attachmentVersion The attachment version__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId, attachmentId, attachmentVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet");
      }
      // verify the required parameter 'attachmentVersion' is set
      if (attachmentVersion === undefined || attachmentVersion === null) {
        throw new Error("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet");
      }

      let pathParams = {
        'doc_id': docId,
        'attachment_id': attachmentId,
        'attachment_version': attachmentVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore Document Attachment Version
     * @param {String} docId The document id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {String} attachmentVersion The attachment version__v field value.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [restore] The parameter restore must be set to true. 
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(docId, attachmentId, attachmentVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost");
      }
      // verify the required parameter 'attachmentVersion' is set
      if (attachmentVersion === undefined || attachmentVersion === null) {
        throw new Error("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost");
      }

      let pathParams = {
        'doc_id': docId,
        'attachment_id': attachmentId,
        'attachment_version': attachmentVersion
      };
      let queryParams = {
        'restore': opts['restore']
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Attachment Versions
     * @param {String} docId The document id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(docId, attachmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet");
      }

      let pathParams = {
        'doc_id': docId,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/attachments/{attachment_id}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdAttachmentsFileGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdAttachmentsFileGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download All Document Attachments
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdAttachmentsFileGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdAttachmentsFileGet(docId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsFileGet");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/attachments/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdAttachmentsGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdAttachmentsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Attachments
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdAttachmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdAttachmentsGet(docId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsGet");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdAttachmentsPost operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdAttachmentsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Document Attachment
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdAttachmentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdAttachmentsPost(docId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsPost");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/attachments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdAudittrailGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdAudittrailGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Complete Audit History for a Single Document
     * @param {String} docId The document ID for which to retrieve audit history.
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. 
     * @param {String} [endDate] Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
     * @param {String} [formatResult] To request a CSV file of your audit history, use csv. 
     * @param {String} [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param {String} [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
     * @param {String} [events] Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events=WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdAudittrailGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdAudittrailGet(docId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAudittrailGet");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'format_result': opts['formatResult'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'events': opts['events']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/audittrail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdDelete operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Single Document
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdDelete(docId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdDelete");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdEventsGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdEventsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Events
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdEventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdEventsGet(docId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdEventsGet");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdFileGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdFileGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Document File
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [lockDocument] Set to true to Check Out this document before retrieval. If omitted, defaults to false.
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdFileGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdFileGet(docId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdFileGet");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
        'lockDocument': opts['lockDocument']
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdGet(docId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdGet");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdLockDelete operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdLockDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Document Lock
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdLockDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdLockDelete(docId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdLockDelete");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/lock', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdLockGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdLockGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Lock
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdLockGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdLockGet(docId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdLockGet");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/lock', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdLockPost operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdLockPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Document Lock
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdLockPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdLockPost(docId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdLockPost");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/lock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download All Document Version Attachments
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(docId, majorVersion, minorVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdPost operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Single Document Version
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [suppressRendition] Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdPost(docId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdPost");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
        'suppressRendition': opts['suppressRendition']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdPut operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Single Document
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {Boolean} [xVaultAPIMigrationMode] When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdPut(docId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdPut");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-MigrationMode': opts['xVaultAPIMigrationMode'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdRenditionsGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdRenditionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Renditions
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdRenditionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdRenditionsGet(docId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsGet");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/renditions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdRenditionsRenditionTypeDelete operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdRenditionsRenditionTypeDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Single Document Rendition
     * @param {String} docId The document id field value.
     * @param {String} renditionType The document rendition type.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdRenditionsRenditionTypeDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdRenditionsRenditionTypeDelete(docId, renditionType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypeDelete");
      }
      // verify the required parameter 'renditionType' is set
      if (renditionType === undefined || renditionType === null) {
        throw new Error("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypeDelete");
      }

      let pathParams = {
        'doc_id': docId,
        'rendition_type': renditionType
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/renditions/{rendition_type}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdRenditionsRenditionTypeGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdRenditionsRenditionTypeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Document Rendition File
     * @param {String} docId The document id field value.
     * @param {String} renditionType The document rendition type.
     * @param {Object} opts Optional parameters
     * @param {String} [steadyState] Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. 
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdRenditionsRenditionTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdRenditionsRenditionTypeGet(docId, renditionType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypeGet");
      }
      // verify the required parameter 'renditionType' is set
      if (renditionType === undefined || renditionType === null) {
        throw new Error("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypeGet");
      }

      let pathParams = {
        'doc_id': docId,
        'rendition_type': renditionType
      };
      let queryParams = {
        'steadyState': opts['steadyState']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/renditions/{rendition_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdRenditionsRenditionTypePost operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdRenditionsRenditionTypePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Single Document Rendition
     * @param {String} docId The document id field value.
     * @param {String} renditionType The document rendition type.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdRenditionsRenditionTypePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdRenditionsRenditionTypePost(docId, renditionType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypePost");
      }
      // verify the required parameter 'renditionType' is set
      if (renditionType === undefined || renditionType === null) {
        throw new Error("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypePost");
      }

      let pathParams = {
        'doc_id': docId,
        'rendition_type': renditionType
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/renditions/{rendition_type}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdRenditionsRenditionTypePut operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdRenditionsRenditionTypePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace Document Rendition
     * @param {String} docId The document id field value.
     * @param {String} renditionType The document rendition type.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdRenditionsRenditionTypePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdRenditionsRenditionTypePut(docId, renditionType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypePut");
      }
      // verify the required parameter 'renditionType' is set
      if (renditionType === undefined || renditionType === null) {
        throw new Error("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypePut");
      }

      let pathParams = {
        'doc_id': docId,
        'rendition_type': renditionType
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/renditions/{rendition_type}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Users & Groups from Roles on a Single Document
     * @param {String} docId The id value of the document from which to remove roles.
     * @param {String} roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either `user` or `group`. The format is `{role_name}.{user_or_group}`. For example, `consumer__v.user`.
     * @param {String} id The id value of the user or group to remove from the role.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(docId, roleNameAndUserOrGroup, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete");
      }
      // verify the required parameter 'roleNameAndUserOrGroup' is set
      if (roleNameAndUserOrGroup === undefined || roleNameAndUserOrGroup === null) {
        throw new Error("Missing the required parameter 'roleNameAndUserOrGroup' when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete");
      }

      let pathParams = {
        'doc_id': docId,
        'role_name_and_user_or_group': roleNameAndUserOrGroup,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Version Attachments
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(docId, majorVersion, minorVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdVersionsGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdVersionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Versions
     * @param {String} docId The document id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdVersionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdVersionsGet(docId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsGet");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read Annotations by ID
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {String} annotationId The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(docId, majorVersion, minorVersion, annotationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet");
      }
      // verify the required parameter 'annotationId' is set
      if (annotationId === undefined || annotationId === null) {
        throw new Error("Missing the required parameter 'annotationId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'annotation_id': annotationId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read Replies of Parent Annotation
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {String} annotationId The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(docId, majorVersion, minorVersion, annotationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet");
      }
      // verify the required parameter 'annotationId' is set
      if (annotationId === undefined || annotationId === null) {
        throw new Error("Missing the required parameter 'annotationId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'annotation_id': annotationId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export Document Version Annotations to PDF
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(docId, majorVersion, minorVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import Document Version Annotations from PDF
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(docId, majorVersion, minorVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read Annotations by Document Version and Type
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.
     * @param {String} [offset] This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset=201.
     * @param {String} [annotationTypes] The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: `note__sys` `line__sys` `document_link__sys` `permalink_link__sys` `anchor__sys` `reply__sys` `external_link__sys`  The following annotation types are only valid in PromoMats Vaults:  `suggested_link__sys` `approved_link__sys` `auto_link__sys` `keyword_link__sys` 
     * @param {String} [paginationId] A unique identifier used to load requests with paginated results.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(docId, majorVersion, minorVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'annotation_types': opts['annotationTypes'],
        'pagination_id': opts['paginationId']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Document Version Attachment Version
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {String} attachmentId The id field value of the attachment.
     * @param {String} attachmentVersion The version of the attachment.
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet");
      }
      // verify the required parameter 'attachmentVersion' is set
      if (attachmentVersion === undefined || attachmentVersion === null) {
        throw new Error("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'attachment_id': attachmentId,
        'attachment_version': attachmentVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Version Attachment Versions
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {String} attachmentId The id of the document attachment to retrieve.
     * @param {String} attachmentVersion Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet");
      }
      // verify the required parameter 'attachmentVersion' is set
      if (attachmentVersion === undefined || attachmentVersion === null) {
        throw new Error("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'attachment_id': attachmentId,
        'attachment_version': attachmentVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Single Document Version
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(docId, majorVersion, minorVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Version Notes as CSV
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(docId, majorVersion, minorVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Document Event
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(docId, majorVersion, minorVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Video Annotations
     * @param {String} docId The video document id field value.
     * @param {String} majorVersion The video document major_version_number__v field value.
     * @param {String} minorVersion The video document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] This `Accept` header only changes the format of the response in the case of an error. On `SUCCESS`, the HTTP Response Header `Content-Type` is set to `text/plain;charset=UnicodeLittle`.
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(docId, majorVersion, minorVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Document Version File
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(docId, majorVersion, minorVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Version
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(docId, majorVersion, minorVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Document Version
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {Boolean} [xVaultAPIMigrationMode] When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(docId, majorVersion, minorVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-MigrationMode': opts['xVaultAPIMigrationMode'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Relationships
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(docId, majorVersion, minorVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Single Document Relationship
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(docId, majorVersion, minorVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Single Document Relationship
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {String} relationshipId The relationship id field value. See Retrieve Document Relationships.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(docId, majorVersion, minorVersion, relationshipId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete");
      }
      // verify the required parameter 'relationshipId' is set
      if (relationshipId === undefined || relationshipId === null) {
        throw new Error("Missing the required parameter 'relationshipId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'relationship_id': relationshipId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Relationship
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {String} relationshipId The relationship id field value. See Retrieve Document Relationships.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(docId, majorVersion, minorVersion, relationshipId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet");
      }
      // verify the required parameter 'relationshipId' is set
      if (relationshipId === undefined || relationshipId === null) {
        throw new Error("Missing the required parameter 'relationshipId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'relationship_id': relationshipId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Version Renditions
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(docId, majorVersion, minorVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Document Version Rendition
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {String} renditionType The document rendition type.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(docId, majorVersion, minorVersion, renditionType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete");
      }
      // verify the required parameter 'renditionType' is set
      if (renditionType === undefined || renditionType === null) {
        throw new Error("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'rendition_type': renditionType
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Document Version Rendition File
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {String} renditionType The document rendition type.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(docId, majorVersion, minorVersion, renditionType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet");
      }
      // verify the required parameter 'renditionType' is set
      if (renditionType === undefined || renditionType === null) {
        throw new Error("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'rendition_type': renditionType
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload Document Version Rendition
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {String} renditionType The document rendition type.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(docId, majorVersion, minorVersion, renditionType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost");
      }
      // verify the required parameter 'renditionType' is set
      if (renditionType === undefined || renditionType === null) {
        throw new Error("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'rendition_type': renditionType
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace Document Version Rendition
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {String} renditionType The document rendition type.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(docId, majorVersion, minorVersion, renditionType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut");
      }
      // verify the required parameter 'renditionType' is set
      if (renditionType === undefined || renditionType === null) {
        throw new Error("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'rendition_type': renditionType
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Document Version Thumbnail File
     * @param {String} docId The document id field value.
     * @param {String} majorVersion The document major_version_number__v field value.
     * @param {String} minorVersion The document minor_version_number__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(docId, majorVersion, minorVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet");
      }

      let pathParams = {
        'doc_id': docId,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve All Documents
     * @param {Object} opts Optional parameters
     * @param {String} [namedFilter] Retrieves only documents which you have created.
     * @param {String} [scope] Searches only within the document content.
     * @param {String} [versionscope] Retrieves all document versions, rather than only the latest version.
     * @param {String} [search] Search for documents based on a {keyword} in searchable document fields.
     * @param {String} [limit] See VQL documentation for more information.
     * @param {String} [sort] See VQL documentation for more information.
     * @param {String} [start] See VQL documentation for more information.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'named_filter': opts['namedFilter'],
        'scope': opts['scope'],
        'versionscope': opts['versionscope'],
        'search': opts['search'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'start': opts['start']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsIdRolesGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsIdRolesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve All Document Roles
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsIdRolesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsIdRolesGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsDocumentsIdRolesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{id}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsIdRolesPost operation.
     * @callback module:api/DefaultApi~objectsDocumentsIdRolesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign Users & Groups to Roles on a Single Document
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsIdRolesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsIdRolesPost(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsDocumentsIdRolesPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{id}/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsIdRolesRoleNameGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsIdRolesRoleNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Role
     * @param {String} id The document `id`.
     * @param {String} roleName The name of the role to retrieve. For example, `owner__v`.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsIdRolesRoleNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsIdRolesRoleNameGet(id, roleName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsDocumentsIdRolesRoleNameGet");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling objectsDocumentsIdRolesRoleNameGet");
      }

      let pathParams = {
        'id': id,
        'role_name': roleName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{id}/roles/{role_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document User Actions
     * @param {String} id The document id field value from which to retrieve available user actions.
     * @param {String} majorVersion The major version number of the document.
     * @param {String} minorVersion The minor version number of the document.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id, majorVersion, minorVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet");
      }

      let pathParams = {
        'id': id,
        'major_version': majorVersion,
        'minor_version': minorVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Entry Criteria
     * @param {String} id The document id field value from which to retrieve available user actions.
     * @param {String} majorVersion The major version number of the document.
     * @param {String} minorVersion The minor version number of the document.
     * @param {String} nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id, majorVersion, minorVersion, nameV, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet");
      }
      // verify the required parameter 'nameV' is set
      if (nameV === undefined || nameV === null) {
        throw new Error("Missing the required parameter 'nameV' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet");
      }

      let pathParams = {
        'id': id,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'name__v': nameV
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut operation.
     * @callback module:api/DefaultApi~objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate Document User Action
     * @param {String} id The document id field value from which to retrieve available user actions.
     * @param {String} majorVersion The major version number of the document.
     * @param {String} minorVersion The minor version number of the document.
     * @param {String} nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id, majorVersion, minorVersion, nameV, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut");
      }
      // verify the required parameter 'majorVersion' is set
      if (majorVersion === undefined || majorVersion === null) {
        throw new Error("Missing the required parameter 'majorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut");
      }
      // verify the required parameter 'minorVersion' is set
      if (minorVersion === undefined || minorVersion === null) {
        throw new Error("Missing the required parameter 'minorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut");
      }
      // verify the required parameter 'nameV' is set
      if (nameV === undefined || nameV === null) {
        throw new Error("Missing the required parameter 'nameV' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut");
      }

      let pathParams = {
        'id': id,
        'major_version': majorVersion,
        'minor_version': minorVersion,
        'name__v': nameV
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsLifecycleActionsPost operation.
     * @callback module:api/DefaultApi~objectsDocumentsLifecycleActionsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve User Actions on Multiple Documents
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsLifecycleActionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsLifecycleActionsPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/lifecycle_actions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsLifecycleActionsUserActionNamePut operation.
     * @callback module:api/DefaultApi~objectsDocumentsLifecycleActionsUserActionNamePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate Bulk Document User Actions
     * @param {String} userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsLifecycleActionsUserActionNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsLifecycleActionsUserActionNamePut(userActionName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userActionName' is set
      if (userActionName === undefined || userActionName === null) {
        throw new Error("Missing the required parameter 'userActionName' when calling objectsDocumentsLifecycleActionsUserActionNamePut");
      }

      let pathParams = {
        'user_action_name': userActionName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/lifecycle_actions/{user_action_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsPost operation.
     * @callback module:api/DefaultApi~objectsDocumentsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Single Document
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {Boolean} [xVaultAPIMigrationMode] When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-MigrationMode': opts['xVaultAPIMigrationMode'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsRelationshipsBatchDelete operation.
     * @callback module:api/DefaultApi~objectsDocumentsRelationshipsBatchDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Multiple Document Relationships
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsRelationshipsBatchDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsRelationshipsBatchDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/relationships/batch', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsRelationshipsBatchPost operation.
     * @callback module:api/DefaultApi~objectsDocumentsRelationshipsBatchPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Multiple Document Relationships
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsRelationshipsBatchPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsRelationshipsBatchPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/relationships/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsRenditionsBatchDelete operation.
     * @callback module:api/DefaultApi~objectsDocumentsRenditionsBatchDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Multiple Document Renditions
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsRenditionsBatchDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsRenditionsBatchDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/renditions/batch', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsRenditionsBatchPost operation.
     * @callback module:api/DefaultApi~objectsDocumentsRenditionsBatchPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Multiple Document Renditions
     * @param {Object} opts Optional parameters
     * @param {String} [idParam] If you’re identifying documents in your input by their external ID
     * @param {String} [largeSizeAsset] If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {Boolean} [xVaultAPIMigrationMode] Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsRenditionsBatchPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsRenditionsBatchPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'idParam': opts['idParam'],
        'largeSizeAsset': opts['largeSizeAsset']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-MigrationMode': opts['xVaultAPIMigrationMode'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/renditions/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsRolesBatchDelete operation.
     * @callback module:api/DefaultApi~objectsDocumentsRolesBatchDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Users and Groups from Roles on Multiple Documents & Binders
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsRolesBatchDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsRolesBatchDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/roles/batch', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsRolesBatchPost operation.
     * @callback module:api/DefaultApi~objectsDocumentsRolesBatchPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign Users & Groups to Roles on Multiple Documents & Binders
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsRolesBatchPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsRolesBatchPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/roles/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsTemplatesGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsTemplatesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Template Collection
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsTemplatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsTemplatesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsTemplatesPost operation.
     * @callback module:api/DefaultApi~objectsDocumentsTemplatesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Single Document Template
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsTemplatesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsTemplatesPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsTemplatesPut operation.
     * @callback module:api/DefaultApi~objectsDocumentsTemplatesPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Multiple Document Templates
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsTemplatesPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsTemplatesPut(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/templates', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsTemplatesTemplateNameDelete operation.
     * @callback module:api/DefaultApi~objectsDocumentsTemplatesTemplateNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Basic Document Template
     * @param {String} templateName The document template name__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsTemplatesTemplateNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsTemplatesTemplateNameDelete(templateName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNameDelete");
      }

      let pathParams = {
        'template_name': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/templates/{template_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsTemplatesTemplateNameFileGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsTemplatesTemplateNameFileGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Document Template File
     * @param {String} templateName The document template name__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsTemplatesTemplateNameFileGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsTemplatesTemplateNameFileGet(templateName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNameFileGet");
      }

      let pathParams = {
        'template_name': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/templates/{template_name}/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsTemplatesTemplateNameGet operation.
     * @callback module:api/DefaultApi~objectsDocumentsTemplatesTemplateNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Template Attributes
     * @param {String} templateName The document template name__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsTemplatesTemplateNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsTemplatesTemplateNameGet(templateName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNameGet");
      }

      let pathParams = {
        'template_name': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/templates/{template_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsTemplatesTemplateNamePut operation.
     * @callback module:api/DefaultApi~objectsDocumentsTemplatesTemplateNamePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Single Document Template
     * @param {String} templateName The document template name__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsTemplatesTemplateNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsTemplatesTemplateNamePut(templateName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNamePut");
      }

      let pathParams = {
        'template_name': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/templates/{template_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsTokensPost operation.
     * @callback module:api/DefaultApi~objectsDocumentsTokensPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Document Tokens
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsTokensPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsTokensPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsVersionsBatchActionsFileextractPost operation.
     * @callback module:api/DefaultApi~objectsDocumentsVersionsBatchActionsFileextractPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export Document Versions
     * @param {Object} opts Optional parameters
     * @param {Boolean} [source] Optional: To exclude source files, include a query parameter source=false. If omitted, defaults to true.
     * @param {Boolean} [renditions] Optional: To include renditions, include a query parameter renditions=true. If omitted, defaults to false.
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsVersionsBatchActionsFileextractPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsVersionsBatchActionsFileextractPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'source': opts['source'],
        'renditions': opts['renditions']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/versions/batch/actions/fileextract', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsVersionsBatchDelete operation.
     * @callback module:api/DefaultApi~objectsDocumentsVersionsBatchDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Multiple Document Versions
     * @param {Object} opts Optional parameters
     * @param {String} [idParam] If you’re identifying documents in your input by their external ID
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsVersionsBatchDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsVersionsBatchDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'idParam': opts['idParam']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/versions/batch', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDocumentsVersionsBatchPost operation.
     * @callback module:api/DefaultApi~objectsDocumentsVersionsBatchPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Multiple Document Versions
     * @param {Object} opts Optional parameters
     * @param {String} [idParam] If you’re identifying documents in your input by their external ID
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIMigrationMode] Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the `status__v` field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about <a href=\"https://platform.veevavault.help/en/gr/54028\">Document Migration Mode in Vault Help.</a>
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDocumentsVersionsBatchPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDocumentsVersionsBatchPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'idParam': opts['idParam']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-MigrationMode': opts['xVaultAPIMigrationMode'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/documents/versions/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDomainGet operation.
     * @callback module:api/DefaultApi~objectsDomainGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Domain Information
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeApplication] To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDomainGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDomainGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'include_application': opts['includeApplication']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/domain', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsDomainsGet operation.
     * @callback module:api/DefaultApi~objectsDomainsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Domains
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsDomainsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsDomainsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/domains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsEdlMatchedDocumentsBatchActionsAddPost operation.
     * @callback module:api/DefaultApi~objectsEdlMatchedDocumentsBatchActionsAddPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add EDL Matched Documents
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsEdlMatchedDocumentsBatchActionsAddPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsEdlMatchedDocumentsBatchActionsAddPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/edl_matched_documents/batch/actions/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsEdlMatchedDocumentsBatchActionsRemovePost operation.
     * @callback module:api/DefaultApi~objectsEdlMatchedDocumentsBatchActionsRemovePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove EDL Matched Documents
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsEdlMatchedDocumentsBatchActionsRemovePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsEdlMatchedDocumentsBatchActionsRemovePost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/edl_matched_documents/batch/actions/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsGroupsAutoGet operation.
     * @callback module:api/DefaultApi~objectsGroupsAutoGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Auto Managed Groups
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. 
     * @param {String} [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsGroupsAutoGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsGroupsAutoGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/groups/auto', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsGroupsGet operation.
     * @callback module:api/DefaultApi~objectsGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve All Groups
     * @param {Object} opts Optional parameters
     * @param {String} [includeImplied] When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsGroupsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'includeImplied': opts['includeImplied']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsGroupsGroupIdDelete operation.
     * @callback module:api/DefaultApi~objectsGroupsGroupIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Group
     * @param {String} groupId The group id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsGroupsGroupIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsGroupsGroupIdDelete(groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling objectsGroupsGroupIdDelete");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/groups/{group_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsGroupsGroupIdGet operation.
     * @callback module:api/DefaultApi~objectsGroupsGroupIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Group
     * @param {String} groupId The group id field value.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeImplied] When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsGroupsGroupIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsGroupsGroupIdGet(groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling objectsGroupsGroupIdGet");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
        'includeImplied': opts['includeImplied']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/groups/{group_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsGroupsGroupIdPut operation.
     * @callback module:api/DefaultApi~objectsGroupsGroupIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Group
     * @param {String} groupId The group id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsGroupsGroupIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsGroupsGroupIdPut(groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling objectsGroupsGroupIdPut");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/groups/{group_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsGroupsPost operation.
     * @callback module:api/DefaultApi~objectsGroupsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Group 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsGroupsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsGroupsPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsLicensesGet operation.
     * @callback module:api/DefaultApi~objectsLicensesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Application License Usage
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsLicensesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsLicensesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/licenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsObjectworkflowsActionsGet operation.
     * @callback module:api/DefaultApi~objectsObjectworkflowsActionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve All Multi-Record Workflows
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsObjectworkflowsActionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsObjectworkflowsActionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/objectworkflows/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsObjectworkflowsActionsWorkflowNameGet operation.
     * @callback module:api/DefaultApi~objectsObjectworkflowsActionsWorkflowNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Multi-Record Workflow Details
     * @param {String} workflowName 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsObjectworkflowsActionsWorkflowNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsObjectworkflowsActionsWorkflowNameGet(workflowName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling objectsObjectworkflowsActionsWorkflowNameGet");
      }

      let pathParams = {
        'workflow_name': workflowName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/objectworkflows/actions/{workflow_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsObjectworkflowsActionsWorkflowNamePost operation.
     * @callback module:api/DefaultApi~objectsObjectworkflowsActionsWorkflowNamePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate Multi-Record Workflow
     * @param {String} workflowName 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsObjectworkflowsActionsWorkflowNamePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsObjectworkflowsActionsWorkflowNamePost(workflowName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling objectsObjectworkflowsActionsWorkflowNamePost");
      }

      let pathParams = {
        'workflow_name': workflowName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/objectworkflows/actions/{workflow_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsObjectworkflowsGet operation.
     * @callback module:api/DefaultApi~objectsObjectworkflowsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Workflows
     * @param {Object} opts Optional parameters
     * @param {String} [objectV] To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the participant parameter is not used. 
     * @param {String} [recordIdV] To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the participant parameter is not used. 
     * @param {String} [participant] To retrieve all workflows available to a particular user, include the user id field value as ?participant={id}. To retrieve your own workflows, set this value to ?participant=me. This parameter is required when the object__v and record_id__v parameters are not used. 
     * @param {String} [statusV] To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v=active__v, status__v=active__v,completed__v. Workflows with `status__v=active__v` are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v
     * @param {String} [offset] This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset=201. 
     * @param {String} [pageSize] This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size=1000. 
     * @param {String} [loc] When localized (translated) strings are available, retrieve them by including ?loc=true. 
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsObjectworkflowsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsObjectworkflowsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'object__v': opts['objectV'],
        'record_id__v': opts['recordIdV'],
        'participant': opts['participant'],
        'status__v': opts['statusV'],
        'offset': opts['offset'],
        'page_size': opts['pageSize'],
        'loc': opts['loc']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/objectworkflows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsObjectworkflowsTasksGet operation.
     * @callback module:api/DefaultApi~objectsObjectworkflowsTasksGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Workflow Tasks
     * @param {Object} opts Optional parameters
     * @param {String} [objectV] To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the assignee__v parameter is not used.
     * @param {String} [recordIdV] To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v={name__v}&record_id__v={id}. These two parameters are required when the assignee__v parameter is not used.
     * @param {String} [assigneeV] To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v={id}. To retrieve your own workflow tasks, set this value to ?assignee__v=me. This parameter is required when the object__v and record_id__v parameters are not used. 
     * @param {String} [statusV] To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v=available__v or ?status__v=available__v,completed__v. 
     * @param {String} [offset] This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset=201. 
     * @param {String} [pageSize] This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size=1000. 
     * @param {String} [loc] When localized (translated) strings are available, retrieve them by including ?loc=true. 
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsObjectworkflowsTasksGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsObjectworkflowsTasksGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'object__v': opts['objectV'],
        'record_id__v': opts['recordIdV'],
        'assignee__v': opts['assigneeV'],
        'status__v': opts['statusV'],
        'offset': opts['offset'],
        'page_size': opts['pageSize'],
        'loc': opts['loc']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/objectworkflows/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsObjectworkflowsTasksTaskIdActionsAcceptPost operation.
     * @callback module:api/DefaultApi~objectsObjectworkflowsTasksTaskIdActionsAcceptPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept Single Record Workflow Task
     * @param {String} taskId The task id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsObjectworkflowsTasksTaskIdActionsAcceptPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsObjectworkflowsTasksTaskIdActionsAcceptPost(taskId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsAcceptPost");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/objectworkflows/tasks/{task_id}/actions/accept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsObjectworkflowsTasksTaskIdActionsCancelPost operation.
     * @callback module:api/DefaultApi~objectsObjectworkflowsTasksTaskIdActionsCancelPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel Workflow Task
     * @param {String} taskId The task id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsObjectworkflowsTasksTaskIdActionsCancelPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsObjectworkflowsTasksTaskIdActionsCancelPost(taskId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsCancelPost");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/objectworkflows/tasks/{task_id}/actions/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsObjectworkflowsTasksTaskIdActionsCompletePost operation.
     * @callback module:api/DefaultApi~objectsObjectworkflowsTasksTaskIdActionsCompletePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete Single Record Workflow Task
     * @param {String} taskId The task id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsObjectworkflowsTasksTaskIdActionsCompletePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsObjectworkflowsTasksTaskIdActionsCompletePost(taskId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsCompletePost");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/objectworkflows/tasks/{task_id}/actions/complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsObjectworkflowsTasksTaskIdActionsGet operation.
     * @callback module:api/DefaultApi~objectsObjectworkflowsTasksTaskIdActionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Workflow Task Actions
     * @param {String} taskId The task id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsObjectworkflowsTasksTaskIdActionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsObjectworkflowsTasksTaskIdActionsGet(taskId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsGet");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/objectworkflows/tasks/{task_id}/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost operation.
     * @callback module:api/DefaultApi~objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept Multi-item Workflow Task
     * @param {String} taskId The task id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(taskId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/objectworkflows/tasks/{task_id}/actions/mdwaccept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost operation.
     * @callback module:api/DefaultApi~objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete Multi-item Workflow Task
     * @param {String} taskId The task id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(taskId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost operation.
     * @callback module:api/DefaultApi~objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Manage Multi-Item Workflow Content
     * @param {String} taskId The task id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(taskId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost operation.
     * @callback module:api/DefaultApi~objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reassign Multi-item Workflow Task
     * @param {String} taskId The id of the task to reassign.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(taskId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/objectworkflows/tasks/{task_id}/actions/mdwreassign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsObjectworkflowsTasksTaskIdActionsReassignPost operation.
     * @callback module:api/DefaultApi~objectsObjectworkflowsTasksTaskIdActionsReassignPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reassign Single Record Workflow Task
     * @param {String} taskId The id of the task to reassign.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsObjectworkflowsTasksTaskIdActionsReassignPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsObjectworkflowsTasksTaskIdActionsReassignPost(taskId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsReassignPost");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/objectworkflows/tasks/{task_id}/actions/reassign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsObjectworkflowsTasksTaskIdActionsTaskActionGet operation.
     * @callback module:api/DefaultApi~objectsObjectworkflowsTasksTaskIdActionsTaskActionGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Workflow Task Action Details
     * @param {String} taskId The task id field value.
     * @param {String} taskAction The name of the task action retrieved from Retrieve Workflow Task Actions.
     * @param {Object} opts Optional parameters
     * @param {String} [loc] When localized (translated) strings are available, retrieve them by including loc=true. 
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsObjectworkflowsTasksTaskIdActionsTaskActionGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(taskId, taskAction, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsTaskActionGet");
      }
      // verify the required parameter 'taskAction' is set
      if (taskAction === undefined || taskAction === null) {
        throw new Error("Missing the required parameter 'taskAction' when calling objectsObjectworkflowsTasksTaskIdActionsTaskActionGet");
      }

      let pathParams = {
        'task_id': taskId,
        'task_action': taskAction
      };
      let queryParams = {
        'loc': opts['loc']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/objectworkflows/tasks/{task_id}/actions/{task_action}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost operation.
     * @callback module:api/DefaultApi~objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Undo Workflow Task Acceptance
     * @param {String} taskId The task id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(taskId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/objectworkflows/tasks/{task_id}/actions/undoaccept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost operation.
     * @callback module:api/DefaultApi~objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Workflow Task Due Date
     * @param {String} taskId The id of the task.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(taskId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/objectworkflows/tasks/{task_id}/actions/updateduedate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsObjectworkflowsTasksTaskIdGet operation.
     * @callback module:api/DefaultApi~objectsObjectworkflowsTasksTaskIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Workflow Task Details
     * @param {String} taskId The task id field value.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [loc] When localized (translated) strings are available, retrieve them by including loc=true.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsObjectworkflowsTasksTaskIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsObjectworkflowsTasksTaskIdGet(taskId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdGet");
      }

      let pathParams = {
        'task_id': taskId
      };
      let queryParams = {
        'loc': opts['loc']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/objectworkflows/tasks/{task_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsObjectworkflowsWorkflowIdActionsGet operation.
     * @callback module:api/DefaultApi~objectsObjectworkflowsWorkflowIdActionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Workflow Actions
     * @param {String} workflowId The workflow id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [loc] When localized (translated) strings are available, retrieve them by including loc=true. 
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsObjectworkflowsWorkflowIdActionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsObjectworkflowsWorkflowIdActionsGet(workflowId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdActionsGet");
      }

      let pathParams = {
        'workflow_id': workflowId
      };
      let queryParams = {
        'loc': opts['loc']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/objectworkflows/{workflow_id}/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet operation.
     * @callback module:api/DefaultApi~objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Workflow Action Details
     * @param {String} workflowId The workflow id field value.
     * @param {String} workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(workflowId, workflowAction, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet");
      }
      // verify the required parameter 'workflowAction' is set
      if (workflowAction === undefined || workflowAction === null) {
        throw new Error("Missing the required parameter 'workflowAction' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet");
      }

      let pathParams = {
        'workflow_id': workflowId,
        'workflow_action': workflowAction
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/objectworkflows/{workflow_id}/actions/{workflow_action}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost operation.
     * @callback module:api/DefaultApi~objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate Workflow Action
     * @param {String} workflowId The workflow id field value.
     * @param {String} workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
     * @param {Object} opts Optional parameters
     * @param {String} [documentsSys] Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(workflowId, workflowAction, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost");
      }
      // verify the required parameter 'workflowAction' is set
      if (workflowAction === undefined || workflowAction === null) {
        throw new Error("Missing the required parameter 'workflowAction' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost");
      }

      let pathParams = {
        'workflow_id': workflowId,
        'workflow_action': workflowAction
      };
      let queryParams = {
        'documents__sys': opts['documentsSys']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/objectworkflows/{workflow_id}/actions/{workflow_action}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsObjectworkflowsWorkflowIdGet operation.
     * @callback module:api/DefaultApi~objectsObjectworkflowsWorkflowIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Workflow Details
     * @param {String} workflowId The workflow id field value.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [loc] When localized (translated) strings are available, retrieve them by including loc=true.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsObjectworkflowsWorkflowIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsObjectworkflowsWorkflowIdGet(workflowId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdGet");
      }

      let pathParams = {
        'workflow_id': workflowId
      };
      let queryParams = {
        'loc': opts['loc']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/objectworkflows/{workflow_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsPicklistsGet operation.
     * @callback module:api/DefaultApi~objectsPicklistsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve All Picklists
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsPicklistsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsPicklistsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/picklists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsPicklistsPicklistNameGet operation.
     * @callback module:api/DefaultApi~objectsPicklistsPicklistNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Picklist Values
     * @param {String} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsPicklistsPicklistNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsPicklistsPicklistNameGet(picklistName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'picklistName' is set
      if (picklistName === undefined || picklistName === null) {
        throw new Error("Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNameGet");
      }

      let pathParams = {
        'picklist_name': picklistName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/picklists/{picklist_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsPicklistsPicklistNamePicklistValueNameDelete operation.
     * @callback module:api/DefaultApi~objectsPicklistsPicklistNamePicklistValueNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inactivate Picklist Value
     * @param {String} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param {String} picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsPicklistsPicklistNamePicklistValueNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsPicklistsPicklistNamePicklistValueNameDelete(picklistName, picklistValueName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'picklistName' is set
      if (picklistName === undefined || picklistName === null) {
        throw new Error("Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePicklistValueNameDelete");
      }
      // verify the required parameter 'picklistValueName' is set
      if (picklistValueName === undefined || picklistValueName === null) {
        throw new Error("Missing the required parameter 'picklistValueName' when calling objectsPicklistsPicklistNamePicklistValueNameDelete");
      }

      let pathParams = {
        'picklist_name': picklistName,
        'picklist_value_name': picklistValueName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/picklists/{picklist_name}/{picklist_value_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsPicklistsPicklistNamePicklistValueNamePut operation.
     * @callback module:api/DefaultApi~objectsPicklistsPicklistNamePicklistValueNamePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Picklist Value
     * @param {String} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param {String} picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsPicklistsPicklistNamePicklistValueNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsPicklistsPicklistNamePicklistValueNamePut(picklistName, picklistValueName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'picklistName' is set
      if (picklistName === undefined || picklistName === null) {
        throw new Error("Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePicklistValueNamePut");
      }
      // verify the required parameter 'picklistValueName' is set
      if (picklistValueName === undefined || picklistValueName === null) {
        throw new Error("Missing the required parameter 'picklistValueName' when calling objectsPicklistsPicklistNamePicklistValueNamePut");
      }

      let pathParams = {
        'picklist_name': picklistName,
        'picklist_value_name': picklistValueName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/picklists/{picklist_name}/{picklist_value_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsPicklistsPicklistNamePost operation.
     * @callback module:api/DefaultApi~objectsPicklistsPicklistNamePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Picklist Values
     * @param {String} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsPicklistsPicklistNamePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsPicklistsPicklistNamePost(picklistName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'picklistName' is set
      if (picklistName === undefined || picklistName === null) {
        throw new Error("Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePost");
      }

      let pathParams = {
        'picklist_name': picklistName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/picklists/{picklist_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsPicklistsPicklistNamePut operation.
     * @callback module:api/DefaultApi~objectsPicklistsPicklistNamePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Picklist Value Label
     * @param {String} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsPicklistsPicklistNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsPicklistsPicklistNamePut(picklistName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'picklistName' is set
      if (picklistName === undefined || picklistName === null) {
        throw new Error("Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePut");
      }

      let pathParams = {
        'picklist_name': picklistName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/picklists/{picklist_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsSandboxActionsBuildproductionPost operation.
     * @callback module:api/DefaultApi~objectsSandboxActionsBuildproductionPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Build Production Vault
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsSandboxActionsBuildproductionPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsSandboxActionsBuildproductionPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/sandbox/actions/buildproduction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsSandboxActionsPromoteproductionPost operation.
     * @callback module:api/DefaultApi~objectsSandboxActionsPromoteproductionPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Promote to Production
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsSandboxActionsPromoteproductionPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsSandboxActionsPromoteproductionPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/sandbox/actions/promoteproduction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsSandboxActionsRecheckusagePost operation.
     * @callback module:api/DefaultApi~objectsSandboxActionsRecheckusagePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recheck Sandbox Usage Limit
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsSandboxActionsRecheckusagePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsSandboxActionsRecheckusagePost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/sandbox/actions/recheckusage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsSandboxBatchChangesizePost operation.
     * @callback module:api/DefaultApi~objectsSandboxBatchChangesizePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change Sandbox Size
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsSandboxBatchChangesizePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsSandboxBatchChangesizePost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/sandbox/batch/changesize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsSandboxEntitlementsSetPost operation.
     * @callback module:api/DefaultApi~objectsSandboxEntitlementsSetPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Sandbox Entitlements
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsSandboxEntitlementsSetPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsSandboxEntitlementsSetPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/sandbox/entitlements/set', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsSandboxGet operation.
     * @callback module:api/DefaultApi~objectsSandboxGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Sandboxes
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsSandboxGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsSandboxGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/sandbox', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsSandboxNameDelete operation.
     * @callback module:api/DefaultApi~objectsSandboxNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Sandbox
     * @param {String} name The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsSandboxNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsSandboxNameDelete(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling objectsSandboxNameDelete");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/sandbox/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsSandboxPost operation.
     * @callback module:api/DefaultApi~objectsSandboxPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or Refresh Sandbox
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsSandboxPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsSandboxPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/sandbox', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsSandboxSnapshotApiNameActionsUpdatePost operation.
     * @callback module:api/DefaultApi~objectsSandboxSnapshotApiNameActionsUpdatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Sandbox Snapshot
     * @param {String} apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsSandboxSnapshotApiNameActionsUpdatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsSandboxSnapshotApiNameActionsUpdatePost(apiName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiName' is set
      if (apiName === undefined || apiName === null) {
        throw new Error("Missing the required parameter 'apiName' when calling objectsSandboxSnapshotApiNameActionsUpdatePost");
      }

      let pathParams = {
        'api_name': apiName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/sandbox/snapshot/{api_name}/actions/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsSandboxSnapshotApiNameActionsUpgradePost operation.
     * @callback module:api/DefaultApi~objectsSandboxSnapshotApiNameActionsUpgradePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upgrade Sandbox Snapshot
     * @param {String} apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsSandboxSnapshotApiNameActionsUpgradePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsSandboxSnapshotApiNameActionsUpgradePost(apiName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiName' is set
      if (apiName === undefined || apiName === null) {
        throw new Error("Missing the required parameter 'apiName' when calling objectsSandboxSnapshotApiNameActionsUpgradePost");
      }

      let pathParams = {
        'api_name': apiName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/sandbox/snapshot/{api_name}/actions/upgrade', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsSandboxSnapshotApiNameDelete operation.
     * @callback module:api/DefaultApi~objectsSandboxSnapshotApiNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Sandbox Snapshot
     * @param {String} apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsSandboxSnapshotApiNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsSandboxSnapshotApiNameDelete(apiName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiName' is set
      if (apiName === undefined || apiName === null) {
        throw new Error("Missing the required parameter 'apiName' when calling objectsSandboxSnapshotApiNameDelete");
      }

      let pathParams = {
        'api_name': apiName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/sandbox/snapshot/{api_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsSandboxSnapshotGet operation.
     * @callback module:api/DefaultApi~objectsSandboxSnapshotGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Sandbox Snapshots
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsSandboxSnapshotGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsSandboxSnapshotGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/sandbox/snapshot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsSandboxSnapshotPost operation.
     * @callback module:api/DefaultApi~objectsSandboxSnapshotPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Sandbox Snapshot
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsSandboxSnapshotPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsSandboxSnapshotPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/sandbox/snapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsSandboxVaultIdActionsRefreshPost operation.
     * @callback module:api/DefaultApi~objectsSandboxVaultIdActionsRefreshPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh Sandbox from Snapshot
     * @param {String} vaultId The Vault ID of the sandbox to be refreshed.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsSandboxVaultIdActionsRefreshPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsSandboxVaultIdActionsRefreshPost(vaultId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling objectsSandboxVaultIdActionsRefreshPost");
      }

      let pathParams = {
        'vault_id': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/sandbox/{vault_id}/actions/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsSandboxVaultIdGet operation.
     * @callback module:api/DefaultApi~objectsSandboxVaultIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Sandbox Details by ID
     * @param {String} vaultId 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsSandboxVaultIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsSandboxVaultIdGet(vaultId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling objectsSandboxVaultIdGet");
      }

      let pathParams = {
        'vault_id': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/sandbox/{vault_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsSecuritypoliciesGet operation.
     * @callback module:api/DefaultApi~objectsSecuritypoliciesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve All Security Policies
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsSecuritypoliciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsSecuritypoliciesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/securitypolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsSecuritypoliciesSecurityPolicyNameGet operation.
     * @callback module:api/DefaultApi~objectsSecuritypoliciesSecurityPolicyNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Security Policy
     * @param {String} securityPolicyName Security policy name__v field value (retrieved from previous request). This is typically a numeric value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsSecuritypoliciesSecurityPolicyNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsSecuritypoliciesSecurityPolicyNameGet(securityPolicyName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'securityPolicyName' is set
      if (securityPolicyName === undefined || securityPolicyName === null) {
        throw new Error("Missing the required parameter 'securityPolicyName' when calling objectsSecuritypoliciesSecurityPolicyNameGet");
      }

      let pathParams = {
        'security_policy_name': securityPolicyName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/securitypolicies/{security_policy_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsUsersGet operation.
     * @callback module:api/DefaultApi~objectsUsersGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve All Users
     * @param {Object} opts Optional parameters
     * @param {String} [vaults] Retrieve all users assigned to all Vaults in your domain.
     * @param {String} [excludeVaultMembership] Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.
     * @param {String} [excludeAppLicensing] Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsUsersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'vaults': opts['vaults'],
        'exclude_vault_membership': opts['excludeVaultMembership'],
        'exclude_app_licensing': opts['excludeAppLicensing']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/users/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsUsersIdGet operation.
     * @callback module:api/DefaultApi~objectsUsersIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve User
     * @param {String} id The user id field value. Use the value me to get information for the currently authenticated user.
     * @param {Object} opts Optional parameters
     * @param {String} [excludeVaultMembership] Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
     * @param {String} [excludeAppLicensing] Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsUsersIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsUsersIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsUsersIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'exclude_vault_membership': opts['excludeVaultMembership'],
        'exclude_app_licensing': opts['excludeAppLicensing']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsUsersIdPermissionsGet operation.
     * @callback module:api/DefaultApi~objectsUsersIdPermissionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve User Permissions
     * @param {String} id The ID of the user. Use the value me to retrieve information for the currently authenticated user.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsUsersIdPermissionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsUsersIdPermissionsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsUsersIdPermissionsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/users/{id}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsUsersIdPut operation.
     * @callback module:api/DefaultApi~objectsUsersIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Single User
     * @param {String} id The user id field value. Use the value me to get information for the currently authenticated user.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsUsersIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsUsersIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling objectsUsersIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/users/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsUsersMeGet operation.
     * @callback module:api/DefaultApi~objectsUsersMeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate Session User
     * @param {Object} opts Optional parameters
     * @param {String} [excludeVaultMembership] Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
     * @param {String} [excludeAppLicensing] Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsUsersMeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsUsersMeGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'exclude_vault_membership': opts['excludeVaultMembership'],
        'exclude_app_licensing': opts['excludeAppLicensing']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/users/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsUsersMePasswordPost operation.
     * @callback module:api/DefaultApi~objectsUsersMePasswordPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change My Password
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsUsersMePasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsUsersMePasswordPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/users/me/password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsUsersMePermissionsGet operation.
     * @callback module:api/DefaultApi~objectsUsersMePermissionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve My User Permissions
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsUsersMePermissionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsUsersMePermissionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/users/me/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsUsersMePut operation.
     * @callback module:api/DefaultApi~objectsUsersMePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update My User
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsUsersMePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsUsersMePut(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/users/me', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsUsersPost operation.
     * @callback module:api/DefaultApi~objectsUsersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Single User
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsUsersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsUsersPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsUsersPut operation.
     * @callback module:api/DefaultApi~objectsUsersPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Multiple Users
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsUsersPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsUsersPut(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/users', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsUsersUserIdDelete operation.
     * @callback module:api/DefaultApi~objectsUsersUserIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable User
     * @param {String} userId The user id field value. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [domain] When true, this disables the user account in all vaults in the domain.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsUsersUserIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsUsersUserIdDelete(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling objectsUsersUserIdDelete");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'domain': opts['domain']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/users/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsUsersUserIdVaultMembershipVaultIdPut operation.
     * @callback module:api/DefaultApi~objectsUsersUserIdVaultMembershipVaultIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Vault Membership
     * @param {String} userId The user id field value.
     * @param {String} vaultId The system-managed id field value assigned to each vault in the domain.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsUsersUserIdVaultMembershipVaultIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsUsersUserIdVaultMembershipVaultIdPut(userId, vaultId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling objectsUsersUserIdVaultMembershipVaultIdPut");
      }
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling objectsUsersUserIdVaultMembershipVaultIdPut");
      }

      let pathParams = {
        'user_id': userId,
        'vault_id': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/users/{user_id}/vault_membership/{vault_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsVaultActionsComparePost operation.
     * @callback module:api/DefaultApi~objectsVaultActionsComparePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Vault Compare
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsVaultActionsComparePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsVaultActionsComparePost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/vault/actions/compare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the objectsVaultActionsConfigreportPost operation.
     * @callback module:api/DefaultApi~objectsVaultActionsConfigreportPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Vault Configuration Report
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~objectsVaultActionsConfigreportPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    objectsVaultActionsConfigreportPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/objects/vault/actions/configreport', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryComponentsPost operation.
     * @callback module:api/DefaultApi~queryComponentsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Component Definition Query
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~queryComponentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    queryComponentsPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/query/components', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryNextPagePost operation.
     * @callback module:api/DefaultApi~queryNextPagePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Next Page URL
     * @param {String} nextPage 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {Boolean} [xVaultAPIDescribeQuery] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~queryNextPagePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    queryNextPagePost(nextPage, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nextPage' is set
      if (nextPage === undefined || nextPage === null) {
        throw new Error("Missing the required parameter 'nextPage' when calling queryNextPagePost");
      }

      let pathParams = {
        'next_page': nextPage
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-DescribeQuery': opts['xVaultAPIDescribeQuery'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/query/{next_page}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryPost operation.
     * @callback module:api/DefaultApi~queryPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submitting a Query
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {Boolean} [xVaultAPIDescribeQuery] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~queryPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    queryPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-DescribeQuery': opts['xVaultAPIDescribeQuery'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryPreviousPagePost operation.
     * @callback module:api/DefaultApi~queryPreviousPagePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Previous Page URL
     * @param {String} previousPage 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {Boolean} [xVaultAPIDescribeQuery] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~queryPreviousPagePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    queryPreviousPagePost(previousPage, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'previousPage' is set
      if (previousPage === undefined || previousPage === null) {
        throw new Error("Missing the required parameter 'previousPage' when calling queryPreviousPagePost");
      }

      let pathParams = {
        'previous_page': previousPage
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-DescribeQuery': opts['xVaultAPIDescribeQuery'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/query/{previous_page}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scimV2MeGet operation.
     * @callback module:api/DefaultApi~scimV2MeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Current User with SCIM
     * @param {Object} opts Optional parameters
     * @param {String} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
     * @param {String} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~scimV2MeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scimV2MeGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'attributes': opts['attributes'],
        'excludedAttributes': opts['excludedAttributes']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scim/v2/Me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scimV2MePut operation.
     * @callback module:api/DefaultApi~scimV2MePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Current User with SCIM
     * @param {Object} opts Optional parameters
     * @param {String} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
     * @param {String} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~scimV2MePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scimV2MePut(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'attributes': opts['attributes'],
        'excludedAttributes': opts['excludedAttributes']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scim/v2/Me', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scimV2ResourceTypesGet operation.
     * @callback module:api/DefaultApi~scimV2ResourceTypesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve All SCIM Resource Types
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~scimV2ResourceTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scimV2ResourceTypesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scim/v2/ResourceTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scimV2ResourceTypesTypeGet operation.
     * @callback module:api/DefaultApi~scimV2ResourceTypesTypeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Single SCIM Resource Type
     * @param {String} type A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~scimV2ResourceTypesTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scimV2ResourceTypesTypeGet(type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling scimV2ResourceTypesTypeGet");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scim/v2/ResourceTypes/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scimV2SchemasGet operation.
     * @callback module:api/DefaultApi~scimV2SchemasGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve All SCIM Schema Information
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~scimV2SchemasGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scimV2SchemasGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scim/v2/Schemas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scimV2SchemasIdGet operation.
     * @callback module:api/DefaultApi~scimV2SchemasIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Single SCIM Schema Information
     * @param {String} id The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~scimV2SchemasIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scimV2SchemasIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling scimV2SchemasIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scim/v2/Schemas/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scimV2ServiceProviderConfigGet operation.
     * @callback module:api/DefaultApi~scimV2ServiceProviderConfigGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve SCIM Provider
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~scimV2ServiceProviderConfigGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scimV2ServiceProviderConfigGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scim/v2/ServiceProviderConfig', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scimV2TypeGet operation.
     * @callback module:api/DefaultApi~scimV2TypeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve SCIM Resources
     * @param {String} type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
     * @param {String} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
     * @param {String} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param {String} [sortBy] Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
     * @param {String} [sortOrder] Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
     * @param {String} [startIndex] Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~scimV2TypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scimV2TypeGet(type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling scimV2TypeGet");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
        'filter': opts['filter'],
        'attributes': opts['attributes'],
        'excludedAttributes': opts['excludedAttributes'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'startIndex': opts['startIndex']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scim/v2/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scimV2TypeIdGet operation.
     * @callback module:api/DefaultApi~scimV2TypeIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Single SCIM Resource
     * @param {String} type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
     * @param {String} id The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.
     * @param {Object} opts Optional parameters
     * @param {String} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
     * @param {String} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~scimV2TypeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scimV2TypeIdGet(type, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling scimV2TypeIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling scimV2TypeIdGet");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
        'attributes': opts['attributes'],
        'excludedAttributes': opts['excludedAttributes']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scim/v2/{type}/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scimV2UsersGet operation.
     * @callback module:api/DefaultApi~scimV2UsersGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve All Users with SCIM
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
     * @param {String} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
     * @param {String} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param {String} [sortBy] Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
     * @param {String} [sortOrder] Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.
     * @param {String} [count] Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
     * @param {String} [startIndex] Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~scimV2UsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scimV2UsersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'attributes': opts['attributes'],
        'excludedAttributes': opts['excludedAttributes'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'count': opts['count'],
        'startIndex': opts['startIndex']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scim/v2/Users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scimV2UsersIdGet operation.
     * @callback module:api/DefaultApi~scimV2UsersIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Single User with SCIM
     * @param {String} id The id of the user you wish to update.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \"{value}\". For example, to filter for a particular user name, userName eq \"john\". Complex expressions are not supported, and eq is the only supported operator.
     * @param {String} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes=userName,emails. Note that the schemas and id attributes are always returned.
     * @param {String} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes=userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~scimV2UsersIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scimV2UsersIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling scimV2UsersIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter'],
        'attributes': opts['attributes'],
        'excludedAttributes': opts['excludedAttributes']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scim/v2/Users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scimV2UsersIdPut operation.
     * @callback module:api/DefaultApi~scimV2UsersIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update User with SCIM
     * @param {String} id The id of the user you wish to update.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~scimV2UsersIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scimV2UsersIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling scimV2UsersIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scim/v2/Users/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scimV2UsersPost operation.
     * @callback module:api/DefaultApi~scimV2UsersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create User with SCIM
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~scimV2UsersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scimV2UsersPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scim/v2/Users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesCertificateCertIdGet operation.
     * @callback module:api/DefaultApi~servicesCertificateCertIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Signing Certificate
     * @param {String} certId The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesCertificateCertIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesCertificateCertIdGet(certId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'certId' is set
      if (certId === undefined || certId === null) {
        throw new Error("Missing the required parameter 'certId' when calling servicesCertificateCertIdGet");
      }

      let pathParams = {
        'cert_id': certId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/certificate/{cert_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesConfigurationModeActionsDisablePost operation.
     * @callback module:api/DefaultApi~servicesConfigurationModeActionsDisablePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable Configuration Mode
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesConfigurationModeActionsDisablePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesConfigurationModeActionsDisablePost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/configuration_mode/actions/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesConfigurationModeActionsEnablePost operation.
     * @callback module:api/DefaultApi~servicesConfigurationModeActionsEnablePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable Configuration Mode
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesConfigurationModeActionsEnablePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesConfigurationModeActionsEnablePost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/configuration_mode/actions/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesDirectdataFilesGet operation.
     * @callback module:api/DefaultApi~servicesDirectdataFilesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Available Direct Data Files
     * @param {Object} opts Optional parameters
     * @param {String} [extractType] The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.
     * @param {Number} [startTime] Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.
     * @param {Number} [stopTime] Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesDirectdataFilesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesDirectdataFilesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'extract_type': opts['extractType'],
        'start_time': opts['startTime'],
        'stop_time': opts['stopTime']
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/directdata/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesDirectdataFilesNameGet operation.
     * @callback module:api/DefaultApi~servicesDirectdataFilesNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Direct Data File
     * @param {String} name The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesDirectdataFilesNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesDirectdataFilesNameGet(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling servicesDirectdataFilesNameGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/directdata/files/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesFileStagingItemsContentItemGet operation.
     * @callback module:api/DefaultApi~servicesFileStagingItemsContentItemGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Item Content
     * @param {String} item The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [range] Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format `bytes={min}-{max}`. For example, `bytes=0-1000`.
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesFileStagingItemsContentItemGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesFileStagingItemsContentItemGet(item, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'item' is set
      if (item === undefined || item === null) {
        throw new Error("Missing the required parameter 'item' when calling servicesFileStagingItemsContentItemGet");
      }

      let pathParams = {
        'item': item
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Range': opts['range'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/file_staging/items/content/{item}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesFileStagingItemsItemDelete operation.
     * @callback module:api/DefaultApi~servicesFileStagingItemsItemDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete File or Folder
     * @param {String} item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param {Object} opts Optional parameters
     * @param {String} [recursive] Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesFileStagingItemsItemDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesFileStagingItemsItemDelete(item, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'item' is set
      if (item === undefined || item === null) {
        throw new Error("Missing the required parameter 'item' when calling servicesFileStagingItemsItemDelete");
      }

      let pathParams = {
        'item': item
      };
      let queryParams = {
        'recursive': opts['recursive']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/file_staging/items/{item}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesFileStagingItemsItemGet operation.
     * @callback module:api/DefaultApi~servicesFileStagingItemsItemGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Items at a Path
     * @param {String} item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param {Object} opts Optional parameters
     * @param {String} [recursive] If true, the response will contain the contents of all subfolders. If not specified, the default value is false.
     * @param {String} [limit] Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
     * @param {String} [formatResult] If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesFileStagingItemsItemGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesFileStagingItemsItemGet(item, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'item' is set
      if (item === undefined || item === null) {
        throw new Error("Missing the required parameter 'item' when calling servicesFileStagingItemsItemGet");
      }

      let pathParams = {
        'item': item
      };
      let queryParams = {
        'recursive': opts['recursive'],
        'limit': opts['limit'],
        'format_result': opts['formatResult']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/file_staging/items/{item}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesFileStagingItemsItemPut operation.
     * @callback module:api/DefaultApi~servicesFileStagingItemsItemPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Folder or File
     * @param {String} item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesFileStagingItemsItemPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesFileStagingItemsItemPut(item, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'item' is set
      if (item === undefined || item === null) {
        throw new Error("Missing the required parameter 'item' when calling servicesFileStagingItemsItemPut");
      }

      let pathParams = {
        'item': item
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/file_staging/items/{item}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesFileStagingItemsPost operation.
     * @callback module:api/DefaultApi~servicesFileStagingItemsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Folder or File
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentMD5] Optional: The MD5 checksum of the file being uploaded.
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesFileStagingItemsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesFileStagingItemsPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-MD5': opts['contentMD5'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/file_staging/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesFileStagingUploadGet operation.
     * @callback module:api/DefaultApi~servicesFileStagingUploadGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Upload Sessions
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesFileStagingUploadGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesFileStagingUploadGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/file_staging/upload/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesFileStagingUploadPost operation.
     * @callback module:api/DefaultApi~servicesFileStagingUploadPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Resumable Upload Session
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesFileStagingUploadPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesFileStagingUploadPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/file_staging/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesFileStagingUploadUploadSessionIdDelete operation.
     * @callback module:api/DefaultApi~servicesFileStagingUploadUploadSessionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Abort Upload Session
     * @param {String} uploadSessionId 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesFileStagingUploadUploadSessionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesFileStagingUploadUploadSessionIdDelete(uploadSessionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uploadSessionId' is set
      if (uploadSessionId === undefined || uploadSessionId === null) {
        throw new Error("Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdDelete");
      }

      let pathParams = {
        'upload_session_id': uploadSessionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/file_staging/upload/{upload_session_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesFileStagingUploadUploadSessionIdGet operation.
     * @callback module:api/DefaultApi~servicesFileStagingUploadUploadSessionIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Upload Session Details
     * @param {String} uploadSessionId 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesFileStagingUploadUploadSessionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesFileStagingUploadUploadSessionIdGet(uploadSessionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uploadSessionId' is set
      if (uploadSessionId === undefined || uploadSessionId === null) {
        throw new Error("Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdGet");
      }

      let pathParams = {
        'upload_session_id': uploadSessionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/file_staging/upload/{upload_session_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesFileStagingUploadUploadSessionIdPartsGet operation.
     * @callback module:api/DefaultApi~servicesFileStagingUploadUploadSessionIdPartsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List File Parts Uploaded to Session
     * @param {String} uploadSessionId 
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesFileStagingUploadUploadSessionIdPartsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesFileStagingUploadUploadSessionIdPartsGet(uploadSessionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uploadSessionId' is set
      if (uploadSessionId === undefined || uploadSessionId === null) {
        throw new Error("Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdPartsGet");
      }

      let pathParams = {
        'upload_session_id': uploadSessionId
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/file_staging/upload/{upload_session_id}/parts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesFileStagingUploadUploadSessionIdPost operation.
     * @callback module:api/DefaultApi~servicesFileStagingUploadUploadSessionIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Commit Upload Session
     * @param {String} uploadSessionId 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesFileStagingUploadUploadSessionIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesFileStagingUploadUploadSessionIdPost(uploadSessionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uploadSessionId' is set
      if (uploadSessionId === undefined || uploadSessionId === null) {
        throw new Error("Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdPost");
      }

      let pathParams = {
        'upload_session_id': uploadSessionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/file_staging/upload/{upload_session_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesFileStagingUploadUploadSessionIdPut operation.
     * @callback module:api/DefaultApi~servicesFileStagingUploadUploadSessionIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload to a Session
     * @param {String} uploadSessionId 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIFilePartNumber] The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.
     * @param {String} [contentMD5] Optional: The MD5 checksum of the file part being uploaded.
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesFileStagingUploadUploadSessionIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesFileStagingUploadUploadSessionIdPut(uploadSessionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uploadSessionId' is set
      if (uploadSessionId === undefined || uploadSessionId === null) {
        throw new Error("Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdPut");
      }

      let pathParams = {
        'upload_session_id': uploadSessionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-FilePartNumber': opts['xVaultAPIFilePartNumber'],
        'Content-MD5': opts['contentMD5'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/file_staging/upload/{upload_session_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesJobsHistoriesGet operation.
     * @callback module:api/DefaultApi~servicesJobsHistoriesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Job Histories
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
     * @param {String} [endDate] Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
     * @param {String} [status] Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.
     * @param {String} [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
     * @param {String} [offset] Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesJobsHistoriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesJobsHistoriesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'status': opts['status'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/jobs/histories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesJobsJobIdErrorsGet operation.
     * @callback module:api/DefaultApi~servicesJobsJobIdErrorsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Import Bulk Translation File Job Errors
     * @param {String} jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesJobsJobIdErrorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesJobsJobIdErrorsGet(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling servicesJobsJobIdErrorsGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/jobs/{job_id}/errors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesJobsJobIdGet operation.
     * @callback module:api/DefaultApi~servicesJobsJobIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Job Status
     * @param {String} jobId The ID of the job, returned from the original job request.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesJobsJobIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesJobsJobIdGet(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling servicesJobsJobIdGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/jobs/{job_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesJobsJobIdSummaryGet operation.
     * @callback module:api/DefaultApi~servicesJobsJobIdSummaryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Import Bulk Translation File Job Summary
     * @param {String} jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesJobsJobIdSummaryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesJobsJobIdSummaryGet(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling servicesJobsJobIdSummaryGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/jobs/{job_id}/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesJobsJobIdTasksGet operation.
     * @callback module:api/DefaultApi~servicesJobsJobIdTasksGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve SDK Job Tasks
     * @param {String} jobId The ID of the SDK job, returned from the original job request.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesJobsJobIdTasksGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesJobsJobIdTasksGet(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling servicesJobsJobIdTasksGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/jobs/{job_id}/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesJobsMonitorsGet operation.
     * @callback module:api/DefaultApi~servicesJobsMonitorsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Job Monitors
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
     * @param {String} [endDate] Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
     * @param {String} [status] Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.
     * @param {String} [limit] Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
     * @param {String} [offset] Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesJobsMonitorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesJobsMonitorsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'status': opts['status'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/jobs/monitors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesJobsStartNowJobIdPost operation.
     * @callback module:api/DefaultApi~servicesJobsStartNowJobIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start Job
     * @param {String} jobId The ID of the scheduled job instance to start.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesJobsStartNowJobIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesJobsStartNowJobIdPost(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling servicesJobsStartNowJobIdPost");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/jobs/start_now/{job_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesLoaderExtractPost operation.
     * @callback module:api/DefaultApi~servicesLoaderExtractPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extract Data Files
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesLoaderExtractPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesLoaderExtractPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/loader/extract', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesLoaderJobIdTasksTaskIdFailurelogGet operation.
     * @callback module:api/DefaultApi~servicesLoaderJobIdTasksTaskIdFailurelogGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Load Failure Log Results
     * @param {String} jobId The id value of the requested extract job.
     * @param {String} taskId The id value of the requested extract task.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesLoaderJobIdTasksTaskIdFailurelogGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesLoaderJobIdTasksTaskIdFailurelogGet(jobId, taskId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdFailurelogGet");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdFailurelogGet");
      }

      let pathParams = {
        'job_id': jobId,
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/loader/{job_id}/tasks/{task_id}/failurelog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesLoaderJobIdTasksTaskIdResultsGet operation.
     * @callback module:api/DefaultApi~servicesLoaderJobIdTasksTaskIdResultsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Loader Extract Results
     * @param {String} jobId The id value of the requested extract job.
     * @param {String} taskId The id value of the requested extract task.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesLoaderJobIdTasksTaskIdResultsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesLoaderJobIdTasksTaskIdResultsGet(jobId, taskId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdResultsGet");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdResultsGet");
      }

      let pathParams = {
        'job_id': jobId,
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/loader/{job_id}/tasks/{task_id}/results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesLoaderJobIdTasksTaskIdResultsRenditionsGet operation.
     * @callback module:api/DefaultApi~servicesLoaderJobIdTasksTaskIdResultsRenditionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Loader Extract Renditions Results
     * @param {String} jobId The id value of the requested extract job.
     * @param {String} taskId The id value of the requested extract task.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesLoaderJobIdTasksTaskIdResultsRenditionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(jobId, taskId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdResultsRenditionsGet");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdResultsRenditionsGet");
      }

      let pathParams = {
        'job_id': jobId,
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/loader/{job_id}/tasks/{task_id}/results/renditions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesLoaderJobIdTasksTaskIdSuccesslogGet operation.
     * @callback module:api/DefaultApi~servicesLoaderJobIdTasksTaskIdSuccesslogGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Load Success Log Results
     * @param {String} jobId The id value of the requested extract job.
     * @param {String} taskId The id value of the requested extract task.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesLoaderJobIdTasksTaskIdSuccesslogGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesLoaderJobIdTasksTaskIdSuccesslogGet(jobId, taskId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdSuccesslogGet");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdSuccesslogGet");
      }

      let pathParams = {
        'job_id': jobId,
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/loader/{job_id}/tasks/{task_id}/successlog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesLoaderLoadPost operation.
     * @callback module:api/DefaultApi~servicesLoaderLoadPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load Data Objects
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesLoaderLoadPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesLoaderLoadPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/loader/load', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesPackageActionsValidatePost operation.
     * @callback module:api/DefaultApi~servicesPackageActionsValidatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate Package
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesPackageActionsValidatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesPackageActionsValidatePost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/package/actions/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesPackagePost operation.
     * @callback module:api/DefaultApi~servicesPackagePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export Package
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesPackagePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesPackagePost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/package', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesPackagePut operation.
     * @callback module:api/DefaultApi~servicesPackagePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import Package
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesPackagePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesPackagePut(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/package', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesQueuesGet operation.
     * @callback module:api/DefaultApi~servicesQueuesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve All Queues
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesQueuesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesQueuesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/queues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesQueuesQueueNameActionsDisableDeliveryPut operation.
     * @callback module:api/DefaultApi~servicesQueuesQueueNameActionsDisableDeliveryPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable Delivery
     * @param {String} queueName The name of a specific Queue.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesQueuesQueueNameActionsDisableDeliveryPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesQueuesQueueNameActionsDisableDeliveryPut(queueName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'queueName' is set
      if (queueName === undefined || queueName === null) {
        throw new Error("Missing the required parameter 'queueName' when calling servicesQueuesQueueNameActionsDisableDeliveryPut");
      }

      let pathParams = {
        'queue_name': queueName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/queues/{queue_name}/actions/disable_delivery', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesQueuesQueueNameActionsEnableDeliveryPut operation.
     * @callback module:api/DefaultApi~servicesQueuesQueueNameActionsEnableDeliveryPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable Delivery
     * @param {String} queueName The name of a specific Queue.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesQueuesQueueNameActionsEnableDeliveryPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesQueuesQueueNameActionsEnableDeliveryPut(queueName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'queueName' is set
      if (queueName === undefined || queueName === null) {
        throw new Error("Missing the required parameter 'queueName' when calling servicesQueuesQueueNameActionsEnableDeliveryPut");
      }

      let pathParams = {
        'queue_name': queueName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/queues/{queue_name}/actions/enable_delivery', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesQueuesQueueNameActionsResetPut operation.
     * @callback module:api/DefaultApi~servicesQueuesQueueNameActionsResetPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset Queue
     * @param {String} queueName The name of a specific Queue.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesQueuesQueueNameActionsResetPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesQueuesQueueNameActionsResetPut(queueName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'queueName' is set
      if (queueName === undefined || queueName === null) {
        throw new Error("Missing the required parameter 'queueName' when calling servicesQueuesQueueNameActionsResetPut");
      }

      let pathParams = {
        'queue_name': queueName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/queues/{queue_name}/actions/reset', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesQueuesQueueNameGet operation.
     * @callback module:api/DefaultApi~servicesQueuesQueueNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Queue Status
     * @param {String} queueName The name of a specific queue. For example, queue__c.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesQueuesQueueNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesQueuesQueueNameGet(queueName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'queueName' is set
      if (queueName === undefined || queueName === null) {
        throw new Error("Missing the required parameter 'queueName' when calling servicesQueuesQueueNameGet");
      }

      let pathParams = {
        'queue_name': queueName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/queues/{queue_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesVobjectVaultPackageVPackageIdActionsValidatePost operation.
     * @callback module:api/DefaultApi~servicesVobjectVaultPackageVPackageIdActionsValidatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate Imported Package
     * @param {String} packageId The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~servicesVobjectVaultPackageVPackageIdActionsValidatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesVobjectVaultPackageVPackageIdActionsValidatePost(packageId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageId' is set
      if (packageId === undefined || packageId === null) {
        throw new Error("Missing the required parameter 'packageId' when calling servicesVobjectVaultPackageVPackageIdActionsValidatePost");
      }

      let pathParams = {
        'package_id': packageId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/services/vobject/vault_package__v/{package_id}/actions/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionDelete operation.
     * @callback module:api/DefaultApi~sessionDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * End Session
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] The Vault sessionId to end.
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~sessionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/session', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uicodeDistributionsDistributionNameCodeGet operation.
     * @callback module:api/DefaultApi~uicodeDistributionsDistributionNameCodeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Single Client Code Distribution
     * @param {String} distributionName The name attribute of the client code distribution to download.
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~uicodeDistributionsDistributionNameCodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uicodeDistributionsDistributionNameCodeGet(distributionName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'distributionName' is set
      if (distributionName === undefined || distributionName === null) {
        throw new Error("Missing the required parameter 'distributionName' when calling uicodeDistributionsDistributionNameCodeGet");
      }

      let pathParams = {
        'distribution_name': distributionName
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/uicode/distributions/{distribution_name}/code', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uicodeDistributionsDistributionNameDelete operation.
     * @callback module:api/DefaultApi~uicodeDistributionsDistributionNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Single Client Code Distribution
     * @param {String} distributionName The name attribute of the client code distribution to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~uicodeDistributionsDistributionNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uicodeDistributionsDistributionNameDelete(distributionName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'distributionName' is set
      if (distributionName === undefined || distributionName === null) {
        throw new Error("Missing the required parameter 'distributionName' when calling uicodeDistributionsDistributionNameDelete");
      }

      let pathParams = {
        'distribution_name': distributionName
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/uicode/distributions/{distribution_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uicodeDistributionsDistributionNameGet operation.
     * @callback module:api/DefaultApi~uicodeDistributionsDistributionNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Single Client Code Distribution Metadata
     * @param {String} distributionName The name attribute of the client code distribution to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~uicodeDistributionsDistributionNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uicodeDistributionsDistributionNameGet(distributionName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'distributionName' is set
      if (distributionName === undefined || distributionName === null) {
        throw new Error("Missing the required parameter 'distributionName' when calling uicodeDistributionsDistributionNameGet");
      }

      let pathParams = {
        'distribution_name': distributionName
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/uicode/distributions/{distribution_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uicodeDistributionsGet operation.
     * @callback module:api/DefaultApi~uicodeDistributionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve All Client Code Distribution Metadata
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~uicodeDistributionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uicodeDistributionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/uicode/distributions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uicodeDistributionsPost operation.
     * @callback module:api/DefaultApi~uicodeDistributionsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or Replace Single Client Code Distribution
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~uicodeDistributionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uicodeDistributionsPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/uicode/distributions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectVaultPackageVPackageIdActionsDeployPost operation.
     * @callback module:api/DefaultApi~vobjectVaultPackageVPackageIdActionsDeployPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy Package
     * @param {String} packageId The id field value of the vault_package__v object record used for deployment. See Import Package.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectVaultPackageVPackageIdActionsDeployPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectVaultPackageVPackageIdActionsDeployPost(packageId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageId' is set
      if (packageId === undefined || packageId === null) {
        throw new Error("Missing the required parameter 'packageId' when calling vobjectVaultPackageVPackageIdActionsDeployPost");
      }

      let pathParams = {
        'package_id': packageId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobject/vault_package__v/{package_id}/actions/deploy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectVaultPackageVPackageIdActionsDeployResultsGet operation.
     * @callback module:api/DefaultApi~vobjectVaultPackageVPackageIdActionsDeployResultsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Package Deploy Results
     * @param {String} packageId The id field value of the vault_package__v object record used for deployment. See Deploy Package.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectVaultPackageVPackageIdActionsDeployResultsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectVaultPackageVPackageIdActionsDeployResultsGet(packageId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageId' is set
      if (packageId === undefined || packageId === null) {
        throw new Error("Missing the required parameter 'packageId' when calling vobjectVaultPackageVPackageIdActionsDeployResultsGet");
      }

      let pathParams = {
        'package_id': packageId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobject/vault_package__v/{package_id}/actions/deploy/results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet operation.
     * @callback module:api/DefaultApi~vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Results of Cascade Delete Job
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} jobStatus 
     * @param {String} jobId 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(objectName, jobStatus, jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet");
      }
      // verify the required parameter 'jobStatus' is set
      if (jobStatus === undefined || jobStatus === null) {
        throw new Error("Missing the required parameter 'jobStatus' when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet");
      }

      let pathParams = {
        'object_name': objectName,
        'job_status': jobStatus,
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet operation.
     * @callback module:api/DefaultApi~vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Results of Deep Copy Job
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} jobStatus The ID of the job, retrieved from the response of the job request.
     * @param {String} jobId Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(objectName, jobStatus, jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet");
      }
      // verify the required parameter 'jobStatus' is set
      if (jobStatus === undefined || jobStatus === null) {
        throw new Error("Missing the required parameter 'jobStatus' when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet");
      }

      let pathParams = {
        'object_name': objectName,
        'job_status': jobStatus,
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsEdlItemVActionsCreateplaceholderPost operation.
     * @callback module:api/DefaultApi~vobjectsEdlItemVActionsCreateplaceholderPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Placeholder from an EDL Item
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsEdlItemVActionsCreateplaceholderPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsEdlItemVActionsCreateplaceholderPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/edl_item__v/actions/createplaceholder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsMergesJobIdLogGet operation.
     * @callback module:api/DefaultApi~vobjectsMergesJobIdLogGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Merge Records Job Log
     * @param {String} jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsMergesJobIdLogGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsMergesJobIdLogGet(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling vobjectsMergesJobIdLogGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/merges/{job_id}/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsMergesJobIdResultsGet operation.
     * @callback module:api/DefaultApi~vobjectsMergesJobIdResultsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Record Merge Results
     * @param {String} jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsMergesJobIdResultsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsMergesJobIdResultsGet(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling vobjectsMergesJobIdResultsGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/merges/{job_id}/results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsMergesJobIdStatusGet operation.
     * @callback module:api/DefaultApi~vobjectsMergesJobIdStatusGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Record Merge Status
     * @param {String} jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsMergesJobIdStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsMergesJobIdStatusGet(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling vobjectsMergesJobIdStatusGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/merges/{job_id}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameActionsActionNamePost operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameActionsActionNamePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate Object Action on Multiple Records
     * @param {String} objectName The object name__v field value.
     * @param {String} actionName Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameActionsActionNamePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameActionsActionNamePost(objectName, actionName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsActionNamePost");
      }
      // verify the required parameter 'actionName' is set
      if (actionName === undefined || actionName === null) {
        throw new Error("Missing the required parameter 'actionName' when calling vobjectsObjectNameActionsActionNamePost");
      }

      let pathParams = {
        'object_name': objectName,
        'action_name': actionName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/actions/{action_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameActionsChangetypePost operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameActionsChangetypePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change Object Type
     * @param {String} objectName The name of the object.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameActionsChangetypePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameActionsChangetypePost(objectName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsChangetypePost");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/actions/changetype', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameActionsMergePost operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameActionsMergePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate Record Merge
     * @param {String} objectName The object name__v field value. For example, account__v. This object must have Enable Merges configured.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {Array.<module:model/VobjectsObjectNameActionsMergePostRequestInner>} [vobjectsObjectNameActionsMergePostRequestInner] 
     * @param {module:api/DefaultApi~vobjectsObjectNameActionsMergePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameActionsMergePost(objectName, opts, callback) {
      opts = opts || {};
      let postBody = opts['vobjectsObjectNameActionsMergePostRequestInner'];
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsMergePost");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/actions/merge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameActionsRecalculaterollupsGet operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameActionsRecalculaterollupsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Roll-up Field Recalculation Status
     * @param {String} objectName The name of the object for which to check the status of a Roll-up field recalculation.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameActionsRecalculaterollupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameActionsRecalculaterollupsGet(objectName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsRecalculaterollupsGet");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/actions/recalculaterollups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameActionsRecalculaterollupsPost operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameActionsRecalculaterollupsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recalculate Roll-up Fields
     * @param {String} objectName The name of the object for which to check the status of a Roll-up field recalculation.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameActionsRecalculaterollupsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameActionsRecalculaterollupsPost(objectName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsRecalculaterollupsPost");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/actions/recalculaterollups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameActionsUpdatecorporatecurrencyPut operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameActionsUpdatecorporatecurrencyPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Corporate Currency Fields
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameActionsUpdatecorporatecurrencyPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameActionsUpdatecorporatecurrencyPut(objectName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsUpdatecorporatecurrencyPut");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/actions/updatecorporatecurrency', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameAttachmentsBatchDelete operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameAttachmentsBatchDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Multiple Object Record Attachments
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {Object} opts Optional parameters
     * @param {String} [idParam] 
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameAttachmentsBatchDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameAttachmentsBatchDelete(objectName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameAttachmentsBatchDelete");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
        'idParam': opts['idParam']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/attachments/batch', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameAttachmentsBatchPost operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameAttachmentsBatchPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Multiple Object Record Attachments
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameAttachmentsBatchPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameAttachmentsBatchPost(objectName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameAttachmentsBatchPost");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/attachments/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameAttachmentsBatchPut operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameAttachmentsBatchPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Multiple Object Record Attachment Descriptions
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameAttachmentsBatchPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameAttachmentsBatchPut(objectName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameAttachmentsBatchPut");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/attachments/batch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameDelete operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Object Records
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] Can be text/csv or application/json
     * @param {String} [accept] Can be text/csv or application/json
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameDelete(objectName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameDelete");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameIdRolesRoleNameGet operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameIdRolesRoleNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Object Record Roles
     * @param {String} objectName The object name.
     * @param {String} id The id of the document, binder, or object record.
     * @param {String} roleName Optional: Include a role name to filter for a specific role. For example, owner__v.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameIdRolesRoleNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameIdRolesRoleNameGet(objectName, id, roleName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameIdRolesRoleNameGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling vobjectsObjectNameIdRolesRoleNameGet");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling vobjectsObjectNameIdRolesRoleNameGet");
      }

      let pathParams = {
        'object_name': objectName,
        'id': id,
        'role_name': roleName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/{id}/roles/{role_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameObjectRecordIdActionsActionNameGet operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameObjectRecordIdActionsActionNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Object User Actions Details
     * @param {String} objectName The object name__v field value.
     * @param {String} objectRecordId The object record id field value from which to retrieve user actions.
     * @param {String} actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameObjectRecordIdActionsActionNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameObjectRecordIdActionsActionNameGet(objectName, objectRecordId, actionName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet");
      }
      // verify the required parameter 'actionName' is set
      if (actionName === undefined || actionName === null) {
        throw new Error("Missing the required parameter 'actionName' when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId,
        'action_name': actionName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/{object_record_id}/actions/{action_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameObjectRecordIdActionsActionNamePost operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameObjectRecordIdActionsActionNamePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate Object Action on a Single Record
     * @param {String} objectName The object name__v field value.
     * @param {String} objectRecordId The object record id field value from which to retrieve user actions.
     * @param {String} actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameObjectRecordIdActionsActionNamePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameObjectRecordIdActionsActionNamePost(objectName, objectRecordId, actionName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost");
      }
      // verify the required parameter 'actionName' is set
      if (actionName === undefined || actionName === null) {
        throw new Error("Missing the required parameter 'actionName' when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId,
        'action_name': actionName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/{object_record_id}/actions/{action_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameObjectRecordIdActionsCascadedeletePost operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameObjectRecordIdActionsCascadedeletePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cascade Delete Object Record
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameObjectRecordIdActionsCascadedeletePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(objectName, objectRecordId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsCascadedeletePost");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsCascadedeletePost");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/{object_record_id}/actions/cascadedelete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameObjectRecordIdActionsDeepcopyPost operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameObjectRecordIdActionsDeepcopyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deep Copy Object Record
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameObjectRecordIdActionsDeepcopyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(objectName, objectRecordId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsDeepcopyPost");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsDeepcopyPost");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/{object_record_id}/actions/deepcopy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameObjectRecordIdActionsGet operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameObjectRecordIdActionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Object Record User Actions
     * @param {String} objectName The object name__v field value.
     * @param {String} objectRecordId The object record id field value.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [loc] Optional: When true, retrieves localized (translated) strings for the label. 
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameObjectRecordIdActionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameObjectRecordIdActionsGet(objectName, objectRecordId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsGet");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsGet");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId
      };
      let queryParams = {
        'loc': opts['loc']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/{object_record_id}/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Attachment Field File
     * @param {String} objectName The object name__v field value. For example, product__v.
     * @param {String} objectRecordId The object record id field value.
     * @param {String} attachmentFieldName The name of the Attachment field to update.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(objectName, objectRecordId, attachmentFieldName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet");
      }
      // verify the required parameter 'attachmentFieldName' is set
      if (attachmentFieldName === undefined || attachmentFieldName === null) {
        throw new Error("Missing the required parameter 'attachmentFieldName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId,
        'attachment_field_name': attachmentFieldName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Attachment Field File
     * @param {String} objectName The object name__v field value. For example, product__v.
     * @param {String} objectRecordId The object record id field value.
     * @param {String} attachmentFieldName The name of the Attachment field to update.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(objectName, objectRecordId, attachmentFieldName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost");
      }
      // verify the required parameter 'attachmentFieldName' is set
      if (attachmentFieldName === undefined || attachmentFieldName === null) {
        throw new Error("Missing the required parameter 'attachmentFieldName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId,
        'attachment_field_name': attachmentFieldName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download All Attachment Field Files
     * @param {String} objectName The object name__v field value. For example, product__v.
     * @param {String} objectRecordId The object record id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(objectName, objectRecordId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachment_fields/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Object Record Attachment
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(objectName, objectRecordId, attachmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Object Record Attachment Metadata
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(objectName, objectRecordId, attachmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Object Record Attachment Description
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(objectName, objectRecordId, attachmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Object Record Attachment Version
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {String} attachmentVersion The attachment version__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(objectName, objectRecordId, attachmentId, attachmentVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete");
      }
      // verify the required parameter 'attachmentVersion' is set
      if (attachmentVersion === undefined || attachmentVersion === null) {
        throw new Error("Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId,
        'attachment_id': attachmentId,
        'attachment_version': attachmentVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Object Record Attachment File
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {String} attachmentVersion 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(objectName, objectRecordId, attachmentId, attachmentVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet");
      }
      // verify the required parameter 'attachmentVersion' is set
      if (attachmentVersion === undefined || attachmentVersion === null) {
        throw new Error("Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId,
        'attachment_id': attachmentId,
        'attachment_version': attachmentVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Object Record Attachment Version Metadata
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {String} attachmentVersion The attachment version__v field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(objectName, objectRecordId, attachmentId, attachmentVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet");
      }
      // verify the required parameter 'attachmentVersion' is set
      if (attachmentVersion === undefined || attachmentVersion === null) {
        throw new Error("Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId,
        'attachment_id': attachmentId,
        'attachment_version': attachmentVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore Object Record Attachment Version
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {String} attachmentVersion The attachment version__v field value.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [restore] 
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(objectName, objectRecordId, attachmentId, attachmentVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost");
      }
      // verify the required parameter 'attachmentVersion' is set
      if (attachmentVersion === undefined || attachmentVersion === null) {
        throw new Error("Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId,
        'attachment_id': attachmentId,
        'attachment_version': attachmentVersion
      };
      let queryParams = {
        'restore': opts['restore']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Object Record Attachment Versions
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {String} attachmentId The attachment id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(objectName, objectRecordId, attachmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameObjectRecordIdAttachmentsFileGet operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentsFileGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download All Object Record Attachment Files
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentsFileGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameObjectRecordIdAttachmentsFileGet(objectName, objectRecordId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsFileGet");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsFileGet");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachments/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameObjectRecordIdAttachmentsGet operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Object Record Attachments
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameObjectRecordIdAttachmentsGet(objectName, objectRecordId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsGet");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsGet");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameObjectRecordIdAttachmentsPost operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Object Record Attachment
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAttachmentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameObjectRecordIdAttachmentsPost(objectName, objectRecordId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsPost");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsPost");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/{object_record_id}/attachments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameObjectRecordIdAudittrailGet operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAudittrailGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Complete Audit History for a Single Object Record
     * @param {String} objectName The object name__v field value.
     * @param {String} objectRecordId The object record id field value from which to retrieve user actions.
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. 
     * @param {String} [endDate] Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
     * @param {String} [formatResult] To request a CSV file of your audit history, use csv. 
     * @param {String} [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param {String} [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset=51. If omitted, defaults to 0.
     * @param {String} [events] Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events=Copy,Edit,Delete. If omitted, defaults to all audit events.
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameObjectRecordIdAudittrailGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameObjectRecordIdAudittrailGet(objectName, objectRecordId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAudittrailGet");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAudittrailGet");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'format_result': opts['formatResult'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'events': opts['events']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/{object_record_id}/audittrail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameObjectRecordIdGet operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameObjectRecordIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Object Record
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {String} objectRecordId The object record id field value.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameObjectRecordIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameObjectRecordIdGet(objectName, objectRecordId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdGet");
      }
      // verify the required parameter 'objectRecordId' is set
      if (objectRecordId === undefined || objectRecordId === null) {
        throw new Error("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdGet");
      }

      let pathParams = {
        'object_name': objectName,
        'object_record_id': objectRecordId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/{object_record_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNamePost operation.
     * @callback module:api/DefaultApi~vobjectsObjectNamePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create & Upsert Object Records
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {Object} opts Optional parameters
     * @param {String} [idParam] To upsert object records, add `idParam={field_name}` to the request endpoint. You can use any object field which has `unique` set to `true` in the object metadata. For example, `idParam=external_id__v`.
     * @param {String} [authorization] 
     * @param {String} [contentType] Can be text/csv or application/json
     * @param {String} [accept] Can be text/csv or application/json
     * @param {Boolean} [xVaultAPIMigrationMode] If set to `true`, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as `created_by__v`. Does not bypass record triggers. Use the `X-VaultAPI-NoTriggers` header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
     * @param {Boolean} [xVaultAPINoTriggers] If set to `true` and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNamePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNamePost(objectName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNamePost");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
        'idParam': opts['idParam']
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-MigrationMode': opts['xVaultAPIMigrationMode'],
        'X-VaultAPI-NoTriggers': opts['xVaultAPINoTriggers'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNamePut operation.
     * @callback module:api/DefaultApi~vobjectsObjectNamePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Object Records
     * @param {String} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [contentType] Can be text/csv or application/json
     * @param {String} [accept] Can be text/csv or application/json
     * @param {Boolean} [xVaultAPIMigrationMode] If set to `true`, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as `created_by__v`. Does not bypass record triggers. Use the `X-VaultAPI-NoTriggers` header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
     * @param {Boolean} [xVaultAPINoTriggers] If set to `true` and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNamePut(objectName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNamePut");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Content-Type': opts['contentType'],
        'Accept': opts['accept'],
        'X-VaultAPI-MigrationMode': opts['xVaultAPIMigrationMode'],
        'X-VaultAPI-NoTriggers': opts['xVaultAPINoTriggers'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameRolesDelete operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameRolesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Users & Groups from Roles on Object Records
     * @param {String} objectName The name of the object where you want to remove roles.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameRolesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameRolesDelete(objectName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameRolesDelete");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/roles', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsObjectNameRolesPost operation.
     * @callback module:api/DefaultApi~vobjectsObjectNameRolesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign Users & Groups to Roles on Object Records
     * @param {String} objectName The name of the object where you want to remove roles.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsObjectNameRolesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsObjectNameRolesPost(objectName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling vobjectsObjectNameRolesPost");
      }

      let pathParams = {
        'object_name': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'Content-Type': opts['contentType'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/{object_name}/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vobjectsOutboundPackageVPackageIdDependenciesGet operation.
     * @callback module:api/DefaultApi~vobjectsOutboundPackageVPackageIdDependenciesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Outbound Package Dependencies
     * @param {String} packageId The ID of the outbound_package__v record from which to retrieve dependencies.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {String} [accept] 
     * @param {String} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin > Logs > API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as `unknown` in the API Usage Log.
     * @param {module:api/DefaultApi~vobjectsOutboundPackageVPackageIdDependenciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vobjectsOutboundPackageVPackageIdDependenciesGet(packageId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageId' is set
      if (packageId === undefined || packageId === null) {
        throw new Error("Missing the required parameter 'packageId' when calling vobjectsOutboundPackageVPackageIdDependenciesGet");
      }

      let pathParams = {
        'package_id': packageId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization'],
        'Accept': opts['accept'],
        'X-VaultAPI-ClientID': opts['xVaultAPIClientID']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/vobjects/outbound_package__v/{package_id}/dependencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
