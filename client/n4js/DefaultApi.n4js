/*
 * Veeva Vault API v25.1
 * The latest GA version of the Vault REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { ApiExecuterI, ApiError, checkRequiredParams } from "/ApiHelper"




/**
 * @summary Retrieve API Versions
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__apiGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('apiGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/api/',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Content File
 * @param fe Callback interface that runs the fetch query
 * @param componentTypeAndRecordName The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__apiMdlComponentsComponentTypeAndRecordNameFilesGet(fe : ApiExecuterI, componentTypeAndRecordName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('apiMdlComponentsComponentTypeAndRecordNameFilesGet', { 'componentTypeAndRecordName': componentTypeAndRecordName,  });

    const _pathParams = { 
        'component_type_and_record_name': componentTypeAndRecordName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/api/mdl/components/{component_type_and_record_name}/files',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Component Record (MDL)
 * @param fe Callback interface that runs the fetch query
 * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__apiMdlComponentsComponentTypeAndRecordNameGet(fe : ApiExecuterI, componentTypeAndRecordName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('apiMdlComponentsComponentTypeAndRecordNameGet', { 'componentTypeAndRecordName': componentTypeAndRecordName,  });

    const _pathParams = { 
        'component_type_and_record_name': componentTypeAndRecordName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/api/mdl/components/{component_type_and_record_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Asynchronous MDL Script Results
 * @param fe Callback interface that runs the fetch query
 * @param jobId 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__apiMdlExecuteAsyncJobIdResultsGet(fe : ApiExecuterI, jobId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('apiMdlExecuteAsyncJobIdResultsGet', { 'jobId': jobId,  });

    const _pathParams = { 
        'job_id': jobId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/api/mdl/execute_async/{job_id}/results',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Execute MDL Script Asynchronously
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__apiMdlExecuteAsyncPost(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('apiMdlExecuteAsyncPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/api/mdl/execute_async',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Execute MDL Script
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__apiMdlExecutePost(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('apiMdlExecutePost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/api/mdl/execute',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Upload Content File
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__apiMdlFilesPost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('apiMdlFilesPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/api/mdl/files',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Audit Details
 * @param fe Callback interface that runs the fetch query
 * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.
 * @param startDate Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
 * @param endDate Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
 * @param allDates Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.
 * @param formatResult To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.
 * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
 * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
 * @param objects This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects&#x3D;product__v,country__v. If omitted, defaults to all objects.
 * @param events This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events&#x3D;Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__audittrailAuditTrailTypeGet(fe : ApiExecuterI, auditTrailType: string, startDate: string=, endDate: string=, allDates: string=, formatResult: string=, limit: string=, offset: string=, objects: string=, events: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('audittrailAuditTrailTypeGet', { 'auditTrailType': auditTrailType,  });

    const _pathParams = { 
        'audit_trail_type': auditTrailType };
    const _queryParams = { 
        'start_date': startDate, 
        'end_date': endDate, 
        'all_dates': allDates, 
        'format_result': formatResult, 
        'limit': limit, 
        'offset': offset, 
        'objects': objects, 
        'events': events };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/audittrail/{audit_trail_type}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Authentication Type Discovery
 * @param fe Callback interface that runs the fetch query
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__authDiscoveryPost(fe : ApiExecuterI, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('authDiscoveryPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/auth/discovery',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary OAuth 2.0 / OpenID Connect
 * @param fe Callback interface that runs the fetch query
 * @param oathOidcProfileId 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__authOauthSessionOathOidcProfileIdPost(fe : ApiExecuterI, oathOidcProfileId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('authOauthSessionOathOidcProfileIdPost', { 'oathOidcProfileId': oathOidcProfileId,  });

    const _pathParams = { 
        'oath_oidc_profile_id': oathOidcProfileId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/auth/oauth/session/{oath_oidc_profile_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary User Name and Password
 * @param fe Callback interface that runs the fetch query
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__authPost(fe : ApiExecuterI, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('authPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/auth',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Single Source Code File
 * @param fe Callback interface that runs the fetch query
 * @param className The fully qualified class name of your file.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__codeClassNameDelete(fe : ApiExecuterI, className: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('codeClassNameDelete', { 'className': className,  });

    const _pathParams = { 
        'class_name': className };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/code/{class_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Disable Vault Extension
 * @param fe Callback interface that runs the fetch query
 * @param className The fully qualified class name of your file.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__codeClassNameDisablePut(fe : ApiExecuterI, className: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('codeClassNameDisablePut', { 'className': className,  });

    const _pathParams = { 
        'class_name': className };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/code/{class_name}/disable',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Enable Vault Extension
 * @param fe Callback interface that runs the fetch query
 * @param className The fully qualified class name of your file.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__codeClassNameEnablePut(fe : ApiExecuterI, className: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('codeClassNameEnablePut', { 'className': className,  });

    const _pathParams = { 
        'class_name': className };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/code/{class_name}/enable',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Single Source Code File
 * @param fe Callback interface that runs the fetch query
 * @param className The fully qualified class name of your file.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__codeClassNameGet(fe : ApiExecuterI, className: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('codeClassNameGet', { 'className': className,  });

    const _pathParams = { 
        'class_name': className };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/code/{class_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve All Profiling Sessions
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__codeProfilerGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('codeProfilerGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/code/profiler',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Profiling Session
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__codeProfilerPost(fe : ApiExecuterI, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('codeProfilerPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/code/profiler',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary End Profiling Session
 * @param fe Callback interface that runs the fetch query
 * @param sessionName The name of the session, for example,  baseline__c.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__codeProfilerSessionNameActionsEndPost(fe : ApiExecuterI, sessionName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('codeProfilerSessionNameActionsEndPost', { 'sessionName': sessionName,  });

    const _pathParams = { 
        'session_name': sessionName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/code/profiler/{session_name}/actions/end',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Profiling Session
 * @param fe Callback interface that runs the fetch query
 * @param sessionName The name of the session, for example,  baseline__c.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__codeProfilerSessionNameDelete(fe : ApiExecuterI, sessionName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('codeProfilerSessionNameDelete', { 'sessionName': sessionName,  });

    const _pathParams = { 
        'session_name': sessionName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/code/profiler/{session_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Profiling Session
 * @param fe Callback interface that runs the fetch query
 * @param sessionName The name of the session, for example,  baseline__c.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__codeProfilerSessionNameGet(fe : ApiExecuterI, sessionName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('codeProfilerSessionNameGet', { 'sessionName': sessionName,  });

    const _pathParams = { 
        'session_name': sessionName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/code/profiler/{session_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Download Profiling Session Results
 * @param fe Callback interface that runs the fetch query
 * @param sessionName The name of the session, for example,  baseline__c.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__codeProfilerSessionNameResultsGet(fe : ApiExecuterI, sessionName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('codeProfilerSessionNameResultsGet', { 'sessionName': sessionName,  });

    const _pathParams = { 
        'session_name': sessionName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/code/profiler/{session_name}/results',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Add or Replace Single Source Code File
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__codePut(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('codePut', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/code',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Specific Root Nodes
 * @param fe Callback interface that runs the fetch query
 * @param edlHierarchyOrTemplate Choose to retrieve either edl_hierarchy__v or edl_template__v
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(fe : ApiExecuterI, edlHierarchyOrTemplate: string, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('compositesTreesEdlHierarchyOrTemplateActionsListnodesPost', { 'edlHierarchyOrTemplate': edlHierarchyOrTemplate,  });

    const _pathParams = { 
        'edl_hierarchy_or_template': edlHierarchyOrTemplate };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/composites/trees/{edl_hierarchy_or_template}/actions/listnodes',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve All Root Nodes
 * @param fe Callback interface that runs the fetch query
 * @param edlHierarchyOrTemplate 
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__compositesTreesEdlHierarchyOrTemplateGet(fe : ApiExecuterI, edlHierarchyOrTemplate: string, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('compositesTreesEdlHierarchyOrTemplateGet', { 'edlHierarchyOrTemplate': edlHierarchyOrTemplate,  });

    const _pathParams = { 
        'edl_hierarchy_or_template': edlHierarchyOrTemplate };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/composites/trees/{edl_hierarchy_or_template}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve a Node's Children
 * @param fe Callback interface that runs the fetch query
 * @param parentNodeId The ID of a parent node in the hierarchy.
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__compositesTreesEdlHierarchyVParentNodeIdChildrenGet(fe : ApiExecuterI, parentNodeId: string, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('compositesTreesEdlHierarchyVParentNodeIdChildrenGet', { 'parentNodeId': parentNodeId,  });

    const _pathParams = { 
        'parent_node_id': parentNodeId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/composites/trees/edl_hierarchy__v/{parent_node_id}/children',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Node Order
 * @param fe Callback interface that runs the fetch query
 * @param parentNodeId The ID of a parent node in the hierarchy.
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__compositesTreesEdlHierarchyVParentNodeIdChildrenPut(fe : ApiExecuterI, parentNodeId: string, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('compositesTreesEdlHierarchyVParentNodeIdChildrenPut', { 'parentNodeId': parentNodeId,  });

    const _pathParams = { 
        'parent_node_id': parentNodeId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/composites/trees/edl_hierarchy__v/{parent_node_id}/children',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Component Record (XML/JSON)
 * @param fe Callback interface that runs the fetch query
 * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
 * @param loc When localized (translated) strings are available, retrieve them by setting loc to true.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__configurationComponentTypeAndRecordNameGet(fe : ApiExecuterI, componentTypeAndRecordName: string, loc: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('configurationComponentTypeAndRecordNameGet', { 'componentTypeAndRecordName': componentTypeAndRecordName,  });

    const _pathParams = { 
        'component_type_and_record_name': componentTypeAndRecordName };
    const _queryParams = { 
        'loc': loc };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/configuration/{component_type_and_record_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Component Record Collection
 * @param fe Callback interface that runs the fetch query
 * @param componentType 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__configurationComponentTypeGet(fe : ApiExecuterI, componentType: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('configurationComponentTypeGet', { 'componentType': componentType,  });

    const _pathParams = { 
        'component_type': componentType };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/configuration/{component_type}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Details from a Specific Object
 * @param fe Callback interface that runs the fetch query
 * @param objectNameAndObjectType The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;.
 * @param loc When localized (translated) strings are available, retrieve them by setting loc to true.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__configurationObjectNameAndObjectTypeGet(fe : ApiExecuterI, objectNameAndObjectType: string, loc: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('configurationObjectNameAndObjectTypeGet', { 'objectNameAndObjectType': objectNameAndObjectType,  });

    const _pathParams = { 
        'object_name_and_object_type': objectNameAndObjectType };
    const _queryParams = { 
        'loc': loc };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/configuration/{object_name_and_object_type}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Details from All Object Types
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__configurationObjecttypeGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('configurationObjecttypeGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/configuration/Objecttype',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Lifecycle Role Assignment Override Rules
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__configurationRoleAssignmentRuleDelete(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('configurationRoleAssignmentRuleDelete', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/configuration/role_assignment_rule',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Lifecycle Role Assignment Rules (Default & Override)
 * @param fe Callback interface that runs the fetch query
 * @param lifecycleV Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v&#x3D;general_lifecycle__c
 * @param roleV Include the name of the role from which to retrieve information. For example: role__v&#x3D;editor__c
 * @param productV Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v&#x3D;0PR0011001 or product__v.name__v&#x3D;CholeCap
 * @param countryV Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v&#x3D;0CR0022002 or country__v.name__v&#x3D;United States
 * @param studyV In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v&#x3D;0ST0021J01 or study__v.name__v&#x3D;CholeCap Study
 * @param studyCountryV In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v&#x3D;0SC0001001 or study_country__v.name__v&#x3D;Germany
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__configurationRoleAssignmentRuleGet(fe : ApiExecuterI, lifecycleV: string=, roleV: string=, productV: string=, countryV: string=, studyV: string=, studyCountryV: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('configurationRoleAssignmentRuleGet', {  });

    const _pathParams = { };
    const _queryParams = { 
        'lifecycle__v': lifecycleV, 
        'role__v': roleV, 
        'product__v': productV, 
        'country__v': countryV, 
        'study__v': studyV, 
        'study_country__v': studyCountryV };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/configuration/role_assignment_rule',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Lifecycle Role Assignment Override Rules
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__configurationRoleAssignmentRulePost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('configurationRoleAssignmentRulePost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/configuration/role_assignment_rule',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Lifecycle Role Assignment Rules (Default & Override)
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__configurationRoleAssignmentRulePut(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('configurationRoleAssignmentRulePut', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/configuration/role_assignment_rule',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Initiate Delegated Session
 * @param fe Callback interface that runs the fetch query
 * @param authorization The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__delegationLoginPost(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('delegationLoginPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/delegation/login',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Delegations
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__delegationVaultsGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('delegationVaultsGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/delegation/vaults',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Session Keep Alive
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__keepAlivePost(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('keepAlivePost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/keep-alive',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Limits on Objects
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__limitsGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('limitsGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/limits',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Download Daily API Usage
 * @param fe Callback interface that runs the fetch query
 * @param date The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.
 * @param logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__logsApiUsageGet(fe : ApiExecuterI, date: string=, logFormat: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('logsApiUsageGet', {  });

    const _pathParams = { };
    const _queryParams = { 
        'date': date, 
        'log_format': logFormat };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/logs/api_usage',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve All Debug Logs
 * @param fe Callback interface that runs the fetch query
 * @param userId Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.
 * @param includeInactive Set to &#x60;true&#x60; to include debug log sessions with a status of &#x60;inactive__sys&#x60; in the response. If omitted, defaults to &#x60;false&#x60; and inactive sessions are not included in the response.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__logsCodeDebugGet(fe : ApiExecuterI, userId: string=, includeInactive: boolean=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('logsCodeDebugGet', {  });

    const _pathParams = { };
    const _queryParams = { 
        'user_id': userId, 
        'include_inactive': includeInactive };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/logs/code/debug',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Debug Log
 * @param fe Callback interface that runs the fetch query
 * @param id The ID of the debug log to delete.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__logsCodeDebugIdActionsResetDelete(fe : ApiExecuterI, id: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('logsCodeDebugIdActionsResetDelete', { 'id': id,  });

    const _pathParams = { 
        'id': id };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/logs/code/debug/{id}/actions/reset',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Reset Debug Log
 * @param fe Callback interface that runs the fetch query
 * @param id The ID of the debug log to delete.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__logsCodeDebugIdActionsResetPost(fe : ApiExecuterI, id: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('logsCodeDebugIdActionsResetPost', { 'id': id,  });

    const _pathParams = { 
        'id': id };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/logs/code/debug/{id}/actions/reset',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Download Debug Log Files
 * @param fe Callback interface that runs the fetch query
 * @param id The ID of the debug log to download.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__logsCodeDebugIdFilesGet(fe : ApiExecuterI, id: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('logsCodeDebugIdFilesGet', { 'id': id,  });

    const _pathParams = { 
        'id': id };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/logs/code/debug/{id}/files',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Single Debug Log
 * @param fe Callback interface that runs the fetch query
 * @param id The ID of the debug log to retrieve.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__logsCodeDebugIdGet(fe : ApiExecuterI, id: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('logsCodeDebugIdGet', { 'id': id,  });

    const _pathParams = { 
        'id': id };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/logs/code/debug/{id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Debug Log
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__logsCodeDebugPost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('logsCodeDebugPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/logs/code/debug',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Download SDK Runtime Log
 * @param fe Callback interface that runs the fetch query
 * @param date 
 * @param logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__logsCodeRuntimeGet(fe : ApiExecuterI, date: string=, logFormat: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('logsCodeRuntimeGet', {  });

    const _pathParams = { };
    const _queryParams = { 
        'date': date, 
        'log_format': logFormat };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/logs/code/runtime',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Import Bulk Translation File
 * @param fe Callback interface that runs the fetch query
 * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__messagesMessageTypeActionsImportPost(fe : ApiExecuterI, messageType: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('messagesMessageTypeActionsImportPost', { 'messageType': messageType,  });

    const _pathParams = { 
        'message_type': messageType };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/messages/{message_type}/actions/import',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Export Bulk Translation File
 * @param fe Callback interface that runs the fetch query
 * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
 * @param lang A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__messagesMessageTypeLanguageLangActionsExportPost(fe : ApiExecuterI, messageType: string, lang: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('messagesMessageTypeLanguageLangActionsExportPost', { 'messageType': messageType, 'lang': lang,  });

    const _pathParams = { 
        'message_type': messageType, 
        'lang': lang };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/messages/{message_type}/language/{lang}/actions/export',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Audit Metadata
 * @param fe Callback interface that runs the fetch query
 * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc).
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataAudittrailAuditTrailTypeGet(fe : ApiExecuterI, auditTrailType: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataAudittrailAuditTrailTypeGet', { 'auditTrailType': auditTrailType,  });

    const _pathParams = { 
        'audit_trail_type': auditTrailType };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/audittrail/{audit_trail_type}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Audit Types
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataAudittrailGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataAudittrailGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/audittrail',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Component Type Metadata
 * @param fe Callback interface that runs the fetch query
 * @param componentType The component type name (Picklist, Docfield, Doctype, etc.).
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataComponentsComponentTypeGet(fe : ApiExecuterI, componentType: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataComponentsComponentTypeGet', { 'componentType': componentType,  });

    const _pathParams = { 
        'component_type': componentType };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/components/{component_type}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve All Component Metadata
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataComponentsGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataComponentsGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/components',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Binder Template Node Metadata
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataObjectsBindersTemplatesBindernodesGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataObjectsBindersTemplatesBindernodesGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/objects/binders/templates/bindernodes',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Binder Template Metadata
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataObjectsBindersTemplatesGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataObjectsBindersTemplatesGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/objects/binders/templates',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Annotation Placemark Type Metadata
 * @param fe Callback interface that runs the fetch query
 * @param placemarkType The name of the placemark type. For example, sticky__sys.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(fe : ApiExecuterI, placemarkType: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet', { 'placemarkType': placemarkType,  });

    const _pathParams = { 
        'placemark_type': placemarkType };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/objects/documents/annotations/placemarks/types/{placemark_type}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Annotation Reference Type Metadata
 * @param fe Callback interface that runs the fetch query
 * @param referenceType 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(fe : ApiExecuterI, referenceType: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet', { 'referenceType': referenceType,  });

    const _pathParams = { 
        'reference_type': referenceType };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/objects/documents/annotations/references/types/{reference_type}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Annotation Type Metadata
 * @param fe Callback interface that runs the fetch query
 * @param annotationType The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(fe : ApiExecuterI, annotationType: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet', { 'annotationType': annotationType,  });

    const _pathParams = { 
        'annotation_type': annotationType };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/objects/documents/annotations/types/{annotation_type}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Event SubType Metadata
 * @param fe Callback interface that runs the fetch query
 * @param eventType The event type. For example, distribution__v.
 * @param eventSubtype The event subtype. For example, approved_email__v.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(fe : ApiExecuterI, eventType: string, eventSubtype: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet', { 'eventType': eventType, 'eventSubtype': eventSubtype,  });

    const _pathParams = { 
        'event_type': eventType, 
        'event_subtype': eventSubtype };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/objects/documents/events/{event_type}/types/{event_subtype}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Event Types and Subtypes
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataObjectsDocumentsEventsGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataObjectsDocumentsEventsGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/objects/documents/events',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Lock Metadata
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataObjectsDocumentsLockGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataObjectsDocumentsLockGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/objects/documents/lock',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Common Document Fields
 * @param fe Callback interface that runs the fetch query
 * @param contentType 
 * @param accept 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataObjectsDocumentsPropertiesFindCommonPost(fe : ApiExecuterI, contentType: string=, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataObjectsDocumentsPropertiesFindCommonPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Content-Type': contentType, 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/metadata/objects/documents/properties/find_common',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve All Document Fields
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataObjectsDocumentsPropertiesGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataObjectsDocumentsPropertiesGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/objects/documents/properties',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Template Metadata
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataObjectsDocumentsTemplatesGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataObjectsDocumentsTemplatesGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/objects/documents/templates',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve All Document Types
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataObjectsDocumentsTypesGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataObjectsDocumentsTypesGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/objects/documents/types',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Type
 * @param fe Callback interface that runs the fetch query
 * @param type The document type. See Retrieve Document Types.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataObjectsDocumentsTypesTypeGet(fe : ApiExecuterI, type: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataObjectsDocumentsTypesTypeGet', { 'type': type,  });

    const _pathParams = { 
        'type': type };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/objects/documents/types/{type}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Type Relationships
 * @param fe Callback interface that runs the fetch query
 * @param type The document type. See Retrieve Document Types.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataObjectsDocumentsTypesTypeRelationshipsGet(fe : ApiExecuterI, type: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataObjectsDocumentsTypesTypeRelationshipsGet', { 'type': type,  });

    const _pathParams = { 
        'type': type };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/objects/documents/types/{type}/relationships',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Classification
 * @param fe Callback interface that runs the fetch query
 * @param type The document type. See Retrieve Document Types.
 * @param subtype The document subtype. See Retrieve Document Types.
 * @param classification The document classification. See Retrieve Document Types.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(fe : ApiExecuterI, type: string, subtype: string, classification: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet', { 'type': type, 'subtype': subtype, 'classification': classification,  });

    const _pathParams = { 
        'type': type, 
        'subtype': subtype, 
        'classification': classification };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Subtype
 * @param fe Callback interface that runs the fetch query
 * @param type The document type. See Retrieve Document Types.
 * @param subtype The document subtype. See Retrieve Document Types.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(fe : ApiExecuterI, type: string, subtype: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet', { 'type': type, 'subtype': subtype,  });

    const _pathParams = { 
        'type': type, 
        'subtype': subtype };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/objects/documents/types/{type}/subtypes/{subtype}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Group Metadata
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataObjectsGroupsGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataObjectsGroupsGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/objects/groups',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Security Policy Metadata
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataObjectsSecuritypoliciesGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataObjectsSecuritypoliciesGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/objects/securitypolicies',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve User Metadata
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataObjectsUsersGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataObjectsUsersGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/objects/users',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Archived Document Signature Metadata
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/query/archived_documents/relationships/document_signature__sysr',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Signature Metadata
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/query/documents/relationships/document_signature__sysr',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Object Collection
 * @param fe Callback interface that runs the fetch query
 * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataVobjectsGet(fe : ApiExecuterI, loc: boolean=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataVobjectsGet', {  });

    const _pathParams = { };
    const _queryParams = { 
        'loc': loc };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/vobjects',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Cancel Raw Object Deployment
 * @param fe Callback interface that runs the fetch query
 * @param objectName 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataVobjectsObjectNameActionsCanceldeploymentPost(fe : ApiExecuterI, objectName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataVobjectsObjectNameActionsCanceldeploymentPost', { 'objectName': objectName,  });

    const _pathParams = { 
        'object_name': objectName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/metadata/vobjects/{object_name}/actions/canceldeployment',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Object Field Metadata
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param objectFieldName The object field name value (id, name__v, external_id__v, etc.).
 * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataVobjectsObjectNameFieldsObjectFieldNameGet(fe : ApiExecuterI, objectName: string, objectFieldName: string, loc: boolean=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataVobjectsObjectNameFieldsObjectFieldNameGet', { 'objectName': objectName, 'objectFieldName': objectFieldName,  });

    const _pathParams = { 
        'object_name': objectName, 
        'object_field_name': objectFieldName };
    const _queryParams = { 
        'loc': loc };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/vobjects/{object_name}/fields/{object_field_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Object Metadata
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataVobjectsObjectNameGet(fe : ApiExecuterI, objectName: string, loc: boolean=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataVobjectsObjectNameGet', { 'objectName': objectName,  });

    const _pathParams = { 
        'object_name': objectName };
    const _queryParams = { 
        'loc': loc };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/vobjects/{object_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Page Layouts
 * @param fe Callback interface that runs the fetch query
 * @param objectName 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataVobjectsObjectNamePageLayoutsGet(fe : ApiExecuterI, objectName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataVobjectsObjectNamePageLayoutsGet', { 'objectName': objectName,  });

    const _pathParams = { 
        'object_name': objectName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/vobjects/{object_name}/page_layouts',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Page Layout Metadata
 * @param fe Callback interface that runs the fetch query
 * @param objectName The name of the object from which to retrieve page layout metadata.
 * @param layoutName The name of the page layout from which to retrieve metadata.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__metadataVobjectsObjectNamePageLayoutsLayoutNameGet(fe : ApiExecuterI, objectName: string, layoutName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('metadataVobjectsObjectNamePageLayoutsLayoutNameGet', { 'objectName': objectName, 'layoutName': layoutName,  });

    const _pathParams = { 
        'object_name': objectName, 
        'layout_name': layoutName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/metadata/vobjects/{object_name}/page_layouts/{layout_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Email Notification Histories
 * @param fe Callback interface that runs the fetch query
 * @param startDate Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.
 * @param endDate Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.
 * @param allDates Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.
 * @param formatResult To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.
 * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
 * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__notificationsHistoriesGet(fe : ApiExecuterI, startDate: string=, endDate: string=, allDates: boolean=, formatResult: string=, limit: string=, offset: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('notificationsHistoriesGet', {  });

    const _pathParams = { };
    const _queryParams = { 
        'start_date': startDate, 
        'end_date': endDate, 
        'all_dates': allDates, 
        'format_result': formatResult, 
        'limit': limit, 
        'offset': offset };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/notifications/histories',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Bulk Workflow Action Details
 * @param fe Callback interface that runs the fetch query
 * @param action 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectWorkflowActionsActionGet(fe : ApiExecuterI, action: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectWorkflowActionsActionGet', { 'action': action,  });

    const _pathParams = { 
        'action': action };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/object/workflow/actions/{action}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Initiate Workflow Actions on Multiple Workflows
 * @param fe Callback interface that runs the fetch query
 * @param action 
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectWorkflowActionsActionPost(fe : ApiExecuterI, action: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectWorkflowActionsActionPost', { 'action': action,  });

    const _pathParams = { 
        'action': action };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/object/workflow/actions/{action}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Cancel Workflow Tasks
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectWorkflowActionsCanceltasksPost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectWorkflowActionsCanceltasksPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/object/workflow/actions/canceltasks',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Cancel Workflows
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectWorkflowActionsCancelworkflowsPost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectWorkflowActionsCancelworkflowsPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/object/workflow/actions/cancelworkflows',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Bulk Workflow Actions
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectWorkflowActionsGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectWorkflowActionsGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/object/workflow/actions',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Reassign Workflow Tasks
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectWorkflowActionsReassigntasksPost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectWorkflowActionsReassigntasksPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/object/workflow/actions/reassigntasks',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Replace Workflow Owner
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectWorkflowActionsReplaceworkflowownerPost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectWorkflowActionsReplaceworkflowownerPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/object/workflow/actions/replaceworkflowowner',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Binder Export Results
 * @param fe Callback interface that runs the fetch query
 * @param jobId The id value of the requested export job. This is returned with the export binder requests above.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersActionsExportJobIdResultsGet(fe : ApiExecuterI, jobId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersActionsExportJobIdResultsGet', { 'jobId': jobId,  });

    const _pathParams = { 
        'job_id': jobId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/binders/actions/export/{job_id}/results',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Export Binder (Latest Version)
 * @param fe Callback interface that runs the fetch query
 * @param binderId The binder id field value.
 * @param source to include source content or not
 * @param renditiontype to include viewable renditions
 * @param docversion to include all major versions
 * @param attachments to include all versions of attachments
 * @param _export configurable filename metadata
 * @param docfield to exclude document metadata csv
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersBinderIdActionsExportPost(fe : ApiExecuterI, binderId: string, source: boolean=, renditiontype: string=, docversion: string=, attachments: string=, _export: string=, docfield: boolean=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersBinderIdActionsExportPost', { 'binderId': binderId,  });

    const _pathParams = { 
        'binder_id': binderId };
    const _queryParams = { 
        'source': source, 
        'renditiontype': renditiontype, 
        'docversion': docversion, 
        'attachments': attachments, 
        'export': _export, 
        'docfield': docfield };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/binders/{binder_id}/actions/export',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Refresh Binder Auto-Filing
 * @param fe Callback interface that runs the fetch query
 * @param binderId The binder id field value.
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersBinderIdActionsPost(fe : ApiExecuterI, binderId: string, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersBinderIdActionsPost', { 'binderId': binderId,  });

    const _pathParams = { 
        'binder_id': binderId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/binders/{binder_id}/actions',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Binding Rule
 * @param fe Callback interface that runs the fetch query
 * @param binderId The binder id field value.
 * @param contentType 
 * @param accept 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersBinderIdBindingRulePut(fe : ApiExecuterI, binderId: string, contentType: string=, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersBinderIdBindingRulePut', { 'binderId': binderId,  });

    const _pathParams = { 
        'binder_id': binderId };
    const _queryParams = { };
    const _headerParams = { 
        'Content-Type': contentType, 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/binders/{binder_id}/binding_rule',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Binder
 * @param fe Callback interface that runs the fetch query
 * @param binderId The binder id field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersBinderIdDelete(fe : ApiExecuterI, binderId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersBinderIdDelete', { 'binderId': binderId,  });

    const _pathParams = { 
        'binder_id': binderId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/binders/{binder_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Binder Document Binding Rule
 * @param fe Callback interface that runs the fetch query
 * @param binderId The binder id field value.
 * @param nodeId The binder node id field value.
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersBinderIdDocumentsNodeIdBindingRulePut(fe : ApiExecuterI, binderId: string, nodeId: string, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersBinderIdDocumentsNodeIdBindingRulePut', { 'binderId': binderId, 'nodeId': nodeId,  });

    const _pathParams = { 
        'binder_id': binderId, 
        'node_id': nodeId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/binders/{binder_id}/documents/{node_id}/binding_rule',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Add Document to Binder
 * @param fe Callback interface that runs the fetch query
 * @param binderId The binder id field value.
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersBinderIdDocumentsPost(fe : ApiExecuterI, binderId: string, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersBinderIdDocumentsPost', { 'binderId': binderId,  });

    const _pathParams = { 
        'binder_id': binderId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/binders/{binder_id}/documents',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Remove Document from Binder
 * @param fe Callback interface that runs the fetch query
 * @param binderId The binder id field value.
 * @param sectionId The binder node id field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersBinderIdDocumentsSectionIdDelete(fe : ApiExecuterI, binderId: string, sectionId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersBinderIdDocumentsSectionIdDelete', { 'binderId': binderId, 'sectionId': sectionId,  });

    const _pathParams = { 
        'binder_id': binderId, 
        'section_id': sectionId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/binders/{binder_id}/documents/{section_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Move Document in Binder
 * @param fe Callback interface that runs the fetch query
 * @param binderId The binder id field value.
 * @param sectionId The binder node id field value.
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersBinderIdDocumentsSectionIdPut(fe : ApiExecuterI, binderId: string, sectionId: string, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersBinderIdDocumentsSectionIdPut', { 'binderId': binderId, 'sectionId': sectionId,  });

    const _pathParams = { 
        'binder_id': binderId, 
        'section_id': sectionId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/binders/{binder_id}/documents/{section_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Binder
 * @param fe Callback interface that runs the fetch query
 * @param binderId The binder id field value.
 * @param depth To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersBinderIdGet(fe : ApiExecuterI, binderId: string, depth: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersBinderIdGet', { 'binderId': binderId,  });

    const _pathParams = { 
        'binder_id': binderId };
    const _queryParams = { 
        'depth': depth };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/binders/{binder_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Binder Version
 * @param fe Callback interface that runs the fetch query
 * @param binderId The binder id field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersBinderIdPost(fe : ApiExecuterI, binderId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersBinderIdPost', { 'binderId': binderId,  });

    const _pathParams = { 
        'binder_id': binderId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/binders/{binder_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Binder
 * @param fe Callback interface that runs the fetch query
 * @param binderId The binder id field value.
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersBinderIdPut(fe : ApiExecuterI, binderId: string, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersBinderIdPut', { 'binderId': binderId,  });

    const _pathParams = { 
        'binder_id': binderId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/binders/{binder_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Remove Users & Groups from Roles on a Single Binder
 * @param fe Callback interface that runs the fetch query
 * @param binderId The id value of the binder from which to remove roles.
 * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
 * @param id The id value of the user or group to remove from the role.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(fe : ApiExecuterI, binderId: string, roleNameAndUserOrGroup: string, id: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete', { 'binderId': binderId, 'roleNameAndUserOrGroup': roleNameAndUserOrGroup, 'id': id,  });

    const _pathParams = { 
        'binder_id': binderId, 
        'role_name_and_user_or_group': roleNameAndUserOrGroup, 
        'id': id };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Binder Section Binding Rule
 * @param fe Callback interface that runs the fetch query
 * @param binderId The binder id field value.
 * @param nodeId The binder node id field value.
 * @param contentType 
 * @param accept 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersBinderIdSectionsNodeIdBindingRulePut(fe : ApiExecuterI, binderId: string, nodeId: string, contentType: string=, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersBinderIdSectionsNodeIdBindingRulePut', { 'binderId': binderId, 'nodeId': nodeId,  });

    const _pathParams = { 
        'binder_id': binderId, 
        'node_id': nodeId };
    const _queryParams = { };
    const _headerParams = { 
        'Content-Type': contentType, 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/binders/{binder_id}/sections/{node_id}/binding_rule',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Binder Section
 * @param fe Callback interface that runs the fetch query
 * @param binderId The binder id field value.
 * @param nodeId The binder node id of the section.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersBinderIdSectionsNodeIdPut(fe : ApiExecuterI, binderId: string, nodeId: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersBinderIdSectionsNodeIdPut', { 'binderId': binderId, 'nodeId': nodeId,  });

    const _pathParams = { 
        'binder_id': binderId, 
        'node_id': nodeId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/binders/{binder_id}/sections/{node_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Binder Section
 * @param fe Callback interface that runs the fetch query
 * @param binderId The binder id field value.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersBinderIdSectionsPost(fe : ApiExecuterI, binderId: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersBinderIdSectionsPost', { 'binderId': binderId,  });

    const _pathParams = { 
        'binder_id': binderId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/binders/{binder_id}/sections',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Binder Section
 * @param fe Callback interface that runs the fetch query
 * @param binderId The binder id field value.
 * @param sectionId The binder node id field value.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersBinderIdSectionsSectionIdDelete(fe : ApiExecuterI, binderId: string, sectionId: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersBinderIdSectionsSectionIdDelete', { 'binderId': binderId, 'sectionId': sectionId,  });

    const _pathParams = { 
        'binder_id': binderId, 
        'section_id': sectionId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/binders/{binder_id}/sections/{section_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Binder Sections
 * @param fe Callback interface that runs the fetch query
 * @param binderId The binder id field value.
 * @param sectionId The binder node id field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersBinderIdSectionsSectionIdGet(fe : ApiExecuterI, binderId: string, sectionId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersBinderIdSectionsSectionIdGet', { 'binderId': binderId, 'sectionId': sectionId,  });

    const _pathParams = { 
        'binder_id': binderId, 
        'section_id': sectionId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/binders/{binder_id}/sections/{section_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve All Binder Versions
 * @param fe Callback interface that runs the fetch query
 * @param binderId The binder id field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersBinderIdVersionsGet(fe : ApiExecuterI, binderId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersBinderIdVersionsGet', { 'binderId': binderId,  });

    const _pathParams = { 
        'binder_id': binderId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/binders/{binder_id}/versions',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Export Binder (Specific Version)
 * @param fe Callback interface that runs the fetch query
 * @param binderId The binder id field value.
 * @param majorVersion The binder major_version_number__v field value.
 * @param minorVersion The binder minor_version_number__v field value.
 * @param source to include source content or not
 * @param renditiontype to include viewable renditions
 * @param docversion to include all major versions
 * @param attachments to include all versions of attachments
 * @param _export configurable filename metadata
 * @param docfield to exclude document metadata csv
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(fe : ApiExecuterI, binderId: string, majorVersion: string, minorVersion: string, source: boolean=, renditiontype: string=, docversion: string=, attachments: string=, _export: string=, docfield: boolean=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost', { 'binderId': binderId, 'majorVersion': majorVersion, 'minorVersion': minorVersion,  });

    const _pathParams = { 
        'binder_id': binderId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion };
    const _queryParams = { 
        'source': source, 
        'renditiontype': renditiontype, 
        'docversion': docversion, 
        'attachments': attachments, 
        'export': _export, 
        'docfield': docfield };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Binder Version
 * @param fe Callback interface that runs the fetch query
 * @param binderId The binder id field value.
 * @param majorVersion The binder major_version_number__v field value.
 * @param minorVersion The binder minor_version_number__v field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(fe : ApiExecuterI, binderId: string, majorVersion: string, minorVersion: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete', { 'binderId': binderId, 'majorVersion': majorVersion, 'minorVersion': minorVersion,  });

    const _pathParams = { 
        'binder_id': binderId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Binder Version
 * @param fe Callback interface that runs the fetch query
 * @param binderId The binder id field value.
 * @param majorVersion The binder major_version_number__v field value.
 * @param minorVersion The binder minor_version_number__v field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(fe : ApiExecuterI, binderId: string, majorVersion: string, minorVersion: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersBinderIdVersionsMajorVersionMinorVersionGet', { 'binderId': binderId, 'majorVersion': majorVersion, 'minorVersion': minorVersion,  });

    const _pathParams = { 
        'binder_id': binderId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Binder Version
 * @param fe Callback interface that runs the fetch query
 * @param binderId The binder id field value.
 * @param majorVersion The binder major_version_number__v field value.
 * @param minorVersion The binder minor_version_number__v field value.
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(fe : ApiExecuterI, binderId: string, majorVersion: string, minorVersion: string, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersBinderIdVersionsMajorVersionMinorVersionPut', { 'binderId': binderId, 'majorVersion': majorVersion, 'minorVersion': minorVersion,  });

    const _pathParams = { 
        'binder_id': binderId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Binder Relationship
 * @param fe Callback interface that runs the fetch query
 * @param binderId The binder id field value.
 * @param majorVersion The binder major_version_number__v field value.
 * @param minorVersion The binder minor_version_number__v field value.
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(fe : ApiExecuterI, binderId: string, majorVersion: string, minorVersion: string, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost', { 'binderId': binderId, 'majorVersion': majorVersion, 'minorVersion': minorVersion,  });

    const _pathParams = { 
        'binder_id': binderId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Binder Relationship
 * @param fe Callback interface that runs the fetch query
 * @param binderId The binder id field value.
 * @param majorVersion The binder major_version_number__v field value.
 * @param minorVersion The binder minor_version_number__v field value.
 * @param relationshipId The binder relationship id field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(fe : ApiExecuterI, binderId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete', { 'binderId': binderId, 'majorVersion': majorVersion, 'minorVersion': minorVersion, 'relationshipId': relationshipId,  });

    const _pathParams = { 
        'binder_id': binderId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion, 
        'relationship_id': relationshipId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Binder Relationship
 * @param fe Callback interface that runs the fetch query
 * @param binderId The binder id field value.
 * @param majorVersion The binder major_version_number__v field value.
 * @param minorVersion The binder minor_version_number__v field value.
 * @param relationshipId The binder relationship id field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(fe : ApiExecuterI, binderId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet', { 'binderId': binderId, 'majorVersion': majorVersion, 'minorVersion': minorVersion, 'relationshipId': relationshipId,  });

    const _pathParams = { 
        'binder_id': binderId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion, 
        'relationship_id': relationshipId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Binder Version Section
 * @param fe Callback interface that runs the fetch query
 * @param binderId The binder id field value.
 * @param majorVersion The binder major_version_number__v field value.
 * @param minorVersion The binder minor_version_number__v field value.
 * @param sectionId Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(fe : ApiExecuterI, binderId: string, majorVersion: string, minorVersion: string, sectionId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet', { 'binderId': binderId, 'majorVersion': majorVersion, 'minorVersion': minorVersion, 'sectionId': sectionId,  });

    const _pathParams = { 
        'binder_id': binderId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion, 
        'section_id': sectionId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve All Binder Roles
 * @param fe Callback interface that runs the fetch query
 * @param id 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersIdRolesGet(fe : ApiExecuterI, id: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersIdRolesGet', { 'id': id,  });

    const _pathParams = { 
        'id': id };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/binders/{id}/roles',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Assign Users & Groups to Roles on a Single Binder
 * @param fe Callback interface that runs the fetch query
 * @param id 
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersIdRolesPost(fe : ApiExecuterI, id: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersIdRolesPost', { 'id': id,  });

    const _pathParams = { 
        'id': id };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/binders/{id}/roles',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Role
 * @param fe Callback interface that runs the fetch query
 * @param id The binder &#x60;id&#x60;.
 * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersIdRolesRoleNameGet(fe : ApiExecuterI, id: string, roleName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersIdRolesRoleNameGet', { 'id': id, 'roleName': roleName,  });

    const _pathParams = { 
        'id': id, 
        'role_name': roleName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/binders/{id}/roles/{role_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Binder User Actions
 * @param fe Callback interface that runs the fetch query
 * @param id The binder id field value from which to retrieve available user actions.
 * @param majorVersion The major version number of the binder.
 * @param minorVersion The minor version number of the binder.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(fe : ApiExecuterI, id: string, majorVersion: string, minorVersion: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet', { 'id': id, 'majorVersion': majorVersion, 'minorVersion': minorVersion,  });

    const _pathParams = { 
        'id': id, 
        'major_version': majorVersion, 
        'minor_version': minorVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Binder Entry Criteria
 * @param fe Callback interface that runs the fetch query
 * @param id The binder id field value from which to retrieve available user actions.
 * @param majorVersion The major version number of the binder.
 * @param minorVersion The minor version number of the binder.
 * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(fe : ApiExecuterI, id: string, majorVersion: string, minorVersion: string, nameV: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet', { 'id': id, 'majorVersion': majorVersion, 'minorVersion': minorVersion, 'nameV': nameV,  });

    const _pathParams = { 
        'id': id, 
        'major_version': majorVersion, 
        'minor_version': minorVersion, 
        'name__v': nameV };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Initiate Binder User Action
 * @param fe Callback interface that runs the fetch query
 * @param id The binder id field value from which to retrieve available user actions.
 * @param majorVersion The major version number of the binder.
 * @param minorVersion The minor version number of the binder.
 * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(fe : ApiExecuterI, id: string, majorVersion: string, minorVersion: string, nameV: string, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut', { 'id': id, 'majorVersion': majorVersion, 'minorVersion': minorVersion, 'nameV': nameV,  });

    const _pathParams = { 
        'id': id, 
        'major_version': majorVersion, 
        'minor_version': minorVersion, 
        'name__v': nameV };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve User Actions on Multiple Binders
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersLifecycleActionsPost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersLifecycleActionsPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/binders/lifecycle_actions',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Initiate Bulk Binder User Actions
 * @param fe Callback interface that runs the fetch query
 * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersLifecycleActionsUserActionNamePut(fe : ApiExecuterI, userActionName: string, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersLifecycleActionsUserActionNamePut', { 'userActionName': userActionName,  });

    const _pathParams = { 
        'user_action_name': userActionName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/binders/lifecycle_actions/{user_action_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Binder
 * @param fe Callback interface that runs the fetch query
 * @param async When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async&#x3D;true). This helps speed up the response time from Vault when processing large amounts of data. 
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersPost(fe : ApiExecuterI, async: boolean=, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersPost', {  });

    const _pathParams = { };
    const _queryParams = { 
        'async': async };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/binders',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Binder Template Collection
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersTemplatesGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersTemplatesGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/binders/templates',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Binder Template
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersTemplatesPost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersTemplatesPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/binders/templates',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Binder Template
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersTemplatesPut(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersTemplatesPut', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/binders/templates',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Binder Template Node Attributes
 * @param fe Callback interface that runs the fetch query
 * @param templateName The binder template name__v field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersTemplatesTemplateNameBindernodesGet(fe : ApiExecuterI, templateName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersTemplatesTemplateNameBindernodesGet', { 'templateName': templateName,  });

    const _pathParams = { 
        'template_name': templateName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/binders/templates/{template_name}/bindernodes',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Binder Template Node
 * @param fe Callback interface that runs the fetch query
 * @param templateName The binder template name__v field value.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersTemplatesTemplateNameBindernodesPost(fe : ApiExecuterI, templateName: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersTemplatesTemplateNameBindernodesPost', { 'templateName': templateName,  });

    const _pathParams = { 
        'template_name': templateName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/binders/templates/{template_name}/bindernodes',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Replace Binder Template Nodes
 * @param fe Callback interface that runs the fetch query
 * @param templateName The binder template name__v field value.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersTemplatesTemplateNameBindernodesPut(fe : ApiExecuterI, templateName: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersTemplatesTemplateNameBindernodesPut', { 'templateName': templateName,  });

    const _pathParams = { 
        'template_name': templateName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/binders/templates/{template_name}/bindernodes',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Binder Template
 * @param fe Callback interface that runs the fetch query
 * @param templateName The binder template name__v field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersTemplatesTemplateNameDelete(fe : ApiExecuterI, templateName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersTemplatesTemplateNameDelete', { 'templateName': templateName,  });

    const _pathParams = { 
        'template_name': templateName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/binders/templates/{template_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Binder Template Attributes
 * @param fe Callback interface that runs the fetch query
 * @param templateName The binder template name__v field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsBindersTemplatesTemplateNameGet(fe : ApiExecuterI, templateName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsBindersTemplatesTemplateNameGet', { 'templateName': templateName,  });

    const _pathParams = { 
        'template_name': templateName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/binders/templates/{template_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Deleted Document IDs
 * @param fe Callback interface that runs the fetch query
 * @param startDate Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z
 * @param endDate Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z 
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDeletionsDocumentsGet(fe : ApiExecuterI, startDate: string=, endDate: string=, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDeletionsDocumentsGet', {  });

    const _pathParams = { };
    const _queryParams = { 
        'start_date': startDate, 
        'end_date': endDate };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/deletions/documents',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Deleted Object Record ID
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDeletionsVobjectsObjectNameGet(fe : ApiExecuterI, objectName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDeletionsVobjectsObjectNameGet', { 'objectName': objectName,  });

    const _pathParams = { 
        'object_name': objectName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/deletions/vobjects/{object_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve All Document Workflows
 * @param fe Callback interface that runs the fetch query
 * @param loc When localized (translated) strings are available, retrieve them by setting loc to true.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsActionsGet(fe : ApiExecuterI, loc: boolean=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsActionsGet', {  });

    const _pathParams = { };
    const _queryParams = { 
        'loc': loc };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/actions',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Download Controlled Copy Job Results
 * @param fe Callback interface that runs the fetch query
 * @param lifecycleAndStateAndAction The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link.
 * @param jobId 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(fe : ApiExecuterI, lifecycleAndStateAndAction: string, jobId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet', { 'lifecycleAndStateAndAction': lifecycleAndStateAndAction, 'jobId': jobId,  });

    const _pathParams = { 
        'lifecycle_and_state_and_action': lifecycleAndStateAndAction, 
        'job_id': jobId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Workflow Details
 * @param fe Callback interface that runs the fetch query
 * @param workflowName The document workflow name value.
 * @param loc When localized (translated) strings are available, retrieve them by setting loc to true.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsActionsWorkflowNameGet(fe : ApiExecuterI, workflowName: string, loc: boolean=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsActionsWorkflowNameGet', { 'workflowName': workflowName,  });

    const _pathParams = { 
        'workflow_name': workflowName };
    const _queryParams = { 
        'loc': loc };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/actions/{workflow_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Initiate Document Workflow
 * @param fe Callback interface that runs the fetch query
 * @param workflowName The document workflow name value.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsActionsWorkflowNamePost(fe : ApiExecuterI, workflowName: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsActionsWorkflowNamePost', { 'workflowName': workflowName,  });

    const _pathParams = { 
        'workflow_name': workflowName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents/actions/{workflow_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Annotations
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsAnnotationsBatchDelete(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsAnnotationsBatchDelete', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/documents/annotations/batch',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Multiple Annotations
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsAnnotationsBatchPost(fe : ApiExecuterI, authorization: string, contentType: string, accept: string, xVaultAPIClientID: string) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsAnnotationsBatchPost', { 'authorization': authorization, 'contentType': contentType, 'accept': accept, 'xVaultAPIClientID': xVaultAPIClientID });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents/annotations/batch',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Annotations
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsAnnotationsBatchPut(fe : ApiExecuterI, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsAnnotationsBatchPut', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/documents/annotations/batch',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Add Annotation Replies
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsAnnotationsRepliesBatchPost(fe : ApiExecuterI, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsAnnotationsRepliesBatchPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents/annotations/replies/batch',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Multiple Document Attachments
 * @param fe Callback interface that runs the fetch query
 * @param accept 
 * @param authorization 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsAttachmentsBatchDelete(fe : ApiExecuterI, accept: string=, authorization: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsAttachmentsBatchDelete', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/documents/attachments/batch',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Multiple Document Attachments
 * @param fe Callback interface that runs the fetch query
 * @param accept 
 * @param authorization 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsAttachmentsBatchPost(fe : ApiExecuterI, accept: string=, authorization: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsAttachmentsBatchPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents/attachments/batch',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Multiple Document Attachment Descriptions
 * @param fe Callback interface that runs the fetch query
 * @param accept 
 * @param authorization 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsAttachmentsBatchPut(fe : ApiExecuterI, accept: string=, authorization: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsAttachmentsBatchPut', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/documents/attachments/batch',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Export Results
 * @param fe Callback interface that runs the fetch query
 * @param jobId The id value of the requested export job. This is returned with the export document requests.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsBatchActionsFileextractJobIdResultsGet(fe : ApiExecuterI, jobId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsBatchActionsFileextractJobIdResultsGet', { 'jobId': jobId,  });

    const _pathParams = { 
        'job_id': jobId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/batch/actions/fileextract/{job_id}/results',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Export Documents
 * @param fe Callback interface that runs the fetch query
 * @param source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
 * @param renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
 * @param allversions Optional: To include all versions or latest version, include a query parameter allversions&#x3D;true. If omitted, defaults to false.
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsBatchActionsFileextractPost(fe : ApiExecuterI, source: boolean=, renditions: boolean=, allversions: boolean=, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsBatchActionsFileextractPost', {  });

    const _pathParams = { };
    const _queryParams = { 
        'source': source, 
        'renditions': renditions, 
        'allversions': allversions };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents/batch/actions/fileextract',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Reclassify Multiple Documents
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;&quot;https://platform.veevavault.help/en/gr/54028&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsBatchActionsReclassifyPut(fe : ApiExecuterI, authorization: string=, contentType: string=, accept: string=, xVaultAPIMigrationMode: boolean=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsBatchActionsReclassifyPut', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-MigrationMode': xVaultAPIMigrationMode, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/documents/batch/actions/reclassify',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Multiple Document Renditions
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsBatchActionsRerenderPost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsBatchActionsRerenderPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents/batch/actions/rerender',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Multiple Documents
 * @param fe Callback interface that runs the fetch query
 * @param idParam If you’re identifying documents in your input by their external ID
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsBatchDelete(fe : ApiExecuterI, idParam: string=, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsBatchDelete', {  });

    const _pathParams = { };
    const _queryParams = { 
        'idParam': idParam };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/documents/batch',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Undo Collaborative Authoring Checkout
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsBatchLockDelete(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsBatchLockDelete', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/documents/batch/lock',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Multiple Documents
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIMigrationMode When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;&quot;https://platform.veevavault.help/en/gr/54028&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsBatchPost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIMigrationMode: boolean=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsBatchPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-MigrationMode': xVaultAPIMigrationMode, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents/batch',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Multiple Documents
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about &lt;a href&#x3D;&quot;https://platform.veevavault.help/en/gr/54028&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsBatchPut(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIMigrationMode: boolean=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsBatchPut', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-MigrationMode': xVaultAPIMigrationMode, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/documents/batch',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Anchor IDs
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdAnchorsGet(fe : ApiExecuterI, docId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdAnchorsGet', { 'docId': docId,  });

    const _pathParams = { 
        'doc_id': docId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/anchors',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Export Document Annotations to PDF
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdAnnotationsFileGet(fe : ApiExecuterI, docId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdAnnotationsFileGet', { 'docId': docId,  });

    const _pathParams = { 
        'doc_id': docId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/annotations/file',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Import Document Annotations from PDF
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdAnnotationsFilePost(fe : ApiExecuterI, docId: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdAnnotationsFilePost', { 'docId': docId,  });

    const _pathParams = { 
        'doc_id': docId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents/{doc_id}/annotations/file',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Single Document Attachment
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param attachmentId The attachment id field value.
 * @param accept 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdAttachmentsAttachmentIdDelete(fe : ApiExecuterI, docId: string, attachmentId: string, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdAttachmentsAttachmentIdDelete', { 'docId': docId, 'attachmentId': attachmentId,  });

    const _pathParams = { 
        'doc_id': docId, 
        'attachment_id': attachmentId };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/documents/{doc_id}/attachments/{attachment_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Download Document Attachment
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param attachmentId The attachment id field value.
 * @param accept 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(fe : ApiExecuterI, docId: string, attachmentId: string, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdAttachmentsAttachmentIdFileGet', { 'docId': docId, 'attachmentId': attachmentId,  });

    const _pathParams = { 
        'doc_id': docId, 
        'attachment_id': attachmentId };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/attachments/{attachment_id}/file',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Attachment Metadata
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param attachmentId The attachment id field value.
 * @param accept 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdAttachmentsAttachmentIdGet(fe : ApiExecuterI, docId: string, attachmentId: string, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdAttachmentsAttachmentIdGet', { 'docId': docId, 'attachmentId': attachmentId,  });

    const _pathParams = { 
        'doc_id': docId, 
        'attachment_id': attachmentId };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/attachments/{attachment_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Document Attachment Description
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param attachmentId The attachment id field value.
 * @param accept 
 * @param authorization 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdAttachmentsAttachmentIdPut(fe : ApiExecuterI, docId: string, attachmentId: string, accept: string=, authorization: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdAttachmentsAttachmentIdPut', { 'docId': docId, 'attachmentId': attachmentId,  });

    const _pathParams = { 
        'doc_id': docId, 
        'attachment_id': attachmentId };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/documents/{doc_id}/attachments/{attachment_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Single Document Attachment Version
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param attachmentId The attachment id field value.
 * @param attachmentVersion The attachment version__v field value.
 * @param accept 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(fe : ApiExecuterI, docId: string, attachmentId: string, attachmentVersion: string, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete', { 'docId': docId, 'attachmentId': attachmentId, 'attachmentVersion': attachmentVersion,  });

    const _pathParams = { 
        'doc_id': docId, 
        'attachment_id': attachmentId, 
        'attachment_version': attachmentVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Download Document Attachment Version
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param attachmentId The attachment id field value.
 * @param attachmentVersion The attachment version__v field value.
 * @param accept 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(fe : ApiExecuterI, docId: string, attachmentId: string, attachmentVersion: string, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', { 'docId': docId, 'attachmentId': attachmentId, 'attachmentVersion': attachmentVersion,  });

    const _pathParams = { 
        'doc_id': docId, 
        'attachment_id': attachmentId, 
        'attachment_version': attachmentVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Attachment Version Metadata
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param attachmentId The attachment id field value.
 * @param attachmentVersion The attachment version__v field value.
 * @param accept 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(fe : ApiExecuterI, docId: string, attachmentId: string, attachmentVersion: string, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet', { 'docId': docId, 'attachmentId': attachmentId, 'attachmentVersion': attachmentVersion,  });

    const _pathParams = { 
        'doc_id': docId, 
        'attachment_id': attachmentId, 
        'attachment_version': attachmentVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Restore Document Attachment Version
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param attachmentId The attachment id field value.
 * @param attachmentVersion The attachment version__v field value.
 * @param restore The parameter restore must be set to true. 
 * @param accept 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(fe : ApiExecuterI, docId: string, attachmentId: string, attachmentVersion: string, restore: boolean=, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost', { 'docId': docId, 'attachmentId': attachmentId, 'attachmentVersion': attachmentVersion,  });

    const _pathParams = { 
        'doc_id': docId, 
        'attachment_id': attachmentId, 
        'attachment_version': attachmentVersion };
    const _queryParams = { 
        'restore': restore };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Attachment Versions
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param attachmentId The attachment id field value.
 * @param accept 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(fe : ApiExecuterI, docId: string, attachmentId: string, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet', { 'docId': docId, 'attachmentId': attachmentId,  });

    const _pathParams = { 
        'doc_id': docId, 
        'attachment_id': attachmentId };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/attachments/{attachment_id}/versions',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Download All Document Attachments
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param accept 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdAttachmentsFileGet(fe : ApiExecuterI, docId: string, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdAttachmentsFileGet', { 'docId': docId,  });

    const _pathParams = { 
        'doc_id': docId };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/attachments/file',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Attachments
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param accept 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdAttachmentsGet(fe : ApiExecuterI, docId: string, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdAttachmentsGet', { 'docId': docId,  });

    const _pathParams = { 
        'doc_id': docId };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/attachments',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Document Attachment
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param accept 
 * @param authorization 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdAttachmentsPost(fe : ApiExecuterI, docId: string, accept: string=, authorization: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdAttachmentsPost', { 'docId': docId,  });

    const _pathParams = { 
        'doc_id': docId };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents/{doc_id}/attachments',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Complete Audit History for a Single Document
 * @param fe Callback interface that runs the fetch query
 * @param docId The document ID for which to retrieve audit history.
 * @param startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. 
 * @param endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
 * @param formatResult To request a CSV file of your audit history, use csv. 
 * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
 * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
 * @param events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdAudittrailGet(fe : ApiExecuterI, docId: string, startDate: string=, endDate: string=, formatResult: string=, limit: string=, offset: string=, events: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdAudittrailGet', { 'docId': docId,  });

    const _pathParams = { 
        'doc_id': docId };
    const _queryParams = { 
        'start_date': startDate, 
        'end_date': endDate, 
        'format_result': formatResult, 
        'limit': limit, 
        'offset': offset, 
        'events': events };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/audittrail',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Single Document
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdDelete(fe : ApiExecuterI, docId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdDelete', { 'docId': docId,  });

    const _pathParams = { 
        'doc_id': docId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/documents/{doc_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Events
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdEventsGet(fe : ApiExecuterI, docId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdEventsGet', { 'docId': docId,  });

    const _pathParams = { 
        'doc_id': docId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/events',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Download Document File
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param lockDocument Set to true to Check Out this document before retrieval. If omitted, defaults to false.
 * @param accept 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdFileGet(fe : ApiExecuterI, docId: string, lockDocument: boolean=, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdFileGet', { 'docId': docId,  });

    const _pathParams = { 
        'doc_id': docId };
    const _queryParams = { 
        'lockDocument': lockDocument };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/file',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdGet(fe : ApiExecuterI, docId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdGet', { 'docId': docId,  });

    const _pathParams = { 
        'doc_id': docId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Document Lock
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdLockDelete(fe : ApiExecuterI, docId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdLockDelete', { 'docId': docId,  });

    const _pathParams = { 
        'doc_id': docId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/documents/{doc_id}/lock',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Lock
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdLockGet(fe : ApiExecuterI, docId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdLockGet', { 'docId': docId,  });

    const _pathParams = { 
        'doc_id': docId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/lock',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Document Lock
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdLockPost(fe : ApiExecuterI, docId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdLockPost', { 'docId': docId,  });

    const _pathParams = { 
        'doc_id': docId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents/{doc_id}/lock',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Download All Document Version Attachments
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param majorVersion The document major_version_number__v field value.
 * @param minorVersion The document minor_version_number__v field value.
 * @param accept 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(fe : ApiExecuterI, docId: string, majorVersion: string, minorVersion: string, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet', { 'docId': docId, 'majorVersion': majorVersion, 'minorVersion': minorVersion,  });

    const _pathParams = { 
        'doc_id': docId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Single Document Version
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param suppressRendition Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdPost(fe : ApiExecuterI, docId: string, suppressRendition: string=, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdPost', { 'docId': docId,  });

    const _pathParams = { 
        'doc_id': docId };
    const _queryParams = { 
        'suppressRendition': suppressRendition };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents/{doc_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Single Document
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;&quot;https://platform.veevavault.help/en/gr/54028&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdPut(fe : ApiExecuterI, docId: string, authorization: string=, contentType: string=, accept: string=, xVaultAPIMigrationMode: boolean=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdPut', { 'docId': docId,  });

    const _pathParams = { 
        'doc_id': docId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-MigrationMode': xVaultAPIMigrationMode, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/documents/{doc_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Renditions
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdRenditionsGet(fe : ApiExecuterI, docId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdRenditionsGet', { 'docId': docId,  });

    const _pathParams = { 
        'doc_id': docId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/renditions',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Single Document Rendition
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param renditionType The document rendition type.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdRenditionsRenditionTypeDelete(fe : ApiExecuterI, docId: string, renditionType: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdRenditionsRenditionTypeDelete', { 'docId': docId, 'renditionType': renditionType,  });

    const _pathParams = { 
        'doc_id': docId, 
        'rendition_type': renditionType };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/documents/{doc_id}/renditions/{rendition_type}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Download Document Rendition File
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param renditionType The document rendition type.
 * @param steadyState Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdRenditionsRenditionTypeGet(fe : ApiExecuterI, docId: string, renditionType: string, steadyState: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdRenditionsRenditionTypeGet', { 'docId': docId, 'renditionType': renditionType,  });

    const _pathParams = { 
        'doc_id': docId, 
        'rendition_type': renditionType };
    const _queryParams = { 
        'steadyState': steadyState };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/renditions/{rendition_type}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Add Single Document Rendition
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param renditionType The document rendition type.
 * @param authorization 
 * @param accept 
 * @param content Type 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdRenditionsRenditionTypePost(fe : ApiExecuterI, docId: string, renditionType: string, authorization: string=, accept: string=, content Type: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdRenditionsRenditionTypePost', { 'docId': docId, 'renditionType': renditionType,  });

    const _pathParams = { 
        'doc_id': docId, 
        'rendition_type': renditionType };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content Type': content Type, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents/{doc_id}/renditions/{rendition_type}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Replace Document Rendition
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param renditionType The document rendition type.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdRenditionsRenditionTypePut(fe : ApiExecuterI, docId: string, renditionType: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdRenditionsRenditionTypePut', { 'docId': docId, 'renditionType': renditionType,  });

    const _pathParams = { 
        'doc_id': docId, 
        'rendition_type': renditionType };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/documents/{doc_id}/renditions/{rendition_type}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Remove Users & Groups from Roles on a Single Document
 * @param fe Callback interface that runs the fetch query
 * @param docId The id value of the document from which to remove roles.
 * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
 * @param id The id value of the user or group to remove from the role.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(fe : ApiExecuterI, docId: string, roleNameAndUserOrGroup: string, id: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete', { 'docId': docId, 'roleNameAndUserOrGroup': roleNameAndUserOrGroup, 'id': id,  });

    const _pathParams = { 
        'doc_id': docId, 
        'role_name_and_user_or_group': roleNameAndUserOrGroup, 
        'id': id };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Version Attachments
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param majorVersion The document major_version_number__v field value.
 * @param minorVersion The document minor_version_number__v field value.
 * @param accept 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(fe : ApiExecuterI, docId: string, majorVersion: string, minorVersion: string, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet', { 'docId': docId, 'majorVersion': majorVersion, 'minorVersion': minorVersion,  });

    const _pathParams = { 
        'doc_id': docId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Versions
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdVersionsGet(fe : ApiExecuterI, docId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdVersionsGet', { 'docId': docId,  });

    const _pathParams = { 
        'doc_id': docId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/versions',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Read Annotations by ID
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param majorVersion The document major_version_number__v field value.
 * @param minorVersion The document minor_version_number__v field value.
 * @param annotationId The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(fe : ApiExecuterI, docId: string, majorVersion: string, minorVersion: string, annotationId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet', { 'docId': docId, 'majorVersion': majorVersion, 'minorVersion': minorVersion, 'annotationId': annotationId,  });

    const _pathParams = { 
        'doc_id': docId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion, 
        'annotation_id': annotationId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Read Replies of Parent Annotation
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param majorVersion The document major_version_number__v field value.
 * @param minorVersion The document minor_version_number__v field value.
 * @param annotationId The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(fe : ApiExecuterI, docId: string, majorVersion: string, minorVersion: string, annotationId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet', { 'docId': docId, 'majorVersion': majorVersion, 'minorVersion': minorVersion, 'annotationId': annotationId,  });

    const _pathParams = { 
        'doc_id': docId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion, 
        'annotation_id': annotationId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Export Document Version Annotations to PDF
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param majorVersion The document major_version_number__v field value.
 * @param minorVersion The document minor_version_number__v field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(fe : ApiExecuterI, docId: string, majorVersion: string, minorVersion: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet', { 'docId': docId, 'majorVersion': majorVersion, 'minorVersion': minorVersion,  });

    const _pathParams = { 
        'doc_id': docId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Import Document Version Annotations from PDF
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param majorVersion The document major_version_number__v field value.
 * @param minorVersion The document minor_version_number__v field value.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(fe : ApiExecuterI, docId: string, majorVersion: string, minorVersion: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost', { 'docId': docId, 'majorVersion': majorVersion, 'minorVersion': minorVersion,  });

    const _pathParams = { 
        'doc_id': docId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Read Annotations by Document Version and Type
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param majorVersion The document major_version_number__v field value.
 * @param minorVersion The document minor_version_number__v field value.
 * @param limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.
 * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset&#x3D;201.
 * @param annotationTypes The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60; 
 * @param paginationId A unique identifier used to load requests with paginated results.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(fe : ApiExecuterI, docId: string, majorVersion: string, minorVersion: string, limit: string=, offset: string=, annotationTypes: string=, paginationId: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet', { 'docId': docId, 'majorVersion': majorVersion, 'minorVersion': minorVersion,  });

    const _pathParams = { 
        'doc_id': docId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion };
    const _queryParams = { 
        'limit': limit, 
        'offset': offset, 
        'annotation_types': annotationTypes, 
        'pagination_id': paginationId };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Download Document Version Attachment Version
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param majorVersion The document major_version_number__v field value.
 * @param minorVersion The document minor_version_number__v field value.
 * @param attachmentId The id field value of the attachment.
 * @param attachmentVersion The version of the attachment.
 * @param accept 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(fe : ApiExecuterI, docId: string, majorVersion: string, minorVersion: string, attachmentId: string, attachmentVersion: string, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', { 'docId': docId, 'majorVersion': majorVersion, 'minorVersion': minorVersion, 'attachmentId': attachmentId, 'attachmentVersion': attachmentVersion,  });

    const _pathParams = { 
        'doc_id': docId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion, 
        'attachment_id': attachmentId, 
        'attachment_version': attachmentVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Version Attachment Versions
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param majorVersion The document major_version_number__v field value.
 * @param minorVersion The document minor_version_number__v field value.
 * @param attachmentId The id of the document attachment to retrieve.
 * @param attachmentVersion Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.
 * @param accept 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(fe : ApiExecuterI, docId: string, majorVersion: string, minorVersion: string, attachmentId: string, attachmentVersion: string, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet', { 'docId': docId, 'majorVersion': majorVersion, 'minorVersion': minorVersion, 'attachmentId': attachmentId, 'attachmentVersion': attachmentVersion,  });

    const _pathParams = { 
        'doc_id': docId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion, 
        'attachment_id': attachmentId, 
        'attachment_version': attachmentVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Single Document Version
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param majorVersion The document major_version_number__v field value.
 * @param minorVersion The document minor_version_number__v field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(fe : ApiExecuterI, docId: string, majorVersion: string, minorVersion: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete', { 'docId': docId, 'majorVersion': majorVersion, 'minorVersion': minorVersion,  });

    const _pathParams = { 
        'doc_id': docId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Version Notes as CSV
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param majorVersion The document major_version_number__v field value.
 * @param minorVersion The document minor_version_number__v field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(fe : ApiExecuterI, docId: string, majorVersion: string, minorVersion: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet', { 'docId': docId, 'majorVersion': majorVersion, 'minorVersion': minorVersion,  });

    const _pathParams = { 
        'doc_id': docId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Document Event
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param majorVersion The document major_version_number__v field value.
 * @param minorVersion The document minor_version_number__v field value.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(fe : ApiExecuterI, docId: string, majorVersion: string, minorVersion: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost', { 'docId': docId, 'majorVersion': majorVersion, 'minorVersion': minorVersion,  });

    const _pathParams = { 
        'doc_id': docId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Video Annotations
 * @param fe Callback interface that runs the fetch query
 * @param docId The video document id field value.
 * @param majorVersion The video document major_version_number__v field value.
 * @param minorVersion The video document minor_version_number__v field value.
 * @param authorization 
 * @param accept This &#x60;Accept&#x60; header only changes the format of the response in the case of an error. On &#x60;SUCCESS&#x60;, the HTTP Response Header &#x60;Content-Type&#x60; is set to &#x60;text/plain;charset&#x3D;UnicodeLittle&#x60;.
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(fe : ApiExecuterI, docId: string, majorVersion: string, minorVersion: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet', { 'docId': docId, 'majorVersion': majorVersion, 'minorVersion': minorVersion,  });

    const _pathParams = { 
        'doc_id': docId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Download Document Version File
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param majorVersion The document major_version_number__v field value.
 * @param minorVersion The document minor_version_number__v field value.
 * @param accept 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(fe : ApiExecuterI, docId: string, majorVersion: string, minorVersion: string, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet', { 'docId': docId, 'majorVersion': majorVersion, 'minorVersion': minorVersion,  });

    const _pathParams = { 
        'doc_id': docId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Version
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param majorVersion The document major_version_number__v field value.
 * @param minorVersion The document minor_version_number__v field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(fe : ApiExecuterI, docId: string, majorVersion: string, minorVersion: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet', { 'docId': docId, 'majorVersion': majorVersion, 'minorVersion': minorVersion,  });

    const _pathParams = { 
        'doc_id': docId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Document Version
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param majorVersion The document major_version_number__v field value.
 * @param minorVersion The document minor_version_number__v field value.
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;&quot;https://platform.veevavault.help/en/gr/54028&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(fe : ApiExecuterI, docId: string, majorVersion: string, minorVersion: string, authorization: string=, contentType: string=, accept: string=, xVaultAPIMigrationMode: boolean=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut', { 'docId': docId, 'majorVersion': majorVersion, 'minorVersion': minorVersion,  });

    const _pathParams = { 
        'doc_id': docId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-MigrationMode': xVaultAPIMigrationMode, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Relationships
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param majorVersion The document major_version_number__v field value.
 * @param minorVersion The document minor_version_number__v field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(fe : ApiExecuterI, docId: string, majorVersion: string, minorVersion: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet', { 'docId': docId, 'majorVersion': majorVersion, 'minorVersion': minorVersion,  });

    const _pathParams = { 
        'doc_id': docId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Single Document Relationship
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param majorVersion The document major_version_number__v field value.
 * @param minorVersion The document minor_version_number__v field value.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(fe : ApiExecuterI, docId: string, majorVersion: string, minorVersion: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost', { 'docId': docId, 'majorVersion': majorVersion, 'minorVersion': minorVersion,  });

    const _pathParams = { 
        'doc_id': docId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Single Document Relationship
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param majorVersion The document major_version_number__v field value.
 * @param minorVersion The document minor_version_number__v field value.
 * @param relationshipId The relationship id field value. See Retrieve Document Relationships.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(fe : ApiExecuterI, docId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete', { 'docId': docId, 'majorVersion': majorVersion, 'minorVersion': minorVersion, 'relationshipId': relationshipId,  });

    const _pathParams = { 
        'doc_id': docId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion, 
        'relationship_id': relationshipId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Relationship
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param majorVersion The document major_version_number__v field value.
 * @param minorVersion The document minor_version_number__v field value.
 * @param relationshipId The relationship id field value. See Retrieve Document Relationships.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(fe : ApiExecuterI, docId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet', { 'docId': docId, 'majorVersion': majorVersion, 'minorVersion': minorVersion, 'relationshipId': relationshipId,  });

    const _pathParams = { 
        'doc_id': docId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion, 
        'relationship_id': relationshipId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Version Renditions
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param majorVersion The document major_version_number__v field value.
 * @param minorVersion The document minor_version_number__v field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(fe : ApiExecuterI, docId: string, majorVersion: string, minorVersion: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet', { 'docId': docId, 'majorVersion': majorVersion, 'minorVersion': minorVersion,  });

    const _pathParams = { 
        'doc_id': docId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Document Version Rendition
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param majorVersion The document major_version_number__v field value.
 * @param minorVersion The document minor_version_number__v field value.
 * @param renditionType The document rendition type.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(fe : ApiExecuterI, docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete', { 'docId': docId, 'majorVersion': majorVersion, 'minorVersion': minorVersion, 'renditionType': renditionType,  });

    const _pathParams = { 
        'doc_id': docId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion, 
        'rendition_type': renditionType };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Download Document Version Rendition File
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param majorVersion The document major_version_number__v field value.
 * @param minorVersion The document minor_version_number__v field value.
 * @param renditionType The document rendition type.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(fe : ApiExecuterI, docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet', { 'docId': docId, 'majorVersion': majorVersion, 'minorVersion': minorVersion, 'renditionType': renditionType,  });

    const _pathParams = { 
        'doc_id': docId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion, 
        'rendition_type': renditionType };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Upload Document Version Rendition
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param majorVersion The document major_version_number__v field value.
 * @param minorVersion The document minor_version_number__v field value.
 * @param renditionType The document rendition type.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(fe : ApiExecuterI, docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost', { 'docId': docId, 'majorVersion': majorVersion, 'minorVersion': minorVersion, 'renditionType': renditionType,  });

    const _pathParams = { 
        'doc_id': docId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion, 
        'rendition_type': renditionType };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Replace Document Version Rendition
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param majorVersion The document major_version_number__v field value.
 * @param minorVersion The document minor_version_number__v field value.
 * @param renditionType The document rendition type.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(fe : ApiExecuterI, docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut', { 'docId': docId, 'majorVersion': majorVersion, 'minorVersion': minorVersion, 'renditionType': renditionType,  });

    const _pathParams = { 
        'doc_id': docId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion, 
        'rendition_type': renditionType };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Download Document Version Thumbnail File
 * @param fe Callback interface that runs the fetch query
 * @param docId The document id field value.
 * @param majorVersion The document major_version_number__v field value.
 * @param minorVersion The document minor_version_number__v field value.
 * @param accept 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(fe : ApiExecuterI, docId: string, majorVersion: string, minorVersion: string, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet', { 'docId': docId, 'majorVersion': majorVersion, 'minorVersion': minorVersion,  });

    const _pathParams = { 
        'doc_id': docId, 
        'major_version': majorVersion, 
        'minor_version': minorVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve All Documents
 * @param fe Callback interface that runs the fetch query
 * @param namedFilter Retrieves only documents which you have created.
 * @param scope Searches only within the document content.
 * @param versionscope Retrieves all document versions, rather than only the latest version.
 * @param search Search for documents based on a {keyword} in searchable document fields.
 * @param limit See VQL documentation for more information.
 * @param sort See VQL documentation for more information.
 * @param start See VQL documentation for more information.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsGet(fe : ApiExecuterI, namedFilter: string=, scope: string=, versionscope: string=, search: string=, limit: string=, sort: string=, start: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsGet', {  });

    const _pathParams = { };
    const _queryParams = { 
        'named_filter': namedFilter, 
        'scope': scope, 
        'versionscope': versionscope, 
        'search': search, 
        'limit': limit, 
        'sort': sort, 
        'start': start };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve All Document Roles
 * @param fe Callback interface that runs the fetch query
 * @param id 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsIdRolesGet(fe : ApiExecuterI, id: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsIdRolesGet', { 'id': id,  });

    const _pathParams = { 
        'id': id };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{id}/roles',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Assign Users & Groups to Roles on a Single Document
 * @param fe Callback interface that runs the fetch query
 * @param id 
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsIdRolesPost(fe : ApiExecuterI, id: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsIdRolesPost', { 'id': id,  });

    const _pathParams = { 
        'id': id };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents/{id}/roles',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Role
 * @param fe Callback interface that runs the fetch query
 * @param id The document &#x60;id&#x60;.
 * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsIdRolesRoleNameGet(fe : ApiExecuterI, id: string, roleName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsIdRolesRoleNameGet', { 'id': id, 'roleName': roleName,  });

    const _pathParams = { 
        'id': id, 
        'role_name': roleName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{id}/roles/{role_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document User Actions
 * @param fe Callback interface that runs the fetch query
 * @param id The document id field value from which to retrieve available user actions.
 * @param majorVersion The major version number of the document.
 * @param minorVersion The minor version number of the document.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(fe : ApiExecuterI, id: string, majorVersion: string, minorVersion: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet', { 'id': id, 'majorVersion': majorVersion, 'minorVersion': minorVersion,  });

    const _pathParams = { 
        'id': id, 
        'major_version': majorVersion, 
        'minor_version': minorVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Entry Criteria
 * @param fe Callback interface that runs the fetch query
 * @param id The document id field value from which to retrieve available user actions.
 * @param majorVersion The major version number of the document.
 * @param minorVersion The minor version number of the document.
 * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(fe : ApiExecuterI, id: string, majorVersion: string, minorVersion: string, nameV: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet', { 'id': id, 'majorVersion': majorVersion, 'minorVersion': minorVersion, 'nameV': nameV,  });

    const _pathParams = { 
        'id': id, 
        'major_version': majorVersion, 
        'minor_version': minorVersion, 
        'name__v': nameV };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Initiate Document User Action
 * @param fe Callback interface that runs the fetch query
 * @param id The document id field value from which to retrieve available user actions.
 * @param majorVersion The major version number of the document.
 * @param minorVersion The minor version number of the document.
 * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(fe : ApiExecuterI, id: string, majorVersion: string, minorVersion: string, nameV: string, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut', { 'id': id, 'majorVersion': majorVersion, 'minorVersion': minorVersion, 'nameV': nameV,  });

    const _pathParams = { 
        'id': id, 
        'major_version': majorVersion, 
        'minor_version': minorVersion, 
        'name__v': nameV };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve User Actions on Multiple Documents
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsLifecycleActionsPost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsLifecycleActionsPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents/lifecycle_actions',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Initiate Bulk Document User Actions
 * @param fe Callback interface that runs the fetch query
 * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsLifecycleActionsUserActionNamePut(fe : ApiExecuterI, userActionName: string, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsLifecycleActionsUserActionNamePut', { 'userActionName': userActionName,  });

    const _pathParams = { 
        'user_action_name': userActionName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/documents/lifecycle_actions/{user_action_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Single Document
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIMigrationMode When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;&quot;https://platform.veevavault.help/en/gr/54028&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsPost(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIMigrationMode: boolean=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-MigrationMode': xVaultAPIMigrationMode, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Multiple Document Relationships
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsRelationshipsBatchDelete(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsRelationshipsBatchDelete', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/documents/relationships/batch',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Multiple Document Relationships
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsRelationshipsBatchPost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsRelationshipsBatchPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents/relationships/batch',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Multiple Document Renditions
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsRenditionsBatchDelete(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsRenditionsBatchDelete', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/documents/renditions/batch',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Add Multiple Document Renditions
 * @param fe Callback interface that runs the fetch query
 * @param idParam If you’re identifying documents in your input by their external ID
 * @param largeSizeAsset If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIMigrationMode Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;&quot;https://platform.veevavault.help/en/gr/54028&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsRenditionsBatchPost(fe : ApiExecuterI, idParam: string=, largeSizeAsset: string=, authorization: string=, accept: string=, contentType: string=, xVaultAPIMigrationMode: boolean=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsRenditionsBatchPost', {  });

    const _pathParams = { };
    const _queryParams = { 
        'idParam': idParam, 
        'largeSizeAsset': largeSizeAsset };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-MigrationMode': xVaultAPIMigrationMode, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents/renditions/batch',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Remove Users and Groups from Roles on Multiple Documents & Binders
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsRolesBatchDelete(fe : ApiExecuterI, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsRolesBatchDelete', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/documents/roles/batch',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Assign Users & Groups to Roles on Multiple Documents & Binders
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsRolesBatchPost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsRolesBatchPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents/roles/batch',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Template Collection
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsTemplatesGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsTemplatesGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/templates',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Single Document Template
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsTemplatesPost(fe : ApiExecuterI, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsTemplatesPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents/templates',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Multiple Document Templates
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsTemplatesPut(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsTemplatesPut', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/documents/templates',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Basic Document Template
 * @param fe Callback interface that runs the fetch query
 * @param templateName The document template name__v field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsTemplatesTemplateNameDelete(fe : ApiExecuterI, templateName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsTemplatesTemplateNameDelete', { 'templateName': templateName,  });

    const _pathParams = { 
        'template_name': templateName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/documents/templates/{template_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Download Document Template File
 * @param fe Callback interface that runs the fetch query
 * @param templateName The document template name__v field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsTemplatesTemplateNameFileGet(fe : ApiExecuterI, templateName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsTemplatesTemplateNameFileGet', { 'templateName': templateName,  });

    const _pathParams = { 
        'template_name': templateName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/templates/{template_name}/file',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Document Template Attributes
 * @param fe Callback interface that runs the fetch query
 * @param templateName The document template name__v field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsTemplatesTemplateNameGet(fe : ApiExecuterI, templateName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsTemplatesTemplateNameGet', { 'templateName': templateName,  });

    const _pathParams = { 
        'template_name': templateName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/documents/templates/{template_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Single Document Template
 * @param fe Callback interface that runs the fetch query
 * @param templateName The document template name__v field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsTemplatesTemplateNamePut(fe : ApiExecuterI, templateName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsTemplatesTemplateNamePut', { 'templateName': templateName,  });

    const _pathParams = { 
        'template_name': templateName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/documents/templates/{template_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Document Tokens
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsTokensPost(fe : ApiExecuterI, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsTokensPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents/tokens',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Export Document Versions
 * @param fe Callback interface that runs the fetch query
 * @param source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
 * @param renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsVersionsBatchActionsFileextractPost(fe : ApiExecuterI, source: boolean=, renditions: boolean=, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsVersionsBatchActionsFileextractPost', {  });

    const _pathParams = { };
    const _queryParams = { 
        'source': source, 
        'renditions': renditions };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents/versions/batch/actions/fileextract',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Multiple Document Versions
 * @param fe Callback interface that runs the fetch query
 * @param idParam If you’re identifying documents in your input by their external ID
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsVersionsBatchDelete(fe : ApiExecuterI, idParam: string=, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsVersionsBatchDelete', {  });

    const _pathParams = { };
    const _queryParams = { 
        'idParam': idParam };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/documents/versions/batch',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Multiple Document Versions
 * @param fe Callback interface that runs the fetch query
 * @param idParam If you’re identifying documents in your input by their external ID
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIMigrationMode Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the &#x60;status__v&#x60; field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;&quot;https://platform.veevavault.help/en/gr/54028&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDocumentsVersionsBatchPost(fe : ApiExecuterI, idParam: string=, authorization: string=, accept: string=, contentType: string=, xVaultAPIMigrationMode: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDocumentsVersionsBatchPost', {  });

    const _pathParams = { };
    const _queryParams = { 
        'idParam': idParam };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-MigrationMode': xVaultAPIMigrationMode, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/documents/versions/batch',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Domain Information
 * @param fe Callback interface that runs the fetch query
 * @param includeApplication To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDomainGet(fe : ApiExecuterI, includeApplication: boolean=, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDomainGet', {  });

    const _pathParams = { };
    const _queryParams = { 
        'include_application': includeApplication };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/domain',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Domains
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsDomainsGet(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsDomainsGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/domains',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Add EDL Matched Documents
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsEdlMatchedDocumentsBatchActionsAddPost(fe : ApiExecuterI, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsEdlMatchedDocumentsBatchActionsAddPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/edl_matched_documents/batch/actions/add',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Remove EDL Matched Documents
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsEdlMatchedDocumentsBatchActionsRemovePost(fe : ApiExecuterI, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsEdlMatchedDocumentsBatchActionsRemovePost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/edl_matched_documents/batch/actions/remove',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Auto Managed Groups
 * @param fe Callback interface that runs the fetch query
 * @param limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. 
 * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsGroupsAutoGet(fe : ApiExecuterI, limit: string=, offset: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsGroupsAutoGet', {  });

    const _pathParams = { };
    const _queryParams = { 
        'limit': limit, 
        'offset': offset };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/groups/auto',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve All Groups
 * @param fe Callback interface that runs the fetch query
 * @param includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsGroupsGet(fe : ApiExecuterI, includeImplied: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsGroupsGet', {  });

    const _pathParams = { };
    const _queryParams = { 
        'includeImplied': includeImplied };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/groups',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Group
 * @param fe Callback interface that runs the fetch query
 * @param groupId The group id field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsGroupsGroupIdDelete(fe : ApiExecuterI, groupId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsGroupsGroupIdDelete', { 'groupId': groupId,  });

    const _pathParams = { 
        'group_id': groupId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/groups/{group_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Group
 * @param fe Callback interface that runs the fetch query
 * @param groupId The group id field value.
 * @param includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsGroupsGroupIdGet(fe : ApiExecuterI, groupId: string, includeImplied: boolean=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsGroupsGroupIdGet', { 'groupId': groupId,  });

    const _pathParams = { 
        'group_id': groupId };
    const _queryParams = { 
        'includeImplied': includeImplied };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/groups/{group_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Group
 * @param fe Callback interface that runs the fetch query
 * @param groupId The group id field value.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsGroupsGroupIdPut(fe : ApiExecuterI, groupId: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsGroupsGroupIdPut', { 'groupId': groupId,  });

    const _pathParams = { 
        'group_id': groupId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/groups/{group_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Group 
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsGroupsPost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsGroupsPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/groups',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Application License Usage
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsLicensesGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsLicensesGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/licenses',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve All Multi-Record Workflows
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsObjectworkflowsActionsGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsObjectworkflowsActionsGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/objectworkflows/actions',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Multi-Record Workflow Details
 * @param fe Callback interface that runs the fetch query
 * @param workflowName 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsObjectworkflowsActionsWorkflowNameGet(fe : ApiExecuterI, workflowName: string, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsObjectworkflowsActionsWorkflowNameGet', { 'workflowName': workflowName,  });

    const _pathParams = { 
        'workflow_name': workflowName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/objectworkflows/actions/{workflow_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Initiate Multi-Record Workflow
 * @param fe Callback interface that runs the fetch query
 * @param workflowName 
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsObjectworkflowsActionsWorkflowNamePost(fe : ApiExecuterI, workflowName: string, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsObjectworkflowsActionsWorkflowNamePost', { 'workflowName': workflowName,  });

    const _pathParams = { 
        'workflow_name': workflowName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/objectworkflows/actions/{workflow_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Workflows
 * @param fe Callback interface that runs the fetch query
 * @param objectV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
 * @param recordIdV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
 * @param participant To retrieve all workflows available to a particular user, include the user id field value as ?participant&#x3D;{id}. To retrieve your own workflows, set this value to ?participant&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
 * @param statusV To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v&#x3D;active__v, status__v&#x3D;active__v,completed__v. Workflows with &#x60;status__v&#x3D;active__v&#x60; are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v
 * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
 * @param pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
 * @param loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsObjectworkflowsGet(fe : ApiExecuterI, objectV: string=, recordIdV: string=, participant: string=, statusV: string=, offset: string=, pageSize: string=, loc: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsObjectworkflowsGet', {  });

    const _pathParams = { };
    const _queryParams = { 
        'object__v': objectV, 
        'record_id__v': recordIdV, 
        'participant': participant, 
        'status__v': statusV, 
        'offset': offset, 
        'page_size': pageSize, 
        'loc': loc };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/objectworkflows',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Workflow Tasks
 * @param fe Callback interface that runs the fetch query
 * @param objectV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
 * @param recordIdV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
 * @param assigneeV To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v&#x3D;{id}. To retrieve your own workflow tasks, set this value to ?assignee__v&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
 * @param statusV To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v&#x3D;available__v or ?status__v&#x3D;available__v,completed__v. 
 * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
 * @param pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
 * @param loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsObjectworkflowsTasksGet(fe : ApiExecuterI, objectV: string=, recordIdV: string=, assigneeV: string=, statusV: string=, offset: string=, pageSize: string=, loc: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsObjectworkflowsTasksGet', {  });

    const _pathParams = { };
    const _queryParams = { 
        'object__v': objectV, 
        'record_id__v': recordIdV, 
        'assignee__v': assigneeV, 
        'status__v': statusV, 
        'offset': offset, 
        'page_size': pageSize, 
        'loc': loc };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/objectworkflows/tasks',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Accept Single Record Workflow Task
 * @param fe Callback interface that runs the fetch query
 * @param taskId The task id field value.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsObjectworkflowsTasksTaskIdActionsAcceptPost(fe : ApiExecuterI, taskId: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsObjectworkflowsTasksTaskIdActionsAcceptPost', { 'taskId': taskId,  });

    const _pathParams = { 
        'task_id': taskId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/objectworkflows/tasks/{task_id}/actions/accept',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Cancel Workflow Task
 * @param fe Callback interface that runs the fetch query
 * @param taskId The task id field value.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsObjectworkflowsTasksTaskIdActionsCancelPost(fe : ApiExecuterI, taskId: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsObjectworkflowsTasksTaskIdActionsCancelPost', { 'taskId': taskId,  });

    const _pathParams = { 
        'task_id': taskId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/objectworkflows/tasks/{task_id}/actions/cancel',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Complete Single Record Workflow Task
 * @param fe Callback interface that runs the fetch query
 * @param taskId The task id field value.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsObjectworkflowsTasksTaskIdActionsCompletePost(fe : ApiExecuterI, taskId: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsObjectworkflowsTasksTaskIdActionsCompletePost', { 'taskId': taskId,  });

    const _pathParams = { 
        'task_id': taskId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/objectworkflows/tasks/{task_id}/actions/complete',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Workflow Task Actions
 * @param fe Callback interface that runs the fetch query
 * @param taskId The task id field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsObjectworkflowsTasksTaskIdActionsGet(fe : ApiExecuterI, taskId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsObjectworkflowsTasksTaskIdActionsGet', { 'taskId': taskId,  });

    const _pathParams = { 
        'task_id': taskId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/objectworkflows/tasks/{task_id}/actions',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Accept Multi-item Workflow Task
 * @param fe Callback interface that runs the fetch query
 * @param taskId The task id field value.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(fe : ApiExecuterI, taskId: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost', { 'taskId': taskId,  });

    const _pathParams = { 
        'task_id': taskId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/objectworkflows/tasks/{task_id}/actions/mdwaccept',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Complete Multi-item Workflow Task
 * @param fe Callback interface that runs the fetch query
 * @param taskId The task id field value.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(fe : ApiExecuterI, taskId: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost', { 'taskId': taskId,  });

    const _pathParams = { 
        'task_id': taskId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Manage Multi-Item Workflow Content
 * @param fe Callback interface that runs the fetch query
 * @param taskId The task id field value.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(fe : ApiExecuterI, taskId: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost', { 'taskId': taskId,  });

    const _pathParams = { 
        'task_id': taskId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Reassign Multi-item Workflow Task
 * @param fe Callback interface that runs the fetch query
 * @param taskId The id of the task to reassign.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(fe : ApiExecuterI, taskId: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost', { 'taskId': taskId,  });

    const _pathParams = { 
        'task_id': taskId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/objectworkflows/tasks/{task_id}/actions/mdwreassign',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Reassign Single Record Workflow Task
 * @param fe Callback interface that runs the fetch query
 * @param taskId The id of the task to reassign.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsObjectworkflowsTasksTaskIdActionsReassignPost(fe : ApiExecuterI, taskId: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsObjectworkflowsTasksTaskIdActionsReassignPost', { 'taskId': taskId,  });

    const _pathParams = { 
        'task_id': taskId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/objectworkflows/tasks/{task_id}/actions/reassign',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Workflow Task Action Details
 * @param fe Callback interface that runs the fetch query
 * @param taskId The task id field value.
 * @param taskAction The name of the task action retrieved from Retrieve Workflow Task Actions.
 * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(fe : ApiExecuterI, taskId: string, taskAction: string, loc: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsObjectworkflowsTasksTaskIdActionsTaskActionGet', { 'taskId': taskId, 'taskAction': taskAction,  });

    const _pathParams = { 
        'task_id': taskId, 
        'task_action': taskAction };
    const _queryParams = { 
        'loc': loc };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/objectworkflows/tasks/{task_id}/actions/{task_action}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Undo Workflow Task Acceptance
 * @param fe Callback interface that runs the fetch query
 * @param taskId The task id field value.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(fe : ApiExecuterI, taskId: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost', { 'taskId': taskId,  });

    const _pathParams = { 
        'task_id': taskId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/objectworkflows/tasks/{task_id}/actions/undoaccept',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Workflow Task Due Date
 * @param fe Callback interface that runs the fetch query
 * @param taskId The id of the task.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(fe : ApiExecuterI, taskId: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost', { 'taskId': taskId,  });

    const _pathParams = { 
        'task_id': taskId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/objectworkflows/tasks/{task_id}/actions/updateduedate',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Workflow Task Details
 * @param fe Callback interface that runs the fetch query
 * @param taskId The task id field value.
 * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsObjectworkflowsTasksTaskIdGet(fe : ApiExecuterI, taskId: string, loc: boolean=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsObjectworkflowsTasksTaskIdGet', { 'taskId': taskId,  });

    const _pathParams = { 
        'task_id': taskId };
    const _queryParams = { 
        'loc': loc };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/objectworkflows/tasks/{task_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Workflow Actions
 * @param fe Callback interface that runs the fetch query
 * @param workflowId The workflow id field value.
 * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsObjectworkflowsWorkflowIdActionsGet(fe : ApiExecuterI, workflowId: string, loc: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsObjectworkflowsWorkflowIdActionsGet', { 'workflowId': workflowId,  });

    const _pathParams = { 
        'workflow_id': workflowId };
    const _queryParams = { 
        'loc': loc };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/objectworkflows/{workflow_id}/actions',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Workflow Action Details
 * @param fe Callback interface that runs the fetch query
 * @param workflowId The workflow id field value.
 * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(fe : ApiExecuterI, workflowId: string, workflowAction: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet', { 'workflowId': workflowId, 'workflowAction': workflowAction,  });

    const _pathParams = { 
        'workflow_id': workflowId, 
        'workflow_action': workflowAction };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/objectworkflows/{workflow_id}/actions/{workflow_action}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Initiate Workflow Action
 * @param fe Callback interface that runs the fetch query
 * @param workflowId The workflow id field value.
 * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
 * @param documentsSys Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(fe : ApiExecuterI, workflowId: string, workflowAction: string, documentsSys: string=, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost', { 'workflowId': workflowId, 'workflowAction': workflowAction,  });

    const _pathParams = { 
        'workflow_id': workflowId, 
        'workflow_action': workflowAction };
    const _queryParams = { 
        'documents__sys': documentsSys };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/objectworkflows/{workflow_id}/actions/{workflow_action}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Workflow Details
 * @param fe Callback interface that runs the fetch query
 * @param workflowId The workflow id field value.
 * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsObjectworkflowsWorkflowIdGet(fe : ApiExecuterI, workflowId: string, loc: boolean=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsObjectworkflowsWorkflowIdGet', { 'workflowId': workflowId,  });

    const _pathParams = { 
        'workflow_id': workflowId };
    const _queryParams = { 
        'loc': loc };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/objectworkflows/{workflow_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve All Picklists
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsPicklistsGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsPicklistsGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/picklists',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Picklist Values
 * @param fe Callback interface that runs the fetch query
 * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsPicklistsPicklistNameGet(fe : ApiExecuterI, picklistName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsPicklistsPicklistNameGet', { 'picklistName': picklistName,  });

    const _pathParams = { 
        'picklist_name': picklistName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/picklists/{picklist_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Inactivate Picklist Value
 * @param fe Callback interface that runs the fetch query
 * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
 * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsPicklistsPicklistNamePicklistValueNameDelete(fe : ApiExecuterI, picklistName: string, picklistValueName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsPicklistsPicklistNamePicklistValueNameDelete', { 'picklistName': picklistName, 'picklistValueName': picklistValueName,  });

    const _pathParams = { 
        'picklist_name': picklistName, 
        'picklist_value_name': picklistValueName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/picklists/{picklist_name}/{picklist_value_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Picklist Value
 * @param fe Callback interface that runs the fetch query
 * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
 * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsPicklistsPicklistNamePicklistValueNamePut(fe : ApiExecuterI, picklistName: string, picklistValueName: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsPicklistsPicklistNamePicklistValueNamePut', { 'picklistName': picklistName, 'picklistValueName': picklistValueName,  });

    const _pathParams = { 
        'picklist_name': picklistName, 
        'picklist_value_name': picklistValueName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/picklists/{picklist_name}/{picklist_value_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Picklist Values
 * @param fe Callback interface that runs the fetch query
 * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsPicklistsPicklistNamePost(fe : ApiExecuterI, picklistName: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsPicklistsPicklistNamePost', { 'picklistName': picklistName,  });

    const _pathParams = { 
        'picklist_name': picklistName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/picklists/{picklist_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Picklist Value Label
 * @param fe Callback interface that runs the fetch query
 * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsPicklistsPicklistNamePut(fe : ApiExecuterI, picklistName: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsPicklistsPicklistNamePut', { 'picklistName': picklistName,  });

    const _pathParams = { 
        'picklist_name': picklistName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/picklists/{picklist_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Build Production Vault
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsSandboxActionsBuildproductionPost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsSandboxActionsBuildproductionPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/sandbox/actions/buildproduction',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Promote to Production
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsSandboxActionsPromoteproductionPost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsSandboxActionsPromoteproductionPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/sandbox/actions/promoteproduction',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Recheck Sandbox Usage Limit
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsSandboxActionsRecheckusagePost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsSandboxActionsRecheckusagePost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/sandbox/actions/recheckusage',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Change Sandbox Size
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsSandboxBatchChangesizePost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsSandboxBatchChangesizePost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/sandbox/batch/changesize',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Set Sandbox Entitlements
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsSandboxEntitlementsSetPost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsSandboxEntitlementsSetPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/sandbox/entitlements/set',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Sandboxes
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsSandboxGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsSandboxGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/sandbox',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Sandbox
 * @param fe Callback interface that runs the fetch query
 * @param name The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsSandboxNameDelete(fe : ApiExecuterI, name: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsSandboxNameDelete', { 'name': name,  });

    const _pathParams = { 
        'name': name };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/sandbox/{name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create or Refresh Sandbox
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsSandboxPost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsSandboxPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/sandbox',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Sandbox Snapshot
 * @param fe Callback interface that runs the fetch query
 * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsSandboxSnapshotApiNameActionsUpdatePost(fe : ApiExecuterI, apiName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsSandboxSnapshotApiNameActionsUpdatePost', { 'apiName': apiName,  });

    const _pathParams = { 
        'api_name': apiName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/sandbox/snapshot/{api_name}/actions/update',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Upgrade Sandbox Snapshot
 * @param fe Callback interface that runs the fetch query
 * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsSandboxSnapshotApiNameActionsUpgradePost(fe : ApiExecuterI, apiName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsSandboxSnapshotApiNameActionsUpgradePost', { 'apiName': apiName,  });

    const _pathParams = { 
        'api_name': apiName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/sandbox/snapshot/{api_name}/actions/upgrade',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Sandbox Snapshot
 * @param fe Callback interface that runs the fetch query
 * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsSandboxSnapshotApiNameDelete(fe : ApiExecuterI, apiName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsSandboxSnapshotApiNameDelete', { 'apiName': apiName,  });

    const _pathParams = { 
        'api_name': apiName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/sandbox/snapshot/{api_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Sandbox Snapshots
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsSandboxSnapshotGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsSandboxSnapshotGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/sandbox/snapshot',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Sandbox Snapshot
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsSandboxSnapshotPost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsSandboxSnapshotPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/sandbox/snapshot',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Refresh Sandbox from Snapshot
 * @param fe Callback interface that runs the fetch query
 * @param vaultId The Vault ID of the sandbox to be refreshed.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsSandboxVaultIdActionsRefreshPost(fe : ApiExecuterI, vaultId: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsSandboxVaultIdActionsRefreshPost', { 'vaultId': vaultId,  });

    const _pathParams = { 
        'vault_id': vaultId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/sandbox/{vault_id}/actions/refresh',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Sandbox Details by ID
 * @param fe Callback interface that runs the fetch query
 * @param vaultId 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsSandboxVaultIdGet(fe : ApiExecuterI, vaultId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsSandboxVaultIdGet', { 'vaultId': vaultId,  });

    const _pathParams = { 
        'vault_id': vaultId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/sandbox/{vault_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve All Security Policies
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsSecuritypoliciesGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsSecuritypoliciesGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/securitypolicies',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Security Policy
 * @param fe Callback interface that runs the fetch query
 * @param securityPolicyName Security policy name__v field value (retrieved from previous request). This is typically a numeric value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsSecuritypoliciesSecurityPolicyNameGet(fe : ApiExecuterI, securityPolicyName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsSecuritypoliciesSecurityPolicyNameGet', { 'securityPolicyName': securityPolicyName,  });

    const _pathParams = { 
        'security_policy_name': securityPolicyName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/securitypolicies/{security_policy_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve All Users
 * @param fe Callback interface that runs the fetch query
 * @param vaults Retrieve all users assigned to all Vaults in your domain.
 * @param excludeVaultMembership Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.
 * @param excludeAppLicensing Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsUsersGet(fe : ApiExecuterI, vaults: string=, excludeVaultMembership: string=, excludeAppLicensing: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsUsersGet', {  });

    const _pathParams = { };
    const _queryParams = { 
        'vaults': vaults, 
        'exclude_vault_membership': excludeVaultMembership, 
        'exclude_app_licensing': excludeAppLicensing };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/users/',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve User
 * @param fe Callback interface that runs the fetch query
 * @param id The user id field value. Use the value me to get information for the currently authenticated user.
 * @param excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
 * @param excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsUsersIdGet(fe : ApiExecuterI, id: string, excludeVaultMembership: string=, excludeAppLicensing: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsUsersIdGet', { 'id': id,  });

    const _pathParams = { 
        'id': id };
    const _queryParams = { 
        'exclude_vault_membership': excludeVaultMembership, 
        'exclude_app_licensing': excludeAppLicensing };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/users/{id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve User Permissions
 * @param fe Callback interface that runs the fetch query
 * @param id The ID of the user. Use the value me to retrieve information for the currently authenticated user.
 * @param filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsUsersIdPermissionsGet(fe : ApiExecuterI, id: string, filter: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsUsersIdPermissionsGet', { 'id': id,  });

    const _pathParams = { 
        'id': id };
    const _queryParams = { 
        'filter': filter };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/users/{id}/permissions',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Single User
 * @param fe Callback interface that runs the fetch query
 * @param id The user id field value. Use the value me to get information for the currently authenticated user.
 * @param authorization 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsUsersIdPut(fe : ApiExecuterI, id: string, authorization: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsUsersIdPut', { 'id': id,  });

    const _pathParams = { 
        'id': id };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/users/{id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Validate Session User
 * @param fe Callback interface that runs the fetch query
 * @param excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
 * @param excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsUsersMeGet(fe : ApiExecuterI, excludeVaultMembership: string=, excludeAppLicensing: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsUsersMeGet', {  });

    const _pathParams = { };
    const _queryParams = { 
        'exclude_vault_membership': excludeVaultMembership, 
        'exclude_app_licensing': excludeAppLicensing };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/users/me',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Change My Password
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsUsersMePasswordPost(fe : ApiExecuterI, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsUsersMePasswordPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/users/me/password',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve My User Permissions
 * @param fe Callback interface that runs the fetch query
 * @param filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsUsersMePermissionsGet(fe : ApiExecuterI, filter: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsUsersMePermissionsGet', {  });

    const _pathParams = { };
    const _queryParams = { 
        'filter': filter };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/objects/users/me/permissions',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update My User
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsUsersMePut(fe : ApiExecuterI, authorization: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsUsersMePut', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/users/me',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Single User
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsUsersPost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsUsersPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/users',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Multiple Users
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsUsersPut(fe : ApiExecuterI, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsUsersPut', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/users',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Disable User
 * @param fe Callback interface that runs the fetch query
 * @param userId The user id field value. 
 * @param domain When true, this disables the user account in all vaults in the domain.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsUsersUserIdDelete(fe : ApiExecuterI, userId: string, domain: boolean=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsUsersUserIdDelete', { 'userId': userId,  });

    const _pathParams = { 
        'user_id': userId };
    const _queryParams = { 
        'domain': domain };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/objects/users/{user_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Vault Membership
 * @param fe Callback interface that runs the fetch query
 * @param userId The user id field value.
 * @param vaultId The system-managed id field value assigned to each vault in the domain.
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsUsersUserIdVaultMembershipVaultIdPut(fe : ApiExecuterI, userId: string, vaultId: string, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsUsersUserIdVaultMembershipVaultIdPut', { 'userId': userId, 'vaultId': vaultId,  });

    const _pathParams = { 
        'user_id': userId, 
        'vault_id': vaultId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/objects/users/{user_id}/vault_membership/{vault_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Vault Compare
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsVaultActionsComparePost(fe : ApiExecuterI, authorization: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsVaultActionsComparePost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/vault/actions/compare',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Vault Configuration Report
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__objectsVaultActionsConfigreportPost(fe : ApiExecuterI, authorization: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('objectsVaultActionsConfigreportPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/objects/vault/actions/configreport',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Component Definition Query
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__queryComponentsPost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('queryComponentsPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/query/components',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Next Page URL
 * @param fe Callback interface that runs the fetch query
 * @param nextPage 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIDescribeQuery 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__queryNextPagePost(fe : ApiExecuterI, nextPage: string, authorization: string=, accept: string=, xVaultAPIDescribeQuery: boolean=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('queryNextPagePost', { 'nextPage': nextPage,  });

    const _pathParams = { 
        'next_page': nextPage };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-DescribeQuery': xVaultAPIDescribeQuery, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/query/{next_page}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Submitting a Query
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIDescribeQuery 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__queryPost(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIDescribeQuery: boolean=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('queryPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-DescribeQuery': xVaultAPIDescribeQuery, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/query',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Previous Page URL
 * @param fe Callback interface that runs the fetch query
 * @param previousPage 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIDescribeQuery 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__queryPreviousPagePost(fe : ApiExecuterI, previousPage: string, authorization: string=, accept: string=, xVaultAPIDescribeQuery: boolean=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('queryPreviousPagePost', { 'previousPage': previousPage,  });

    const _pathParams = { 
        'previous_page': previousPage };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-DescribeQuery': xVaultAPIDescribeQuery, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/query/{previous_page}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Current User with SCIM
 * @param fe Callback interface that runs the fetch query
 * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
 * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__scimV2MeGet(fe : ApiExecuterI, attributes: string=, excludedAttributes: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('scimV2MeGet', {  });

    const _pathParams = { };
    const _queryParams = { 
        'attributes': attributes, 
        'excludedAttributes': excludedAttributes };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/scim/v2/Me',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Current User with SCIM
 * @param fe Callback interface that runs the fetch query
 * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
 * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__scimV2MePut(fe : ApiExecuterI, attributes: string=, excludedAttributes: string=, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('scimV2MePut', {  });

    const _pathParams = { };
    const _queryParams = { 
        'attributes': attributes, 
        'excludedAttributes': excludedAttributes };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/scim/v2/Me',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve All SCIM Resource Types
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__scimV2ResourceTypesGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('scimV2ResourceTypesGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/scim/v2/ResourceTypes',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Single SCIM Resource Type
 * @param fe Callback interface that runs the fetch query
 * @param type A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__scimV2ResourceTypesTypeGet(fe : ApiExecuterI, type: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('scimV2ResourceTypesTypeGet', { 'type': type,  });

    const _pathParams = { 
        'type': type };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/scim/v2/ResourceTypes/{type}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve All SCIM Schema Information
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__scimV2SchemasGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('scimV2SchemasGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/scim/v2/Schemas',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Single SCIM Schema Information
 * @param fe Callback interface that runs the fetch query
 * @param id The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__scimV2SchemasIdGet(fe : ApiExecuterI, id: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('scimV2SchemasIdGet', { 'id': id,  });

    const _pathParams = { 
        'id': id };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/scim/v2/Schemas/{id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve SCIM Provider
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__scimV2ServiceProviderConfigGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('scimV2ServiceProviderConfigGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/scim/v2/ServiceProviderConfig',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve SCIM Resources
 * @param fe Callback interface that runs the fetch query
 * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
 * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq &quot;{value}&quot;. For example, to filter for a particular user name, userName eq &quot;john&quot;. Complex expressions are not supported, and eq is the only supported operator.
 * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
 * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
 * @param sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
 * @param sortOrder Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
 * @param startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__scimV2TypeGet(fe : ApiExecuterI, type: string, filter: string=, attributes: string=, excludedAttributes: string=, sortBy: string=, sortOrder: string=, startIndex: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('scimV2TypeGet', { 'type': type,  });

    const _pathParams = { 
        'type': type };
    const _queryParams = { 
        'filter': filter, 
        'attributes': attributes, 
        'excludedAttributes': excludedAttributes, 
        'sortBy': sortBy, 
        'sortOrder': sortOrder, 
        'startIndex': startIndex };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/scim/v2/{type}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Single SCIM Resource
 * @param fe Callback interface that runs the fetch query
 * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
 * @param id The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.
 * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
 * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__scimV2TypeIdGet(fe : ApiExecuterI, type: string, id: string, attributes: string=, excludedAttributes: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('scimV2TypeIdGet', { 'type': type, 'id': id,  });

    const _pathParams = { 
        'type': type, 
        'id': id };
    const _queryParams = { 
        'attributes': attributes, 
        'excludedAttributes': excludedAttributes };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/scim/v2/{type}/{id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve All Users with SCIM
 * @param fe Callback interface that runs the fetch query
 * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq &quot;{value}&quot;. For example, to filter for a particular user name, userName eq &quot;john&quot;. Complex expressions are not supported, and eq is the only supported operator.
 * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
 * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
 * @param sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
 * @param sortOrder Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.
 * @param count Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
 * @param startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__scimV2UsersGet(fe : ApiExecuterI, filter: string=, attributes: string=, excludedAttributes: string=, sortBy: string=, sortOrder: string=, count: string=, startIndex: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('scimV2UsersGet', {  });

    const _pathParams = { };
    const _queryParams = { 
        'filter': filter, 
        'attributes': attributes, 
        'excludedAttributes': excludedAttributes, 
        'sortBy': sortBy, 
        'sortOrder': sortOrder, 
        'count': count, 
        'startIndex': startIndex };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/scim/v2/Users',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Single User with SCIM
 * @param fe Callback interface that runs the fetch query
 * @param id The id of the user you wish to update.
 * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq &quot;{value}&quot;. For example, to filter for a particular user name, userName eq &quot;john&quot;. Complex expressions are not supported, and eq is the only supported operator.
 * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
 * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__scimV2UsersIdGet(fe : ApiExecuterI, id: string, filter: string=, attributes: string=, excludedAttributes: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('scimV2UsersIdGet', { 'id': id,  });

    const _pathParams = { 
        'id': id };
    const _queryParams = { 
        'filter': filter, 
        'attributes': attributes, 
        'excludedAttributes': excludedAttributes };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/scim/v2/Users/{id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update User with SCIM
 * @param fe Callback interface that runs the fetch query
 * @param id The id of the user you wish to update.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__scimV2UsersIdPut(fe : ApiExecuterI, id: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('scimV2UsersIdPut', { 'id': id,  });

    const _pathParams = { 
        'id': id };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/scim/v2/Users/{id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create User with SCIM
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__scimV2UsersPost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('scimV2UsersPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/scim/v2/Users',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Signing Certificate
 * @param fe Callback interface that runs the fetch query
 * @param certId The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesCertificateCertIdGet(fe : ApiExecuterI, certId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesCertificateCertIdGet', { 'certId': certId,  });

    const _pathParams = { 
        'cert_id': certId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/services/certificate/{cert_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Disable Configuration Mode
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesConfigurationModeActionsDisablePost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesConfigurationModeActionsDisablePost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/services/configuration_mode/actions/disable',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Enable Configuration Mode
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesConfigurationModeActionsEnablePost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesConfigurationModeActionsEnablePost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/services/configuration_mode/actions/enable',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Available Direct Data Files
 * @param fe Callback interface that runs the fetch query
 * @param extractType The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.
 * @param startTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.
 * @param stopTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.
 * @param accept 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesDirectdataFilesGet(fe : ApiExecuterI, extractType: string=, startTime: int=, stopTime: int=, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesDirectdataFilesGet', {  });

    const _pathParams = { };
    const _queryParams = { 
        'extract_type': extractType, 
        'start_time': startTime, 
        'stop_time': stopTime };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/services/directdata/files',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Download Direct Data File
 * @param fe Callback interface that runs the fetch query
 * @param name The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.
 * @param accept 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesDirectdataFilesNameGet(fe : ApiExecuterI, name: string, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesDirectdataFilesNameGet', { 'name': name,  });

    const _pathParams = { 
        'name': name };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/services/directdata/files/{name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Download Item Content
 * @param fe Callback interface that runs the fetch query
 * @param item The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
 * @param authorization 
 * @param accept 
 * @param range Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format &#x60;bytes&#x3D;{min}-{max}&#x60;. For example, &#x60;bytes&#x3D;0-1000&#x60;.
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesFileStagingItemsContentItemGet(fe : ApiExecuterI, item: string, authorization: string=, accept: string=, range: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesFileStagingItemsContentItemGet', { 'item': item,  });

    const _pathParams = { 
        'item': item };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Range': range, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/services/file_staging/items/content/{item}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete File or Folder
 * @param fe Callback interface that runs the fetch query
 * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
 * @param recursive Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesFileStagingItemsItemDelete(fe : ApiExecuterI, item: string, recursive: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesFileStagingItemsItemDelete', { 'item': item,  });

    const _pathParams = { 
        'item': item };
    const _queryParams = { 
        'recursive': recursive };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/services/file_staging/items/{item}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary List Items at a Path
 * @param fe Callback interface that runs the fetch query
 * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
 * @param recursive If true, the response will contain the contents of all subfolders. If not specified, the default value is false.
 * @param limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
 * @param formatResult If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesFileStagingItemsItemGet(fe : ApiExecuterI, item: string, recursive: string=, limit: string=, formatResult: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesFileStagingItemsItemGet', { 'item': item,  });

    const _pathParams = { 
        'item': item };
    const _queryParams = { 
        'recursive': recursive, 
        'limit': limit, 
        'format_result': formatResult };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/services/file_staging/items/{item}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Folder or File
 * @param fe Callback interface that runs the fetch query
 * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesFileStagingItemsItemPut(fe : ApiExecuterI, item: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesFileStagingItemsItemPut', { 'item': item,  });

    const _pathParams = { 
        'item': item };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/services/file_staging/items/{item}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Folder or File
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentMD5 Optional: The MD5 checksum of the file being uploaded.
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesFileStagingItemsPost(fe : ApiExecuterI, authorization: string=, accept: string=, contentMD5: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesFileStagingItemsPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-MD5': contentMD5, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/services/file_staging/items',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary List Upload Sessions
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesFileStagingUploadGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesFileStagingUploadGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/services/file_staging/upload/',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Resumable Upload Session
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesFileStagingUploadPost(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesFileStagingUploadPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/services/file_staging/upload',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Abort Upload Session
 * @param fe Callback interface that runs the fetch query
 * @param uploadSessionId 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesFileStagingUploadUploadSessionIdDelete(fe : ApiExecuterI, uploadSessionId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesFileStagingUploadUploadSessionIdDelete', { 'uploadSessionId': uploadSessionId,  });

    const _pathParams = { 
        'upload_session_id': uploadSessionId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/services/file_staging/upload/{upload_session_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Get Upload Session Details
 * @param fe Callback interface that runs the fetch query
 * @param uploadSessionId 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesFileStagingUploadUploadSessionIdGet(fe : ApiExecuterI, uploadSessionId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesFileStagingUploadUploadSessionIdGet', { 'uploadSessionId': uploadSessionId,  });

    const _pathParams = { 
        'upload_session_id': uploadSessionId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/services/file_staging/upload/{upload_session_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary List File Parts Uploaded to Session
 * @param fe Callback interface that runs the fetch query
 * @param uploadSessionId 
 * @param limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesFileStagingUploadUploadSessionIdPartsGet(fe : ApiExecuterI, uploadSessionId: string, limit: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesFileStagingUploadUploadSessionIdPartsGet', { 'uploadSessionId': uploadSessionId,  });

    const _pathParams = { 
        'upload_session_id': uploadSessionId };
    const _queryParams = { 
        'limit': limit };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/services/file_staging/upload/{upload_session_id}/parts',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Commit Upload Session
 * @param fe Callback interface that runs the fetch query
 * @param uploadSessionId 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesFileStagingUploadUploadSessionIdPost(fe : ApiExecuterI, uploadSessionId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesFileStagingUploadUploadSessionIdPost', { 'uploadSessionId': uploadSessionId,  });

    const _pathParams = { 
        'upload_session_id': uploadSessionId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/services/file_staging/upload/{upload_session_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Upload to a Session
 * @param fe Callback interface that runs the fetch query
 * @param uploadSessionId 
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIFilePartNumber The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.
 * @param contentMD5 Optional: The MD5 checksum of the file part being uploaded.
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesFileStagingUploadUploadSessionIdPut(fe : ApiExecuterI, uploadSessionId: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIFilePartNumber: string=, contentMD5: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesFileStagingUploadUploadSessionIdPut', { 'uploadSessionId': uploadSessionId,  });

    const _pathParams = { 
        'upload_session_id': uploadSessionId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-FilePartNumber': xVaultAPIFilePartNumber, 
        'Content-MD5': contentMD5, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/services/file_staging/upload/{upload_session_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Job Histories
 * @param fe Callback interface that runs the fetch query
 * @param startDate Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
 * @param endDate Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
 * @param status Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.
 * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
 * @param offset Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesJobsHistoriesGet(fe : ApiExecuterI, startDate: string=, endDate: string=, status: string=, limit: string=, offset: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesJobsHistoriesGet', {  });

    const _pathParams = { };
    const _queryParams = { 
        'start_date': startDate, 
        'end_date': endDate, 
        'status': status, 
        'limit': limit, 
        'offset': offset };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/services/jobs/histories',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Import Bulk Translation File Job Errors
 * @param fe Callback interface that runs the fetch query
 * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesJobsJobIdErrorsGet(fe : ApiExecuterI, jobId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesJobsJobIdErrorsGet', { 'jobId': jobId,  });

    const _pathParams = { 
        'job_id': jobId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/services/jobs/{job_id}/errors',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Job Status
 * @param fe Callback interface that runs the fetch query
 * @param jobId The ID of the job, returned from the original job request.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesJobsJobIdGet(fe : ApiExecuterI, jobId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesJobsJobIdGet', { 'jobId': jobId,  });

    const _pathParams = { 
        'job_id': jobId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/services/jobs/{job_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Import Bulk Translation File Job Summary
 * @param fe Callback interface that runs the fetch query
 * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesJobsJobIdSummaryGet(fe : ApiExecuterI, jobId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesJobsJobIdSummaryGet', { 'jobId': jobId,  });

    const _pathParams = { 
        'job_id': jobId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/services/jobs/{job_id}/summary',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve SDK Job Tasks
 * @param fe Callback interface that runs the fetch query
 * @param jobId The ID of the SDK job, returned from the original job request.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesJobsJobIdTasksGet(fe : ApiExecuterI, jobId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesJobsJobIdTasksGet', { 'jobId': jobId,  });

    const _pathParams = { 
        'job_id': jobId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/services/jobs/{job_id}/tasks',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Job Monitors
 * @param fe Callback interface that runs the fetch query
 * @param startDate Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
 * @param endDate Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
 * @param status Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.
 * @param limit Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
 * @param offset Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesJobsMonitorsGet(fe : ApiExecuterI, startDate: string=, endDate: string=, status: string=, limit: string=, offset: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesJobsMonitorsGet', {  });

    const _pathParams = { };
    const _queryParams = { 
        'start_date': startDate, 
        'end_date': endDate, 
        'status': status, 
        'limit': limit, 
        'offset': offset };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/services/jobs/monitors',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Start Job
 * @param fe Callback interface that runs the fetch query
 * @param jobId The ID of the scheduled job instance to start.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesJobsStartNowJobIdPost(fe : ApiExecuterI, jobId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesJobsStartNowJobIdPost', { 'jobId': jobId,  });

    const _pathParams = { 
        'job_id': jobId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/services/jobs/start_now/{job_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Extract Data Files
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesLoaderExtractPost(fe : ApiExecuterI, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesLoaderExtractPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/services/loader/extract',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Load Failure Log Results
 * @param fe Callback interface that runs the fetch query
 * @param jobId The id value of the requested extract job.
 * @param taskId The id value of the requested extract task.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesLoaderJobIdTasksTaskIdFailurelogGet(fe : ApiExecuterI, jobId: string, taskId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesLoaderJobIdTasksTaskIdFailurelogGet', { 'jobId': jobId, 'taskId': taskId,  });

    const _pathParams = { 
        'job_id': jobId, 
        'task_id': taskId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/services/loader/{job_id}/tasks/{task_id}/failurelog',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Loader Extract Results
 * @param fe Callback interface that runs the fetch query
 * @param jobId The id value of the requested extract job.
 * @param taskId The id value of the requested extract task.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesLoaderJobIdTasksTaskIdResultsGet(fe : ApiExecuterI, jobId: string, taskId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesLoaderJobIdTasksTaskIdResultsGet', { 'jobId': jobId, 'taskId': taskId,  });

    const _pathParams = { 
        'job_id': jobId, 
        'task_id': taskId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/services/loader/{job_id}/tasks/{task_id}/results',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Loader Extract Renditions Results
 * @param fe Callback interface that runs the fetch query
 * @param jobId The id value of the requested extract job.
 * @param taskId The id value of the requested extract task.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(fe : ApiExecuterI, jobId: string, taskId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesLoaderJobIdTasksTaskIdResultsRenditionsGet', { 'jobId': jobId, 'taskId': taskId,  });

    const _pathParams = { 
        'job_id': jobId, 
        'task_id': taskId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/services/loader/{job_id}/tasks/{task_id}/results/renditions',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Load Success Log Results
 * @param fe Callback interface that runs the fetch query
 * @param jobId The id value of the requested extract job.
 * @param taskId The id value of the requested extract task.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesLoaderJobIdTasksTaskIdSuccesslogGet(fe : ApiExecuterI, jobId: string, taskId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesLoaderJobIdTasksTaskIdSuccesslogGet', { 'jobId': jobId, 'taskId': taskId,  });

    const _pathParams = { 
        'job_id': jobId, 
        'task_id': taskId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/services/loader/{job_id}/tasks/{task_id}/successlog',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Load Data Objects
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesLoaderLoadPost(fe : ApiExecuterI, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesLoaderLoadPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/services/loader/load',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Validate Package
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesPackageActionsValidatePost(fe : ApiExecuterI, authorization: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesPackageActionsValidatePost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/services/package/actions/validate',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Export Package
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesPackagePost(fe : ApiExecuterI, authorization: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesPackagePost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/services/package',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Import Package
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesPackagePut(fe : ApiExecuterI, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesPackagePut', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/services/package',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve All Queues
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesQueuesGet(fe : ApiExecuterI, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesQueuesGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/services/queues',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Disable Delivery
 * @param fe Callback interface that runs the fetch query
 * @param queueName The name of a specific Queue.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesQueuesQueueNameActionsDisableDeliveryPut(fe : ApiExecuterI, queueName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesQueuesQueueNameActionsDisableDeliveryPut', { 'queueName': queueName,  });

    const _pathParams = { 
        'queue_name': queueName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/services/queues/{queue_name}/actions/disable_delivery',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Enable Delivery
 * @param fe Callback interface that runs the fetch query
 * @param queueName The name of a specific Queue.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesQueuesQueueNameActionsEnableDeliveryPut(fe : ApiExecuterI, queueName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesQueuesQueueNameActionsEnableDeliveryPut', { 'queueName': queueName,  });

    const _pathParams = { 
        'queue_name': queueName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/services/queues/{queue_name}/actions/enable_delivery',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Reset Queue
 * @param fe Callback interface that runs the fetch query
 * @param queueName The name of a specific Queue.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesQueuesQueueNameActionsResetPut(fe : ApiExecuterI, queueName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesQueuesQueueNameActionsResetPut', { 'queueName': queueName,  });

    const _pathParams = { 
        'queue_name': queueName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/services/queues/{queue_name}/actions/reset',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Queue Status
 * @param fe Callback interface that runs the fetch query
 * @param queueName The name of a specific queue. For example, queue__c.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesQueuesQueueNameGet(fe : ApiExecuterI, queueName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesQueuesQueueNameGet', { 'queueName': queueName,  });

    const _pathParams = { 
        'queue_name': queueName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/services/queues/{queue_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Validate Imported Package
 * @param fe Callback interface that runs the fetch query
 * @param packageId The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__servicesVobjectVaultPackageVPackageIdActionsValidatePost(fe : ApiExecuterI, packageId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('servicesVobjectVaultPackageVPackageIdActionsValidatePost', { 'packageId': packageId,  });

    const _pathParams = { 
        'package_id': packageId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/services/vobject/vault_package__v/{package_id}/actions/validate',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary End Session
 * @param fe Callback interface that runs the fetch query
 * @param accept 
 * @param authorization The Vault sessionId to end.
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__sessionDelete(fe : ApiExecuterI, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('sessionDelete', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/session',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Download Single Client Code Distribution
 * @param fe Callback interface that runs the fetch query
 * @param distributionName The name attribute of the client code distribution to download.
 * @param accept 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__uicodeDistributionsDistributionNameCodeGet(fe : ApiExecuterI, distributionName: string, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('uicodeDistributionsDistributionNameCodeGet', { 'distributionName': distributionName,  });

    const _pathParams = { 
        'distribution_name': distributionName };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/uicode/distributions/{distribution_name}/code',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Single Client Code Distribution
 * @param fe Callback interface that runs the fetch query
 * @param distributionName The name attribute of the client code distribution to delete.
 * @param accept 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__uicodeDistributionsDistributionNameDelete(fe : ApiExecuterI, distributionName: string, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('uicodeDistributionsDistributionNameDelete', { 'distributionName': distributionName,  });

    const _pathParams = { 
        'distribution_name': distributionName };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/uicode/distributions/{distribution_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Single Client Code Distribution Metadata
 * @param fe Callback interface that runs the fetch query
 * @param distributionName The name attribute of the client code distribution to delete.
 * @param accept 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__uicodeDistributionsDistributionNameGet(fe : ApiExecuterI, distributionName: string, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('uicodeDistributionsDistributionNameGet', { 'distributionName': distributionName,  });

    const _pathParams = { 
        'distribution_name': distributionName };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/uicode/distributions/{distribution_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve All Client Code Distribution Metadata
 * @param fe Callback interface that runs the fetch query
 * @param accept 
 * @param authorization 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__uicodeDistributionsGet(fe : ApiExecuterI, accept: string=, authorization: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('uicodeDistributionsGet', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/uicode/distributions',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Add or Replace Single Client Code Distribution
 * @param fe Callback interface that runs the fetch query
 * @param accept 
 * @param authorization 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__uicodeDistributionsPost(fe : ApiExecuterI, accept: string=, authorization: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('uicodeDistributionsPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Accept': accept, 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/uicode/distributions',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Deploy Package
 * @param fe Callback interface that runs the fetch query
 * @param packageId The id field value of the vault_package__v object record used for deployment. See Import Package.
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectVaultPackageVPackageIdActionsDeployPost(fe : ApiExecuterI, packageId: string, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectVaultPackageVPackageIdActionsDeployPost', { 'packageId': packageId,  });

    const _pathParams = { 
        'package_id': packageId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/vobject/vault_package__v/{package_id}/actions/deploy',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Package Deploy Results
 * @param fe Callback interface that runs the fetch query
 * @param packageId The id field value of the vault_package__v object record used for deployment. See Deploy Package.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectVaultPackageVPackageIdActionsDeployResultsGet(fe : ApiExecuterI, packageId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectVaultPackageVPackageIdActionsDeployResultsGet', { 'packageId': packageId,  });

    const _pathParams = { 
        'package_id': packageId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/vobject/vault_package__v/{package_id}/actions/deploy/results',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Results of Cascade Delete Job
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param jobStatus 
 * @param jobId 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(fe : ApiExecuterI, objectName: string, jobStatus: string, jobId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet', { 'objectName': objectName, 'jobStatus': jobStatus, 'jobId': jobId,  });

    const _pathParams = { 
        'object_name': objectName, 
        'job_status': jobStatus, 
        'job_id': jobId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Results of Deep Copy Job
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param jobStatus The ID of the job, retrieved from the response of the job request.
 * @param jobId Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(fe : ApiExecuterI, objectName: string, jobStatus: string, jobId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet', { 'objectName': objectName, 'jobStatus': jobStatus, 'jobId': jobId,  });

    const _pathParams = { 
        'object_name': objectName, 
        'job_status': jobStatus, 
        'job_id': jobId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create a Placeholder from an EDL Item
 * @param fe Callback interface that runs the fetch query
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsEdlItemVActionsCreateplaceholderPost(fe : ApiExecuterI, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsEdlItemVActionsCreateplaceholderPost', {  });

    const _pathParams = { };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/vobjects/edl_item__v/actions/createplaceholder',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Download Merge Records Job Log
 * @param fe Callback interface that runs the fetch query
 * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsMergesJobIdLogGet(fe : ApiExecuterI, jobId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsMergesJobIdLogGet', { 'jobId': jobId,  });

    const _pathParams = { 
        'job_id': jobId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/vobjects/merges/{job_id}/log',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Record Merge Results
 * @param fe Callback interface that runs the fetch query
 * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsMergesJobIdResultsGet(fe : ApiExecuterI, jobId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsMergesJobIdResultsGet', { 'jobId': jobId,  });

    const _pathParams = { 
        'job_id': jobId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/vobjects/merges/{job_id}/results',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Record Merge Status
 * @param fe Callback interface that runs the fetch query
 * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsMergesJobIdStatusGet(fe : ApiExecuterI, jobId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsMergesJobIdStatusGet', { 'jobId': jobId,  });

    const _pathParams = { 
        'job_id': jobId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/vobjects/merges/{job_id}/status',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Initiate Object Action on Multiple Records
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value.
 * @param actionName Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameActionsActionNamePost(fe : ApiExecuterI, objectName: string, actionName: string, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameActionsActionNamePost', { 'objectName': objectName, 'actionName': actionName,  });

    const _pathParams = { 
        'object_name': objectName, 
        'action_name': actionName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/vobjects/{object_name}/actions/{action_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Change Object Type
 * @param fe Callback interface that runs the fetch query
 * @param objectName The name of the object.
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameActionsChangetypePost(fe : ApiExecuterI, objectName: string, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameActionsChangetypePost', { 'objectName': objectName,  });

    const _pathParams = { 
        'object_name': objectName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/vobjects/{object_name}/actions/changetype',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Initiate Record Merge
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value. For example, account__v. This object must have Enable Merges configured.
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @param ~Object+ 
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameActionsMergePost(fe : ApiExecuterI, objectName: string, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=, ~Object+: ~Object+[]=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameActionsMergePost', { 'objectName': objectName,  });

    const _pathParams = { 
        'object_name': objectName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = ~Object+;

    await fe.exec(
        'POST', '/api/v25.1' + '/vobjects/{object_name}/actions/merge',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Roll-up Field Recalculation Status
 * @param fe Callback interface that runs the fetch query
 * @param objectName The name of the object for which to check the status of a Roll-up field recalculation.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameActionsRecalculaterollupsGet(fe : ApiExecuterI, objectName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameActionsRecalculaterollupsGet', { 'objectName': objectName,  });

    const _pathParams = { 
        'object_name': objectName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/vobjects/{object_name}/actions/recalculaterollups',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Recalculate Roll-up Fields
 * @param fe Callback interface that runs the fetch query
 * @param objectName The name of the object for which to check the status of a Roll-up field recalculation.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameActionsRecalculaterollupsPost(fe : ApiExecuterI, objectName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameActionsRecalculaterollupsPost', { 'objectName': objectName,  });

    const _pathParams = { 
        'object_name': objectName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/vobjects/{object_name}/actions/recalculaterollups',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Corporate Currency Fields
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameActionsUpdatecorporatecurrencyPut(fe : ApiExecuterI, objectName: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameActionsUpdatecorporatecurrencyPut', { 'objectName': objectName,  });

    const _pathParams = { 
        'object_name': objectName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/vobjects/{object_name}/actions/updatecorporatecurrency',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Multiple Object Record Attachments
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param idParam 
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameAttachmentsBatchDelete(fe : ApiExecuterI, objectName: string, idParam: string=, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameAttachmentsBatchDelete', { 'objectName': objectName,  });

    const _pathParams = { 
        'object_name': objectName };
    const _queryParams = { 
        'idParam': idParam };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/vobjects/{object_name}/attachments/batch',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Multiple Object Record Attachments
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameAttachmentsBatchPost(fe : ApiExecuterI, objectName: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameAttachmentsBatchPost', { 'objectName': objectName,  });

    const _pathParams = { 
        'object_name': objectName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/vobjects/{object_name}/attachments/batch',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Multiple Object Record Attachment Descriptions
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameAttachmentsBatchPut(fe : ApiExecuterI, objectName: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameAttachmentsBatchPut', { 'objectName': objectName,  });

    const _pathParams = { 
        'object_name': objectName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/vobjects/{object_name}/attachments/batch',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Object Records
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param authorization 
 * @param contentType Can be text/csv or application/json
 * @param accept Can be text/csv or application/json
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameDelete(fe : ApiExecuterI, objectName: string, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameDelete', { 'objectName': objectName,  });

    const _pathParams = { 
        'object_name': objectName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/vobjects/{object_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Object Record Roles
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name.
 * @param id The id of the document, binder, or object record.
 * @param roleName Optional: Include a role name to filter for a specific role. For example, owner__v.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameIdRolesRoleNameGet(fe : ApiExecuterI, objectName: string, id: string, roleName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameIdRolesRoleNameGet', { 'objectName': objectName, 'id': id, 'roleName': roleName,  });

    const _pathParams = { 
        'object_name': objectName, 
        'id': id, 
        'role_name': roleName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/vobjects/{object_name}/{id}/roles/{role_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Object User Actions Details
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value.
 * @param objectRecordId The object record id field value from which to retrieve user actions.
 * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameObjectRecordIdActionsActionNameGet(fe : ApiExecuterI, objectName: string, objectRecordId: string, actionName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameObjectRecordIdActionsActionNameGet', { 'objectName': objectName, 'objectRecordId': objectRecordId, 'actionName': actionName,  });

    const _pathParams = { 
        'object_name': objectName, 
        'object_record_id': objectRecordId, 
        'action_name': actionName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/vobjects/{object_name}/{object_record_id}/actions/{action_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Initiate Object Action on a Single Record
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value.
 * @param objectRecordId The object record id field value from which to retrieve user actions.
 * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
 * @param authorization 
 * @param contentType 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameObjectRecordIdActionsActionNamePost(fe : ApiExecuterI, objectName: string, objectRecordId: string, actionName: string, authorization: string=, contentType: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameObjectRecordIdActionsActionNamePost', { 'objectName': objectName, 'objectRecordId': objectRecordId, 'actionName': actionName,  });

    const _pathParams = { 
        'object_name': objectName, 
        'object_record_id': objectRecordId, 
        'action_name': actionName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/vobjects/{object_name}/{object_record_id}/actions/{action_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Cascade Delete Object Record
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param objectRecordId The object record id field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(fe : ApiExecuterI, objectName: string, objectRecordId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameObjectRecordIdActionsCascadedeletePost', { 'objectName': objectName, 'objectRecordId': objectRecordId,  });

    const _pathParams = { 
        'object_name': objectName, 
        'object_record_id': objectRecordId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/vobjects/{object_name}/{object_record_id}/actions/cascadedelete',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Deep Copy Object Record
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param objectRecordId The object record id field value.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(fe : ApiExecuterI, objectName: string, objectRecordId: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameObjectRecordIdActionsDeepcopyPost', { 'objectName': objectName, 'objectRecordId': objectRecordId,  });

    const _pathParams = { 
        'object_name': objectName, 
        'object_record_id': objectRecordId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/vobjects/{object_name}/{object_record_id}/actions/deepcopy',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Object Record User Actions
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value.
 * @param objectRecordId The object record id field value.
 * @param loc Optional: When true, retrieves localized (translated) strings for the label. 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameObjectRecordIdActionsGet(fe : ApiExecuterI, objectName: string, objectRecordId: string, loc: boolean=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameObjectRecordIdActionsGet', { 'objectName': objectName, 'objectRecordId': objectRecordId,  });

    const _pathParams = { 
        'object_name': objectName, 
        'object_record_id': objectRecordId };
    const _queryParams = { 
        'loc': loc };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/vobjects/{object_name}/{object_record_id}/actions',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Download Attachment Field File
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value. For example, product__v.
 * @param objectRecordId The object record id field value.
 * @param attachmentFieldName The name of the Attachment field to update.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(fe : ApiExecuterI, objectName: string, objectRecordId: string, attachmentFieldName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet', { 'objectName': objectName, 'objectRecordId': objectRecordId, 'attachmentFieldName': attachmentFieldName,  });

    const _pathParams = { 
        'object_name': objectName, 
        'object_record_id': objectRecordId, 
        'attachment_field_name': attachmentFieldName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Attachment Field File
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value. For example, product__v.
 * @param objectRecordId The object record id field value.
 * @param attachmentFieldName The name of the Attachment field to update.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(fe : ApiExecuterI, objectName: string, objectRecordId: string, attachmentFieldName: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost', { 'objectName': objectName, 'objectRecordId': objectRecordId, 'attachmentFieldName': attachmentFieldName,  });

    const _pathParams = { 
        'object_name': objectName, 
        'object_record_id': objectRecordId, 
        'attachment_field_name': attachmentFieldName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Download All Attachment Field Files
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value. For example, product__v.
 * @param objectRecordId The object record id field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(fe : ApiExecuterI, objectName: string, objectRecordId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet', { 'objectName': objectName, 'objectRecordId': objectRecordId,  });

    const _pathParams = { 
        'object_name': objectName, 
        'object_record_id': objectRecordId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/vobjects/{object_name}/{object_record_id}/attachment_fields/file',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Object Record Attachment
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param objectRecordId The object record id field value.
 * @param attachmentId The attachment id field value.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(fe : ApiExecuterI, objectName: string, objectRecordId: string, attachmentId: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete', { 'objectName': objectName, 'objectRecordId': objectRecordId, 'attachmentId': attachmentId,  });

    const _pathParams = { 
        'object_name': objectName, 
        'object_record_id': objectRecordId, 
        'attachment_id': attachmentId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Object Record Attachment Metadata
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param objectRecordId The object record id field value.
 * @param attachmentId The attachment id field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(fe : ApiExecuterI, objectName: string, objectRecordId: string, attachmentId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet', { 'objectName': objectName, 'objectRecordId': objectRecordId, 'attachmentId': attachmentId,  });

    const _pathParams = { 
        'object_name': objectName, 
        'object_record_id': objectRecordId, 
        'attachment_id': attachmentId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Object Record Attachment Description
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param objectRecordId The object record id field value.
 * @param attachmentId The attachment id field value.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(fe : ApiExecuterI, objectName: string, objectRecordId: string, attachmentId: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut', { 'objectName': objectName, 'objectRecordId': objectRecordId, 'attachmentId': attachmentId,  });

    const _pathParams = { 
        'object_name': objectName, 
        'object_record_id': objectRecordId, 
        'attachment_id': attachmentId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Delete Object Record Attachment Version
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param objectRecordId The object record id field value.
 * @param attachmentId The attachment id field value.
 * @param attachmentVersion The attachment version__v field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(fe : ApiExecuterI, objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete', { 'objectName': objectName, 'objectRecordId': objectRecordId, 'attachmentId': attachmentId, 'attachmentVersion': attachmentVersion,  });

    const _pathParams = { 
        'object_name': objectName, 
        'object_record_id': objectRecordId, 
        'attachment_id': attachmentId, 
        'attachment_version': attachmentVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Download Object Record Attachment File
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param objectRecordId The object record id field value.
 * @param attachmentId The attachment id field value.
 * @param attachmentVersion 
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(fe : ApiExecuterI, objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', { 'objectName': objectName, 'objectRecordId': objectRecordId, 'attachmentId': attachmentId, 'attachmentVersion': attachmentVersion,  });

    const _pathParams = { 
        'object_name': objectName, 
        'object_record_id': objectRecordId, 
        'attachment_id': attachmentId, 
        'attachment_version': attachmentVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Object Record Attachment Version Metadata
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param objectRecordId The object record id field value.
 * @param attachmentId The attachment id field value.
 * @param attachmentVersion The attachment version__v field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(fe : ApiExecuterI, objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet', { 'objectName': objectName, 'objectRecordId': objectRecordId, 'attachmentId': attachmentId, 'attachmentVersion': attachmentVersion,  });

    const _pathParams = { 
        'object_name': objectName, 
        'object_record_id': objectRecordId, 
        'attachment_id': attachmentId, 
        'attachment_version': attachmentVersion };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Restore Object Record Attachment Version
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param objectRecordId The object record id field value.
 * @param attachmentId The attachment id field value.
 * @param attachmentVersion The attachment version__v field value.
 * @param restore 
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(fe : ApiExecuterI, objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, restore: boolean=, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost', { 'objectName': objectName, 'objectRecordId': objectRecordId, 'attachmentId': attachmentId, 'attachmentVersion': attachmentVersion,  });

    const _pathParams = { 
        'object_name': objectName, 
        'object_record_id': objectRecordId, 
        'attachment_id': attachmentId, 
        'attachment_version': attachmentVersion };
    const _queryParams = { 
        'restore': restore };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Object Record Attachment Versions
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param objectRecordId The object record id field value.
 * @param attachmentId The attachment id field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(fe : ApiExecuterI, objectName: string, objectRecordId: string, attachmentId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet', { 'objectName': objectName, 'objectRecordId': objectRecordId, 'attachmentId': attachmentId,  });

    const _pathParams = { 
        'object_name': objectName, 
        'object_record_id': objectRecordId, 
        'attachment_id': attachmentId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Download All Object Record Attachment Files
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param objectRecordId The object record id field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameObjectRecordIdAttachmentsFileGet(fe : ApiExecuterI, objectName: string, objectRecordId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameObjectRecordIdAttachmentsFileGet', { 'objectName': objectName, 'objectRecordId': objectRecordId,  });

    const _pathParams = { 
        'object_name': objectName, 
        'object_record_id': objectRecordId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/vobjects/{object_name}/{object_record_id}/attachments/file',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Object Record Attachments
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param objectRecordId The object record id field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameObjectRecordIdAttachmentsGet(fe : ApiExecuterI, objectName: string, objectRecordId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameObjectRecordIdAttachmentsGet', { 'objectName': objectName, 'objectRecordId': objectRecordId,  });

    const _pathParams = { 
        'object_name': objectName, 
        'object_record_id': objectRecordId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/vobjects/{object_name}/{object_record_id}/attachments',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create Object Record Attachment
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param objectRecordId The object record id field value.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameObjectRecordIdAttachmentsPost(fe : ApiExecuterI, objectName: string, objectRecordId: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameObjectRecordIdAttachmentsPost', { 'objectName': objectName, 'objectRecordId': objectRecordId,  });

    const _pathParams = { 
        'object_name': objectName, 
        'object_record_id': objectRecordId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/vobjects/{object_name}/{object_record_id}/attachments',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Complete Audit History for a Single Object Record
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value.
 * @param objectRecordId The object record id field value from which to retrieve user actions.
 * @param startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. 
 * @param endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
 * @param formatResult To request a CSV file of your audit history, use csv. 
 * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
 * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
 * @param events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;Copy,Edit,Delete. If omitted, defaults to all audit events.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameObjectRecordIdAudittrailGet(fe : ApiExecuterI, objectName: string, objectRecordId: string, startDate: string=, endDate: string=, formatResult: string=, limit: string=, offset: string=, events: string=, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameObjectRecordIdAudittrailGet', { 'objectName': objectName, 'objectRecordId': objectRecordId,  });

    const _pathParams = { 
        'object_name': objectName, 
        'object_record_id': objectRecordId };
    const _queryParams = { 
        'start_date': startDate, 
        'end_date': endDate, 
        'format_result': formatResult, 
        'limit': limit, 
        'offset': offset, 
        'events': events };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/vobjects/{object_name}/{object_record_id}/audittrail',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Object Record
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param objectRecordId The object record id field value.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameObjectRecordIdGet(fe : ApiExecuterI, objectName: string, objectRecordId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameObjectRecordIdGet', { 'objectName': objectName, 'objectRecordId': objectRecordId,  });

    const _pathParams = { 
        'object_name': objectName, 
        'object_record_id': objectRecordId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/vobjects/{object_name}/{object_record_id}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Create & Upsert Object Records
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param idParam To upsert object records, add &#x60;idParam&#x3D;{field_name}&#x60; to the request endpoint. You can use any object field which has &#x60;unique&#x60; set to &#x60;true&#x60; in the object metadata. For example, &#x60;idParam&#x3D;external_id__v&#x60;.
 * @param authorization 
 * @param contentType Can be text/csv or application/json
 * @param accept Can be text/csv or application/json
 * @param xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
 * @param xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNamePost(fe : ApiExecuterI, objectName: string, idParam: string=, authorization: string=, contentType: string=, accept: string=, xVaultAPIMigrationMode: boolean=, xVaultAPINoTriggers: boolean=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNamePost', { 'objectName': objectName,  });

    const _pathParams = { 
        'object_name': objectName };
    const _queryParams = { 
        'idParam': idParam };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-MigrationMode': xVaultAPIMigrationMode, 
        'X-VaultAPI-NoTriggers': xVaultAPINoTriggers, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/vobjects/{object_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Update Object Records
 * @param fe Callback interface that runs the fetch query
 * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
 * @param authorization 
 * @param contentType Can be text/csv or application/json
 * @param accept Can be text/csv or application/json
 * @param xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
 * @param xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNamePut(fe : ApiExecuterI, objectName: string, authorization: string=, contentType: string=, accept: string=, xVaultAPIMigrationMode: boolean=, xVaultAPINoTriggers: boolean=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNamePut', { 'objectName': objectName,  });

    const _pathParams = { 
        'object_name': objectName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Content-Type': contentType, 
        'Accept': accept, 
        'X-VaultAPI-MigrationMode': xVaultAPIMigrationMode, 
        'X-VaultAPI-NoTriggers': xVaultAPINoTriggers, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'PUT', '/api/v25.1' + '/vobjects/{object_name}',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Remove Users & Groups from Roles on Object Records
 * @param fe Callback interface that runs the fetch query
 * @param objectName The name of the object where you want to remove roles.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameRolesDelete(fe : ApiExecuterI, objectName: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameRolesDelete', { 'objectName': objectName,  });

    const _pathParams = { 
        'object_name': objectName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'DELETE', '/api/v25.1' + '/vobjects/{object_name}/roles',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Assign Users & Groups to Roles on Object Records
 * @param fe Callback interface that runs the fetch query
 * @param objectName The name of the object where you want to remove roles.
 * @param authorization 
 * @param accept 
 * @param contentType 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsObjectNameRolesPost(fe : ApiExecuterI, objectName: string, authorization: string=, accept: string=, contentType: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsObjectNameRolesPost', { 'objectName': objectName,  });

    const _pathParams = { 
        'object_name': objectName };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'Content-Type': contentType, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'POST', '/api/v25.1' + '/vobjects/{object_name}/roles',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary Retrieve Outbound Package Dependencies
 * @param fe Callback interface that runs the fetch query
 * @param packageId The ID of the outbound_package__v record from which to retrieve dependencies.
 * @param authorization 
 * @param accept 
 * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
 * @response 200 [undefined] Success
 */
export public async function DefaultApi__vobjectsOutboundPackageVPackageIdDependenciesGet(fe : ApiExecuterI, packageId: string, authorization: string=, accept: string=, xVaultAPIClientID: string=) : Promise<undefined, Object> {
    checkRequiredParams('vobjectsOutboundPackageVPackageIdDependenciesGet', { 'packageId': packageId,  });

    const _pathParams = { 
        'package_id': packageId };
    const _queryParams = { };
    const _headerParams = { 
        'Authorization': authorization, 
        'Accept': accept, 
        'X-VaultAPI-ClientID': xVaultAPIClientID };
    const _body = undefined;

    await fe.exec(
        'GET', '/api/v25.1' + '/vobjects/outbound_package__v/{package_id}/dependencies',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}
