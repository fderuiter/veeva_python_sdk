import { ResponseContext, RequestContext, HttpFile, HttpInfo } from '../http/http';
import { Configuration, ConfigurationOptions, mergeConfiguration } from '../configuration'
import type { Middleware } from '../middleware';
import { Observable, of, from } from '../rxjsStub';
import {mergeMap, map} from  '../rxjsStub';
import { VobjectsObjectNameActionsMergePostRequestInner } from '../models/VobjectsObjectNameActionsMergePostRequestInner';

import { DefaultApiRequestFactory, DefaultApiResponseProcessor} from "../apis/DefaultApi";
export class ObservableDefaultApi {
    private requestFactory: DefaultApiRequestFactory;
    private responseProcessor: DefaultApiResponseProcessor;
    private configuration: Configuration;

    public constructor(
        configuration: Configuration,
        requestFactory?: DefaultApiRequestFactory,
        responseProcessor?: DefaultApiResponseProcessor
    ) {
        this.configuration = configuration;
        this.requestFactory = requestFactory || new DefaultApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new DefaultApiResponseProcessor();
    }

    /**
     * Retrieve API Versions
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public apiGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.apiGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.apiGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve API Versions
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public apiGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.apiGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Content File
     * @param componentTypeAndRecordName The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public apiMdlComponentsComponentTypeAndRecordNameFilesGetWithHttpInfo(componentTypeAndRecordName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.apiMdlComponentsComponentTypeAndRecordNameFilesGet(componentTypeAndRecordName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.apiMdlComponentsComponentTypeAndRecordNameFilesGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Content File
     * @param componentTypeAndRecordName The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public apiMdlComponentsComponentTypeAndRecordNameFilesGet(componentTypeAndRecordName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.apiMdlComponentsComponentTypeAndRecordNameFilesGetWithHttpInfo(componentTypeAndRecordName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Component Record (MDL)
     * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public apiMdlComponentsComponentTypeAndRecordNameGetWithHttpInfo(componentTypeAndRecordName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.apiMdlComponentsComponentTypeAndRecordNameGet(componentTypeAndRecordName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.apiMdlComponentsComponentTypeAndRecordNameGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Component Record (MDL)
     * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public apiMdlComponentsComponentTypeAndRecordNameGet(componentTypeAndRecordName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.apiMdlComponentsComponentTypeAndRecordNameGetWithHttpInfo(componentTypeAndRecordName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Asynchronous MDL Script Results
     * @param jobId
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public apiMdlExecuteAsyncJobIdResultsGetWithHttpInfo(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.apiMdlExecuteAsyncJobIdResultsGet(jobId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.apiMdlExecuteAsyncJobIdResultsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Asynchronous MDL Script Results
     * @param jobId
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public apiMdlExecuteAsyncJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.apiMdlExecuteAsyncJobIdResultsGetWithHttpInfo(jobId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Execute MDL Script Asynchronously
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public apiMdlExecuteAsyncPostWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.apiMdlExecuteAsyncPost(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.apiMdlExecuteAsyncPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Execute MDL Script Asynchronously
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public apiMdlExecuteAsyncPost(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.apiMdlExecuteAsyncPostWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Execute MDL Script
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public apiMdlExecutePostWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.apiMdlExecutePost(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.apiMdlExecutePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Execute MDL Script
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public apiMdlExecutePost(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.apiMdlExecutePostWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Upload Content File
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public apiMdlFilesPostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.apiMdlFilesPost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.apiMdlFilesPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Upload Content File
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public apiMdlFilesPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.apiMdlFilesPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Audit Details
     * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.
     * @param [startDate] Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
     * @param [endDate] Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
     * @param [allDates] Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.
     * @param [formatResult] To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.
     * @param [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
     * @param [objects] This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects&#x3D;product__v,country__v. If omitted, defaults to all objects.
     * @param [events] This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events&#x3D;Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public audittrailAuditTrailTypeGetWithHttpInfo(auditTrailType: string, startDate?: string, endDate?: string, allDates?: string, formatResult?: string, limit?: string, offset?: string, objects?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.audittrailAuditTrailTypeGet(auditTrailType, startDate, endDate, allDates, formatResult, limit, offset, objects, events, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.audittrailAuditTrailTypeGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Audit Details
     * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.
     * @param [startDate] Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
     * @param [endDate] Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
     * @param [allDates] Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.
     * @param [formatResult] To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.
     * @param [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
     * @param [objects] This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects&#x3D;product__v,country__v. If omitted, defaults to all objects.
     * @param [events] This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events&#x3D;Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public audittrailAuditTrailTypeGet(auditTrailType: string, startDate?: string, endDate?: string, allDates?: string, formatResult?: string, limit?: string, offset?: string, objects?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.audittrailAuditTrailTypeGetWithHttpInfo(auditTrailType, startDate, endDate, allDates, formatResult, limit, offset, objects, events, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Authentication Type Discovery
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public authDiscoveryPostWithHttpInfo(accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.authDiscoveryPost(accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.authDiscoveryPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Authentication Type Discovery
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public authDiscoveryPost(accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.authDiscoveryPostWithHttpInfo(accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * OAuth 2.0 / OpenID Connect
     * @param oathOidcProfileId
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public authOauthSessionOathOidcProfileIdPostWithHttpInfo(oathOidcProfileId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.authOauthSessionOathOidcProfileIdPost(oathOidcProfileId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.authOauthSessionOathOidcProfileIdPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * OAuth 2.0 / OpenID Connect
     * @param oathOidcProfileId
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public authOauthSessionOathOidcProfileIdPost(oathOidcProfileId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.authOauthSessionOathOidcProfileIdPostWithHttpInfo(oathOidcProfileId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * User Name and Password
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public authPostWithHttpInfo(contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.authPost(contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.authPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * User Name and Password
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public authPost(contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.authPostWithHttpInfo(contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Single Source Code File
     * @param className The fully qualified class name of your file.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public codeClassNameDeleteWithHttpInfo(className: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.codeClassNameDelete(className, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.codeClassNameDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Single Source Code File
     * @param className The fully qualified class name of your file.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public codeClassNameDelete(className: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.codeClassNameDeleteWithHttpInfo(className, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Disable Vault Extension
     * @param className The fully qualified class name of your file.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public codeClassNameDisablePutWithHttpInfo(className: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.codeClassNameDisablePut(className, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.codeClassNameDisablePutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Disable Vault Extension
     * @param className The fully qualified class name of your file.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public codeClassNameDisablePut(className: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.codeClassNameDisablePutWithHttpInfo(className, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Enable Vault Extension
     * @param className The fully qualified class name of your file.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public codeClassNameEnablePutWithHttpInfo(className: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.codeClassNameEnablePut(className, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.codeClassNameEnablePutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Enable Vault Extension
     * @param className The fully qualified class name of your file.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public codeClassNameEnablePut(className: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.codeClassNameEnablePutWithHttpInfo(className, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Single Source Code File
     * @param className The fully qualified class name of your file.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public codeClassNameGetWithHttpInfo(className: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.codeClassNameGet(className, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.codeClassNameGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Single Source Code File
     * @param className The fully qualified class name of your file.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public codeClassNameGet(className: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.codeClassNameGetWithHttpInfo(className, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve All Profiling Sessions
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public codeProfilerGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.codeProfilerGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.codeProfilerGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve All Profiling Sessions
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public codeProfilerGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.codeProfilerGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Profiling Session
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public codeProfilerPostWithHttpInfo(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.codeProfilerPost(authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.codeProfilerPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Profiling Session
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public codeProfilerPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.codeProfilerPostWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * End Profiling Session
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public codeProfilerSessionNameActionsEndPostWithHttpInfo(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.codeProfilerSessionNameActionsEndPost(sessionName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.codeProfilerSessionNameActionsEndPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * End Profiling Session
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public codeProfilerSessionNameActionsEndPost(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.codeProfilerSessionNameActionsEndPostWithHttpInfo(sessionName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Profiling Session
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public codeProfilerSessionNameDeleteWithHttpInfo(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.codeProfilerSessionNameDelete(sessionName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.codeProfilerSessionNameDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Profiling Session
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public codeProfilerSessionNameDelete(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.codeProfilerSessionNameDeleteWithHttpInfo(sessionName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Profiling Session
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public codeProfilerSessionNameGetWithHttpInfo(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.codeProfilerSessionNameGet(sessionName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.codeProfilerSessionNameGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Profiling Session
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public codeProfilerSessionNameGet(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.codeProfilerSessionNameGetWithHttpInfo(sessionName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Download Profiling Session Results
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public codeProfilerSessionNameResultsGetWithHttpInfo(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.codeProfilerSessionNameResultsGet(sessionName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.codeProfilerSessionNameResultsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Download Profiling Session Results
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public codeProfilerSessionNameResultsGet(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.codeProfilerSessionNameResultsGetWithHttpInfo(sessionName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Add or Replace Single Source Code File
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public codePutWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.codePut(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.codePutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Add or Replace Single Source Code File
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public codePut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.codePutWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Specific Root Nodes
     * @param edlHierarchyOrTemplate Choose to retrieve either edl_hierarchy__v or edl_template__v
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public compositesTreesEdlHierarchyOrTemplateActionsListnodesPostWithHttpInfo(edlHierarchyOrTemplate: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.compositesTreesEdlHierarchyOrTemplateActionsListnodesPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Specific Root Nodes
     * @param edlHierarchyOrTemplate Choose to retrieve either edl_hierarchy__v or edl_template__v
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(edlHierarchyOrTemplate: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.compositesTreesEdlHierarchyOrTemplateActionsListnodesPostWithHttpInfo(edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve All Root Nodes
     * @param edlHierarchyOrTemplate
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public compositesTreesEdlHierarchyOrTemplateGetWithHttpInfo(edlHierarchyOrTemplate: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.compositesTreesEdlHierarchyOrTemplateGet(edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.compositesTreesEdlHierarchyOrTemplateGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve All Root Nodes
     * @param edlHierarchyOrTemplate
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public compositesTreesEdlHierarchyOrTemplateGet(edlHierarchyOrTemplate: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.compositesTreesEdlHierarchyOrTemplateGetWithHttpInfo(edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve a Node\'s Children
     * @param parentNodeId The ID of a parent node in the hierarchy.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public compositesTreesEdlHierarchyVParentNodeIdChildrenGetWithHttpInfo(parentNodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.compositesTreesEdlHierarchyVParentNodeIdChildrenGet(parentNodeId, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.compositesTreesEdlHierarchyVParentNodeIdChildrenGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve a Node\'s Children
     * @param parentNodeId The ID of a parent node in the hierarchy.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public compositesTreesEdlHierarchyVParentNodeIdChildrenGet(parentNodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.compositesTreesEdlHierarchyVParentNodeIdChildrenGetWithHttpInfo(parentNodeId, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Node Order
     * @param parentNodeId The ID of a parent node in the hierarchy.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public compositesTreesEdlHierarchyVParentNodeIdChildrenPutWithHttpInfo(parentNodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.compositesTreesEdlHierarchyVParentNodeIdChildrenPut(parentNodeId, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.compositesTreesEdlHierarchyVParentNodeIdChildrenPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Node Order
     * @param parentNodeId The ID of a parent node in the hierarchy.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public compositesTreesEdlHierarchyVParentNodeIdChildrenPut(parentNodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.compositesTreesEdlHierarchyVParentNodeIdChildrenPutWithHttpInfo(parentNodeId, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Component Record (XML/JSON)
     * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
     * @param [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public configurationComponentTypeAndRecordNameGetWithHttpInfo(componentTypeAndRecordName: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.configurationComponentTypeAndRecordNameGet(componentTypeAndRecordName, loc, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.configurationComponentTypeAndRecordNameGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Component Record (XML/JSON)
     * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
     * @param [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public configurationComponentTypeAndRecordNameGet(componentTypeAndRecordName: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.configurationComponentTypeAndRecordNameGetWithHttpInfo(componentTypeAndRecordName, loc, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Component Record Collection
     * @param componentType
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public configurationComponentTypeGetWithHttpInfo(componentType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.configurationComponentTypeGet(componentType, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.configurationComponentTypeGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Component Record Collection
     * @param componentType
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public configurationComponentTypeGet(componentType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.configurationComponentTypeGetWithHttpInfo(componentType, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Details from a Specific Object
     * @param objectNameAndObjectType The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;.
     * @param [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public configurationObjectNameAndObjectTypeGetWithHttpInfo(objectNameAndObjectType: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.configurationObjectNameAndObjectTypeGet(objectNameAndObjectType, loc, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.configurationObjectNameAndObjectTypeGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Details from a Specific Object
     * @param objectNameAndObjectType The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;.
     * @param [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public configurationObjectNameAndObjectTypeGet(objectNameAndObjectType: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.configurationObjectNameAndObjectTypeGetWithHttpInfo(objectNameAndObjectType, loc, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Details from All Object Types
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public configurationObjecttypeGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.configurationObjecttypeGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.configurationObjecttypeGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Details from All Object Types
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public configurationObjecttypeGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.configurationObjecttypeGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Lifecycle Role Assignment Override Rules
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public configurationRoleAssignmentRuleDeleteWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.configurationRoleAssignmentRuleDelete(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.configurationRoleAssignmentRuleDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Lifecycle Role Assignment Override Rules
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public configurationRoleAssignmentRuleDelete(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.configurationRoleAssignmentRuleDeleteWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Lifecycle Role Assignment Rules (Default & Override)
     * @param [lifecycleV] Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v&#x3D;general_lifecycle__c
     * @param [roleV] Include the name of the role from which to retrieve information. For example: role__v&#x3D;editor__c
     * @param [productV] Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v&#x3D;0PR0011001 or product__v.name__v&#x3D;CholeCap
     * @param [countryV] Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v&#x3D;0CR0022002 or country__v.name__v&#x3D;United States
     * @param [studyV] In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v&#x3D;0ST0021J01 or study__v.name__v&#x3D;CholeCap Study
     * @param [studyCountryV] In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v&#x3D;0SC0001001 or study_country__v.name__v&#x3D;Germany
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public configurationRoleAssignmentRuleGetWithHttpInfo(lifecycleV?: string, roleV?: string, productV?: string, countryV?: string, studyV?: string, studyCountryV?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.configurationRoleAssignmentRuleGet(lifecycleV, roleV, productV, countryV, studyV, studyCountryV, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.configurationRoleAssignmentRuleGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Lifecycle Role Assignment Rules (Default & Override)
     * @param [lifecycleV] Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v&#x3D;general_lifecycle__c
     * @param [roleV] Include the name of the role from which to retrieve information. For example: role__v&#x3D;editor__c
     * @param [productV] Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v&#x3D;0PR0011001 or product__v.name__v&#x3D;CholeCap
     * @param [countryV] Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v&#x3D;0CR0022002 or country__v.name__v&#x3D;United States
     * @param [studyV] In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v&#x3D;0ST0021J01 or study__v.name__v&#x3D;CholeCap Study
     * @param [studyCountryV] In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v&#x3D;0SC0001001 or study_country__v.name__v&#x3D;Germany
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public configurationRoleAssignmentRuleGet(lifecycleV?: string, roleV?: string, productV?: string, countryV?: string, studyV?: string, studyCountryV?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.configurationRoleAssignmentRuleGetWithHttpInfo(lifecycleV, roleV, productV, countryV, studyV, studyCountryV, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Lifecycle Role Assignment Override Rules
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public configurationRoleAssignmentRulePostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.configurationRoleAssignmentRulePost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.configurationRoleAssignmentRulePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Lifecycle Role Assignment Override Rules
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public configurationRoleAssignmentRulePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.configurationRoleAssignmentRulePostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Lifecycle Role Assignment Rules (Default & Override)
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public configurationRoleAssignmentRulePutWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.configurationRoleAssignmentRulePut(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.configurationRoleAssignmentRulePutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Lifecycle Role Assignment Rules (Default & Override)
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public configurationRoleAssignmentRulePut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.configurationRoleAssignmentRulePutWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Initiate Delegated Session
     * @param [authorization] The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public delegationLoginPostWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.delegationLoginPost(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.delegationLoginPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Initiate Delegated Session
     * @param [authorization] The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public delegationLoginPost(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.delegationLoginPostWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Delegations
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public delegationVaultsGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.delegationVaultsGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.delegationVaultsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Delegations
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public delegationVaultsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.delegationVaultsGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Session Keep Alive
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public keepAlivePostWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.keepAlivePost(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.keepAlivePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Session Keep Alive
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public keepAlivePost(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.keepAlivePostWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Limits on Objects
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public limitsGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.limitsGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.limitsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Limits on Objects
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public limitsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.limitsGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Download Daily API Usage
     * @param [date] The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.
     * @param [logFormat] Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public logsApiUsageGetWithHttpInfo(date?: string, logFormat?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.logsApiUsageGet(date, logFormat, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.logsApiUsageGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Download Daily API Usage
     * @param [date] The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.
     * @param [logFormat] Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public logsApiUsageGet(date?: string, logFormat?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.logsApiUsageGetWithHttpInfo(date, logFormat, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve All Debug Logs
     * @param [userId] Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.
     * @param [includeInactive] Set to &#x60;true&#x60; to include debug log sessions with a status of &#x60;inactive__sys&#x60; in the response. If omitted, defaults to &#x60;false&#x60; and inactive sessions are not included in the response.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public logsCodeDebugGetWithHttpInfo(userId?: string, includeInactive?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.logsCodeDebugGet(userId, includeInactive, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.logsCodeDebugGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve All Debug Logs
     * @param [userId] Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.
     * @param [includeInactive] Set to &#x60;true&#x60; to include debug log sessions with a status of &#x60;inactive__sys&#x60; in the response. If omitted, defaults to &#x60;false&#x60; and inactive sessions are not included in the response.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public logsCodeDebugGet(userId?: string, includeInactive?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.logsCodeDebugGetWithHttpInfo(userId, includeInactive, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Debug Log
     * @param id The ID of the debug log to delete.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public logsCodeDebugIdActionsResetDeleteWithHttpInfo(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.logsCodeDebugIdActionsResetDelete(id, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.logsCodeDebugIdActionsResetDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Debug Log
     * @param id The ID of the debug log to delete.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public logsCodeDebugIdActionsResetDelete(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.logsCodeDebugIdActionsResetDeleteWithHttpInfo(id, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Reset Debug Log
     * @param id The ID of the debug log to delete.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public logsCodeDebugIdActionsResetPostWithHttpInfo(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.logsCodeDebugIdActionsResetPost(id, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.logsCodeDebugIdActionsResetPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Reset Debug Log
     * @param id The ID of the debug log to delete.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public logsCodeDebugIdActionsResetPost(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.logsCodeDebugIdActionsResetPostWithHttpInfo(id, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Download Debug Log Files
     * @param id The ID of the debug log to download.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public logsCodeDebugIdFilesGetWithHttpInfo(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.logsCodeDebugIdFilesGet(id, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.logsCodeDebugIdFilesGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Download Debug Log Files
     * @param id The ID of the debug log to download.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public logsCodeDebugIdFilesGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.logsCodeDebugIdFilesGetWithHttpInfo(id, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Single Debug Log
     * @param id The ID of the debug log to retrieve.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public logsCodeDebugIdGetWithHttpInfo(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.logsCodeDebugIdGet(id, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.logsCodeDebugIdGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Single Debug Log
     * @param id The ID of the debug log to retrieve.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public logsCodeDebugIdGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.logsCodeDebugIdGetWithHttpInfo(id, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Debug Log
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public logsCodeDebugPostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.logsCodeDebugPost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.logsCodeDebugPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Debug Log
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public logsCodeDebugPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.logsCodeDebugPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Download SDK Runtime Log
     * @param [date]
     * @param [logFormat] Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public logsCodeRuntimeGetWithHttpInfo(date?: string, logFormat?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.logsCodeRuntimeGet(date, logFormat, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.logsCodeRuntimeGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Download SDK Runtime Log
     * @param [date]
     * @param [logFormat] Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public logsCodeRuntimeGet(date?: string, logFormat?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.logsCodeRuntimeGetWithHttpInfo(date, logFormat, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Import Bulk Translation File
     * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public messagesMessageTypeActionsImportPostWithHttpInfo(messageType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.messagesMessageTypeActionsImportPost(messageType, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.messagesMessageTypeActionsImportPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Import Bulk Translation File
     * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public messagesMessageTypeActionsImportPost(messageType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.messagesMessageTypeActionsImportPostWithHttpInfo(messageType, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Export Bulk Translation File
     * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
     * @param lang A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public messagesMessageTypeLanguageLangActionsExportPostWithHttpInfo(messageType: string, lang: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.messagesMessageTypeLanguageLangActionsExportPost(messageType, lang, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.messagesMessageTypeLanguageLangActionsExportPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Export Bulk Translation File
     * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
     * @param lang A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public messagesMessageTypeLanguageLangActionsExportPost(messageType: string, lang: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.messagesMessageTypeLanguageLangActionsExportPostWithHttpInfo(messageType, lang, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Audit Metadata
     * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc).
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataAudittrailAuditTrailTypeGetWithHttpInfo(auditTrailType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataAudittrailAuditTrailTypeGet(auditTrailType, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataAudittrailAuditTrailTypeGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Audit Metadata
     * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc).
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataAudittrailAuditTrailTypeGet(auditTrailType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataAudittrailAuditTrailTypeGetWithHttpInfo(auditTrailType, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Audit Types
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataAudittrailGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataAudittrailGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataAudittrailGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Audit Types
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataAudittrailGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataAudittrailGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Component Type Metadata
     * @param componentType The component type name (Picklist, Docfield, Doctype, etc.).
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataComponentsComponentTypeGetWithHttpInfo(componentType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataComponentsComponentTypeGet(componentType, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataComponentsComponentTypeGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Component Type Metadata
     * @param componentType The component type name (Picklist, Docfield, Doctype, etc.).
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataComponentsComponentTypeGet(componentType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataComponentsComponentTypeGetWithHttpInfo(componentType, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve All Component Metadata
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataComponentsGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataComponentsGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataComponentsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve All Component Metadata
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataComponentsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataComponentsGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Binder Template Node Metadata
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsBindersTemplatesBindernodesGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataObjectsBindersTemplatesBindernodesGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataObjectsBindersTemplatesBindernodesGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Binder Template Node Metadata
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsBindersTemplatesBindernodesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataObjectsBindersTemplatesBindernodesGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Binder Template Metadata
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsBindersTemplatesGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataObjectsBindersTemplatesGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataObjectsBindersTemplatesGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Binder Template Metadata
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsBindersTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataObjectsBindersTemplatesGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Annotation Placemark Type Metadata
     * @param placemarkType The name of the placemark type. For example, sticky__sys.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetWithHttpInfo(placemarkType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(placemarkType, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Annotation Placemark Type Metadata
     * @param placemarkType The name of the placemark type. For example, sticky__sys.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(placemarkType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetWithHttpInfo(placemarkType, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Annotation Reference Type Metadata
     * @param referenceType
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetWithHttpInfo(referenceType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(referenceType, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Annotation Reference Type Metadata
     * @param referenceType
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(referenceType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetWithHttpInfo(referenceType, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Annotation Type Metadata
     * @param annotationType The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetWithHttpInfo(annotationType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(annotationType, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Annotation Type Metadata
     * @param annotationType The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(annotationType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetWithHttpInfo(annotationType, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Event SubType Metadata
     * @param eventType The event type. For example, distribution__v.
     * @param eventSubtype The event subtype. For example, approved_email__v.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetWithHttpInfo(eventType: string, eventSubtype: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(eventType, eventSubtype, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Event SubType Metadata
     * @param eventType The event type. For example, distribution__v.
     * @param eventSubtype The event subtype. For example, approved_email__v.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(eventType: string, eventSubtype: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetWithHttpInfo(eventType, eventSubtype, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Event Types and Subtypes
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsEventsGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataObjectsDocumentsEventsGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataObjectsDocumentsEventsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Event Types and Subtypes
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsEventsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataObjectsDocumentsEventsGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Lock Metadata
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsLockGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataObjectsDocumentsLockGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataObjectsDocumentsLockGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Lock Metadata
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsLockGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataObjectsDocumentsLockGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Common Document Fields
     * @param [contentType]
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsPropertiesFindCommonPostWithHttpInfo(contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataObjectsDocumentsPropertiesFindCommonPost(contentType, accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataObjectsDocumentsPropertiesFindCommonPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Common Document Fields
     * @param [contentType]
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsPropertiesFindCommonPost(contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataObjectsDocumentsPropertiesFindCommonPostWithHttpInfo(contentType, accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve All Document Fields
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsPropertiesGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataObjectsDocumentsPropertiesGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataObjectsDocumentsPropertiesGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve All Document Fields
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsPropertiesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataObjectsDocumentsPropertiesGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Template Metadata
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsTemplatesGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataObjectsDocumentsTemplatesGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataObjectsDocumentsTemplatesGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Template Metadata
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataObjectsDocumentsTemplatesGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve All Document Types
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsTypesGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataObjectsDocumentsTypesGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataObjectsDocumentsTypesGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve All Document Types
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsTypesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataObjectsDocumentsTypesGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Type
     * @param type The document type. See Retrieve Document Types.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsTypesTypeGetWithHttpInfo(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataObjectsDocumentsTypesTypeGet(type, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataObjectsDocumentsTypesTypeGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Type
     * @param type The document type. See Retrieve Document Types.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsTypesTypeGet(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataObjectsDocumentsTypesTypeGetWithHttpInfo(type, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Type Relationships
     * @param type The document type. See Retrieve Document Types.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsTypesTypeRelationshipsGetWithHttpInfo(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataObjectsDocumentsTypesTypeRelationshipsGet(type, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataObjectsDocumentsTypesTypeRelationshipsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Type Relationships
     * @param type The document type. See Retrieve Document Types.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsTypesTypeRelationshipsGet(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataObjectsDocumentsTypesTypeRelationshipsGetWithHttpInfo(type, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Classification
     * @param type The document type. See Retrieve Document Types.
     * @param subtype The document subtype. See Retrieve Document Types.
     * @param classification The document classification. See Retrieve Document Types.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetWithHttpInfo(type: string, subtype: string, classification: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(type, subtype, classification, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Classification
     * @param type The document type. See Retrieve Document Types.
     * @param subtype The document subtype. See Retrieve Document Types.
     * @param classification The document classification. See Retrieve Document Types.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(type: string, subtype: string, classification: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetWithHttpInfo(type, subtype, classification, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Subtype
     * @param type The document type. See Retrieve Document Types.
     * @param subtype The document subtype. See Retrieve Document Types.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetWithHttpInfo(type: string, subtype: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(type, subtype, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Subtype
     * @param type The document type. See Retrieve Document Types.
     * @param subtype The document subtype. See Retrieve Document Types.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(type: string, subtype: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetWithHttpInfo(type, subtype, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Group Metadata
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsGroupsGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataObjectsGroupsGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataObjectsGroupsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Group Metadata
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsGroupsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataObjectsGroupsGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Security Policy Metadata
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsSecuritypoliciesGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataObjectsSecuritypoliciesGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataObjectsSecuritypoliciesGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Security Policy Metadata
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsSecuritypoliciesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataObjectsSecuritypoliciesGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve User Metadata
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsUsersGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataObjectsUsersGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataObjectsUsersGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve User Metadata
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataObjectsUsersGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataObjectsUsersGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Archived Document Signature Metadata
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Archived Document Signature Metadata
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Signature Metadata
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Signature Metadata
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Object Collection
     * @param [loc] To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataVobjectsGetWithHttpInfo(loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataVobjectsGet(loc, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataVobjectsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Object Collection
     * @param [loc] To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataVobjectsGet(loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataVobjectsGetWithHttpInfo(loc, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Cancel Raw Object Deployment
     * @param objectName
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataVobjectsObjectNameActionsCanceldeploymentPostWithHttpInfo(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataVobjectsObjectNameActionsCanceldeploymentPost(objectName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataVobjectsObjectNameActionsCanceldeploymentPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Cancel Raw Object Deployment
     * @param objectName
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataVobjectsObjectNameActionsCanceldeploymentPost(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataVobjectsObjectNameActionsCanceldeploymentPostWithHttpInfo(objectName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Object Field Metadata
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectFieldName The object field name value (id, name__v, external_id__v, etc.).
     * @param [loc] To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataVobjectsObjectNameFieldsObjectFieldNameGetWithHttpInfo(objectName: string, objectFieldName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataVobjectsObjectNameFieldsObjectFieldNameGet(objectName, objectFieldName, loc, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataVobjectsObjectNameFieldsObjectFieldNameGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Object Field Metadata
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectFieldName The object field name value (id, name__v, external_id__v, etc.).
     * @param [loc] To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataVobjectsObjectNameFieldsObjectFieldNameGet(objectName: string, objectFieldName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataVobjectsObjectNameFieldsObjectFieldNameGetWithHttpInfo(objectName, objectFieldName, loc, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Object Metadata
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param [loc] To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataVobjectsObjectNameGetWithHttpInfo(objectName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataVobjectsObjectNameGet(objectName, loc, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataVobjectsObjectNameGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Object Metadata
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param [loc] To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataVobjectsObjectNameGet(objectName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataVobjectsObjectNameGetWithHttpInfo(objectName, loc, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Page Layouts
     * @param objectName
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataVobjectsObjectNamePageLayoutsGetWithHttpInfo(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataVobjectsObjectNamePageLayoutsGet(objectName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataVobjectsObjectNamePageLayoutsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Page Layouts
     * @param objectName
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataVobjectsObjectNamePageLayoutsGet(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataVobjectsObjectNamePageLayoutsGetWithHttpInfo(objectName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Page Layout Metadata
     * @param objectName The name of the object from which to retrieve page layout metadata.
     * @param layoutName The name of the page layout from which to retrieve metadata.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataVobjectsObjectNamePageLayoutsLayoutNameGetWithHttpInfo(objectName: string, layoutName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.metadataVobjectsObjectNamePageLayoutsLayoutNameGet(objectName, layoutName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.metadataVobjectsObjectNamePageLayoutsLayoutNameGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Page Layout Metadata
     * @param objectName The name of the object from which to retrieve page layout metadata.
     * @param layoutName The name of the page layout from which to retrieve metadata.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public metadataVobjectsObjectNamePageLayoutsLayoutNameGet(objectName: string, layoutName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.metadataVobjectsObjectNamePageLayoutsLayoutNameGetWithHttpInfo(objectName, layoutName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Email Notification Histories
     * @param [startDate] Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.
     * @param [endDate] Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.
     * @param [allDates] Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.
     * @param [formatResult] To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.
     * @param [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public notificationsHistoriesGetWithHttpInfo(startDate?: string, endDate?: string, allDates?: boolean, formatResult?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.notificationsHistoriesGet(startDate, endDate, allDates, formatResult, limit, offset, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.notificationsHistoriesGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Email Notification Histories
     * @param [startDate] Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.
     * @param [endDate] Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.
     * @param [allDates] Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.
     * @param [formatResult] To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.
     * @param [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public notificationsHistoriesGet(startDate?: string, endDate?: string, allDates?: boolean, formatResult?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.notificationsHistoriesGetWithHttpInfo(startDate, endDate, allDates, formatResult, limit, offset, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Bulk Workflow Action Details
     * @param action
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectWorkflowActionsActionGetWithHttpInfo(action: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectWorkflowActionsActionGet(action, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectWorkflowActionsActionGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Bulk Workflow Action Details
     * @param action
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectWorkflowActionsActionGet(action: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectWorkflowActionsActionGetWithHttpInfo(action, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Initiate Workflow Actions on Multiple Workflows
     * @param action
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectWorkflowActionsActionPostWithHttpInfo(action: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectWorkflowActionsActionPost(action, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectWorkflowActionsActionPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Initiate Workflow Actions on Multiple Workflows
     * @param action
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectWorkflowActionsActionPost(action: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectWorkflowActionsActionPostWithHttpInfo(action, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Cancel Workflow Tasks
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectWorkflowActionsCanceltasksPostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectWorkflowActionsCanceltasksPost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectWorkflowActionsCanceltasksPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Cancel Workflow Tasks
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectWorkflowActionsCanceltasksPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectWorkflowActionsCanceltasksPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Cancel Workflows
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectWorkflowActionsCancelworkflowsPostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectWorkflowActionsCancelworkflowsPost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectWorkflowActionsCancelworkflowsPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Cancel Workflows
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectWorkflowActionsCancelworkflowsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectWorkflowActionsCancelworkflowsPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Bulk Workflow Actions
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectWorkflowActionsGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectWorkflowActionsGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectWorkflowActionsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Bulk Workflow Actions
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectWorkflowActionsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectWorkflowActionsGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Reassign Workflow Tasks
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectWorkflowActionsReassigntasksPostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectWorkflowActionsReassigntasksPost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectWorkflowActionsReassigntasksPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Reassign Workflow Tasks
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectWorkflowActionsReassigntasksPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectWorkflowActionsReassigntasksPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Replace Workflow Owner
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectWorkflowActionsReplaceworkflowownerPostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectWorkflowActionsReplaceworkflowownerPost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectWorkflowActionsReplaceworkflowownerPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Replace Workflow Owner
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectWorkflowActionsReplaceworkflowownerPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectWorkflowActionsReplaceworkflowownerPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Binder Export Results
     * @param jobId The id value of the requested export job. This is returned with the export binder requests above.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersActionsExportJobIdResultsGetWithHttpInfo(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersActionsExportJobIdResultsGet(jobId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersActionsExportJobIdResultsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Binder Export Results
     * @param jobId The id value of the requested export job. This is returned with the export binder requests above.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersActionsExportJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersActionsExportJobIdResultsGetWithHttpInfo(jobId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Export Binder (Latest Version)
     * @param binderId The binder id field value.
     * @param [source] to include source content or not
     * @param [renditiontype] to include viewable renditions
     * @param [docversion] to include all major versions
     * @param [attachments] to include all versions of attachments
     * @param [_export] configurable filename metadata
     * @param [docfield] to exclude document metadata csv
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdActionsExportPostWithHttpInfo(binderId: string, source?: boolean, renditiontype?: string, docversion?: string, attachments?: string, _export?: string, docfield?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersBinderIdActionsExportPost(binderId, source, renditiontype, docversion, attachments, _export, docfield, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersBinderIdActionsExportPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Export Binder (Latest Version)
     * @param binderId The binder id field value.
     * @param [source] to include source content or not
     * @param [renditiontype] to include viewable renditions
     * @param [docversion] to include all major versions
     * @param [attachments] to include all versions of attachments
     * @param [_export] configurable filename metadata
     * @param [docfield] to exclude document metadata csv
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdActionsExportPost(binderId: string, source?: boolean, renditiontype?: string, docversion?: string, attachments?: string, _export?: string, docfield?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersBinderIdActionsExportPostWithHttpInfo(binderId, source, renditiontype, docversion, attachments, _export, docfield, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Refresh Binder Auto-Filing
     * @param binderId The binder id field value.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdActionsPostWithHttpInfo(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersBinderIdActionsPost(binderId, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersBinderIdActionsPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Refresh Binder Auto-Filing
     * @param binderId The binder id field value.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdActionsPost(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersBinderIdActionsPostWithHttpInfo(binderId, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Binding Rule
     * @param binderId The binder id field value.
     * @param [contentType]
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdBindingRulePutWithHttpInfo(binderId: string, contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersBinderIdBindingRulePut(binderId, contentType, accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersBinderIdBindingRulePutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Binding Rule
     * @param binderId The binder id field value.
     * @param [contentType]
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdBindingRulePut(binderId: string, contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersBinderIdBindingRulePutWithHttpInfo(binderId, contentType, accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Binder
     * @param binderId The binder id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdDeleteWithHttpInfo(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersBinderIdDelete(binderId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersBinderIdDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Binder
     * @param binderId The binder id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdDelete(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersBinderIdDeleteWithHttpInfo(binderId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Binder Document Binding Rule
     * @param binderId The binder id field value.
     * @param nodeId The binder node id field value.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdDocumentsNodeIdBindingRulePutWithHttpInfo(binderId: string, nodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersBinderIdDocumentsNodeIdBindingRulePut(binderId, nodeId, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersBinderIdDocumentsNodeIdBindingRulePutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Binder Document Binding Rule
     * @param binderId The binder id field value.
     * @param nodeId The binder node id field value.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdDocumentsNodeIdBindingRulePut(binderId: string, nodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersBinderIdDocumentsNodeIdBindingRulePutWithHttpInfo(binderId, nodeId, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Add Document to Binder
     * @param binderId The binder id field value.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdDocumentsPostWithHttpInfo(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersBinderIdDocumentsPost(binderId, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersBinderIdDocumentsPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Add Document to Binder
     * @param binderId The binder id field value.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdDocumentsPost(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersBinderIdDocumentsPostWithHttpInfo(binderId, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Remove Document from Binder
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdDocumentsSectionIdDeleteWithHttpInfo(binderId: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersBinderIdDocumentsSectionIdDelete(binderId, sectionId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersBinderIdDocumentsSectionIdDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Remove Document from Binder
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdDocumentsSectionIdDelete(binderId: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersBinderIdDocumentsSectionIdDeleteWithHttpInfo(binderId, sectionId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Move Document in Binder
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdDocumentsSectionIdPutWithHttpInfo(binderId: string, sectionId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersBinderIdDocumentsSectionIdPut(binderId, sectionId, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersBinderIdDocumentsSectionIdPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Move Document in Binder
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdDocumentsSectionIdPut(binderId: string, sectionId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersBinderIdDocumentsSectionIdPutWithHttpInfo(binderId, sectionId, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Binder
     * @param binderId The binder id field value.
     * @param [depth] To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdGetWithHttpInfo(binderId: string, depth?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersBinderIdGet(binderId, depth, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersBinderIdGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Binder
     * @param binderId The binder id field value.
     * @param [depth] To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdGet(binderId: string, depth?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersBinderIdGetWithHttpInfo(binderId, depth, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Binder Version
     * @param binderId The binder id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdPostWithHttpInfo(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersBinderIdPost(binderId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersBinderIdPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Binder Version
     * @param binderId The binder id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdPost(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersBinderIdPostWithHttpInfo(binderId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Binder
     * @param binderId The binder id field value.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdPutWithHttpInfo(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersBinderIdPut(binderId, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersBinderIdPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Binder
     * @param binderId The binder id field value.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdPut(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersBinderIdPutWithHttpInfo(binderId, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Remove Users & Groups from Roles on a Single Binder
     * @param binderId The id value of the binder from which to remove roles.
     * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
     * @param id The id value of the user or group to remove from the role.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteWithHttpInfo(binderId: string, roleNameAndUserOrGroup: string, id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(binderId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Remove Users & Groups from Roles on a Single Binder
     * @param binderId The id value of the binder from which to remove roles.
     * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
     * @param id The id value of the user or group to remove from the role.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(binderId: string, roleNameAndUserOrGroup: string, id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteWithHttpInfo(binderId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Binder Section Binding Rule
     * @param binderId The binder id field value.
     * @param nodeId The binder node id field value.
     * @param [contentType]
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdSectionsNodeIdBindingRulePutWithHttpInfo(binderId: string, nodeId: string, contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersBinderIdSectionsNodeIdBindingRulePut(binderId, nodeId, contentType, accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersBinderIdSectionsNodeIdBindingRulePutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Binder Section Binding Rule
     * @param binderId The binder id field value.
     * @param nodeId The binder node id field value.
     * @param [contentType]
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdSectionsNodeIdBindingRulePut(binderId: string, nodeId: string, contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersBinderIdSectionsNodeIdBindingRulePutWithHttpInfo(binderId, nodeId, contentType, accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Binder Section
     * @param binderId The binder id field value.
     * @param nodeId The binder node id of the section.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdSectionsNodeIdPutWithHttpInfo(binderId: string, nodeId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersBinderIdSectionsNodeIdPut(binderId, nodeId, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersBinderIdSectionsNodeIdPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Binder Section
     * @param binderId The binder id field value.
     * @param nodeId The binder node id of the section.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdSectionsNodeIdPut(binderId: string, nodeId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersBinderIdSectionsNodeIdPutWithHttpInfo(binderId, nodeId, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Binder Section
     * @param binderId The binder id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdSectionsPostWithHttpInfo(binderId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersBinderIdSectionsPost(binderId, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersBinderIdSectionsPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Binder Section
     * @param binderId The binder id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdSectionsPost(binderId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersBinderIdSectionsPostWithHttpInfo(binderId, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Binder Section
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdSectionsSectionIdDeleteWithHttpInfo(binderId: string, sectionId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersBinderIdSectionsSectionIdDelete(binderId, sectionId, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersBinderIdSectionsSectionIdDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Binder Section
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdSectionsSectionIdDelete(binderId: string, sectionId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersBinderIdSectionsSectionIdDeleteWithHttpInfo(binderId, sectionId, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Binder Sections
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdSectionsSectionIdGetWithHttpInfo(binderId: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersBinderIdSectionsSectionIdGet(binderId, sectionId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersBinderIdSectionsSectionIdGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Binder Sections
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdSectionsSectionIdGet(binderId: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersBinderIdSectionsSectionIdGetWithHttpInfo(binderId, sectionId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve All Binder Versions
     * @param binderId The binder id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdVersionsGetWithHttpInfo(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersBinderIdVersionsGet(binderId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersBinderIdVersionsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve All Binder Versions
     * @param binderId The binder id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdVersionsGet(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersBinderIdVersionsGetWithHttpInfo(binderId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Export Binder (Specific Version)
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param [source] to include source content or not
     * @param [renditiontype] to include viewable renditions
     * @param [docversion] to include all major versions
     * @param [attachments] to include all versions of attachments
     * @param [_export] configurable filename metadata
     * @param [docfield] to exclude document metadata csv
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostWithHttpInfo(binderId: string, majorVersion: string, minorVersion: string, source?: boolean, renditiontype?: string, docversion?: string, attachments?: string, _export?: string, docfield?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(binderId, majorVersion, minorVersion, source, renditiontype, docversion, attachments, _export, docfield, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Export Binder (Specific Version)
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param [source] to include source content or not
     * @param [renditiontype] to include viewable renditions
     * @param [docversion] to include all major versions
     * @param [attachments] to include all versions of attachments
     * @param [_export] configurable filename metadata
     * @param [docfield] to exclude document metadata csv
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(binderId: string, majorVersion: string, minorVersion: string, source?: boolean, renditiontype?: string, docversion?: string, attachments?: string, _export?: string, docfield?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostWithHttpInfo(binderId, majorVersion, minorVersion, source, renditiontype, docversion, attachments, _export, docfield, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Binder Version
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteWithHttpInfo(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Binder Version
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteWithHttpInfo(binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Binder Version
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionGetWithHttpInfo(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersBinderIdVersionsMajorVersionMinorVersionGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Binder Version
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersBinderIdVersionsMajorVersionMinorVersionGetWithHttpInfo(binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Binder Version
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionPutWithHttpInfo(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersBinderIdVersionsMajorVersionMinorVersionPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Binder Version
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersBinderIdVersionsMajorVersionMinorVersionPutWithHttpInfo(binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Binder Relationship
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostWithHttpInfo(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Binder Relationship
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostWithHttpInfo(binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Binder Relationship
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param relationshipId The binder relationship id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteWithHttpInfo(binderId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Binder Relationship
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param relationshipId The binder relationship id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(binderId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteWithHttpInfo(binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Binder Relationship
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param relationshipId The binder relationship id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetWithHttpInfo(binderId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Binder Relationship
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param relationshipId The binder relationship id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(binderId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetWithHttpInfo(binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Binder Version Section
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param sectionId Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetWithHttpInfo(binderId: string, majorVersion: string, minorVersion: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(binderId, majorVersion, minorVersion, sectionId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Binder Version Section
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param sectionId Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(binderId: string, majorVersion: string, minorVersion: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetWithHttpInfo(binderId, majorVersion, minorVersion, sectionId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve All Binder Roles
     * @param id
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersIdRolesGetWithHttpInfo(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersIdRolesGet(id, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersIdRolesGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve All Binder Roles
     * @param id
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersIdRolesGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersIdRolesGetWithHttpInfo(id, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Assign Users & Groups to Roles on a Single Binder
     * @param id
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersIdRolesPostWithHttpInfo(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersIdRolesPost(id, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersIdRolesPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Assign Users & Groups to Roles on a Single Binder
     * @param id
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersIdRolesPost(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersIdRolesPostWithHttpInfo(id, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Role
     * @param id The binder &#x60;id&#x60;.
     * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersIdRolesRoleNameGetWithHttpInfo(id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersIdRolesRoleNameGet(id, roleName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersIdRolesRoleNameGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Role
     * @param id The binder &#x60;id&#x60;.
     * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersIdRolesRoleNameGet(id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersIdRolesRoleNameGetWithHttpInfo(id, roleName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Binder User Actions
     * @param id The binder id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the binder.
     * @param minorVersion The minor version number of the binder.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetWithHttpInfo(id: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Binder User Actions
     * @param id The binder id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the binder.
     * @param minorVersion The minor version number of the binder.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetWithHttpInfo(id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Binder Entry Criteria
     * @param id The binder id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the binder.
     * @param minorVersion The minor version number of the binder.
     * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetWithHttpInfo(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Binder Entry Criteria
     * @param id The binder id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the binder.
     * @param minorVersion The minor version number of the binder.
     * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetWithHttpInfo(id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Initiate Binder User Action
     * @param id The binder id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the binder.
     * @param minorVersion The minor version number of the binder.
     * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutWithHttpInfo(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Initiate Binder User Action
     * @param id The binder id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the binder.
     * @param minorVersion The minor version number of the binder.
     * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutWithHttpInfo(id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve User Actions on Multiple Binders
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersLifecycleActionsPostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersLifecycleActionsPost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersLifecycleActionsPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve User Actions on Multiple Binders
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersLifecycleActionsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersLifecycleActionsPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Initiate Bulk Binder User Actions
     * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersLifecycleActionsUserActionNamePutWithHttpInfo(userActionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersLifecycleActionsUserActionNamePut(userActionName, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersLifecycleActionsUserActionNamePutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Initiate Bulk Binder User Actions
     * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersLifecycleActionsUserActionNamePut(userActionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersLifecycleActionsUserActionNamePutWithHttpInfo(userActionName, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Binder
     * @param [async] When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async&#x3D;true). This helps speed up the response time from Vault when processing large amounts of data. 
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersPostWithHttpInfo(async?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersPost(async, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Binder
     * @param [async] When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async&#x3D;true). This helps speed up the response time from Vault when processing large amounts of data. 
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersPost(async?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersPostWithHttpInfo(async, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Binder Template Collection
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersTemplatesGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersTemplatesGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersTemplatesGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Binder Template Collection
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersTemplatesGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Binder Template
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersTemplatesPostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersTemplatesPost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersTemplatesPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Binder Template
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersTemplatesPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersTemplatesPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Binder Template
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersTemplatesPutWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersTemplatesPut(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersTemplatesPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Binder Template
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersTemplatesPut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersTemplatesPutWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Binder Template Node Attributes
     * @param templateName The binder template name__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersTemplatesTemplateNameBindernodesGetWithHttpInfo(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersTemplatesTemplateNameBindernodesGet(templateName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersTemplatesTemplateNameBindernodesGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Binder Template Node Attributes
     * @param templateName The binder template name__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersTemplatesTemplateNameBindernodesGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersTemplatesTemplateNameBindernodesGetWithHttpInfo(templateName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Binder Template Node
     * @param templateName The binder template name__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersTemplatesTemplateNameBindernodesPostWithHttpInfo(templateName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersTemplatesTemplateNameBindernodesPost(templateName, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersTemplatesTemplateNameBindernodesPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Binder Template Node
     * @param templateName The binder template name__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersTemplatesTemplateNameBindernodesPost(templateName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersTemplatesTemplateNameBindernodesPostWithHttpInfo(templateName, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Replace Binder Template Nodes
     * @param templateName The binder template name__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersTemplatesTemplateNameBindernodesPutWithHttpInfo(templateName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersTemplatesTemplateNameBindernodesPut(templateName, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersTemplatesTemplateNameBindernodesPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Replace Binder Template Nodes
     * @param templateName The binder template name__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersTemplatesTemplateNameBindernodesPut(templateName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersTemplatesTemplateNameBindernodesPutWithHttpInfo(templateName, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Binder Template
     * @param templateName The binder template name__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersTemplatesTemplateNameDeleteWithHttpInfo(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersTemplatesTemplateNameDelete(templateName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersTemplatesTemplateNameDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Binder Template
     * @param templateName The binder template name__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersTemplatesTemplateNameDelete(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersTemplatesTemplateNameDeleteWithHttpInfo(templateName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Binder Template Attributes
     * @param templateName The binder template name__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersTemplatesTemplateNameGetWithHttpInfo(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsBindersTemplatesTemplateNameGet(templateName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsBindersTemplatesTemplateNameGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Binder Template Attributes
     * @param templateName The binder template name__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsBindersTemplatesTemplateNameGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsBindersTemplatesTemplateNameGetWithHttpInfo(templateName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Deleted Document IDs
     * @param [startDate] Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z
     * @param [endDate] Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z 
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDeletionsDocumentsGetWithHttpInfo(startDate?: string, endDate?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDeletionsDocumentsGet(startDate, endDate, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDeletionsDocumentsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Deleted Document IDs
     * @param [startDate] Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z
     * @param [endDate] Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z 
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDeletionsDocumentsGet(startDate?: string, endDate?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDeletionsDocumentsGetWithHttpInfo(startDate, endDate, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Deleted Object Record ID
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDeletionsVobjectsObjectNameGetWithHttpInfo(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDeletionsVobjectsObjectNameGet(objectName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDeletionsVobjectsObjectNameGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Deleted Object Record ID
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDeletionsVobjectsObjectNameGet(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDeletionsVobjectsObjectNameGetWithHttpInfo(objectName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve All Document Workflows
     * @param [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsActionsGetWithHttpInfo(loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsActionsGet(loc, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsActionsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve All Document Workflows
     * @param [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsActionsGet(loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsActionsGetWithHttpInfo(loc, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Download Controlled Copy Job Results
     * @param lifecycleAndStateAndAction The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link.
     * @param jobId
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetWithHttpInfo(lifecycleAndStateAndAction: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(lifecycleAndStateAndAction, jobId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Download Controlled Copy Job Results
     * @param lifecycleAndStateAndAction The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link.
     * @param jobId
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(lifecycleAndStateAndAction: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetWithHttpInfo(lifecycleAndStateAndAction, jobId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Workflow Details
     * @param workflowName The document workflow name value.
     * @param [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsActionsWorkflowNameGetWithHttpInfo(workflowName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsActionsWorkflowNameGet(workflowName, loc, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsActionsWorkflowNameGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Workflow Details
     * @param workflowName The document workflow name value.
     * @param [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsActionsWorkflowNameGet(workflowName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsActionsWorkflowNameGetWithHttpInfo(workflowName, loc, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Initiate Document Workflow
     * @param workflowName The document workflow name value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsActionsWorkflowNamePostWithHttpInfo(workflowName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsActionsWorkflowNamePost(workflowName, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsActionsWorkflowNamePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Initiate Document Workflow
     * @param workflowName The document workflow name value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsActionsWorkflowNamePost(workflowName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsActionsWorkflowNamePostWithHttpInfo(workflowName, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Annotations
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsAnnotationsBatchDeleteWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsAnnotationsBatchDelete(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsAnnotationsBatchDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Annotations
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsAnnotationsBatchDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsAnnotationsBatchDeleteWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Multiple Annotations
     * @param authorization
     * @param contentType
     * @param accept
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsAnnotationsBatchPostWithHttpInfo(authorization: string, contentType: string, accept: string, xVaultAPIClientID: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsAnnotationsBatchPost(authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsAnnotationsBatchPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Multiple Annotations
     * @param authorization
     * @param contentType
     * @param accept
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsAnnotationsBatchPost(authorization: string, contentType: string, accept: string, xVaultAPIClientID: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsAnnotationsBatchPostWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Annotations
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsAnnotationsBatchPutWithHttpInfo(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsAnnotationsBatchPut(authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsAnnotationsBatchPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Annotations
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsAnnotationsBatchPut(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsAnnotationsBatchPutWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Add Annotation Replies
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsAnnotationsRepliesBatchPostWithHttpInfo(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsAnnotationsRepliesBatchPost(authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsAnnotationsRepliesBatchPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Add Annotation Replies
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsAnnotationsRepliesBatchPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsAnnotationsRepliesBatchPostWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Multiple Document Attachments
     * @param [accept]
     * @param [authorization]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsAttachmentsBatchDeleteWithHttpInfo(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsAttachmentsBatchDelete(accept, authorization, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsAttachmentsBatchDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Multiple Document Attachments
     * @param [accept]
     * @param [authorization]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsAttachmentsBatchDelete(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsAttachmentsBatchDeleteWithHttpInfo(accept, authorization, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Multiple Document Attachments
     * @param [accept]
     * @param [authorization]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsAttachmentsBatchPostWithHttpInfo(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsAttachmentsBatchPost(accept, authorization, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsAttachmentsBatchPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Multiple Document Attachments
     * @param [accept]
     * @param [authorization]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsAttachmentsBatchPost(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsAttachmentsBatchPostWithHttpInfo(accept, authorization, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Multiple Document Attachment Descriptions
     * @param [accept]
     * @param [authorization]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsAttachmentsBatchPutWithHttpInfo(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsAttachmentsBatchPut(accept, authorization, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsAttachmentsBatchPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Multiple Document Attachment Descriptions
     * @param [accept]
     * @param [authorization]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsAttachmentsBatchPut(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsAttachmentsBatchPutWithHttpInfo(accept, authorization, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Export Results
     * @param jobId The id value of the requested export job. This is returned with the export document requests.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsBatchActionsFileextractJobIdResultsGetWithHttpInfo(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsBatchActionsFileextractJobIdResultsGet(jobId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsBatchActionsFileextractJobIdResultsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Export Results
     * @param jobId The id value of the requested export job. This is returned with the export document requests.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsBatchActionsFileextractJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsBatchActionsFileextractJobIdResultsGetWithHttpInfo(jobId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Export Documents
     * @param [source] Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
     * @param [renditions] Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
     * @param [allversions] Optional: To include all versions or latest version, include a query parameter allversions&#x3D;true. If omitted, defaults to false.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsBatchActionsFileextractPostWithHttpInfo(source?: boolean, renditions?: boolean, allversions?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsBatchActionsFileextractPost(source, renditions, allversions, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsBatchActionsFileextractPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Export Documents
     * @param [source] Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
     * @param [renditions] Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
     * @param [allversions] Optional: To include all versions or latest version, include a query parameter allversions&#x3D;true. If omitted, defaults to false.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsBatchActionsFileextractPost(source?: boolean, renditions?: boolean, allversions?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsBatchActionsFileextractPostWithHttpInfo(source, renditions, allversions, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Reclassify Multiple Documents
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIMigrationMode] When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsBatchActionsReclassifyPutWithHttpInfo(authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsBatchActionsReclassifyPut(authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsBatchActionsReclassifyPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Reclassify Multiple Documents
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIMigrationMode] When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsBatchActionsReclassifyPut(authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsBatchActionsReclassifyPutWithHttpInfo(authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Multiple Document Renditions
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsBatchActionsRerenderPostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsBatchActionsRerenderPost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsBatchActionsRerenderPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Multiple Document Renditions
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsBatchActionsRerenderPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsBatchActionsRerenderPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Multiple Documents
     * @param [idParam] If you’re identifying documents in your input by their external ID
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsBatchDeleteWithHttpInfo(idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsBatchDelete(idParam, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsBatchDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Multiple Documents
     * @param [idParam] If you’re identifying documents in your input by their external ID
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsBatchDelete(idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsBatchDeleteWithHttpInfo(idParam, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Undo Collaborative Authoring Checkout
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsBatchLockDeleteWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsBatchLockDelete(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsBatchLockDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Undo Collaborative Authoring Checkout
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsBatchLockDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsBatchLockDeleteWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Multiple Documents
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIMigrationMode] When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsBatchPostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsBatchPost(authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsBatchPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Multiple Documents
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIMigrationMode] When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsBatchPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsBatchPostWithHttpInfo(authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Multiple Documents
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIMigrationMode] When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsBatchPutWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsBatchPut(authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsBatchPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Multiple Documents
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIMigrationMode] When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsBatchPut(authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsBatchPutWithHttpInfo(authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Anchor IDs
     * @param docId The document id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAnchorsGetWithHttpInfo(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdAnchorsGet(docId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdAnchorsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Anchor IDs
     * @param docId The document id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAnchorsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdAnchorsGetWithHttpInfo(docId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Export Document Annotations to PDF
     * @param docId The document id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAnnotationsFileGetWithHttpInfo(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdAnnotationsFileGet(docId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdAnnotationsFileGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Export Document Annotations to PDF
     * @param docId The document id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAnnotationsFileGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdAnnotationsFileGetWithHttpInfo(docId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Import Document Annotations from PDF
     * @param docId The document id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAnnotationsFilePostWithHttpInfo(docId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdAnnotationsFilePost(docId, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdAnnotationsFilePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Import Document Annotations from PDF
     * @param docId The document id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAnnotationsFilePost(docId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdAnnotationsFilePostWithHttpInfo(docId, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Single Document Attachment
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdDeleteWithHttpInfo(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdAttachmentsAttachmentIdDelete(docId, attachmentId, accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdAttachmentsAttachmentIdDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Single Document Attachment
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdDelete(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdAttachmentsAttachmentIdDeleteWithHttpInfo(docId, attachmentId, accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Download Document Attachment
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdFileGetWithHttpInfo(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(docId, attachmentId, accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdAttachmentsAttachmentIdFileGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Download Document Attachment
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdAttachmentsAttachmentIdFileGetWithHttpInfo(docId, attachmentId, accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Attachment Metadata
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdGetWithHttpInfo(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdAttachmentsAttachmentIdGet(docId, attachmentId, accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdAttachmentsAttachmentIdGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Attachment Metadata
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdGet(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdAttachmentsAttachmentIdGetWithHttpInfo(docId, attachmentId, accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Document Attachment Description
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param [accept]
     * @param [authorization]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdPutWithHttpInfo(docId: string, attachmentId: string, accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdAttachmentsAttachmentIdPut(docId, attachmentId, accept, authorization, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdAttachmentsAttachmentIdPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Document Attachment Description
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param [accept]
     * @param [authorization]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdPut(docId: string, attachmentId: string, accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdAttachmentsAttachmentIdPutWithHttpInfo(docId, attachmentId, accept, authorization, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Single Document Attachment Version
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteWithHttpInfo(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Single Document Attachment Version
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteWithHttpInfo(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Download Document Attachment Version
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Download Document Attachment Version
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Attachment Version Metadata
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Attachment Version Metadata
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Restore Document Attachment Version
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param [restore] The parameter restore must be set to true. 
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostWithHttpInfo(docId: string, attachmentId: string, attachmentVersion: string, restore?: boolean, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(docId, attachmentId, attachmentVersion, restore, accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Restore Document Attachment Version
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param [restore] The parameter restore must be set to true. 
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(docId: string, attachmentId: string, attachmentVersion: string, restore?: boolean, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostWithHttpInfo(docId, attachmentId, attachmentVersion, restore, accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Attachment Versions
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetWithHttpInfo(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(docId, attachmentId, accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Attachment Versions
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetWithHttpInfo(docId, attachmentId, accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Download All Document Attachments
     * @param docId The document id field value.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAttachmentsFileGetWithHttpInfo(docId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdAttachmentsFileGet(docId, accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdAttachmentsFileGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Download All Document Attachments
     * @param docId The document id field value.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAttachmentsFileGet(docId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdAttachmentsFileGetWithHttpInfo(docId, accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Attachments
     * @param docId The document id field value.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAttachmentsGetWithHttpInfo(docId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdAttachmentsGet(docId, accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdAttachmentsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Attachments
     * @param docId The document id field value.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAttachmentsGet(docId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdAttachmentsGetWithHttpInfo(docId, accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Document Attachment
     * @param docId The document id field value.
     * @param [accept]
     * @param [authorization]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAttachmentsPostWithHttpInfo(docId: string, accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdAttachmentsPost(docId, accept, authorization, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdAttachmentsPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Document Attachment
     * @param docId The document id field value.
     * @param [accept]
     * @param [authorization]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAttachmentsPost(docId: string, accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdAttachmentsPostWithHttpInfo(docId, accept, authorization, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Complete Audit History for a Single Document
     * @param docId The document ID for which to retrieve audit history.
     * @param [startDate] Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. 
     * @param [endDate] Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
     * @param [formatResult] To request a CSV file of your audit history, use csv. 
     * @param [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
     * @param [events] Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAudittrailGetWithHttpInfo(docId: string, startDate?: string, endDate?: string, formatResult?: string, limit?: string, offset?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdAudittrailGet(docId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdAudittrailGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Complete Audit History for a Single Document
     * @param docId The document ID for which to retrieve audit history.
     * @param [startDate] Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. 
     * @param [endDate] Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
     * @param [formatResult] To request a CSV file of your audit history, use csv. 
     * @param [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
     * @param [events] Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdAudittrailGet(docId: string, startDate?: string, endDate?: string, formatResult?: string, limit?: string, offset?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdAudittrailGetWithHttpInfo(docId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Single Document
     * @param docId The document id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdDeleteWithHttpInfo(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdDelete(docId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Single Document
     * @param docId The document id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdDelete(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdDeleteWithHttpInfo(docId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Events
     * @param docId The document id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdEventsGetWithHttpInfo(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdEventsGet(docId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdEventsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Events
     * @param docId The document id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdEventsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdEventsGetWithHttpInfo(docId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Download Document File
     * @param docId The document id field value.
     * @param [lockDocument] Set to true to Check Out this document before retrieval. If omitted, defaults to false.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdFileGetWithHttpInfo(docId: string, lockDocument?: boolean, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdFileGet(docId, lockDocument, accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdFileGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Download Document File
     * @param docId The document id field value.
     * @param [lockDocument] Set to true to Check Out this document before retrieval. If omitted, defaults to false.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdFileGet(docId: string, lockDocument?: boolean, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdFileGetWithHttpInfo(docId, lockDocument, accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document
     * @param docId The document id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdGetWithHttpInfo(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdGet(docId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document
     * @param docId The document id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdGetWithHttpInfo(docId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Document Lock
     * @param docId The document id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdLockDeleteWithHttpInfo(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdLockDelete(docId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdLockDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Document Lock
     * @param docId The document id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdLockDelete(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdLockDeleteWithHttpInfo(docId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Lock
     * @param docId The document id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdLockGetWithHttpInfo(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdLockGet(docId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdLockGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Lock
     * @param docId The document id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdLockGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdLockGetWithHttpInfo(docId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Document Lock
     * @param docId The document id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdLockPostWithHttpInfo(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdLockPost(docId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdLockPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Document Lock
     * @param docId The document id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdLockPost(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdLockPostWithHttpInfo(docId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Download All Document Version Attachments
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetWithHttpInfo(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Download All Document Version Attachments
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetWithHttpInfo(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Single Document Version
     * @param docId The document id field value.
     * @param [suppressRendition] Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdPostWithHttpInfo(docId: string, suppressRendition?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdPost(docId, suppressRendition, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Single Document Version
     * @param docId The document id field value.
     * @param [suppressRendition] Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdPost(docId: string, suppressRendition?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdPostWithHttpInfo(docId, suppressRendition, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Single Document
     * @param docId The document id field value.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIMigrationMode] When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdPutWithHttpInfo(docId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdPut(docId, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Single Document
     * @param docId The document id field value.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIMigrationMode] When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdPut(docId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdPutWithHttpInfo(docId, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Renditions
     * @param docId The document id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdRenditionsGetWithHttpInfo(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdRenditionsGet(docId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdRenditionsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Renditions
     * @param docId The document id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdRenditionsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdRenditionsGetWithHttpInfo(docId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Single Document Rendition
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdRenditionsRenditionTypeDeleteWithHttpInfo(docId: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdRenditionsRenditionTypeDelete(docId, renditionType, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdRenditionsRenditionTypeDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Single Document Rendition
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdRenditionsRenditionTypeDelete(docId: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdRenditionsRenditionTypeDeleteWithHttpInfo(docId, renditionType, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Download Document Rendition File
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param [steadyState] Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. 
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdRenditionsRenditionTypeGetWithHttpInfo(docId: string, renditionType: string, steadyState?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdRenditionsRenditionTypeGet(docId, renditionType, steadyState, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdRenditionsRenditionTypeGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Download Document Rendition File
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param [steadyState] Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. 
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdRenditionsRenditionTypeGet(docId: string, renditionType: string, steadyState?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdRenditionsRenditionTypeGetWithHttpInfo(docId, renditionType, steadyState, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Add Single Document Rendition
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdRenditionsRenditionTypePostWithHttpInfo(docId: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdRenditionsRenditionTypePost(docId, renditionType, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdRenditionsRenditionTypePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Add Single Document Rendition
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdRenditionsRenditionTypePost(docId: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdRenditionsRenditionTypePostWithHttpInfo(docId, renditionType, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Replace Document Rendition
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdRenditionsRenditionTypePutWithHttpInfo(docId: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdRenditionsRenditionTypePut(docId, renditionType, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdRenditionsRenditionTypePutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Replace Document Rendition
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdRenditionsRenditionTypePut(docId: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdRenditionsRenditionTypePutWithHttpInfo(docId, renditionType, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Remove Users & Groups from Roles on a Single Document
     * @param docId The id value of the document from which to remove roles.
     * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
     * @param id The id value of the user or group to remove from the role.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteWithHttpInfo(docId: string, roleNameAndUserOrGroup: string, id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(docId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Remove Users & Groups from Roles on a Single Document
     * @param docId The id value of the document from which to remove roles.
     * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
     * @param id The id value of the user or group to remove from the role.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(docId: string, roleNameAndUserOrGroup: string, id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteWithHttpInfo(docId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Version Attachments
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetWithHttpInfo(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Version Attachments
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetWithHttpInfo(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Versions
     * @param docId The document id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsGetWithHttpInfo(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdVersionsGet(docId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdVersionsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Versions
     * @param docId The document id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdVersionsGetWithHttpInfo(docId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Read Annotations by ID
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param annotationId The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetWithHttpInfo(docId: string, majorVersion: string, minorVersion: string, annotationId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Read Annotations by ID
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param annotationId The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(docId: string, majorVersion: string, minorVersion: string, annotationId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetWithHttpInfo(docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Read Replies of Parent Annotation
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param annotationId The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetWithHttpInfo(docId: string, majorVersion: string, minorVersion: string, annotationId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Read Replies of Parent Annotation
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param annotationId The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(docId: string, majorVersion: string, minorVersion: string, annotationId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetWithHttpInfo(docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Export Document Version Annotations to PDF
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetWithHttpInfo(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Export Document Version Annotations to PDF
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetWithHttpInfo(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Import Document Version Annotations from PDF
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostWithHttpInfo(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Import Document Version Annotations from PDF
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostWithHttpInfo(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Read Annotations by Document Version and Type
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [limit] Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.
     * @param [offset] This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset&#x3D;201.
     * @param [annotationTypes] The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60; 
     * @param [paginationId] A unique identifier used to load requests with paginated results.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetWithHttpInfo(docId: string, majorVersion: string, minorVersion: string, limit?: string, offset?: string, annotationTypes?: string, paginationId?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(docId, majorVersion, minorVersion, limit, offset, annotationTypes, paginationId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Read Annotations by Document Version and Type
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [limit] Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.
     * @param [offset] This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset&#x3D;201.
     * @param [annotationTypes] The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60; 
     * @param [paginationId] A unique identifier used to load requests with paginated results.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(docId: string, majorVersion: string, minorVersion: string, limit?: string, offset?: string, annotationTypes?: string, paginationId?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetWithHttpInfo(docId, majorVersion, minorVersion, limit, offset, annotationTypes, paginationId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Download Document Version Attachment Version
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param attachmentId The id field value of the attachment.
     * @param attachmentVersion The version of the attachment.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(docId: string, majorVersion: string, minorVersion: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Download Document Version Attachment Version
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param attachmentId The id field value of the attachment.
     * @param attachmentVersion The version of the attachment.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId: string, majorVersion: string, minorVersion: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Version Attachment Versions
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param attachmentId The id of the document attachment to retrieve.
     * @param attachmentVersion Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(docId: string, majorVersion: string, minorVersion: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Version Attachment Versions
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param attachmentId The id of the document attachment to retrieve.
     * @param attachmentVersion Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId: string, majorVersion: string, minorVersion: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Single Document Version
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteWithHttpInfo(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Single Document Version
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteWithHttpInfo(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Version Notes as CSV
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetWithHttpInfo(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Version Notes as CSV
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetWithHttpInfo(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Document Event
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostWithHttpInfo(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Document Event
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostWithHttpInfo(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Video Annotations
     * @param docId The video document id field value.
     * @param majorVersion The video document major_version_number__v field value.
     * @param minorVersion The video document minor_version_number__v field value.
     * @param [authorization]
     * @param [accept] This &#x60;Accept&#x60; header only changes the format of the response in the case of an error. On &#x60;SUCCESS&#x60;, the HTTP Response Header &#x60;Content-Type&#x60; is set to &#x60;text/plain;charset&#x3D;UnicodeLittle&#x60;.
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetWithHttpInfo(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Video Annotations
     * @param docId The video document id field value.
     * @param majorVersion The video document major_version_number__v field value.
     * @param minorVersion The video document minor_version_number__v field value.
     * @param [authorization]
     * @param [accept] This &#x60;Accept&#x60; header only changes the format of the response in the case of an error. On &#x60;SUCCESS&#x60;, the HTTP Response Header &#x60;Content-Type&#x60; is set to &#x60;text/plain;charset&#x3D;UnicodeLittle&#x60;.
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetWithHttpInfo(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Download Document Version File
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetWithHttpInfo(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Download Document Version File
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetWithHttpInfo(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Version
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetWithHttpInfo(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Version
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetWithHttpInfo(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Document Version
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIMigrationMode] When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutWithHttpInfo(docId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(docId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Document Version
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIMigrationMode] When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(docId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutWithHttpInfo(docId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Relationships
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetWithHttpInfo(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Relationships
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetWithHttpInfo(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Single Document Relationship
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostWithHttpInfo(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Single Document Relationship
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostWithHttpInfo(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Single Document Relationship
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param relationshipId The relationship id field value. See Retrieve Document Relationships.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteWithHttpInfo(docId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Single Document Relationship
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param relationshipId The relationship id field value. See Retrieve Document Relationships.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(docId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteWithHttpInfo(docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Relationship
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param relationshipId The relationship id field value. See Retrieve Document Relationships.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetWithHttpInfo(docId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Relationship
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param relationshipId The relationship id field value. See Retrieve Document Relationships.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(docId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetWithHttpInfo(docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Version Renditions
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetWithHttpInfo(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Version Renditions
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetWithHttpInfo(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Document Version Rendition
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteWithHttpInfo(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Document Version Rendition
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteWithHttpInfo(docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Download Document Version Rendition File
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetWithHttpInfo(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Download Document Version Rendition File
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetWithHttpInfo(docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Upload Document Version Rendition
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostWithHttpInfo(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Upload Document Version Rendition
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostWithHttpInfo(docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Replace Document Version Rendition
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutWithHttpInfo(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Replace Document Version Rendition
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutWithHttpInfo(docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Download Document Version Thumbnail File
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetWithHttpInfo(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Download Document Version Thumbnail File
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetWithHttpInfo(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve All Documents
     * @param [namedFilter] Retrieves only documents which you have created.
     * @param [scope] Searches only within the document content.
     * @param [versionscope] Retrieves all document versions, rather than only the latest version.
     * @param [search] Search for documents based on a {keyword} in searchable document fields.
     * @param [limit] See VQL documentation for more information.
     * @param [sort] See VQL documentation for more information.
     * @param [start] See VQL documentation for more information.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsGetWithHttpInfo(namedFilter?: string, scope?: string, versionscope?: string, search?: string, limit?: string, sort?: string, start?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsGet(namedFilter, scope, versionscope, search, limit, sort, start, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve All Documents
     * @param [namedFilter] Retrieves only documents which you have created.
     * @param [scope] Searches only within the document content.
     * @param [versionscope] Retrieves all document versions, rather than only the latest version.
     * @param [search] Search for documents based on a {keyword} in searchable document fields.
     * @param [limit] See VQL documentation for more information.
     * @param [sort] See VQL documentation for more information.
     * @param [start] See VQL documentation for more information.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsGet(namedFilter?: string, scope?: string, versionscope?: string, search?: string, limit?: string, sort?: string, start?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsGetWithHttpInfo(namedFilter, scope, versionscope, search, limit, sort, start, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve All Document Roles
     * @param id
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsIdRolesGetWithHttpInfo(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsIdRolesGet(id, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsIdRolesGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve All Document Roles
     * @param id
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsIdRolesGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsIdRolesGetWithHttpInfo(id, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Assign Users & Groups to Roles on a Single Document
     * @param id
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsIdRolesPostWithHttpInfo(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsIdRolesPost(id, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsIdRolesPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Assign Users & Groups to Roles on a Single Document
     * @param id
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsIdRolesPost(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsIdRolesPostWithHttpInfo(id, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Role
     * @param id The document &#x60;id&#x60;.
     * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsIdRolesRoleNameGetWithHttpInfo(id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsIdRolesRoleNameGet(id, roleName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsIdRolesRoleNameGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Role
     * @param id The document &#x60;id&#x60;.
     * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsIdRolesRoleNameGet(id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsIdRolesRoleNameGetWithHttpInfo(id, roleName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document User Actions
     * @param id The document id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the document.
     * @param minorVersion The minor version number of the document.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetWithHttpInfo(id: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document User Actions
     * @param id The document id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the document.
     * @param minorVersion The minor version number of the document.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetWithHttpInfo(id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Entry Criteria
     * @param id The document id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the document.
     * @param minorVersion The minor version number of the document.
     * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetWithHttpInfo(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Entry Criteria
     * @param id The document id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the document.
     * @param minorVersion The minor version number of the document.
     * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetWithHttpInfo(id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Initiate Document User Action
     * @param id The document id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the document.
     * @param minorVersion The minor version number of the document.
     * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutWithHttpInfo(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Initiate Document User Action
     * @param id The document id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the document.
     * @param minorVersion The minor version number of the document.
     * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutWithHttpInfo(id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve User Actions on Multiple Documents
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsLifecycleActionsPostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsLifecycleActionsPost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsLifecycleActionsPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve User Actions on Multiple Documents
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsLifecycleActionsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsLifecycleActionsPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Initiate Bulk Document User Actions
     * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsLifecycleActionsUserActionNamePutWithHttpInfo(userActionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsLifecycleActionsUserActionNamePut(userActionName, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsLifecycleActionsUserActionNamePutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Initiate Bulk Document User Actions
     * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsLifecycleActionsUserActionNamePut(userActionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsLifecycleActionsUserActionNamePutWithHttpInfo(userActionName, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Single Document
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIMigrationMode] When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsPostWithHttpInfo(authorization?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsPost(authorization, accept, xVaultAPIMigrationMode, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Single Document
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIMigrationMode] When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsPost(authorization?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsPostWithHttpInfo(authorization, accept, xVaultAPIMigrationMode, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Multiple Document Relationships
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsRelationshipsBatchDeleteWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsRelationshipsBatchDelete(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsRelationshipsBatchDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Multiple Document Relationships
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsRelationshipsBatchDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsRelationshipsBatchDeleteWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Multiple Document Relationships
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsRelationshipsBatchPostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsRelationshipsBatchPost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsRelationshipsBatchPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Multiple Document Relationships
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsRelationshipsBatchPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsRelationshipsBatchPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Multiple Document Renditions
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsRenditionsBatchDeleteWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsRenditionsBatchDelete(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsRenditionsBatchDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Multiple Document Renditions
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsRenditionsBatchDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsRenditionsBatchDeleteWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Add Multiple Document Renditions
     * @param [idParam] If you’re identifying documents in your input by their external ID
     * @param [largeSizeAsset] If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIMigrationMode] Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsRenditionsBatchPostWithHttpInfo(idParam?: string, largeSizeAsset?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsRenditionsBatchPost(idParam, largeSizeAsset, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsRenditionsBatchPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Add Multiple Document Renditions
     * @param [idParam] If you’re identifying documents in your input by their external ID
     * @param [largeSizeAsset] If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIMigrationMode] Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsRenditionsBatchPost(idParam?: string, largeSizeAsset?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsRenditionsBatchPostWithHttpInfo(idParam, largeSizeAsset, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Remove Users and Groups from Roles on Multiple Documents & Binders
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsRolesBatchDeleteWithHttpInfo(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsRolesBatchDelete(authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsRolesBatchDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Remove Users and Groups from Roles on Multiple Documents & Binders
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsRolesBatchDelete(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsRolesBatchDeleteWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Assign Users & Groups to Roles on Multiple Documents & Binders
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsRolesBatchPostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsRolesBatchPost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsRolesBatchPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Assign Users & Groups to Roles on Multiple Documents & Binders
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsRolesBatchPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsRolesBatchPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Template Collection
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsTemplatesGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsTemplatesGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsTemplatesGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Template Collection
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsTemplatesGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Single Document Template
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsTemplatesPostWithHttpInfo(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsTemplatesPost(authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsTemplatesPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Single Document Template
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsTemplatesPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsTemplatesPostWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Multiple Document Templates
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsTemplatesPutWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsTemplatesPut(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsTemplatesPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Multiple Document Templates
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsTemplatesPut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsTemplatesPutWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Basic Document Template
     * @param templateName The document template name__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsTemplatesTemplateNameDeleteWithHttpInfo(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsTemplatesTemplateNameDelete(templateName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsTemplatesTemplateNameDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Basic Document Template
     * @param templateName The document template name__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsTemplatesTemplateNameDelete(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsTemplatesTemplateNameDeleteWithHttpInfo(templateName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Download Document Template File
     * @param templateName The document template name__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsTemplatesTemplateNameFileGetWithHttpInfo(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsTemplatesTemplateNameFileGet(templateName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsTemplatesTemplateNameFileGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Download Document Template File
     * @param templateName The document template name__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsTemplatesTemplateNameFileGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsTemplatesTemplateNameFileGetWithHttpInfo(templateName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Document Template Attributes
     * @param templateName The document template name__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsTemplatesTemplateNameGetWithHttpInfo(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsTemplatesTemplateNameGet(templateName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsTemplatesTemplateNameGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Document Template Attributes
     * @param templateName The document template name__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsTemplatesTemplateNameGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsTemplatesTemplateNameGetWithHttpInfo(templateName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Single Document Template
     * @param templateName The document template name__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsTemplatesTemplateNamePutWithHttpInfo(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsTemplatesTemplateNamePut(templateName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsTemplatesTemplateNamePutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Single Document Template
     * @param templateName The document template name__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsTemplatesTemplateNamePut(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsTemplatesTemplateNamePutWithHttpInfo(templateName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Document Tokens
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsTokensPostWithHttpInfo(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsTokensPost(authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsTokensPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Document Tokens
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsTokensPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsTokensPostWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Export Document Versions
     * @param [source] Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
     * @param [renditions] Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsVersionsBatchActionsFileextractPostWithHttpInfo(source?: boolean, renditions?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsVersionsBatchActionsFileextractPost(source, renditions, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsVersionsBatchActionsFileextractPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Export Document Versions
     * @param [source] Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
     * @param [renditions] Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsVersionsBatchActionsFileextractPost(source?: boolean, renditions?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsVersionsBatchActionsFileextractPostWithHttpInfo(source, renditions, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Multiple Document Versions
     * @param [idParam] If you’re identifying documents in your input by their external ID
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsVersionsBatchDeleteWithHttpInfo(idParam?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsVersionsBatchDelete(idParam, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsVersionsBatchDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Multiple Document Versions
     * @param [idParam] If you’re identifying documents in your input by their external ID
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsVersionsBatchDelete(idParam?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsVersionsBatchDeleteWithHttpInfo(idParam, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Multiple Document Versions
     * @param [idParam] If you’re identifying documents in your input by their external ID
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIMigrationMode] Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the &#x60;status__v&#x60; field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsVersionsBatchPostWithHttpInfo(idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDocumentsVersionsBatchPost(idParam, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDocumentsVersionsBatchPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Multiple Document Versions
     * @param [idParam] If you’re identifying documents in your input by their external ID
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIMigrationMode] Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the &#x60;status__v&#x60; field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDocumentsVersionsBatchPost(idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDocumentsVersionsBatchPostWithHttpInfo(idParam, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Domain Information
     * @param [includeApplication] To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDomainGetWithHttpInfo(includeApplication?: boolean, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDomainGet(includeApplication, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDomainGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Domain Information
     * @param [includeApplication] To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDomainGet(includeApplication?: boolean, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDomainGetWithHttpInfo(includeApplication, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Domains
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDomainsGetWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsDomainsGet(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsDomainsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Domains
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsDomainsGet(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsDomainsGetWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Add EDL Matched Documents
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsEdlMatchedDocumentsBatchActionsAddPostWithHttpInfo(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsEdlMatchedDocumentsBatchActionsAddPost(authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsEdlMatchedDocumentsBatchActionsAddPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Add EDL Matched Documents
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsEdlMatchedDocumentsBatchActionsAddPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsEdlMatchedDocumentsBatchActionsAddPostWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Remove EDL Matched Documents
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsEdlMatchedDocumentsBatchActionsRemovePostWithHttpInfo(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsEdlMatchedDocumentsBatchActionsRemovePost(authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsEdlMatchedDocumentsBatchActionsRemovePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Remove EDL Matched Documents
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsEdlMatchedDocumentsBatchActionsRemovePost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsEdlMatchedDocumentsBatchActionsRemovePostWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Auto Managed Groups
     * @param [limit] Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. 
     * @param [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsGroupsAutoGetWithHttpInfo(limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsGroupsAutoGet(limit, offset, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsGroupsAutoGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Auto Managed Groups
     * @param [limit] Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. 
     * @param [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsGroupsAutoGet(limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsGroupsAutoGetWithHttpInfo(limit, offset, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve All Groups
     * @param [includeImplied] When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsGroupsGetWithHttpInfo(includeImplied?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsGroupsGet(includeImplied, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsGroupsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve All Groups
     * @param [includeImplied] When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsGroupsGet(includeImplied?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsGroupsGetWithHttpInfo(includeImplied, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Group
     * @param groupId The group id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsGroupsGroupIdDeleteWithHttpInfo(groupId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsGroupsGroupIdDelete(groupId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsGroupsGroupIdDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Group
     * @param groupId The group id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsGroupsGroupIdDelete(groupId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsGroupsGroupIdDeleteWithHttpInfo(groupId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Group
     * @param groupId The group id field value.
     * @param [includeImplied] When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsGroupsGroupIdGetWithHttpInfo(groupId: string, includeImplied?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsGroupsGroupIdGet(groupId, includeImplied, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsGroupsGroupIdGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Group
     * @param groupId The group id field value.
     * @param [includeImplied] When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsGroupsGroupIdGet(groupId: string, includeImplied?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsGroupsGroupIdGetWithHttpInfo(groupId, includeImplied, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Group
     * @param groupId The group id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsGroupsGroupIdPutWithHttpInfo(groupId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsGroupsGroupIdPut(groupId, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsGroupsGroupIdPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Group
     * @param groupId The group id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsGroupsGroupIdPut(groupId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsGroupsGroupIdPutWithHttpInfo(groupId, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Group 
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsGroupsPostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsGroupsPost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsGroupsPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Group 
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsGroupsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsGroupsPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Application License Usage
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsLicensesGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsLicensesGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsLicensesGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Application License Usage
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsLicensesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsLicensesGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve All Multi-Record Workflows
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsActionsGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsObjectworkflowsActionsGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsObjectworkflowsActionsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve All Multi-Record Workflows
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsActionsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsObjectworkflowsActionsGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Multi-Record Workflow Details
     * @param workflowName
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsActionsWorkflowNameGetWithHttpInfo(workflowName: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsObjectworkflowsActionsWorkflowNameGet(workflowName, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsObjectworkflowsActionsWorkflowNameGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Multi-Record Workflow Details
     * @param workflowName
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsActionsWorkflowNameGet(workflowName: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsObjectworkflowsActionsWorkflowNameGetWithHttpInfo(workflowName, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Initiate Multi-Record Workflow
     * @param workflowName
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsActionsWorkflowNamePostWithHttpInfo(workflowName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsObjectworkflowsActionsWorkflowNamePost(workflowName, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsObjectworkflowsActionsWorkflowNamePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Initiate Multi-Record Workflow
     * @param workflowName
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsActionsWorkflowNamePost(workflowName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsObjectworkflowsActionsWorkflowNamePostWithHttpInfo(workflowName, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Workflows
     * @param [objectV] To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
     * @param [recordIdV] To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
     * @param [participant] To retrieve all workflows available to a particular user, include the user id field value as ?participant&#x3D;{id}. To retrieve your own workflows, set this value to ?participant&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
     * @param [statusV] To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v&#x3D;active__v, status__v&#x3D;active__v,completed__v. Workflows with &#x60;status__v&#x3D;active__v&#x60; are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v
     * @param [offset] This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
     * @param [pageSize] This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
     * @param [loc] When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsGetWithHttpInfo(objectV?: string, recordIdV?: string, participant?: string, statusV?: string, offset?: string, pageSize?: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsObjectworkflowsGet(objectV, recordIdV, participant, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsObjectworkflowsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Workflows
     * @param [objectV] To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
     * @param [recordIdV] To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
     * @param [participant] To retrieve all workflows available to a particular user, include the user id field value as ?participant&#x3D;{id}. To retrieve your own workflows, set this value to ?participant&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
     * @param [statusV] To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v&#x3D;active__v, status__v&#x3D;active__v,completed__v. Workflows with &#x60;status__v&#x3D;active__v&#x60; are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v
     * @param [offset] This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
     * @param [pageSize] This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
     * @param [loc] When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsGet(objectV?: string, recordIdV?: string, participant?: string, statusV?: string, offset?: string, pageSize?: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsObjectworkflowsGetWithHttpInfo(objectV, recordIdV, participant, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Workflow Tasks
     * @param [objectV] To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
     * @param [recordIdV] To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
     * @param [assigneeV] To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v&#x3D;{id}. To retrieve your own workflow tasks, set this value to ?assignee__v&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
     * @param [statusV] To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v&#x3D;available__v or ?status__v&#x3D;available__v,completed__v. 
     * @param [offset] This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
     * @param [pageSize] This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
     * @param [loc] When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksGetWithHttpInfo(objectV?: string, recordIdV?: string, assigneeV?: string, statusV?: string, offset?: string, pageSize?: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsObjectworkflowsTasksGet(objectV, recordIdV, assigneeV, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsObjectworkflowsTasksGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Workflow Tasks
     * @param [objectV] To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
     * @param [recordIdV] To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
     * @param [assigneeV] To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v&#x3D;{id}. To retrieve your own workflow tasks, set this value to ?assignee__v&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
     * @param [statusV] To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v&#x3D;available__v or ?status__v&#x3D;available__v,completed__v. 
     * @param [offset] This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
     * @param [pageSize] This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
     * @param [loc] When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksGet(objectV?: string, recordIdV?: string, assigneeV?: string, statusV?: string, offset?: string, pageSize?: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsObjectworkflowsTasksGetWithHttpInfo(objectV, recordIdV, assigneeV, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Accept Single Record Workflow Task
     * @param taskId The task id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksTaskIdActionsAcceptPostWithHttpInfo(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsObjectworkflowsTasksTaskIdActionsAcceptPost(taskId, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsObjectworkflowsTasksTaskIdActionsAcceptPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Accept Single Record Workflow Task
     * @param taskId The task id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksTaskIdActionsAcceptPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsObjectworkflowsTasksTaskIdActionsAcceptPostWithHttpInfo(taskId, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Cancel Workflow Task
     * @param taskId The task id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksTaskIdActionsCancelPostWithHttpInfo(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsObjectworkflowsTasksTaskIdActionsCancelPost(taskId, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsObjectworkflowsTasksTaskIdActionsCancelPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Cancel Workflow Task
     * @param taskId The task id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksTaskIdActionsCancelPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsObjectworkflowsTasksTaskIdActionsCancelPostWithHttpInfo(taskId, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Complete Single Record Workflow Task
     * @param taskId The task id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksTaskIdActionsCompletePostWithHttpInfo(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsObjectworkflowsTasksTaskIdActionsCompletePost(taskId, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsObjectworkflowsTasksTaskIdActionsCompletePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Complete Single Record Workflow Task
     * @param taskId The task id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksTaskIdActionsCompletePost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsObjectworkflowsTasksTaskIdActionsCompletePostWithHttpInfo(taskId, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Workflow Task Actions
     * @param taskId The task id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksTaskIdActionsGetWithHttpInfo(taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsObjectworkflowsTasksTaskIdActionsGet(taskId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsObjectworkflowsTasksTaskIdActionsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Workflow Task Actions
     * @param taskId The task id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksTaskIdActionsGet(taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsObjectworkflowsTasksTaskIdActionsGetWithHttpInfo(taskId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Accept Multi-item Workflow Task
     * @param taskId The task id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostWithHttpInfo(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(taskId, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Accept Multi-item Workflow Task
     * @param taskId The task id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostWithHttpInfo(taskId, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Complete Multi-item Workflow Task
     * @param taskId The task id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostWithHttpInfo(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(taskId, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Complete Multi-item Workflow Task
     * @param taskId The task id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostWithHttpInfo(taskId, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Manage Multi-Item Workflow Content
     * @param taskId The task id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostWithHttpInfo(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(taskId, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Manage Multi-Item Workflow Content
     * @param taskId The task id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostWithHttpInfo(taskId, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Reassign Multi-item Workflow Task
     * @param taskId The id of the task to reassign.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostWithHttpInfo(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(taskId, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Reassign Multi-item Workflow Task
     * @param taskId The id of the task to reassign.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostWithHttpInfo(taskId, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Reassign Single Record Workflow Task
     * @param taskId The id of the task to reassign.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksTaskIdActionsReassignPostWithHttpInfo(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsObjectworkflowsTasksTaskIdActionsReassignPost(taskId, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsObjectworkflowsTasksTaskIdActionsReassignPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Reassign Single Record Workflow Task
     * @param taskId The id of the task to reassign.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksTaskIdActionsReassignPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsObjectworkflowsTasksTaskIdActionsReassignPostWithHttpInfo(taskId, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Workflow Task Action Details
     * @param taskId The task id field value.
     * @param taskAction The name of the task action retrieved from Retrieve Workflow Task Actions.
     * @param [loc] When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksTaskIdActionsTaskActionGetWithHttpInfo(taskId: string, taskAction: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(taskId, taskAction, loc, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsObjectworkflowsTasksTaskIdActionsTaskActionGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Workflow Task Action Details
     * @param taskId The task id field value.
     * @param taskAction The name of the task action retrieved from Retrieve Workflow Task Actions.
     * @param [loc] When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(taskId: string, taskAction: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsObjectworkflowsTasksTaskIdActionsTaskActionGetWithHttpInfo(taskId, taskAction, loc, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Undo Workflow Task Acceptance
     * @param taskId The task id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostWithHttpInfo(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(taskId, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Undo Workflow Task Acceptance
     * @param taskId The task id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostWithHttpInfo(taskId, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Workflow Task Due Date
     * @param taskId The id of the task.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostWithHttpInfo(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(taskId, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Workflow Task Due Date
     * @param taskId The id of the task.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostWithHttpInfo(taskId, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Workflow Task Details
     * @param taskId The task id field value.
     * @param [loc] When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksTaskIdGetWithHttpInfo(taskId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsObjectworkflowsTasksTaskIdGet(taskId, loc, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsObjectworkflowsTasksTaskIdGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Workflow Task Details
     * @param taskId The task id field value.
     * @param [loc] When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsTasksTaskIdGet(taskId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsObjectworkflowsTasksTaskIdGetWithHttpInfo(taskId, loc, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Workflow Actions
     * @param workflowId The workflow id field value.
     * @param [loc] When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsWorkflowIdActionsGetWithHttpInfo(workflowId: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsObjectworkflowsWorkflowIdActionsGet(workflowId, loc, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsObjectworkflowsWorkflowIdActionsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Workflow Actions
     * @param workflowId The workflow id field value.
     * @param [loc] When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsWorkflowIdActionsGet(workflowId: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsObjectworkflowsWorkflowIdActionsGetWithHttpInfo(workflowId, loc, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Workflow Action Details
     * @param workflowId The workflow id field value.
     * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetWithHttpInfo(workflowId: string, workflowAction: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(workflowId, workflowAction, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Workflow Action Details
     * @param workflowId The workflow id field value.
     * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(workflowId: string, workflowAction: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetWithHttpInfo(workflowId, workflowAction, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Initiate Workflow Action
     * @param workflowId The workflow id field value.
     * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
     * @param [documentsSys] Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostWithHttpInfo(workflowId: string, workflowAction: string, documentsSys?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(workflowId, workflowAction, documentsSys, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Initiate Workflow Action
     * @param workflowId The workflow id field value.
     * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
     * @param [documentsSys] Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(workflowId: string, workflowAction: string, documentsSys?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostWithHttpInfo(workflowId, workflowAction, documentsSys, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Workflow Details
     * @param workflowId The workflow id field value.
     * @param [loc] When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsWorkflowIdGetWithHttpInfo(workflowId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsObjectworkflowsWorkflowIdGet(workflowId, loc, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsObjectworkflowsWorkflowIdGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Workflow Details
     * @param workflowId The workflow id field value.
     * @param [loc] When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsObjectworkflowsWorkflowIdGet(workflowId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsObjectworkflowsWorkflowIdGetWithHttpInfo(workflowId, loc, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve All Picklists
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsPicklistsGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsPicklistsGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsPicklistsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve All Picklists
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsPicklistsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsPicklistsGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Picklist Values
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsPicklistsPicklistNameGetWithHttpInfo(picklistName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsPicklistsPicklistNameGet(picklistName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsPicklistsPicklistNameGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Picklist Values
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsPicklistsPicklistNameGet(picklistName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsPicklistsPicklistNameGetWithHttpInfo(picklistName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Inactivate Picklist Value
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsPicklistsPicklistNamePicklistValueNameDeleteWithHttpInfo(picklistName: string, picklistValueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsPicklistsPicklistNamePicklistValueNameDelete(picklistName, picklistValueName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsPicklistsPicklistNamePicklistValueNameDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Inactivate Picklist Value
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsPicklistsPicklistNamePicklistValueNameDelete(picklistName: string, picklistValueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsPicklistsPicklistNamePicklistValueNameDeleteWithHttpInfo(picklistName, picklistValueName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Picklist Value
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsPicklistsPicklistNamePicklistValueNamePutWithHttpInfo(picklistName: string, picklistValueName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsPicklistsPicklistNamePicklistValueNamePut(picklistName, picklistValueName, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsPicklistsPicklistNamePicklistValueNamePutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Picklist Value
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsPicklistsPicklistNamePicklistValueNamePut(picklistName: string, picklistValueName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsPicklistsPicklistNamePicklistValueNamePutWithHttpInfo(picklistName, picklistValueName, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Picklist Values
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsPicklistsPicklistNamePostWithHttpInfo(picklistName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsPicklistsPicklistNamePost(picklistName, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsPicklistsPicklistNamePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Picklist Values
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsPicklistsPicklistNamePost(picklistName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsPicklistsPicklistNamePostWithHttpInfo(picklistName, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Picklist Value Label
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsPicklistsPicklistNamePutWithHttpInfo(picklistName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsPicklistsPicklistNamePut(picklistName, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsPicklistsPicklistNamePutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Picklist Value Label
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsPicklistsPicklistNamePut(picklistName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsPicklistsPicklistNamePutWithHttpInfo(picklistName, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Build Production Vault
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxActionsBuildproductionPostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsSandboxActionsBuildproductionPost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsSandboxActionsBuildproductionPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Build Production Vault
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxActionsBuildproductionPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsSandboxActionsBuildproductionPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Promote to Production
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxActionsPromoteproductionPostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsSandboxActionsPromoteproductionPost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsSandboxActionsPromoteproductionPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Promote to Production
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxActionsPromoteproductionPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsSandboxActionsPromoteproductionPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Recheck Sandbox Usage Limit
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxActionsRecheckusagePostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsSandboxActionsRecheckusagePost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsSandboxActionsRecheckusagePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Recheck Sandbox Usage Limit
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxActionsRecheckusagePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsSandboxActionsRecheckusagePostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Change Sandbox Size
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxBatchChangesizePostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsSandboxBatchChangesizePost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsSandboxBatchChangesizePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Change Sandbox Size
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxBatchChangesizePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsSandboxBatchChangesizePostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Set Sandbox Entitlements
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxEntitlementsSetPostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsSandboxEntitlementsSetPost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsSandboxEntitlementsSetPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Set Sandbox Entitlements
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxEntitlementsSetPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsSandboxEntitlementsSetPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Sandboxes
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsSandboxGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsSandboxGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Sandboxes
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsSandboxGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Sandbox
     * @param name The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxNameDeleteWithHttpInfo(name: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsSandboxNameDelete(name, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsSandboxNameDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Sandbox
     * @param name The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxNameDelete(name: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsSandboxNameDeleteWithHttpInfo(name, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create or Refresh Sandbox
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxPostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsSandboxPost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsSandboxPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create or Refresh Sandbox
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsSandboxPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Sandbox Snapshot
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxSnapshotApiNameActionsUpdatePostWithHttpInfo(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsSandboxSnapshotApiNameActionsUpdatePost(apiName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsSandboxSnapshotApiNameActionsUpdatePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Sandbox Snapshot
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxSnapshotApiNameActionsUpdatePost(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsSandboxSnapshotApiNameActionsUpdatePostWithHttpInfo(apiName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Upgrade Sandbox Snapshot
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxSnapshotApiNameActionsUpgradePostWithHttpInfo(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsSandboxSnapshotApiNameActionsUpgradePost(apiName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsSandboxSnapshotApiNameActionsUpgradePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Upgrade Sandbox Snapshot
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxSnapshotApiNameActionsUpgradePost(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsSandboxSnapshotApiNameActionsUpgradePostWithHttpInfo(apiName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Sandbox Snapshot
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxSnapshotApiNameDeleteWithHttpInfo(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsSandboxSnapshotApiNameDelete(apiName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsSandboxSnapshotApiNameDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Sandbox Snapshot
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxSnapshotApiNameDelete(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsSandboxSnapshotApiNameDeleteWithHttpInfo(apiName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Sandbox Snapshots
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxSnapshotGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsSandboxSnapshotGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsSandboxSnapshotGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Sandbox Snapshots
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxSnapshotGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsSandboxSnapshotGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Sandbox Snapshot
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxSnapshotPostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsSandboxSnapshotPost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsSandboxSnapshotPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Sandbox Snapshot
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxSnapshotPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsSandboxSnapshotPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Refresh Sandbox from Snapshot
     * @param vaultId The Vault ID of the sandbox to be refreshed.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxVaultIdActionsRefreshPostWithHttpInfo(vaultId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsSandboxVaultIdActionsRefreshPost(vaultId, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsSandboxVaultIdActionsRefreshPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Refresh Sandbox from Snapshot
     * @param vaultId The Vault ID of the sandbox to be refreshed.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxVaultIdActionsRefreshPost(vaultId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsSandboxVaultIdActionsRefreshPostWithHttpInfo(vaultId, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Sandbox Details by ID
     * @param vaultId
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxVaultIdGetWithHttpInfo(vaultId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsSandboxVaultIdGet(vaultId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsSandboxVaultIdGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Sandbox Details by ID
     * @param vaultId
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSandboxVaultIdGet(vaultId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsSandboxVaultIdGetWithHttpInfo(vaultId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve All Security Policies
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSecuritypoliciesGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsSecuritypoliciesGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsSecuritypoliciesGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve All Security Policies
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSecuritypoliciesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsSecuritypoliciesGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Security Policy
     * @param securityPolicyName Security policy name__v field value (retrieved from previous request). This is typically a numeric value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSecuritypoliciesSecurityPolicyNameGetWithHttpInfo(securityPolicyName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsSecuritypoliciesSecurityPolicyNameGet(securityPolicyName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsSecuritypoliciesSecurityPolicyNameGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Security Policy
     * @param securityPolicyName Security policy name__v field value (retrieved from previous request). This is typically a numeric value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsSecuritypoliciesSecurityPolicyNameGet(securityPolicyName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsSecuritypoliciesSecurityPolicyNameGetWithHttpInfo(securityPolicyName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve All Users
     * @param [vaults] Retrieve all users assigned to all Vaults in your domain.
     * @param [excludeVaultMembership] Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.
     * @param [excludeAppLicensing] Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsUsersGetWithHttpInfo(vaults?: string, excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsUsersGet(vaults, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsUsersGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve All Users
     * @param [vaults] Retrieve all users assigned to all Vaults in your domain.
     * @param [excludeVaultMembership] Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.
     * @param [excludeAppLicensing] Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsUsersGet(vaults?: string, excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsUsersGetWithHttpInfo(vaults, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve User
     * @param id The user id field value. Use the value me to get information for the currently authenticated user.
     * @param [excludeVaultMembership] Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
     * @param [excludeAppLicensing] Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsUsersIdGetWithHttpInfo(id: string, excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsUsersIdGet(id, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsUsersIdGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve User
     * @param id The user id field value. Use the value me to get information for the currently authenticated user.
     * @param [excludeVaultMembership] Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
     * @param [excludeAppLicensing] Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsUsersIdGet(id: string, excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsUsersIdGetWithHttpInfo(id, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve User Permissions
     * @param id The ID of the user. Use the value me to retrieve information for the currently authenticated user.
     * @param [filter] Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsUsersIdPermissionsGetWithHttpInfo(id: string, filter?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsUsersIdPermissionsGet(id, filter, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsUsersIdPermissionsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve User Permissions
     * @param id The ID of the user. Use the value me to retrieve information for the currently authenticated user.
     * @param [filter] Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsUsersIdPermissionsGet(id: string, filter?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsUsersIdPermissionsGetWithHttpInfo(id, filter, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Single User
     * @param id The user id field value. Use the value me to get information for the currently authenticated user.
     * @param [authorization]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsUsersIdPutWithHttpInfo(id: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsUsersIdPut(id, authorization, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsUsersIdPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Single User
     * @param id The user id field value. Use the value me to get information for the currently authenticated user.
     * @param [authorization]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsUsersIdPut(id: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsUsersIdPutWithHttpInfo(id, authorization, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Validate Session User
     * @param [excludeVaultMembership] Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
     * @param [excludeAppLicensing] Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsUsersMeGetWithHttpInfo(excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsUsersMeGet(excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsUsersMeGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Validate Session User
     * @param [excludeVaultMembership] Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
     * @param [excludeAppLicensing] Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsUsersMeGet(excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsUsersMeGetWithHttpInfo(excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Change My Password
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsUsersMePasswordPostWithHttpInfo(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsUsersMePasswordPost(authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsUsersMePasswordPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Change My Password
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsUsersMePasswordPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsUsersMePasswordPostWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve My User Permissions
     * @param [filter] Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsUsersMePermissionsGetWithHttpInfo(filter?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsUsersMePermissionsGet(filter, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsUsersMePermissionsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve My User Permissions
     * @param [filter] Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsUsersMePermissionsGet(filter?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsUsersMePermissionsGetWithHttpInfo(filter, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update My User
     * @param [authorization]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsUsersMePutWithHttpInfo(authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsUsersMePut(authorization, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsUsersMePutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update My User
     * @param [authorization]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsUsersMePut(authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsUsersMePutWithHttpInfo(authorization, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Single User
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsUsersPostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsUsersPost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsUsersPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Single User
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsUsersPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsUsersPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Multiple Users
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsUsersPutWithHttpInfo(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsUsersPut(authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsUsersPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Multiple Users
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsUsersPut(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsUsersPutWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Disable User
     * @param userId The user id field value. 
     * @param [domain] When true, this disables the user account in all vaults in the domain.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsUsersUserIdDeleteWithHttpInfo(userId: string, domain?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsUsersUserIdDelete(userId, domain, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsUsersUserIdDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Disable User
     * @param userId The user id field value. 
     * @param [domain] When true, this disables the user account in all vaults in the domain.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsUsersUserIdDelete(userId: string, domain?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsUsersUserIdDeleteWithHttpInfo(userId, domain, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Vault Membership
     * @param userId The user id field value.
     * @param vaultId The system-managed id field value assigned to each vault in the domain.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsUsersUserIdVaultMembershipVaultIdPutWithHttpInfo(userId: string, vaultId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsUsersUserIdVaultMembershipVaultIdPut(userId, vaultId, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsUsersUserIdVaultMembershipVaultIdPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Vault Membership
     * @param userId The user id field value.
     * @param vaultId The system-managed id field value assigned to each vault in the domain.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsUsersUserIdVaultMembershipVaultIdPut(userId: string, vaultId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsUsersUserIdVaultMembershipVaultIdPutWithHttpInfo(userId, vaultId, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Vault Compare
     * @param [authorization]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsVaultActionsComparePostWithHttpInfo(authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsVaultActionsComparePost(authorization, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsVaultActionsComparePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Vault Compare
     * @param [authorization]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsVaultActionsComparePost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsVaultActionsComparePostWithHttpInfo(authorization, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Vault Configuration Report
     * @param [authorization]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsVaultActionsConfigreportPostWithHttpInfo(authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.objectsVaultActionsConfigreportPost(authorization, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.objectsVaultActionsConfigreportPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Vault Configuration Report
     * @param [authorization]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public objectsVaultActionsConfigreportPost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.objectsVaultActionsConfigreportPostWithHttpInfo(authorization, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Component Definition Query
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public queryComponentsPostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.queryComponentsPost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.queryComponentsPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Component Definition Query
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public queryComponentsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.queryComponentsPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Next Page URL
     * @param nextPage
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIDescribeQuery]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public queryNextPagePostWithHttpInfo(nextPage: string, authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.queryNextPagePost(nextPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.queryNextPagePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Next Page URL
     * @param nextPage
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIDescribeQuery]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public queryNextPagePost(nextPage: string, authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.queryNextPagePostWithHttpInfo(nextPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Submitting a Query
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIDescribeQuery]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public queryPostWithHttpInfo(authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.queryPost(authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.queryPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Submitting a Query
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIDescribeQuery]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public queryPost(authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.queryPostWithHttpInfo(authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Previous Page URL
     * @param previousPage
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIDescribeQuery]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public queryPreviousPagePostWithHttpInfo(previousPage: string, authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.queryPreviousPagePost(previousPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.queryPreviousPagePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Previous Page URL
     * @param previousPage
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIDescribeQuery]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public queryPreviousPagePost(previousPage: string, authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.queryPreviousPagePostWithHttpInfo(previousPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Current User with SCIM
     * @param [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public scimV2MeGetWithHttpInfo(attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.scimV2MeGet(attributes, excludedAttributes, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.scimV2MeGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Current User with SCIM
     * @param [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public scimV2MeGet(attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.scimV2MeGetWithHttpInfo(attributes, excludedAttributes, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Current User with SCIM
     * @param [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public scimV2MePutWithHttpInfo(attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.scimV2MePut(attributes, excludedAttributes, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.scimV2MePutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Current User with SCIM
     * @param [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public scimV2MePut(attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.scimV2MePutWithHttpInfo(attributes, excludedAttributes, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve All SCIM Resource Types
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public scimV2ResourceTypesGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.scimV2ResourceTypesGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.scimV2ResourceTypesGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve All SCIM Resource Types
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public scimV2ResourceTypesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.scimV2ResourceTypesGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Single SCIM Resource Type
     * @param type A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public scimV2ResourceTypesTypeGetWithHttpInfo(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.scimV2ResourceTypesTypeGet(type, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.scimV2ResourceTypesTypeGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Single SCIM Resource Type
     * @param type A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public scimV2ResourceTypesTypeGet(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.scimV2ResourceTypesTypeGetWithHttpInfo(type, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve All SCIM Schema Information
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public scimV2SchemasGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.scimV2SchemasGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.scimV2SchemasGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve All SCIM Schema Information
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public scimV2SchemasGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.scimV2SchemasGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Single SCIM Schema Information
     * @param id The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public scimV2SchemasIdGetWithHttpInfo(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.scimV2SchemasIdGet(id, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.scimV2SchemasIdGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Single SCIM Schema Information
     * @param id The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public scimV2SchemasIdGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.scimV2SchemasIdGetWithHttpInfo(id, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve SCIM Provider
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public scimV2ServiceProviderConfigGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.scimV2ServiceProviderConfigGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.scimV2ServiceProviderConfigGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve SCIM Provider
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public scimV2ServiceProviderConfigGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.scimV2ServiceProviderConfigGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve SCIM Resources
     * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
     * @param [filter] Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
     * @param [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param [sortBy] Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
     * @param [sortOrder] Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
     * @param [startIndex] Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public scimV2TypeGetWithHttpInfo(type: string, filter?: string, attributes?: string, excludedAttributes?: string, sortBy?: string, sortOrder?: string, startIndex?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.scimV2TypeGet(type, filter, attributes, excludedAttributes, sortBy, sortOrder, startIndex, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.scimV2TypeGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve SCIM Resources
     * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
     * @param [filter] Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
     * @param [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param [sortBy] Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
     * @param [sortOrder] Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
     * @param [startIndex] Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public scimV2TypeGet(type: string, filter?: string, attributes?: string, excludedAttributes?: string, sortBy?: string, sortOrder?: string, startIndex?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.scimV2TypeGetWithHttpInfo(type, filter, attributes, excludedAttributes, sortBy, sortOrder, startIndex, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Single SCIM Resource
     * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
     * @param id The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.
     * @param [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public scimV2TypeIdGetWithHttpInfo(type: string, id: string, attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.scimV2TypeIdGet(type, id, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.scimV2TypeIdGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Single SCIM Resource
     * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
     * @param id The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.
     * @param [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public scimV2TypeIdGet(type: string, id: string, attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.scimV2TypeIdGetWithHttpInfo(type, id, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve All Users with SCIM
     * @param [filter] Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
     * @param [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param [sortBy] Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
     * @param [sortOrder] Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.
     * @param [count] Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
     * @param [startIndex] Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public scimV2UsersGetWithHttpInfo(filter?: string, attributes?: string, excludedAttributes?: string, sortBy?: string, sortOrder?: string, count?: string, startIndex?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.scimV2UsersGet(filter, attributes, excludedAttributes, sortBy, sortOrder, count, startIndex, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.scimV2UsersGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve All Users with SCIM
     * @param [filter] Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
     * @param [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param [sortBy] Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
     * @param [sortOrder] Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.
     * @param [count] Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
     * @param [startIndex] Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public scimV2UsersGet(filter?: string, attributes?: string, excludedAttributes?: string, sortBy?: string, sortOrder?: string, count?: string, startIndex?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.scimV2UsersGetWithHttpInfo(filter, attributes, excludedAttributes, sortBy, sortOrder, count, startIndex, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Single User with SCIM
     * @param id The id of the user you wish to update.
     * @param [filter] Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
     * @param [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public scimV2UsersIdGetWithHttpInfo(id: string, filter?: string, attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.scimV2UsersIdGet(id, filter, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.scimV2UsersIdGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Single User with SCIM
     * @param id The id of the user you wish to update.
     * @param [filter] Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
     * @param [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public scimV2UsersIdGet(id: string, filter?: string, attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.scimV2UsersIdGetWithHttpInfo(id, filter, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update User with SCIM
     * @param id The id of the user you wish to update.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public scimV2UsersIdPutWithHttpInfo(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.scimV2UsersIdPut(id, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.scimV2UsersIdPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update User with SCIM
     * @param id The id of the user you wish to update.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public scimV2UsersIdPut(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.scimV2UsersIdPutWithHttpInfo(id, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create User with SCIM
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public scimV2UsersPostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.scimV2UsersPost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.scimV2UsersPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create User with SCIM
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public scimV2UsersPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.scimV2UsersPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Signing Certificate
     * @param certId The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesCertificateCertIdGetWithHttpInfo(certId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesCertificateCertIdGet(certId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesCertificateCertIdGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Signing Certificate
     * @param certId The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesCertificateCertIdGet(certId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesCertificateCertIdGetWithHttpInfo(certId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Disable Configuration Mode
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesConfigurationModeActionsDisablePostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesConfigurationModeActionsDisablePost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesConfigurationModeActionsDisablePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Disable Configuration Mode
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesConfigurationModeActionsDisablePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesConfigurationModeActionsDisablePostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Enable Configuration Mode
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesConfigurationModeActionsEnablePostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesConfigurationModeActionsEnablePost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesConfigurationModeActionsEnablePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Enable Configuration Mode
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesConfigurationModeActionsEnablePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesConfigurationModeActionsEnablePostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Available Direct Data Files
     * @param [extractType] The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.
     * @param [startTime] Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.
     * @param [stopTime] Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesDirectdataFilesGetWithHttpInfo(extractType?: string, startTime?: number, stopTime?: number, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesDirectdataFilesGet(extractType, startTime, stopTime, accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesDirectdataFilesGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Available Direct Data Files
     * @param [extractType] The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.
     * @param [startTime] Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.
     * @param [stopTime] Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesDirectdataFilesGet(extractType?: string, startTime?: number, stopTime?: number, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesDirectdataFilesGetWithHttpInfo(extractType, startTime, stopTime, accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Download Direct Data File
     * @param name The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesDirectdataFilesNameGetWithHttpInfo(name: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesDirectdataFilesNameGet(name, accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesDirectdataFilesNameGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Download Direct Data File
     * @param name The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesDirectdataFilesNameGet(name: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesDirectdataFilesNameGetWithHttpInfo(name, accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Download Item Content
     * @param item The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param [authorization]
     * @param [accept]
     * @param [range] Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format &#x60;bytes&#x3D;{min}-{max}&#x60;. For example, &#x60;bytes&#x3D;0-1000&#x60;.
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesFileStagingItemsContentItemGetWithHttpInfo(item: string, authorization?: string, accept?: string, range?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesFileStagingItemsContentItemGet(item, authorization, accept, range, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesFileStagingItemsContentItemGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Download Item Content
     * @param item The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param [authorization]
     * @param [accept]
     * @param [range] Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format &#x60;bytes&#x3D;{min}-{max}&#x60;. For example, &#x60;bytes&#x3D;0-1000&#x60;.
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesFileStagingItemsContentItemGet(item: string, authorization?: string, accept?: string, range?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesFileStagingItemsContentItemGetWithHttpInfo(item, authorization, accept, range, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete File or Folder
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param [recursive] Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesFileStagingItemsItemDeleteWithHttpInfo(item: string, recursive?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesFileStagingItemsItemDelete(item, recursive, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesFileStagingItemsItemDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete File or Folder
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param [recursive] Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesFileStagingItemsItemDelete(item: string, recursive?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesFileStagingItemsItemDeleteWithHttpInfo(item, recursive, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * List Items at a Path
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param [recursive] If true, the response will contain the contents of all subfolders. If not specified, the default value is false.
     * @param [limit] Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
     * @param [formatResult] If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesFileStagingItemsItemGetWithHttpInfo(item: string, recursive?: string, limit?: string, formatResult?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesFileStagingItemsItemGet(item, recursive, limit, formatResult, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesFileStagingItemsItemGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * List Items at a Path
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param [recursive] If true, the response will contain the contents of all subfolders. If not specified, the default value is false.
     * @param [limit] Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
     * @param [formatResult] If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesFileStagingItemsItemGet(item: string, recursive?: string, limit?: string, formatResult?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesFileStagingItemsItemGetWithHttpInfo(item, recursive, limit, formatResult, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Folder or File
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesFileStagingItemsItemPutWithHttpInfo(item: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesFileStagingItemsItemPut(item, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesFileStagingItemsItemPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Folder or File
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesFileStagingItemsItemPut(item: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesFileStagingItemsItemPutWithHttpInfo(item, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Folder or File
     * @param [authorization]
     * @param [accept]
     * @param [contentMD5] Optional: The MD5 checksum of the file being uploaded.
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesFileStagingItemsPostWithHttpInfo(authorization?: string, accept?: string, contentMD5?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesFileStagingItemsPost(authorization, accept, contentMD5, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesFileStagingItemsPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Folder or File
     * @param [authorization]
     * @param [accept]
     * @param [contentMD5] Optional: The MD5 checksum of the file being uploaded.
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesFileStagingItemsPost(authorization?: string, accept?: string, contentMD5?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesFileStagingItemsPostWithHttpInfo(authorization, accept, contentMD5, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * List Upload Sessions
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesFileStagingUploadGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesFileStagingUploadGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesFileStagingUploadGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * List Upload Sessions
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesFileStagingUploadGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesFileStagingUploadGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Resumable Upload Session
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesFileStagingUploadPostWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesFileStagingUploadPost(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesFileStagingUploadPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Resumable Upload Session
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesFileStagingUploadPost(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesFileStagingUploadPostWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Abort Upload Session
     * @param uploadSessionId
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesFileStagingUploadUploadSessionIdDeleteWithHttpInfo(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesFileStagingUploadUploadSessionIdDelete(uploadSessionId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesFileStagingUploadUploadSessionIdDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Abort Upload Session
     * @param uploadSessionId
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesFileStagingUploadUploadSessionIdDelete(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesFileStagingUploadUploadSessionIdDeleteWithHttpInfo(uploadSessionId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Get Upload Session Details
     * @param uploadSessionId
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesFileStagingUploadUploadSessionIdGetWithHttpInfo(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesFileStagingUploadUploadSessionIdGet(uploadSessionId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesFileStagingUploadUploadSessionIdGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Get Upload Session Details
     * @param uploadSessionId
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesFileStagingUploadUploadSessionIdGet(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesFileStagingUploadUploadSessionIdGetWithHttpInfo(uploadSessionId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * List File Parts Uploaded to Session
     * @param uploadSessionId
     * @param [limit] Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesFileStagingUploadUploadSessionIdPartsGetWithHttpInfo(uploadSessionId: string, limit?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesFileStagingUploadUploadSessionIdPartsGet(uploadSessionId, limit, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesFileStagingUploadUploadSessionIdPartsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * List File Parts Uploaded to Session
     * @param uploadSessionId
     * @param [limit] Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesFileStagingUploadUploadSessionIdPartsGet(uploadSessionId: string, limit?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesFileStagingUploadUploadSessionIdPartsGetWithHttpInfo(uploadSessionId, limit, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Commit Upload Session
     * @param uploadSessionId
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesFileStagingUploadUploadSessionIdPostWithHttpInfo(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesFileStagingUploadUploadSessionIdPost(uploadSessionId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesFileStagingUploadUploadSessionIdPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Commit Upload Session
     * @param uploadSessionId
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesFileStagingUploadUploadSessionIdPost(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesFileStagingUploadUploadSessionIdPostWithHttpInfo(uploadSessionId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Upload to a Session
     * @param uploadSessionId
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIFilePartNumber] The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.
     * @param [contentMD5] Optional: The MD5 checksum of the file part being uploaded.
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesFileStagingUploadUploadSessionIdPutWithHttpInfo(uploadSessionId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIFilePartNumber?: string, contentMD5?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesFileStagingUploadUploadSessionIdPut(uploadSessionId, authorization, accept, contentType, xVaultAPIFilePartNumber, contentMD5, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesFileStagingUploadUploadSessionIdPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Upload to a Session
     * @param uploadSessionId
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIFilePartNumber] The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.
     * @param [contentMD5] Optional: The MD5 checksum of the file part being uploaded.
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesFileStagingUploadUploadSessionIdPut(uploadSessionId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIFilePartNumber?: string, contentMD5?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesFileStagingUploadUploadSessionIdPutWithHttpInfo(uploadSessionId, authorization, accept, contentType, xVaultAPIFilePartNumber, contentMD5, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Job Histories
     * @param [startDate] Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
     * @param [endDate] Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
     * @param [status] Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.
     * @param [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
     * @param [offset] Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesJobsHistoriesGetWithHttpInfo(startDate?: string, endDate?: string, status?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesJobsHistoriesGet(startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesJobsHistoriesGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Job Histories
     * @param [startDate] Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
     * @param [endDate] Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
     * @param [status] Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.
     * @param [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
     * @param [offset] Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesJobsHistoriesGet(startDate?: string, endDate?: string, status?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesJobsHistoriesGetWithHttpInfo(startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Import Bulk Translation File Job Errors
     * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesJobsJobIdErrorsGetWithHttpInfo(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesJobsJobIdErrorsGet(jobId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesJobsJobIdErrorsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Import Bulk Translation File Job Errors
     * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesJobsJobIdErrorsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesJobsJobIdErrorsGetWithHttpInfo(jobId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Job Status
     * @param jobId The ID of the job, returned from the original job request.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesJobsJobIdGetWithHttpInfo(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesJobsJobIdGet(jobId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesJobsJobIdGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Job Status
     * @param jobId The ID of the job, returned from the original job request.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesJobsJobIdGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesJobsJobIdGetWithHttpInfo(jobId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Import Bulk Translation File Job Summary
     * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesJobsJobIdSummaryGetWithHttpInfo(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesJobsJobIdSummaryGet(jobId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesJobsJobIdSummaryGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Import Bulk Translation File Job Summary
     * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesJobsJobIdSummaryGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesJobsJobIdSummaryGetWithHttpInfo(jobId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve SDK Job Tasks
     * @param jobId The ID of the SDK job, returned from the original job request.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesJobsJobIdTasksGetWithHttpInfo(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesJobsJobIdTasksGet(jobId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesJobsJobIdTasksGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve SDK Job Tasks
     * @param jobId The ID of the SDK job, returned from the original job request.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesJobsJobIdTasksGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesJobsJobIdTasksGetWithHttpInfo(jobId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Job Monitors
     * @param [startDate] Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
     * @param [endDate] Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
     * @param [status] Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.
     * @param [limit] Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
     * @param [offset] Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesJobsMonitorsGetWithHttpInfo(startDate?: string, endDate?: string, status?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesJobsMonitorsGet(startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesJobsMonitorsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Job Monitors
     * @param [startDate] Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
     * @param [endDate] Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
     * @param [status] Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.
     * @param [limit] Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
     * @param [offset] Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesJobsMonitorsGet(startDate?: string, endDate?: string, status?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesJobsMonitorsGetWithHttpInfo(startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Start Job
     * @param jobId The ID of the scheduled job instance to start.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesJobsStartNowJobIdPostWithHttpInfo(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesJobsStartNowJobIdPost(jobId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesJobsStartNowJobIdPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Start Job
     * @param jobId The ID of the scheduled job instance to start.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesJobsStartNowJobIdPost(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesJobsStartNowJobIdPostWithHttpInfo(jobId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Extract Data Files
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesLoaderExtractPostWithHttpInfo(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesLoaderExtractPost(authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesLoaderExtractPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Extract Data Files
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesLoaderExtractPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesLoaderExtractPostWithHttpInfo(authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Load Failure Log Results
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesLoaderJobIdTasksTaskIdFailurelogGetWithHttpInfo(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesLoaderJobIdTasksTaskIdFailurelogGet(jobId, taskId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesLoaderJobIdTasksTaskIdFailurelogGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Load Failure Log Results
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesLoaderJobIdTasksTaskIdFailurelogGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesLoaderJobIdTasksTaskIdFailurelogGetWithHttpInfo(jobId, taskId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Loader Extract Results
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesLoaderJobIdTasksTaskIdResultsGetWithHttpInfo(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesLoaderJobIdTasksTaskIdResultsGet(jobId, taskId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesLoaderJobIdTasksTaskIdResultsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Loader Extract Results
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesLoaderJobIdTasksTaskIdResultsGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesLoaderJobIdTasksTaskIdResultsGetWithHttpInfo(jobId, taskId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Loader Extract Renditions Results
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesLoaderJobIdTasksTaskIdResultsRenditionsGetWithHttpInfo(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(jobId, taskId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesLoaderJobIdTasksTaskIdResultsRenditionsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Loader Extract Renditions Results
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesLoaderJobIdTasksTaskIdResultsRenditionsGetWithHttpInfo(jobId, taskId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Load Success Log Results
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesLoaderJobIdTasksTaskIdSuccesslogGetWithHttpInfo(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesLoaderJobIdTasksTaskIdSuccesslogGet(jobId, taskId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesLoaderJobIdTasksTaskIdSuccesslogGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Load Success Log Results
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesLoaderJobIdTasksTaskIdSuccesslogGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesLoaderJobIdTasksTaskIdSuccesslogGetWithHttpInfo(jobId, taskId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Load Data Objects
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesLoaderLoadPostWithHttpInfo(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesLoaderLoadPost(authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesLoaderLoadPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Load Data Objects
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesLoaderLoadPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesLoaderLoadPostWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Validate Package
     * @param [authorization]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesPackageActionsValidatePostWithHttpInfo(authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesPackageActionsValidatePost(authorization, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesPackageActionsValidatePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Validate Package
     * @param [authorization]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesPackageActionsValidatePost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesPackageActionsValidatePostWithHttpInfo(authorization, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Export Package
     * @param [authorization]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesPackagePostWithHttpInfo(authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesPackagePost(authorization, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesPackagePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Export Package
     * @param [authorization]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesPackagePost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesPackagePostWithHttpInfo(authorization, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Import Package
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesPackagePutWithHttpInfo(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesPackagePut(authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesPackagePutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Import Package
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesPackagePut(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesPackagePutWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve All Queues
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesQueuesGetWithHttpInfo(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesQueuesGet(authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesQueuesGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve All Queues
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesQueuesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesQueuesGetWithHttpInfo(authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Disable Delivery
     * @param queueName The name of a specific Queue.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesQueuesQueueNameActionsDisableDeliveryPutWithHttpInfo(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesQueuesQueueNameActionsDisableDeliveryPut(queueName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesQueuesQueueNameActionsDisableDeliveryPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Disable Delivery
     * @param queueName The name of a specific Queue.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesQueuesQueueNameActionsDisableDeliveryPut(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesQueuesQueueNameActionsDisableDeliveryPutWithHttpInfo(queueName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Enable Delivery
     * @param queueName The name of a specific Queue.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesQueuesQueueNameActionsEnableDeliveryPutWithHttpInfo(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesQueuesQueueNameActionsEnableDeliveryPut(queueName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesQueuesQueueNameActionsEnableDeliveryPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Enable Delivery
     * @param queueName The name of a specific Queue.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesQueuesQueueNameActionsEnableDeliveryPut(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesQueuesQueueNameActionsEnableDeliveryPutWithHttpInfo(queueName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Reset Queue
     * @param queueName The name of a specific Queue.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesQueuesQueueNameActionsResetPutWithHttpInfo(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesQueuesQueueNameActionsResetPut(queueName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesQueuesQueueNameActionsResetPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Reset Queue
     * @param queueName The name of a specific Queue.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesQueuesQueueNameActionsResetPut(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesQueuesQueueNameActionsResetPutWithHttpInfo(queueName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Queue Status
     * @param queueName The name of a specific queue. For example, queue__c.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesQueuesQueueNameGetWithHttpInfo(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesQueuesQueueNameGet(queueName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesQueuesQueueNameGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Queue Status
     * @param queueName The name of a specific queue. For example, queue__c.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesQueuesQueueNameGet(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesQueuesQueueNameGetWithHttpInfo(queueName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Validate Imported Package
     * @param packageId The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesVobjectVaultPackageVPackageIdActionsValidatePostWithHttpInfo(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.servicesVobjectVaultPackageVPackageIdActionsValidatePost(packageId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.servicesVobjectVaultPackageVPackageIdActionsValidatePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Validate Imported Package
     * @param packageId The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public servicesVobjectVaultPackageVPackageIdActionsValidatePost(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.servicesVobjectVaultPackageVPackageIdActionsValidatePostWithHttpInfo(packageId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * End Session
     * @param [accept]
     * @param [authorization] The Vault sessionId to end.
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public sessionDeleteWithHttpInfo(accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.sessionDelete(accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.sessionDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * End Session
     * @param [accept]
     * @param [authorization] The Vault sessionId to end.
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public sessionDelete(accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.sessionDeleteWithHttpInfo(accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Download Single Client Code Distribution
     * @param distributionName The name attribute of the client code distribution to download.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public uicodeDistributionsDistributionNameCodeGetWithHttpInfo(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.uicodeDistributionsDistributionNameCodeGet(distributionName, accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.uicodeDistributionsDistributionNameCodeGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Download Single Client Code Distribution
     * @param distributionName The name attribute of the client code distribution to download.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public uicodeDistributionsDistributionNameCodeGet(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.uicodeDistributionsDistributionNameCodeGetWithHttpInfo(distributionName, accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Single Client Code Distribution
     * @param distributionName The name attribute of the client code distribution to delete.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public uicodeDistributionsDistributionNameDeleteWithHttpInfo(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.uicodeDistributionsDistributionNameDelete(distributionName, accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.uicodeDistributionsDistributionNameDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Single Client Code Distribution
     * @param distributionName The name attribute of the client code distribution to delete.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public uicodeDistributionsDistributionNameDelete(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.uicodeDistributionsDistributionNameDeleteWithHttpInfo(distributionName, accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Single Client Code Distribution Metadata
     * @param distributionName The name attribute of the client code distribution to delete.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public uicodeDistributionsDistributionNameGetWithHttpInfo(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.uicodeDistributionsDistributionNameGet(distributionName, accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.uicodeDistributionsDistributionNameGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Single Client Code Distribution Metadata
     * @param distributionName The name attribute of the client code distribution to delete.
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public uicodeDistributionsDistributionNameGet(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.uicodeDistributionsDistributionNameGetWithHttpInfo(distributionName, accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve All Client Code Distribution Metadata
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public uicodeDistributionsGetWithHttpInfo(accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.uicodeDistributionsGet(accept, authorization, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.uicodeDistributionsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve All Client Code Distribution Metadata
     * @param [accept]
     * @param [authorization]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public uicodeDistributionsGet(accept?: string, authorization?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.uicodeDistributionsGetWithHttpInfo(accept, authorization, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Add or Replace Single Client Code Distribution
     * @param [accept]
     * @param [authorization]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public uicodeDistributionsPostWithHttpInfo(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.uicodeDistributionsPost(accept, authorization, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.uicodeDistributionsPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Add or Replace Single Client Code Distribution
     * @param [accept]
     * @param [authorization]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public uicodeDistributionsPost(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.uicodeDistributionsPostWithHttpInfo(accept, authorization, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Deploy Package
     * @param packageId The id field value of the vault_package__v object record used for deployment. See Import Package.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectVaultPackageVPackageIdActionsDeployPostWithHttpInfo(packageId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectVaultPackageVPackageIdActionsDeployPost(packageId, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectVaultPackageVPackageIdActionsDeployPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Deploy Package
     * @param packageId The id field value of the vault_package__v object record used for deployment. See Import Package.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectVaultPackageVPackageIdActionsDeployPost(packageId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectVaultPackageVPackageIdActionsDeployPostWithHttpInfo(packageId, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Package Deploy Results
     * @param packageId The id field value of the vault_package__v object record used for deployment. See Deploy Package.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectVaultPackageVPackageIdActionsDeployResultsGetWithHttpInfo(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectVaultPackageVPackageIdActionsDeployResultsGet(packageId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectVaultPackageVPackageIdActionsDeployResultsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Package Deploy Results
     * @param packageId The id field value of the vault_package__v object record used for deployment. See Deploy Package.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectVaultPackageVPackageIdActionsDeployResultsGet(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectVaultPackageVPackageIdActionsDeployResultsGetWithHttpInfo(packageId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Results of Cascade Delete Job
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param jobStatus
     * @param jobId
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetWithHttpInfo(objectName: string, jobStatus: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Results of Cascade Delete Job
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param jobStatus
     * @param jobId
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(objectName: string, jobStatus: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetWithHttpInfo(objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Results of Deep Copy Job
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param jobStatus The ID of the job, retrieved from the response of the job request.
     * @param jobId Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetWithHttpInfo(objectName: string, jobStatus: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Results of Deep Copy Job
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param jobStatus The ID of the job, retrieved from the response of the job request.
     * @param jobId Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(objectName: string, jobStatus: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetWithHttpInfo(objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create a Placeholder from an EDL Item
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsEdlItemVActionsCreateplaceholderPostWithHttpInfo(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsEdlItemVActionsCreateplaceholderPost(authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsEdlItemVActionsCreateplaceholderPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create a Placeholder from an EDL Item
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsEdlItemVActionsCreateplaceholderPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsEdlItemVActionsCreateplaceholderPostWithHttpInfo(authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Download Merge Records Job Log
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsMergesJobIdLogGetWithHttpInfo(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsMergesJobIdLogGet(jobId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsMergesJobIdLogGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Download Merge Records Job Log
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsMergesJobIdLogGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsMergesJobIdLogGetWithHttpInfo(jobId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Record Merge Results
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsMergesJobIdResultsGetWithHttpInfo(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsMergesJobIdResultsGet(jobId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsMergesJobIdResultsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Record Merge Results
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsMergesJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsMergesJobIdResultsGetWithHttpInfo(jobId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Record Merge Status
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsMergesJobIdStatusGetWithHttpInfo(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsMergesJobIdStatusGet(jobId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsMergesJobIdStatusGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Record Merge Status
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsMergesJobIdStatusGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsMergesJobIdStatusGetWithHttpInfo(jobId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Initiate Object Action on Multiple Records
     * @param objectName The object name__v field value.
     * @param actionName Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameActionsActionNamePostWithHttpInfo(objectName: string, actionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameActionsActionNamePost(objectName, actionName, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameActionsActionNamePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Initiate Object Action on Multiple Records
     * @param objectName The object name__v field value.
     * @param actionName Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameActionsActionNamePost(objectName: string, actionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameActionsActionNamePostWithHttpInfo(objectName, actionName, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Change Object Type
     * @param objectName The name of the object.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameActionsChangetypePostWithHttpInfo(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameActionsChangetypePost(objectName, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameActionsChangetypePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Change Object Type
     * @param objectName The name of the object.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameActionsChangetypePost(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameActionsChangetypePostWithHttpInfo(objectName, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Initiate Record Merge
     * @param objectName The object name__v field value. For example, account__v. This object must have Enable Merges configured.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param [vobjectsObjectNameActionsMergePostRequestInner]
     */
    public vobjectsObjectNameActionsMergePostWithHttpInfo(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, vobjectsObjectNameActionsMergePostRequestInner?: Array<VobjectsObjectNameActionsMergePostRequestInner>, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameActionsMergePost(objectName, authorization, contentType, accept, xVaultAPIClientID, vobjectsObjectNameActionsMergePostRequestInner, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameActionsMergePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Initiate Record Merge
     * @param objectName The object name__v field value. For example, account__v. This object must have Enable Merges configured.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param [vobjectsObjectNameActionsMergePostRequestInner]
     */
    public vobjectsObjectNameActionsMergePost(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, vobjectsObjectNameActionsMergePostRequestInner?: Array<VobjectsObjectNameActionsMergePostRequestInner>, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameActionsMergePostWithHttpInfo(objectName, authorization, contentType, accept, xVaultAPIClientID, vobjectsObjectNameActionsMergePostRequestInner, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Roll-up Field Recalculation Status
     * @param objectName The name of the object for which to check the status of a Roll-up field recalculation.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameActionsRecalculaterollupsGetWithHttpInfo(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameActionsRecalculaterollupsGet(objectName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameActionsRecalculaterollupsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Roll-up Field Recalculation Status
     * @param objectName The name of the object for which to check the status of a Roll-up field recalculation.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameActionsRecalculaterollupsGet(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameActionsRecalculaterollupsGetWithHttpInfo(objectName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Recalculate Roll-up Fields
     * @param objectName The name of the object for which to check the status of a Roll-up field recalculation.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameActionsRecalculaterollupsPostWithHttpInfo(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameActionsRecalculaterollupsPost(objectName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameActionsRecalculaterollupsPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Recalculate Roll-up Fields
     * @param objectName The name of the object for which to check the status of a Roll-up field recalculation.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameActionsRecalculaterollupsPost(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameActionsRecalculaterollupsPostWithHttpInfo(objectName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Corporate Currency Fields
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameActionsUpdatecorporatecurrencyPutWithHttpInfo(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameActionsUpdatecorporatecurrencyPut(objectName, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameActionsUpdatecorporatecurrencyPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Corporate Currency Fields
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameActionsUpdatecorporatecurrencyPut(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameActionsUpdatecorporatecurrencyPutWithHttpInfo(objectName, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Multiple Object Record Attachments
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param [idParam]
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameAttachmentsBatchDeleteWithHttpInfo(objectName: string, idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameAttachmentsBatchDelete(objectName, idParam, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameAttachmentsBatchDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Multiple Object Record Attachments
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param [idParam]
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameAttachmentsBatchDelete(objectName: string, idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameAttachmentsBatchDeleteWithHttpInfo(objectName, idParam, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Multiple Object Record Attachments
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameAttachmentsBatchPostWithHttpInfo(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameAttachmentsBatchPost(objectName, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameAttachmentsBatchPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Multiple Object Record Attachments
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameAttachmentsBatchPost(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameAttachmentsBatchPostWithHttpInfo(objectName, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Multiple Object Record Attachment Descriptions
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameAttachmentsBatchPutWithHttpInfo(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameAttachmentsBatchPut(objectName, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameAttachmentsBatchPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Multiple Object Record Attachment Descriptions
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameAttachmentsBatchPut(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameAttachmentsBatchPutWithHttpInfo(objectName, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Object Records
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param [authorization]
     * @param [contentType] Can be text/csv or application/json
     * @param [accept] Can be text/csv or application/json
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameDeleteWithHttpInfo(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameDelete(objectName, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Object Records
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param [authorization]
     * @param [contentType] Can be text/csv or application/json
     * @param [accept] Can be text/csv or application/json
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameDelete(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameDeleteWithHttpInfo(objectName, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Object Record Roles
     * @param objectName The object name.
     * @param id The id of the document, binder, or object record.
     * @param roleName Optional: Include a role name to filter for a specific role. For example, owner__v.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameIdRolesRoleNameGetWithHttpInfo(objectName: string, id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameIdRolesRoleNameGet(objectName, id, roleName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameIdRolesRoleNameGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Object Record Roles
     * @param objectName The object name.
     * @param id The id of the document, binder, or object record.
     * @param roleName Optional: Include a role name to filter for a specific role. For example, owner__v.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameIdRolesRoleNameGet(objectName: string, id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameIdRolesRoleNameGetWithHttpInfo(objectName, id, roleName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Object User Actions Details
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value from which to retrieve user actions.
     * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdActionsActionNameGetWithHttpInfo(objectName: string, objectRecordId: string, actionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameObjectRecordIdActionsActionNameGet(objectName, objectRecordId, actionName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameObjectRecordIdActionsActionNameGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Object User Actions Details
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value from which to retrieve user actions.
     * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdActionsActionNameGet(objectName: string, objectRecordId: string, actionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameObjectRecordIdActionsActionNameGetWithHttpInfo(objectName, objectRecordId, actionName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Initiate Object Action on a Single Record
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value from which to retrieve user actions.
     * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdActionsActionNamePostWithHttpInfo(objectName: string, objectRecordId: string, actionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameObjectRecordIdActionsActionNamePost(objectName, objectRecordId, actionName, authorization, contentType, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameObjectRecordIdActionsActionNamePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Initiate Object Action on a Single Record
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value from which to retrieve user actions.
     * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param [authorization]
     * @param [contentType]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdActionsActionNamePost(objectName: string, objectRecordId: string, actionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameObjectRecordIdActionsActionNamePostWithHttpInfo(objectName, objectRecordId, actionName, authorization, contentType, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Cascade Delete Object Record
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdActionsCascadedeletePostWithHttpInfo(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameObjectRecordIdActionsCascadedeletePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Cascade Delete Object Record
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameObjectRecordIdActionsCascadedeletePostWithHttpInfo(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Deep Copy Object Record
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdActionsDeepcopyPostWithHttpInfo(objectName: string, objectRecordId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameObjectRecordIdActionsDeepcopyPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Deep Copy Object Record
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(objectName: string, objectRecordId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameObjectRecordIdActionsDeepcopyPostWithHttpInfo(objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Object Record User Actions
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value.
     * @param [loc] Optional: When true, retrieves localized (translated) strings for the label. 
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdActionsGetWithHttpInfo(objectName: string, objectRecordId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameObjectRecordIdActionsGet(objectName, objectRecordId, loc, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameObjectRecordIdActionsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Object Record User Actions
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value.
     * @param [loc] Optional: When true, retrieves localized (translated) strings for the label. 
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdActionsGet(objectName: string, objectRecordId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameObjectRecordIdActionsGetWithHttpInfo(objectName, objectRecordId, loc, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Download Attachment Field File
     * @param objectName The object name__v field value. For example, product__v.
     * @param objectRecordId The object record id field value.
     * @param attachmentFieldName The name of the Attachment field to update.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetWithHttpInfo(objectName: string, objectRecordId: string, attachmentFieldName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Download Attachment Field File
     * @param objectName The object name__v field value. For example, product__v.
     * @param objectRecordId The object record id field value.
     * @param attachmentFieldName The name of the Attachment field to update.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(objectName: string, objectRecordId: string, attachmentFieldName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetWithHttpInfo(objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Attachment Field File
     * @param objectName The object name__v field value. For example, product__v.
     * @param objectRecordId The object record id field value.
     * @param attachmentFieldName The name of the Attachment field to update.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostWithHttpInfo(objectName: string, objectRecordId: string, attachmentFieldName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Attachment Field File
     * @param objectName The object name__v field value. For example, product__v.
     * @param objectRecordId The object record id field value.
     * @param attachmentFieldName The name of the Attachment field to update.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(objectName: string, objectRecordId: string, attachmentFieldName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostWithHttpInfo(objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Download All Attachment Field Files
     * @param objectName The object name__v field value. For example, product__v.
     * @param objectRecordId The object record id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetWithHttpInfo(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Download All Attachment Field Files
     * @param objectName The object name__v field value. For example, product__v.
     * @param objectRecordId The object record id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetWithHttpInfo(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Object Record Attachment
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteWithHttpInfo(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Object Record Attachment
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteWithHttpInfo(objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Object Record Attachment Metadata
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetWithHttpInfo(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Object Record Attachment Metadata
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetWithHttpInfo(objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Object Record Attachment Description
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutWithHttpInfo(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Object Record Attachment Description
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutWithHttpInfo(objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Delete Object Record Attachment Version
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteWithHttpInfo(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Delete Object Record Attachment Version
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteWithHttpInfo(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Download Object Record Attachment File
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Download Object Record Attachment File
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetWithHttpInfo(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Object Record Attachment Version Metadata
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Object Record Attachment Version Metadata
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetWithHttpInfo(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Restore Object Record Attachment Version
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param [restore]
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostWithHttpInfo(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, restore?: boolean, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(objectName, objectRecordId, attachmentId, attachmentVersion, restore, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Restore Object Record Attachment Version
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param [restore]
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, restore?: boolean, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostWithHttpInfo(objectName, objectRecordId, attachmentId, attachmentVersion, restore, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Object Record Attachment Versions
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetWithHttpInfo(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Object Record Attachment Versions
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetWithHttpInfo(objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Download All Object Record Attachment Files
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsFileGetWithHttpInfo(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameObjectRecordIdAttachmentsFileGet(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameObjectRecordIdAttachmentsFileGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Download All Object Record Attachment Files
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsFileGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameObjectRecordIdAttachmentsFileGetWithHttpInfo(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Object Record Attachments
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsGetWithHttpInfo(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameObjectRecordIdAttachmentsGet(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameObjectRecordIdAttachmentsGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Object Record Attachments
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameObjectRecordIdAttachmentsGetWithHttpInfo(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create Object Record Attachment
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsPostWithHttpInfo(objectName: string, objectRecordId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameObjectRecordIdAttachmentsPost(objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameObjectRecordIdAttachmentsPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create Object Record Attachment
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsPost(objectName: string, objectRecordId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameObjectRecordIdAttachmentsPostWithHttpInfo(objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Complete Audit History for a Single Object Record
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value from which to retrieve user actions.
     * @param [startDate] Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. 
     * @param [endDate] Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
     * @param [formatResult] To request a CSV file of your audit history, use csv. 
     * @param [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
     * @param [events] Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;Copy,Edit,Delete. If omitted, defaults to all audit events.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAudittrailGetWithHttpInfo(objectName: string, objectRecordId: string, startDate?: string, endDate?: string, formatResult?: string, limit?: string, offset?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameObjectRecordIdAudittrailGet(objectName, objectRecordId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameObjectRecordIdAudittrailGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Complete Audit History for a Single Object Record
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value from which to retrieve user actions.
     * @param [startDate] Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. 
     * @param [endDate] Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
     * @param [formatResult] To request a CSV file of your audit history, use csv. 
     * @param [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
     * @param [events] Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;Copy,Edit,Delete. If omitted, defaults to all audit events.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdAudittrailGet(objectName: string, objectRecordId: string, startDate?: string, endDate?: string, formatResult?: string, limit?: string, offset?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameObjectRecordIdAudittrailGetWithHttpInfo(objectName, objectRecordId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Object Record
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdGetWithHttpInfo(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameObjectRecordIdGet(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameObjectRecordIdGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Object Record
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameObjectRecordIdGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameObjectRecordIdGetWithHttpInfo(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Create & Upsert Object Records
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param [idParam] To upsert object records, add &#x60;idParam&#x3D;{field_name}&#x60; to the request endpoint. You can use any object field which has &#x60;unique&#x60; set to &#x60;true&#x60; in the object metadata. For example, &#x60;idParam&#x3D;external_id__v&#x60;.
     * @param [authorization]
     * @param [contentType] Can be text/csv or application/json
     * @param [accept] Can be text/csv or application/json
     * @param [xVaultAPIMigrationMode] If set to &#x60;true&#x60;, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
     * @param [xVaultAPINoTriggers] If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNamePostWithHttpInfo(objectName: string, idParam?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPINoTriggers?: boolean, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNamePost(objectName, idParam, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNamePostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Create & Upsert Object Records
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param [idParam] To upsert object records, add &#x60;idParam&#x3D;{field_name}&#x60; to the request endpoint. You can use any object field which has &#x60;unique&#x60; set to &#x60;true&#x60; in the object metadata. For example, &#x60;idParam&#x3D;external_id__v&#x60;.
     * @param [authorization]
     * @param [contentType] Can be text/csv or application/json
     * @param [accept] Can be text/csv or application/json
     * @param [xVaultAPIMigrationMode] If set to &#x60;true&#x60;, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
     * @param [xVaultAPINoTriggers] If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNamePost(objectName: string, idParam?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPINoTriggers?: boolean, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNamePostWithHttpInfo(objectName, idParam, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Update Object Records
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param [authorization]
     * @param [contentType] Can be text/csv or application/json
     * @param [accept] Can be text/csv or application/json
     * @param [xVaultAPIMigrationMode] If set to &#x60;true&#x60;, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
     * @param [xVaultAPINoTriggers] If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNamePutWithHttpInfo(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPINoTriggers?: boolean, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNamePut(objectName, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNamePutWithHttpInfo(rsp)));
            }));
    }

    /**
     * Update Object Records
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param [authorization]
     * @param [contentType] Can be text/csv or application/json
     * @param [accept] Can be text/csv or application/json
     * @param [xVaultAPIMigrationMode] If set to &#x60;true&#x60;, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
     * @param [xVaultAPINoTriggers] If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNamePut(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPINoTriggers?: boolean, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNamePutWithHttpInfo(objectName, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Remove Users & Groups from Roles on Object Records
     * @param objectName The name of the object where you want to remove roles.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameRolesDeleteWithHttpInfo(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameRolesDelete(objectName, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameRolesDeleteWithHttpInfo(rsp)));
            }));
    }

    /**
     * Remove Users & Groups from Roles on Object Records
     * @param objectName The name of the object where you want to remove roles.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameRolesDelete(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameRolesDeleteWithHttpInfo(objectName, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Assign Users & Groups to Roles on Object Records
     * @param objectName The name of the object where you want to remove roles.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameRolesPostWithHttpInfo(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsObjectNameRolesPost(objectName, authorization, accept, contentType, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsObjectNameRolesPostWithHttpInfo(rsp)));
            }));
    }

    /**
     * Assign Users & Groups to Roles on Object Records
     * @param objectName The name of the object where you want to remove roles.
     * @param [authorization]
     * @param [accept]
     * @param [contentType]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsObjectNameRolesPost(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsObjectNameRolesPostWithHttpInfo(objectName, authorization, accept, contentType, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

    /**
     * Retrieve Outbound Package Dependencies
     * @param packageId The ID of the outbound_package__v record from which to retrieve dependencies.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsOutboundPackageVPackageIdDependenciesGetWithHttpInfo(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<HttpInfo<void>> {
        const _config = mergeConfiguration(this.configuration, _options);

        const requestContextPromise = this.requestFactory.vobjectsOutboundPackageVPackageIdDependenciesGet(packageId, authorization, accept, xVaultAPIClientID, _config);
        // build promise chain
        let middlewarePreObservable = from<RequestContext>(requestContextPromise);
        for (const middleware of _config.middleware) {
            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));
        }

        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => _config.httpApi.send(ctx))).
            pipe(mergeMap((response: ResponseContext) => {
                let middlewarePostObservable = of(response);
                for (const middleware of _config.middleware.reverse()) {
                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));
                }
                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.vobjectsOutboundPackageVPackageIdDependenciesGetWithHttpInfo(rsp)));
            }));
    }

    /**
     * Retrieve Outbound Package Dependencies
     * @param packageId The ID of the outbound_package__v record from which to retrieve dependencies.
     * @param [authorization]
     * @param [accept]
     * @param [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     */
    public vobjectsOutboundPackageVPackageIdDependenciesGet(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, _options?: ConfigurationOptions): Observable<void> {
        return this.vobjectsOutboundPackageVPackageIdDependenciesGetWithHttpInfo(packageId, authorization, accept, xVaultAPIClientID, _options).pipe(map((apiResponse: HttpInfo<void>) => apiResponse.data));
    }

}
