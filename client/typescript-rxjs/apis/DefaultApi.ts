// tslint:disable
/**
 * Veeva Vault API v25.1
 * The latest GA version of the Vault REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    VobjectsObjectNameActionsMergePostRequestInner,
} from '../models';

export interface ApiGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ApiMdlComponentsComponentTypeAndRecordNameFilesGetRequest {
    componentTypeAndRecordName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ApiMdlComponentsComponentTypeAndRecordNameGetRequest {
    componentTypeAndRecordName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ApiMdlExecuteAsyncJobIdResultsGetRequest {
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ApiMdlExecuteAsyncPostRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ApiMdlExecutePostRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ApiMdlFilesPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface AudittrailAuditTrailTypeGetRequest {
    auditTrailType: string;
    startDate?: string;
    endDate?: string;
    allDates?: string;
    formatResult?: string;
    limit?: string;
    offset?: string;
    objects?: string;
    events?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface AuthDiscoveryPostRequest {
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface AuthOauthSessionOathOidcProfileIdPostRequest {
    oathOidcProfileId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface AuthPostRequest {
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface CodeClassNameDeleteRequest {
    className: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface CodeClassNameDisablePutRequest {
    className: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface CodeClassNameEnablePutRequest {
    className: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface CodeClassNameGetRequest {
    className: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface CodeProfilerGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface CodeProfilerPostRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface CodeProfilerSessionNameActionsEndPostRequest {
    sessionName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface CodeProfilerSessionNameDeleteRequest {
    sessionName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface CodeProfilerSessionNameGetRequest {
    sessionName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface CodeProfilerSessionNameResultsGetRequest {
    sessionName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface CodePutRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface CompositesTreesEdlHierarchyOrTemplateActionsListnodesPostRequest {
    edlHierarchyOrTemplate: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface CompositesTreesEdlHierarchyOrTemplateGetRequest {
    edlHierarchyOrTemplate: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface CompositesTreesEdlHierarchyVParentNodeIdChildrenGetRequest {
    parentNodeId: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface CompositesTreesEdlHierarchyVParentNodeIdChildrenPutRequest {
    parentNodeId: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ConfigurationComponentTypeAndRecordNameGetRequest {
    componentTypeAndRecordName: string;
    loc?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ConfigurationComponentTypeGetRequest {
    componentType: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ConfigurationObjectNameAndObjectTypeGetRequest {
    objectNameAndObjectType: string;
    loc?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ConfigurationObjecttypeGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ConfigurationRoleAssignmentRuleDeleteRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ConfigurationRoleAssignmentRuleGetRequest {
    lifecycleV?: string;
    roleV?: string;
    productV?: string;
    countryV?: string;
    studyV?: string;
    studyCountryV?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ConfigurationRoleAssignmentRulePostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ConfigurationRoleAssignmentRulePutRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface DelegationLoginPostRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface DelegationVaultsGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface KeepAlivePostRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface LimitsGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface LogsApiUsageGetRequest {
    date?: string;
    logFormat?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface LogsCodeDebugGetRequest {
    userId?: string;
    includeInactive?: boolean;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface LogsCodeDebugIdActionsResetDeleteRequest {
    id: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface LogsCodeDebugIdActionsResetPostRequest {
    id: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface LogsCodeDebugIdFilesGetRequest {
    id: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface LogsCodeDebugIdGetRequest {
    id: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface LogsCodeDebugPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface LogsCodeRuntimeGetRequest {
    date?: string;
    logFormat?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MessagesMessageTypeActionsImportPostRequest {
    messageType: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MessagesMessageTypeLanguageLangActionsExportPostRequest {
    messageType: string;
    lang: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataAudittrailAuditTrailTypeGetRequest {
    auditTrailType: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataAudittrailGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataComponentsComponentTypeGetRequest {
    componentType: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataComponentsGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsBindersTemplatesBindernodesGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsBindersTemplatesGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetRequest {
    placemarkType: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetRequest {
    referenceType: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetRequest {
    annotationType: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetRequest {
    eventType: string;
    eventSubtype: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsEventsGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsLockGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsPropertiesFindCommonPostRequest {
    contentType?: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsPropertiesGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsTemplatesGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsTypesGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsTypesTypeGetRequest {
    type: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsTypesTypeRelationshipsGetRequest {
    type: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetRequest {
    type: string;
    subtype: string;
    classification: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsDocumentsTypesTypeSubtypesSubtypeGetRequest {
    type: string;
    subtype: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsGroupsGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsSecuritypoliciesGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataObjectsUsersGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataQueryDocumentsRelationshipsDocumentSignatureSysrGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataVobjectsGetRequest {
    loc?: boolean;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataVobjectsObjectNameActionsCanceldeploymentPostRequest {
    objectName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataVobjectsObjectNameFieldsObjectFieldNameGetRequest {
    objectName: string;
    objectFieldName: string;
    loc?: boolean;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataVobjectsObjectNameGetRequest {
    objectName: string;
    loc?: boolean;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataVobjectsObjectNamePageLayoutsGetRequest {
    objectName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface MetadataVobjectsObjectNamePageLayoutsLayoutNameGetRequest {
    objectName: string;
    layoutName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface NotificationsHistoriesGetRequest {
    startDate?: string;
    endDate?: string;
    allDates?: boolean;
    formatResult?: string;
    limit?: string;
    offset?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectWorkflowActionsActionGetRequest {
    action: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectWorkflowActionsActionPostRequest {
    action: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectWorkflowActionsCanceltasksPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectWorkflowActionsCancelworkflowsPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectWorkflowActionsGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectWorkflowActionsReassigntasksPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectWorkflowActionsReplaceworkflowownerPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersActionsExportJobIdResultsGetRequest {
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdActionsExportPostRequest {
    binderId: string;
    source?: boolean;
    renditiontype?: string;
    docversion?: string;
    attachments?: string;
    _export?: string;
    docfield?: boolean;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdActionsPostRequest {
    binderId: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdBindingRulePutRequest {
    binderId: string;
    contentType?: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdDeleteRequest {
    binderId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdDocumentsNodeIdBindingRulePutRequest {
    binderId: string;
    nodeId: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdDocumentsPostRequest {
    binderId: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdDocumentsSectionIdDeleteRequest {
    binderId: string;
    sectionId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdDocumentsSectionIdPutRequest {
    binderId: string;
    sectionId: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdGetRequest {
    binderId: string;
    depth?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdPostRequest {
    binderId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdPutRequest {
    binderId: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteRequest {
    binderId: string;
    roleNameAndUserOrGroup: string;
    id: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdSectionsNodeIdBindingRulePutRequest {
    binderId: string;
    nodeId: string;
    contentType?: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdSectionsNodeIdPutRequest {
    binderId: string;
    nodeId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdSectionsPostRequest {
    binderId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdSectionsSectionIdDeleteRequest {
    binderId: string;
    sectionId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdSectionsSectionIdGetRequest {
    binderId: string;
    sectionId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdVersionsGetRequest {
    binderId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostRequest {
    binderId: string;
    majorVersion: string;
    minorVersion: string;
    source?: boolean;
    renditiontype?: string;
    docversion?: string;
    attachments?: string;
    _export?: string;
    docfield?: boolean;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteRequest {
    binderId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdVersionsMajorVersionMinorVersionGetRequest {
    binderId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdVersionsMajorVersionMinorVersionPutRequest {
    binderId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostRequest {
    binderId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteRequest {
    binderId: string;
    majorVersion: string;
    minorVersion: string;
    relationshipId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetRequest {
    binderId: string;
    majorVersion: string;
    minorVersion: string;
    relationshipId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetRequest {
    binderId: string;
    majorVersion: string;
    minorVersion: string;
    sectionId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersIdRolesGetRequest {
    id: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersIdRolesPostRequest {
    id: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersIdRolesRoleNameGetRequest {
    id: string;
    roleName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetRequest {
    id: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetRequest {
    id: string;
    majorVersion: string;
    minorVersion: string;
    nameV: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutRequest {
    id: string;
    majorVersion: string;
    minorVersion: string;
    nameV: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersLifecycleActionsPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersLifecycleActionsUserActionNamePutRequest {
    userActionName: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersPostRequest {
    async?: boolean;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersTemplatesGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersTemplatesPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersTemplatesPutRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersTemplatesTemplateNameBindernodesGetRequest {
    templateName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersTemplatesTemplateNameBindernodesPostRequest {
    templateName: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersTemplatesTemplateNameBindernodesPutRequest {
    templateName: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersTemplatesTemplateNameDeleteRequest {
    templateName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsBindersTemplatesTemplateNameGetRequest {
    templateName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDeletionsDocumentsGetRequest {
    startDate?: string;
    endDate?: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDeletionsVobjectsObjectNameGetRequest {
    objectName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsActionsGetRequest {
    loc?: boolean;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetRequest {
    lifecycleAndStateAndAction: string;
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsActionsWorkflowNameGetRequest {
    workflowName: string;
    loc?: boolean;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsActionsWorkflowNamePostRequest {
    workflowName: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsAnnotationsBatchDeleteRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsAnnotationsBatchPostRequest {
    authorization: string;
    contentType: string;
    accept: string;
    xVaultAPIClientID: string;
}

export interface ObjectsDocumentsAnnotationsBatchPutRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsAnnotationsRepliesBatchPostRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsAttachmentsBatchDeleteRequest {
    accept?: string;
    authorization?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsAttachmentsBatchPostRequest {
    accept?: string;
    authorization?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsAttachmentsBatchPutRequest {
    accept?: string;
    authorization?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsBatchActionsFileextractJobIdResultsGetRequest {
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsBatchActionsFileextractPostRequest {
    source?: boolean;
    renditions?: boolean;
    allversions?: boolean;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsBatchActionsReclassifyPutRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIMigrationMode?: boolean;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsBatchActionsRerenderPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsBatchDeleteRequest {
    idParam?: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsBatchLockDeleteRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsBatchPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIMigrationMode?: boolean;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsBatchPutRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIMigrationMode?: boolean;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAnchorsGetRequest {
    docId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAnnotationsFileGetRequest {
    docId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAnnotationsFilePostRequest {
    docId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAttachmentsAttachmentIdDeleteRequest {
    docId: string;
    attachmentId: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAttachmentsAttachmentIdFileGetRequest {
    docId: string;
    attachmentId: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAttachmentsAttachmentIdGetRequest {
    docId: string;
    attachmentId: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAttachmentsAttachmentIdPutRequest {
    docId: string;
    attachmentId: string;
    accept?: string;
    authorization?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteRequest {
    docId: string;
    attachmentId: string;
    attachmentVersion: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequest {
    docId: string;
    attachmentId: string;
    attachmentVersion: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetRequest {
    docId: string;
    attachmentId: string;
    attachmentVersion: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostRequest {
    docId: string;
    attachmentId: string;
    attachmentVersion: string;
    restore?: boolean;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetRequest {
    docId: string;
    attachmentId: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAttachmentsFileGetRequest {
    docId: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAttachmentsGetRequest {
    docId: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAttachmentsPostRequest {
    docId: string;
    accept?: string;
    authorization?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdAudittrailGetRequest {
    docId: string;
    startDate?: string;
    endDate?: string;
    formatResult?: string;
    limit?: string;
    offset?: string;
    events?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdDeleteRequest {
    docId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdEventsGetRequest {
    docId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdFileGetRequest {
    docId: string;
    lockDocument?: boolean;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdGetRequest {
    docId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdLockDeleteRequest {
    docId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdLockGetRequest {
    docId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdLockPostRequest {
    docId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdPostRequest {
    docId: string;
    suppressRendition?: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdPutRequest {
    docId: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIMigrationMode?: boolean;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdRenditionsGetRequest {
    docId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdRenditionsRenditionTypeDeleteRequest {
    docId: string;
    renditionType: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdRenditionsRenditionTypeGetRequest {
    docId: string;
    renditionType: string;
    steadyState?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdRenditionsRenditionTypePostRequest {
    docId: string;
    renditionType: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdRenditionsRenditionTypePutRequest {
    docId: string;
    renditionType: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteRequest {
    docId: string;
    roleNameAndUserOrGroup: string;
    id: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsGetRequest {
    docId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    annotationId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    annotationId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    limit?: string;
    offset?: string;
    annotationTypes?: string;
    paginationId?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    attachmentId: string;
    attachmentVersion: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    attachmentId: string;
    attachmentVersion: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionPutRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIMigrationMode?: boolean;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    relationshipId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    relationshipId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    renditionType: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    renditionType: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    renditionType: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    renditionType: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetRequest {
    docId: string;
    majorVersion: string;
    minorVersion: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsGetRequest {
    namedFilter?: string;
    scope?: string;
    versionscope?: string;
    search?: string;
    limit?: string;
    sort?: string;
    start?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsIdRolesGetRequest {
    id: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsIdRolesPostRequest {
    id: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsIdRolesRoleNameGetRequest {
    id: string;
    roleName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetRequest {
    id: string;
    majorVersion: string;
    minorVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetRequest {
    id: string;
    majorVersion: string;
    minorVersion: string;
    nameV: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutRequest {
    id: string;
    majorVersion: string;
    minorVersion: string;
    nameV: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsLifecycleActionsPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsLifecycleActionsUserActionNamePutRequest {
    userActionName: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsPostRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIMigrationMode?: boolean;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsRelationshipsBatchDeleteRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsRelationshipsBatchPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsRenditionsBatchDeleteRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsRenditionsBatchPostRequest {
    idParam?: string;
    largeSizeAsset?: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIMigrationMode?: boolean;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsRolesBatchDeleteRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsRolesBatchPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsTemplatesGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsTemplatesPostRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsTemplatesPutRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsTemplatesTemplateNameDeleteRequest {
    templateName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsTemplatesTemplateNameFileGetRequest {
    templateName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsTemplatesTemplateNameGetRequest {
    templateName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsTemplatesTemplateNamePutRequest {
    templateName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsTokensPostRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsVersionsBatchActionsFileextractPostRequest {
    source?: boolean;
    renditions?: boolean;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsVersionsBatchDeleteRequest {
    idParam?: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDocumentsVersionsBatchPostRequest {
    idParam?: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIMigrationMode?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDomainGetRequest {
    includeApplication?: boolean;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsDomainsGetRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsEdlMatchedDocumentsBatchActionsAddPostRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsEdlMatchedDocumentsBatchActionsRemovePostRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsGroupsAutoGetRequest {
    limit?: string;
    offset?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsGroupsGetRequest {
    includeImplied?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsGroupsGroupIdDeleteRequest {
    groupId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsGroupsGroupIdGetRequest {
    groupId: string;
    includeImplied?: boolean;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsGroupsGroupIdPutRequest {
    groupId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsGroupsPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsLicensesGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsActionsGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsActionsWorkflowNameGetRequest {
    workflowName: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsActionsWorkflowNamePostRequest {
    workflowName: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsGetRequest {
    objectV?: string;
    recordIdV?: string;
    participant?: string;
    statusV?: string;
    offset?: string;
    pageSize?: string;
    loc?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksGetRequest {
    objectV?: string;
    recordIdV?: string;
    assigneeV?: string;
    statusV?: string;
    offset?: string;
    pageSize?: string;
    loc?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksTaskIdActionsAcceptPostRequest {
    taskId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksTaskIdActionsCancelPostRequest {
    taskId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksTaskIdActionsCompletePostRequest {
    taskId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksTaskIdActionsGetRequest {
    taskId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksTaskIdActionsMdwacceptPostRequest {
    taskId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksTaskIdActionsMdwcompletePostRequest {
    taskId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostRequest {
    taskId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksTaskIdActionsMdwreassignPostRequest {
    taskId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksTaskIdActionsReassignPostRequest {
    taskId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksTaskIdActionsTaskActionGetRequest {
    taskId: string;
    taskAction: string;
    loc?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksTaskIdActionsUndoacceptPostRequest {
    taskId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostRequest {
    taskId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsTasksTaskIdGetRequest {
    taskId: string;
    loc?: boolean;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsWorkflowIdActionsGetRequest {
    workflowId: string;
    loc?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionGetRequest {
    workflowId: string;
    workflowAction: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionPostRequest {
    workflowId: string;
    workflowAction: string;
    documentsSys?: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsObjectworkflowsWorkflowIdGetRequest {
    workflowId: string;
    loc?: boolean;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsPicklistsGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsPicklistsPicklistNameGetRequest {
    picklistName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsPicklistsPicklistNamePicklistValueNameDeleteRequest {
    picklistName: string;
    picklistValueName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsPicklistsPicklistNamePicklistValueNamePutRequest {
    picklistName: string;
    picklistValueName: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsPicklistsPicklistNamePostRequest {
    picklistName: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsPicklistsPicklistNamePutRequest {
    picklistName: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxActionsBuildproductionPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxActionsPromoteproductionPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxActionsRecheckusagePostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxBatchChangesizePostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxEntitlementsSetPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxNameDeleteRequest {
    name: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxSnapshotApiNameActionsUpdatePostRequest {
    apiName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxSnapshotApiNameActionsUpgradePostRequest {
    apiName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxSnapshotApiNameDeleteRequest {
    apiName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxSnapshotGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxSnapshotPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxVaultIdActionsRefreshPostRequest {
    vaultId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSandboxVaultIdGetRequest {
    vaultId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSecuritypoliciesGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsSecuritypoliciesSecurityPolicyNameGetRequest {
    securityPolicyName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsUsersGetRequest {
    vaults?: string;
    excludeVaultMembership?: string;
    excludeAppLicensing?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsUsersIdGetRequest {
    id: string;
    excludeVaultMembership?: string;
    excludeAppLicensing?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsUsersIdPermissionsGetRequest {
    id: string;
    filter?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsUsersIdPutRequest {
    id: string;
    authorization?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsUsersMeGetRequest {
    excludeVaultMembership?: string;
    excludeAppLicensing?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsUsersMePasswordPostRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsUsersMePermissionsGetRequest {
    filter?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsUsersMePutRequest {
    authorization?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsUsersPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsUsersPutRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsUsersUserIdDeleteRequest {
    userId: string;
    domain?: boolean;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsUsersUserIdVaultMembershipVaultIdPutRequest {
    userId: string;
    vaultId: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsVaultActionsComparePostRequest {
    authorization?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ObjectsVaultActionsConfigreportPostRequest {
    authorization?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface QueryComponentsPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface QueryNextPagePostRequest {
    nextPage: string;
    authorization?: string;
    accept?: string;
    xVaultAPIDescribeQuery?: boolean;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface QueryPostRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIDescribeQuery?: boolean;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface QueryPreviousPagePostRequest {
    previousPage: string;
    authorization?: string;
    accept?: string;
    xVaultAPIDescribeQuery?: boolean;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ScimV2MeGetRequest {
    attributes?: string;
    excludedAttributes?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ScimV2MePutRequest {
    attributes?: string;
    excludedAttributes?: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ScimV2ResourceTypesGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ScimV2ResourceTypesTypeGetRequest {
    type: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ScimV2SchemasGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ScimV2SchemasIdGetRequest {
    id: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ScimV2ServiceProviderConfigGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ScimV2TypeGetRequest {
    type: string;
    filter?: string;
    attributes?: string;
    excludedAttributes?: string;
    sortBy?: string;
    sortOrder?: string;
    startIndex?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ScimV2TypeIdGetRequest {
    type: string;
    id: string;
    attributes?: string;
    excludedAttributes?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ScimV2UsersGetRequest {
    filter?: string;
    attributes?: string;
    excludedAttributes?: string;
    sortBy?: string;
    sortOrder?: string;
    count?: string;
    startIndex?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ScimV2UsersIdGetRequest {
    id: string;
    filter?: string;
    attributes?: string;
    excludedAttributes?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ScimV2UsersIdPutRequest {
    id: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ScimV2UsersPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesCertificateCertIdGetRequest {
    certId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesConfigurationModeActionsDisablePostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesConfigurationModeActionsEnablePostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesDirectdataFilesGetRequest {
    extractType?: string;
    startTime?: number;
    stopTime?: number;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesDirectdataFilesNameGetRequest {
    name: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesFileStagingItemsContentItemGetRequest {
    item: string;
    authorization?: string;
    accept?: string;
    range?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesFileStagingItemsItemDeleteRequest {
    item: string;
    recursive?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesFileStagingItemsItemGetRequest {
    item: string;
    recursive?: string;
    limit?: string;
    formatResult?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesFileStagingItemsItemPutRequest {
    item: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesFileStagingItemsPostRequest {
    authorization?: string;
    accept?: string;
    contentMD5?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesFileStagingUploadGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesFileStagingUploadPostRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesFileStagingUploadUploadSessionIdDeleteRequest {
    uploadSessionId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesFileStagingUploadUploadSessionIdGetRequest {
    uploadSessionId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesFileStagingUploadUploadSessionIdPartsGetRequest {
    uploadSessionId: string;
    limit?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesFileStagingUploadUploadSessionIdPostRequest {
    uploadSessionId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesFileStagingUploadUploadSessionIdPutRequest {
    uploadSessionId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIFilePartNumber?: string;
    contentMD5?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesJobsHistoriesGetRequest {
    startDate?: string;
    endDate?: string;
    status?: string;
    limit?: string;
    offset?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesJobsJobIdErrorsGetRequest {
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesJobsJobIdGetRequest {
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesJobsJobIdSummaryGetRequest {
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesJobsJobIdTasksGetRequest {
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesJobsMonitorsGetRequest {
    startDate?: string;
    endDate?: string;
    status?: string;
    limit?: string;
    offset?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesJobsStartNowJobIdPostRequest {
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesLoaderExtractPostRequest {
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesLoaderJobIdTasksTaskIdFailurelogGetRequest {
    jobId: string;
    taskId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesLoaderJobIdTasksTaskIdResultsGetRequest {
    jobId: string;
    taskId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesLoaderJobIdTasksTaskIdResultsRenditionsGetRequest {
    jobId: string;
    taskId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesLoaderJobIdTasksTaskIdSuccesslogGetRequest {
    jobId: string;
    taskId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesLoaderLoadPostRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesPackageActionsValidatePostRequest {
    authorization?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesPackagePostRequest {
    authorization?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesPackagePutRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesQueuesGetRequest {
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesQueuesQueueNameActionsDisableDeliveryPutRequest {
    queueName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesQueuesQueueNameActionsEnableDeliveryPutRequest {
    queueName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesQueuesQueueNameActionsResetPutRequest {
    queueName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesQueuesQueueNameGetRequest {
    queueName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface ServicesVobjectVaultPackageVPackageIdActionsValidatePostRequest {
    packageId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface SessionDeleteRequest {
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface UicodeDistributionsDistributionNameCodeGetRequest {
    distributionName: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface UicodeDistributionsDistributionNameDeleteRequest {
    distributionName: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface UicodeDistributionsDistributionNameGetRequest {
    distributionName: string;
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface UicodeDistributionsGetRequest {
    accept?: string;
    authorization?: string;
    xVaultAPIClientID?: string;
}

export interface UicodeDistributionsPostRequest {
    accept?: string;
    authorization?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectVaultPackageVPackageIdActionsDeployPostRequest {
    packageId: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectVaultPackageVPackageIdActionsDeployResultsGetRequest {
    packageId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetRequest {
    objectName: string;
    jobStatus: string;
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsDeepcopyResultsObjectNameJobStatusJobIdGetRequest {
    objectName: string;
    jobStatus: string;
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsEdlItemVActionsCreateplaceholderPostRequest {
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsMergesJobIdLogGetRequest {
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsMergesJobIdResultsGetRequest {
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsMergesJobIdStatusGetRequest {
    jobId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameActionsActionNamePostRequest {
    objectName: string;
    actionName: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameActionsChangetypePostRequest {
    objectName: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameActionsMergePostRequest {
    objectName: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
    vobjectsObjectNameActionsMergePostRequestInner?: Array<VobjectsObjectNameActionsMergePostRequestInner>;
}

export interface VobjectsObjectNameActionsRecalculaterollupsGetRequest {
    objectName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameActionsRecalculaterollupsPostRequest {
    objectName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameActionsUpdatecorporatecurrencyPutRequest {
    objectName: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameAttachmentsBatchDeleteRequest {
    objectName: string;
    idParam?: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameAttachmentsBatchPostRequest {
    objectName: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameAttachmentsBatchPutRequest {
    objectName: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameDeleteRequest {
    objectName: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameIdRolesRoleNameGetRequest {
    objectName: string;
    id: string;
    roleName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdActionsActionNameGetRequest {
    objectName: string;
    objectRecordId: string;
    actionName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdActionsActionNamePostRequest {
    objectName: string;
    objectRecordId: string;
    actionName: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdActionsCascadedeletePostRequest {
    objectName: string;
    objectRecordId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdActionsDeepcopyPostRequest {
    objectName: string;
    objectRecordId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdActionsGetRequest {
    objectName: string;
    objectRecordId: string;
    loc?: boolean;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetRequest {
    objectName: string;
    objectRecordId: string;
    attachmentFieldName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostRequest {
    objectName: string;
    objectRecordId: string;
    attachmentFieldName: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetRequest {
    objectName: string;
    objectRecordId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteRequest {
    objectName: string;
    objectRecordId: string;
    attachmentId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetRequest {
    objectName: string;
    objectRecordId: string;
    attachmentId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutRequest {
    objectName: string;
    objectRecordId: string;
    attachmentId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteRequest {
    objectName: string;
    objectRecordId: string;
    attachmentId: string;
    attachmentVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequest {
    objectName: string;
    objectRecordId: string;
    attachmentId: string;
    attachmentVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetRequest {
    objectName: string;
    objectRecordId: string;
    attachmentId: string;
    attachmentVersion: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostRequest {
    objectName: string;
    objectRecordId: string;
    attachmentId: string;
    attachmentVersion: string;
    restore?: boolean;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetRequest {
    objectName: string;
    objectRecordId: string;
    attachmentId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentsFileGetRequest {
    objectName: string;
    objectRecordId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentsGetRequest {
    objectName: string;
    objectRecordId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAttachmentsPostRequest {
    objectName: string;
    objectRecordId: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdAudittrailGetRequest {
    objectName: string;
    objectRecordId: string;
    startDate?: string;
    endDate?: string;
    formatResult?: string;
    limit?: string;
    offset?: string;
    events?: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameObjectRecordIdGetRequest {
    objectName: string;
    objectRecordId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNamePostRequest {
    objectName: string;
    idParam?: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIMigrationMode?: boolean;
    xVaultAPINoTriggers?: boolean;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNamePutRequest {
    objectName: string;
    authorization?: string;
    contentType?: string;
    accept?: string;
    xVaultAPIMigrationMode?: boolean;
    xVaultAPINoTriggers?: boolean;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameRolesDeleteRequest {
    objectName: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsObjectNameRolesPostRequest {
    objectName: string;
    authorization?: string;
    accept?: string;
    contentType?: string;
    xVaultAPIClientID?: string;
}

export interface VobjectsOutboundPackageVPackageIdDependenciesGetRequest {
    packageId: string;
    authorization?: string;
    accept?: string;
    xVaultAPIClientID?: string;
}

/**
 * no description
 */
export class DefaultApi extends BaseAPI {

    /**
     * Retrieve API Versions
     */
    apiGet({ authorization, accept, xVaultAPIClientID }: ApiGetRequest): Observable<void>
    apiGet({ authorization, accept, xVaultAPIClientID }: ApiGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    apiGet({ authorization, accept, xVaultAPIClientID }: ApiGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/api/',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Content File
     */
    apiMdlComponentsComponentTypeAndRecordNameFilesGet({ componentTypeAndRecordName, authorization, accept, xVaultAPIClientID }: ApiMdlComponentsComponentTypeAndRecordNameFilesGetRequest): Observable<void>
    apiMdlComponentsComponentTypeAndRecordNameFilesGet({ componentTypeAndRecordName, authorization, accept, xVaultAPIClientID }: ApiMdlComponentsComponentTypeAndRecordNameFilesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    apiMdlComponentsComponentTypeAndRecordNameFilesGet({ componentTypeAndRecordName, authorization, accept, xVaultAPIClientID }: ApiMdlComponentsComponentTypeAndRecordNameFilesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(componentTypeAndRecordName, 'componentTypeAndRecordName', 'apiMdlComponentsComponentTypeAndRecordNameFilesGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/api/mdl/components/{component_type_and_record_name}/files'.replace('{component_type_and_record_name}', encodeURI(componentTypeAndRecordName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Component Record (MDL)
     */
    apiMdlComponentsComponentTypeAndRecordNameGet({ componentTypeAndRecordName, authorization, accept, xVaultAPIClientID }: ApiMdlComponentsComponentTypeAndRecordNameGetRequest): Observable<void>
    apiMdlComponentsComponentTypeAndRecordNameGet({ componentTypeAndRecordName, authorization, accept, xVaultAPIClientID }: ApiMdlComponentsComponentTypeAndRecordNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    apiMdlComponentsComponentTypeAndRecordNameGet({ componentTypeAndRecordName, authorization, accept, xVaultAPIClientID }: ApiMdlComponentsComponentTypeAndRecordNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(componentTypeAndRecordName, 'componentTypeAndRecordName', 'apiMdlComponentsComponentTypeAndRecordNameGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/api/mdl/components/{component_type_and_record_name}'.replace('{component_type_and_record_name}', encodeURI(componentTypeAndRecordName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Asynchronous MDL Script Results
     */
    apiMdlExecuteAsyncJobIdResultsGet({ jobId, authorization, accept, xVaultAPIClientID }: ApiMdlExecuteAsyncJobIdResultsGetRequest): Observable<void>
    apiMdlExecuteAsyncJobIdResultsGet({ jobId, authorization, accept, xVaultAPIClientID }: ApiMdlExecuteAsyncJobIdResultsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    apiMdlExecuteAsyncJobIdResultsGet({ jobId, authorization, accept, xVaultAPIClientID }: ApiMdlExecuteAsyncJobIdResultsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(jobId, 'jobId', 'apiMdlExecuteAsyncJobIdResultsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/api/mdl/execute_async/{job_id}/results'.replace('{job_id}', encodeURI(jobId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Execute MDL Script Asynchronously
     */
    apiMdlExecuteAsyncPost({ authorization, accept, xVaultAPIClientID }: ApiMdlExecuteAsyncPostRequest): Observable<void>
    apiMdlExecuteAsyncPost({ authorization, accept, xVaultAPIClientID }: ApiMdlExecuteAsyncPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    apiMdlExecuteAsyncPost({ authorization, accept, xVaultAPIClientID }: ApiMdlExecuteAsyncPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/api/mdl/execute_async',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Execute MDL Script
     */
    apiMdlExecutePost({ authorization, accept, xVaultAPIClientID }: ApiMdlExecutePostRequest): Observable<void>
    apiMdlExecutePost({ authorization, accept, xVaultAPIClientID }: ApiMdlExecutePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    apiMdlExecutePost({ authorization, accept, xVaultAPIClientID }: ApiMdlExecutePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/api/mdl/execute',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Upload Content File
     */
    apiMdlFilesPost({ authorization, accept, contentType, xVaultAPIClientID }: ApiMdlFilesPostRequest): Observable<void>
    apiMdlFilesPost({ authorization, accept, contentType, xVaultAPIClientID }: ApiMdlFilesPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    apiMdlFilesPost({ authorization, accept, contentType, xVaultAPIClientID }: ApiMdlFilesPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/api/mdl/files',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Audit Details
     */
    audittrailAuditTrailTypeGet({ auditTrailType, startDate, endDate, allDates, formatResult, limit, offset, objects, events, authorization, accept, xVaultAPIClientID }: AudittrailAuditTrailTypeGetRequest): Observable<void>
    audittrailAuditTrailTypeGet({ auditTrailType, startDate, endDate, allDates, formatResult, limit, offset, objects, events, authorization, accept, xVaultAPIClientID }: AudittrailAuditTrailTypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    audittrailAuditTrailTypeGet({ auditTrailType, startDate, endDate, allDates, formatResult, limit, offset, objects, events, authorization, accept, xVaultAPIClientID }: AudittrailAuditTrailTypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(auditTrailType, 'auditTrailType', 'audittrailAuditTrailTypeGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (startDate != null) { query['start_date'] = startDate; }
        if (endDate != null) { query['end_date'] = endDate; }
        if (allDates != null) { query['all_dates'] = allDates; }
        if (formatResult != null) { query['format_result'] = formatResult; }
        if (limit != null) { query['limit'] = limit; }
        if (offset != null) { query['offset'] = offset; }
        if (objects != null) { query['objects'] = objects; }
        if (events != null) { query['events'] = events; }

        return this.request<void>({
            url: '/audittrail/{audit_trail_type}'.replace('{audit_trail_type}', encodeURI(auditTrailType)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Authentication Type Discovery
     */
    authDiscoveryPost({ accept, xVaultAPIClientID }: AuthDiscoveryPostRequest): Observable<void>
    authDiscoveryPost({ accept, xVaultAPIClientID }: AuthDiscoveryPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    authDiscoveryPost({ accept, xVaultAPIClientID }: AuthDiscoveryPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/auth/discovery',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * OAuth 2.0 / OpenID Connect
     */
    authOauthSessionOathOidcProfileIdPost({ oathOidcProfileId, authorization, accept, xVaultAPIClientID }: AuthOauthSessionOathOidcProfileIdPostRequest): Observable<void>
    authOauthSessionOathOidcProfileIdPost({ oathOidcProfileId, authorization, accept, xVaultAPIClientID }: AuthOauthSessionOathOidcProfileIdPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    authOauthSessionOathOidcProfileIdPost({ oathOidcProfileId, authorization, accept, xVaultAPIClientID }: AuthOauthSessionOathOidcProfileIdPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(oathOidcProfileId, 'oathOidcProfileId', 'authOauthSessionOathOidcProfileIdPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/auth/oauth/session/{oath_oidc_profile_id}'.replace('{oath_oidc_profile_id}', encodeURI(oathOidcProfileId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * User Name and Password
     */
    authPost({ contentType, accept, xVaultAPIClientID }: AuthPostRequest): Observable<void>
    authPost({ contentType, accept, xVaultAPIClientID }: AuthPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    authPost({ contentType, accept, xVaultAPIClientID }: AuthPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/auth',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Single Source Code File
     */
    codeClassNameDelete({ className, authorization, accept, xVaultAPIClientID }: CodeClassNameDeleteRequest): Observable<void>
    codeClassNameDelete({ className, authorization, accept, xVaultAPIClientID }: CodeClassNameDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    codeClassNameDelete({ className, authorization, accept, xVaultAPIClientID }: CodeClassNameDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(className, 'className', 'codeClassNameDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/code/{class_name}'.replace('{class_name}', encodeURI(className)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Disable Vault Extension
     */
    codeClassNameDisablePut({ className, authorization, accept, contentType, xVaultAPIClientID }: CodeClassNameDisablePutRequest): Observable<void>
    codeClassNameDisablePut({ className, authorization, accept, contentType, xVaultAPIClientID }: CodeClassNameDisablePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    codeClassNameDisablePut({ className, authorization, accept, contentType, xVaultAPIClientID }: CodeClassNameDisablePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(className, 'className', 'codeClassNameDisablePut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/code/{class_name}/disable'.replace('{class_name}', encodeURI(className)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Enable Vault Extension
     */
    codeClassNameEnablePut({ className, authorization, accept, contentType, xVaultAPIClientID }: CodeClassNameEnablePutRequest): Observable<void>
    codeClassNameEnablePut({ className, authorization, accept, contentType, xVaultAPIClientID }: CodeClassNameEnablePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    codeClassNameEnablePut({ className, authorization, accept, contentType, xVaultAPIClientID }: CodeClassNameEnablePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(className, 'className', 'codeClassNameEnablePut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/code/{class_name}/enable'.replace('{class_name}', encodeURI(className)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Single Source Code File
     */
    codeClassNameGet({ className, authorization, accept, xVaultAPIClientID }: CodeClassNameGetRequest): Observable<void>
    codeClassNameGet({ className, authorization, accept, xVaultAPIClientID }: CodeClassNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    codeClassNameGet({ className, authorization, accept, xVaultAPIClientID }: CodeClassNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(className, 'className', 'codeClassNameGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/code/{class_name}'.replace('{class_name}', encodeURI(className)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve All Profiling Sessions
     */
    codeProfilerGet({ authorization, accept, xVaultAPIClientID }: CodeProfilerGetRequest): Observable<void>
    codeProfilerGet({ authorization, accept, xVaultAPIClientID }: CodeProfilerGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    codeProfilerGet({ authorization, accept, xVaultAPIClientID }: CodeProfilerGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/code/profiler',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create Profiling Session
     */
    codeProfilerPost({ authorization, contentType, accept, xVaultAPIClientID }: CodeProfilerPostRequest): Observable<void>
    codeProfilerPost({ authorization, contentType, accept, xVaultAPIClientID }: CodeProfilerPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    codeProfilerPost({ authorization, contentType, accept, xVaultAPIClientID }: CodeProfilerPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/code/profiler',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * End Profiling Session
     */
    codeProfilerSessionNameActionsEndPost({ sessionName, authorization, accept, xVaultAPIClientID }: CodeProfilerSessionNameActionsEndPostRequest): Observable<void>
    codeProfilerSessionNameActionsEndPost({ sessionName, authorization, accept, xVaultAPIClientID }: CodeProfilerSessionNameActionsEndPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    codeProfilerSessionNameActionsEndPost({ sessionName, authorization, accept, xVaultAPIClientID }: CodeProfilerSessionNameActionsEndPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(sessionName, 'sessionName', 'codeProfilerSessionNameActionsEndPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/code/profiler/{session_name}/actions/end'.replace('{session_name}', encodeURI(sessionName)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Profiling Session
     */
    codeProfilerSessionNameDelete({ sessionName, authorization, accept, xVaultAPIClientID }: CodeProfilerSessionNameDeleteRequest): Observable<void>
    codeProfilerSessionNameDelete({ sessionName, authorization, accept, xVaultAPIClientID }: CodeProfilerSessionNameDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    codeProfilerSessionNameDelete({ sessionName, authorization, accept, xVaultAPIClientID }: CodeProfilerSessionNameDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(sessionName, 'sessionName', 'codeProfilerSessionNameDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/code/profiler/{session_name}'.replace('{session_name}', encodeURI(sessionName)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Profiling Session
     */
    codeProfilerSessionNameGet({ sessionName, authorization, accept, xVaultAPIClientID }: CodeProfilerSessionNameGetRequest): Observable<void>
    codeProfilerSessionNameGet({ sessionName, authorization, accept, xVaultAPIClientID }: CodeProfilerSessionNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    codeProfilerSessionNameGet({ sessionName, authorization, accept, xVaultAPIClientID }: CodeProfilerSessionNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(sessionName, 'sessionName', 'codeProfilerSessionNameGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/code/profiler/{session_name}'.replace('{session_name}', encodeURI(sessionName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Download Profiling Session Results
     */
    codeProfilerSessionNameResultsGet({ sessionName, authorization, accept, xVaultAPIClientID }: CodeProfilerSessionNameResultsGetRequest): Observable<void>
    codeProfilerSessionNameResultsGet({ sessionName, authorization, accept, xVaultAPIClientID }: CodeProfilerSessionNameResultsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    codeProfilerSessionNameResultsGet({ sessionName, authorization, accept, xVaultAPIClientID }: CodeProfilerSessionNameResultsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(sessionName, 'sessionName', 'codeProfilerSessionNameResultsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/code/profiler/{session_name}/results'.replace('{session_name}', encodeURI(sessionName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Add or Replace Single Source Code File
     */
    codePut({ authorization, accept, contentType, xVaultAPIClientID }: CodePutRequest): Observable<void>
    codePut({ authorization, accept, contentType, xVaultAPIClientID }: CodePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    codePut({ authorization, accept, contentType, xVaultAPIClientID }: CodePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/code',
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Specific Root Nodes
     */
    compositesTreesEdlHierarchyOrTemplateActionsListnodesPost({ edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID }: CompositesTreesEdlHierarchyOrTemplateActionsListnodesPostRequest): Observable<void>
    compositesTreesEdlHierarchyOrTemplateActionsListnodesPost({ edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID }: CompositesTreesEdlHierarchyOrTemplateActionsListnodesPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    compositesTreesEdlHierarchyOrTemplateActionsListnodesPost({ edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID }: CompositesTreesEdlHierarchyOrTemplateActionsListnodesPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(edlHierarchyOrTemplate, 'edlHierarchyOrTemplate', 'compositesTreesEdlHierarchyOrTemplateActionsListnodesPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/composites/trees/{edl_hierarchy_or_template}/actions/listnodes'.replace('{edl_hierarchy_or_template}', encodeURI(edlHierarchyOrTemplate)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve All Root Nodes
     */
    compositesTreesEdlHierarchyOrTemplateGet({ edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID }: CompositesTreesEdlHierarchyOrTemplateGetRequest): Observable<void>
    compositesTreesEdlHierarchyOrTemplateGet({ edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID }: CompositesTreesEdlHierarchyOrTemplateGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    compositesTreesEdlHierarchyOrTemplateGet({ edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID }: CompositesTreesEdlHierarchyOrTemplateGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(edlHierarchyOrTemplate, 'edlHierarchyOrTemplate', 'compositesTreesEdlHierarchyOrTemplateGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/composites/trees/{edl_hierarchy_or_template}'.replace('{edl_hierarchy_or_template}', encodeURI(edlHierarchyOrTemplate)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve a Node\'s Children
     */
    compositesTreesEdlHierarchyVParentNodeIdChildrenGet({ parentNodeId, authorization, contentType, accept, xVaultAPIClientID }: CompositesTreesEdlHierarchyVParentNodeIdChildrenGetRequest): Observable<void>
    compositesTreesEdlHierarchyVParentNodeIdChildrenGet({ parentNodeId, authorization, contentType, accept, xVaultAPIClientID }: CompositesTreesEdlHierarchyVParentNodeIdChildrenGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    compositesTreesEdlHierarchyVParentNodeIdChildrenGet({ parentNodeId, authorization, contentType, accept, xVaultAPIClientID }: CompositesTreesEdlHierarchyVParentNodeIdChildrenGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(parentNodeId, 'parentNodeId', 'compositesTreesEdlHierarchyVParentNodeIdChildrenGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/composites/trees/edl_hierarchy__v/{parent_node_id}/children'.replace('{parent_node_id}', encodeURI(parentNodeId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update Node Order
     */
    compositesTreesEdlHierarchyVParentNodeIdChildrenPut({ parentNodeId, authorization, contentType, accept, xVaultAPIClientID }: CompositesTreesEdlHierarchyVParentNodeIdChildrenPutRequest): Observable<void>
    compositesTreesEdlHierarchyVParentNodeIdChildrenPut({ parentNodeId, authorization, contentType, accept, xVaultAPIClientID }: CompositesTreesEdlHierarchyVParentNodeIdChildrenPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    compositesTreesEdlHierarchyVParentNodeIdChildrenPut({ parentNodeId, authorization, contentType, accept, xVaultAPIClientID }: CompositesTreesEdlHierarchyVParentNodeIdChildrenPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(parentNodeId, 'parentNodeId', 'compositesTreesEdlHierarchyVParentNodeIdChildrenPut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/composites/trees/edl_hierarchy__v/{parent_node_id}/children'.replace('{parent_node_id}', encodeURI(parentNodeId)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Component Record (XML/JSON)
     */
    configurationComponentTypeAndRecordNameGet({ componentTypeAndRecordName, loc, authorization, accept, xVaultAPIClientID }: ConfigurationComponentTypeAndRecordNameGetRequest): Observable<void>
    configurationComponentTypeAndRecordNameGet({ componentTypeAndRecordName, loc, authorization, accept, xVaultAPIClientID }: ConfigurationComponentTypeAndRecordNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    configurationComponentTypeAndRecordNameGet({ componentTypeAndRecordName, loc, authorization, accept, xVaultAPIClientID }: ConfigurationComponentTypeAndRecordNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(componentTypeAndRecordName, 'componentTypeAndRecordName', 'configurationComponentTypeAndRecordNameGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (loc != null) { query['loc'] = loc; }

        return this.request<void>({
            url: '/configuration/{component_type_and_record_name}'.replace('{component_type_and_record_name}', encodeURI(componentTypeAndRecordName)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Component Record Collection
     */
    configurationComponentTypeGet({ componentType, authorization, accept, xVaultAPIClientID }: ConfigurationComponentTypeGetRequest): Observable<void>
    configurationComponentTypeGet({ componentType, authorization, accept, xVaultAPIClientID }: ConfigurationComponentTypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    configurationComponentTypeGet({ componentType, authorization, accept, xVaultAPIClientID }: ConfigurationComponentTypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(componentType, 'componentType', 'configurationComponentTypeGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/configuration/{component_type}'.replace('{component_type}', encodeURI(componentType)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Details from a Specific Object
     */
    configurationObjectNameAndObjectTypeGet({ objectNameAndObjectType, loc, authorization, accept, xVaultAPIClientID }: ConfigurationObjectNameAndObjectTypeGetRequest): Observable<void>
    configurationObjectNameAndObjectTypeGet({ objectNameAndObjectType, loc, authorization, accept, xVaultAPIClientID }: ConfigurationObjectNameAndObjectTypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    configurationObjectNameAndObjectTypeGet({ objectNameAndObjectType, loc, authorization, accept, xVaultAPIClientID }: ConfigurationObjectNameAndObjectTypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectNameAndObjectType, 'objectNameAndObjectType', 'configurationObjectNameAndObjectTypeGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (loc != null) { query['loc'] = loc; }

        return this.request<void>({
            url: '/configuration/{object_name_and_object_type}'.replace('{object_name_and_object_type}', encodeURI(objectNameAndObjectType)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Details from All Object Types
     */
    configurationObjecttypeGet({ authorization, accept, xVaultAPIClientID }: ConfigurationObjecttypeGetRequest): Observable<void>
    configurationObjecttypeGet({ authorization, accept, xVaultAPIClientID }: ConfigurationObjecttypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    configurationObjecttypeGet({ authorization, accept, xVaultAPIClientID }: ConfigurationObjecttypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/configuration/Objecttype',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Lifecycle Role Assignment Override Rules
     */
    configurationRoleAssignmentRuleDelete({ authorization, accept, xVaultAPIClientID }: ConfigurationRoleAssignmentRuleDeleteRequest): Observable<void>
    configurationRoleAssignmentRuleDelete({ authorization, accept, xVaultAPIClientID }: ConfigurationRoleAssignmentRuleDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    configurationRoleAssignmentRuleDelete({ authorization, accept, xVaultAPIClientID }: ConfigurationRoleAssignmentRuleDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/configuration/role_assignment_rule',
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Lifecycle Role Assignment Rules (Default & Override)
     */
    configurationRoleAssignmentRuleGet({ lifecycleV, roleV, productV, countryV, studyV, studyCountryV, authorization, accept, xVaultAPIClientID }: ConfigurationRoleAssignmentRuleGetRequest): Observable<void>
    configurationRoleAssignmentRuleGet({ lifecycleV, roleV, productV, countryV, studyV, studyCountryV, authorization, accept, xVaultAPIClientID }: ConfigurationRoleAssignmentRuleGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    configurationRoleAssignmentRuleGet({ lifecycleV, roleV, productV, countryV, studyV, studyCountryV, authorization, accept, xVaultAPIClientID }: ConfigurationRoleAssignmentRuleGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (lifecycleV != null) { query['lifecycle__v'] = lifecycleV; }
        if (roleV != null) { query['role__v'] = roleV; }
        if (productV != null) { query['product__v'] = productV; }
        if (countryV != null) { query['country__v'] = countryV; }
        if (studyV != null) { query['study__v'] = studyV; }
        if (studyCountryV != null) { query['study_country__v'] = studyCountryV; }

        return this.request<void>({
            url: '/configuration/role_assignment_rule',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Create Lifecycle Role Assignment Override Rules
     */
    configurationRoleAssignmentRulePost({ authorization, accept, contentType, xVaultAPIClientID }: ConfigurationRoleAssignmentRulePostRequest): Observable<void>
    configurationRoleAssignmentRulePost({ authorization, accept, contentType, xVaultAPIClientID }: ConfigurationRoleAssignmentRulePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    configurationRoleAssignmentRulePost({ authorization, accept, contentType, xVaultAPIClientID }: ConfigurationRoleAssignmentRulePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/configuration/role_assignment_rule',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update Lifecycle Role Assignment Rules (Default & Override)
     */
    configurationRoleAssignmentRulePut({ authorization, accept, contentType, xVaultAPIClientID }: ConfigurationRoleAssignmentRulePutRequest): Observable<void>
    configurationRoleAssignmentRulePut({ authorization, accept, contentType, xVaultAPIClientID }: ConfigurationRoleAssignmentRulePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    configurationRoleAssignmentRulePut({ authorization, accept, contentType, xVaultAPIClientID }: ConfigurationRoleAssignmentRulePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/configuration/role_assignment_rule',
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Initiate Delegated Session
     */
    delegationLoginPost({ authorization, accept, xVaultAPIClientID }: DelegationLoginPostRequest): Observable<void>
    delegationLoginPost({ authorization, accept, xVaultAPIClientID }: DelegationLoginPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    delegationLoginPost({ authorization, accept, xVaultAPIClientID }: DelegationLoginPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/delegation/login',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Delegations
     */
    delegationVaultsGet({ authorization, accept, xVaultAPIClientID }: DelegationVaultsGetRequest): Observable<void>
    delegationVaultsGet({ authorization, accept, xVaultAPIClientID }: DelegationVaultsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    delegationVaultsGet({ authorization, accept, xVaultAPIClientID }: DelegationVaultsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/delegation/vaults',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Session Keep Alive
     */
    keepAlivePost({ authorization, accept, xVaultAPIClientID }: KeepAlivePostRequest): Observable<void>
    keepAlivePost({ authorization, accept, xVaultAPIClientID }: KeepAlivePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    keepAlivePost({ authorization, accept, xVaultAPIClientID }: KeepAlivePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/keep-alive',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Limits on Objects
     */
    limitsGet({ authorization, accept, xVaultAPIClientID }: LimitsGetRequest): Observable<void>
    limitsGet({ authorization, accept, xVaultAPIClientID }: LimitsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    limitsGet({ authorization, accept, xVaultAPIClientID }: LimitsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/limits',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Download Daily API Usage
     */
    logsApiUsageGet({ date, logFormat, authorization, accept, xVaultAPIClientID }: LogsApiUsageGetRequest): Observable<void>
    logsApiUsageGet({ date, logFormat, authorization, accept, xVaultAPIClientID }: LogsApiUsageGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    logsApiUsageGet({ date, logFormat, authorization, accept, xVaultAPIClientID }: LogsApiUsageGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (date != null) { query['date'] = date; }
        if (logFormat != null) { query['log_format'] = logFormat; }

        return this.request<void>({
            url: '/logs/api_usage',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve All Debug Logs
     */
    logsCodeDebugGet({ userId, includeInactive, authorization, accept, xVaultAPIClientID }: LogsCodeDebugGetRequest): Observable<void>
    logsCodeDebugGet({ userId, includeInactive, authorization, accept, xVaultAPIClientID }: LogsCodeDebugGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    logsCodeDebugGet({ userId, includeInactive, authorization, accept, xVaultAPIClientID }: LogsCodeDebugGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (userId != null) { query['user_id'] = userId; }
        if (includeInactive != null) { query['include_inactive'] = includeInactive; }

        return this.request<void>({
            url: '/logs/code/debug',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Delete Debug Log
     */
    logsCodeDebugIdActionsResetDelete({ id, authorization, accept, xVaultAPIClientID }: LogsCodeDebugIdActionsResetDeleteRequest): Observable<void>
    logsCodeDebugIdActionsResetDelete({ id, authorization, accept, xVaultAPIClientID }: LogsCodeDebugIdActionsResetDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    logsCodeDebugIdActionsResetDelete({ id, authorization, accept, xVaultAPIClientID }: LogsCodeDebugIdActionsResetDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'logsCodeDebugIdActionsResetDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/logs/code/debug/{id}/actions/reset'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Reset Debug Log
     */
    logsCodeDebugIdActionsResetPost({ id, authorization, accept, xVaultAPIClientID }: LogsCodeDebugIdActionsResetPostRequest): Observable<void>
    logsCodeDebugIdActionsResetPost({ id, authorization, accept, xVaultAPIClientID }: LogsCodeDebugIdActionsResetPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    logsCodeDebugIdActionsResetPost({ id, authorization, accept, xVaultAPIClientID }: LogsCodeDebugIdActionsResetPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'logsCodeDebugIdActionsResetPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/logs/code/debug/{id}/actions/reset'.replace('{id}', encodeURI(id)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Download Debug Log Files
     */
    logsCodeDebugIdFilesGet({ id, authorization, accept, xVaultAPIClientID }: LogsCodeDebugIdFilesGetRequest): Observable<void>
    logsCodeDebugIdFilesGet({ id, authorization, accept, xVaultAPIClientID }: LogsCodeDebugIdFilesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    logsCodeDebugIdFilesGet({ id, authorization, accept, xVaultAPIClientID }: LogsCodeDebugIdFilesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'logsCodeDebugIdFilesGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/logs/code/debug/{id}/files'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Single Debug Log
     */
    logsCodeDebugIdGet({ id, authorization, accept, xVaultAPIClientID }: LogsCodeDebugIdGetRequest): Observable<void>
    logsCodeDebugIdGet({ id, authorization, accept, xVaultAPIClientID }: LogsCodeDebugIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    logsCodeDebugIdGet({ id, authorization, accept, xVaultAPIClientID }: LogsCodeDebugIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'logsCodeDebugIdGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/logs/code/debug/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create Debug Log
     */
    logsCodeDebugPost({ authorization, accept, contentType, xVaultAPIClientID }: LogsCodeDebugPostRequest): Observable<void>
    logsCodeDebugPost({ authorization, accept, contentType, xVaultAPIClientID }: LogsCodeDebugPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    logsCodeDebugPost({ authorization, accept, contentType, xVaultAPIClientID }: LogsCodeDebugPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/logs/code/debug',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Download SDK Runtime Log
     */
    logsCodeRuntimeGet({ date, logFormat, authorization, accept, xVaultAPIClientID }: LogsCodeRuntimeGetRequest): Observable<void>
    logsCodeRuntimeGet({ date, logFormat, authorization, accept, xVaultAPIClientID }: LogsCodeRuntimeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    logsCodeRuntimeGet({ date, logFormat, authorization, accept, xVaultAPIClientID }: LogsCodeRuntimeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (date != null) { query['date'] = date; }
        if (logFormat != null) { query['log_format'] = logFormat; }

        return this.request<void>({
            url: '/logs/code/runtime',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Import Bulk Translation File
     */
    messagesMessageTypeActionsImportPost({ messageType, authorization, accept, xVaultAPIClientID }: MessagesMessageTypeActionsImportPostRequest): Observable<void>
    messagesMessageTypeActionsImportPost({ messageType, authorization, accept, xVaultAPIClientID }: MessagesMessageTypeActionsImportPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    messagesMessageTypeActionsImportPost({ messageType, authorization, accept, xVaultAPIClientID }: MessagesMessageTypeActionsImportPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(messageType, 'messageType', 'messagesMessageTypeActionsImportPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/messages/{message_type}/actions/import'.replace('{message_type}', encodeURI(messageType)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Export Bulk Translation File
     */
    messagesMessageTypeLanguageLangActionsExportPost({ messageType, lang, authorization, accept, xVaultAPIClientID }: MessagesMessageTypeLanguageLangActionsExportPostRequest): Observable<void>
    messagesMessageTypeLanguageLangActionsExportPost({ messageType, lang, authorization, accept, xVaultAPIClientID }: MessagesMessageTypeLanguageLangActionsExportPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    messagesMessageTypeLanguageLangActionsExportPost({ messageType, lang, authorization, accept, xVaultAPIClientID }: MessagesMessageTypeLanguageLangActionsExportPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(messageType, 'messageType', 'messagesMessageTypeLanguageLangActionsExportPost');
        throwIfNullOrUndefined(lang, 'lang', 'messagesMessageTypeLanguageLangActionsExportPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/messages/{message_type}/language/{lang}/actions/export'.replace('{message_type}', encodeURI(messageType)).replace('{lang}', encodeURI(lang)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Audit Metadata
     */
    metadataAudittrailAuditTrailTypeGet({ auditTrailType, authorization, accept, xVaultAPIClientID }: MetadataAudittrailAuditTrailTypeGetRequest): Observable<void>
    metadataAudittrailAuditTrailTypeGet({ auditTrailType, authorization, accept, xVaultAPIClientID }: MetadataAudittrailAuditTrailTypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataAudittrailAuditTrailTypeGet({ auditTrailType, authorization, accept, xVaultAPIClientID }: MetadataAudittrailAuditTrailTypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(auditTrailType, 'auditTrailType', 'metadataAudittrailAuditTrailTypeGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/audittrail/{audit_trail_type}'.replace('{audit_trail_type}', encodeURI(auditTrailType)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Audit Types
     */
    metadataAudittrailGet({ authorization, accept, xVaultAPIClientID }: MetadataAudittrailGetRequest): Observable<void>
    metadataAudittrailGet({ authorization, accept, xVaultAPIClientID }: MetadataAudittrailGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataAudittrailGet({ authorization, accept, xVaultAPIClientID }: MetadataAudittrailGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/audittrail',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Component Type Metadata
     */
    metadataComponentsComponentTypeGet({ componentType, authorization, accept, xVaultAPIClientID }: MetadataComponentsComponentTypeGetRequest): Observable<void>
    metadataComponentsComponentTypeGet({ componentType, authorization, accept, xVaultAPIClientID }: MetadataComponentsComponentTypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataComponentsComponentTypeGet({ componentType, authorization, accept, xVaultAPIClientID }: MetadataComponentsComponentTypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(componentType, 'componentType', 'metadataComponentsComponentTypeGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/components/{component_type}'.replace('{component_type}', encodeURI(componentType)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve All Component Metadata
     */
    metadataComponentsGet({ authorization, accept, xVaultAPIClientID }: MetadataComponentsGetRequest): Observable<void>
    metadataComponentsGet({ authorization, accept, xVaultAPIClientID }: MetadataComponentsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataComponentsGet({ authorization, accept, xVaultAPIClientID }: MetadataComponentsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/components',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Binder Template Node Metadata
     */
    metadataObjectsBindersTemplatesBindernodesGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsBindersTemplatesBindernodesGetRequest): Observable<void>
    metadataObjectsBindersTemplatesBindernodesGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsBindersTemplatesBindernodesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataObjectsBindersTemplatesBindernodesGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsBindersTemplatesBindernodesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/objects/binders/templates/bindernodes',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Binder Template Metadata
     */
    metadataObjectsBindersTemplatesGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsBindersTemplatesGetRequest): Observable<void>
    metadataObjectsBindersTemplatesGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsBindersTemplatesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataObjectsBindersTemplatesGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsBindersTemplatesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/objects/binders/templates',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Annotation Placemark Type Metadata
     */
    metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet({ placemarkType, authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetRequest): Observable<void>
    metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet({ placemarkType, authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet({ placemarkType, authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(placemarkType, 'placemarkType', 'metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/objects/documents/annotations/placemarks/types/{placemark_type}'.replace('{placemark_type}', encodeURI(placemarkType)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Annotation Reference Type Metadata
     */
    metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet({ referenceType, authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetRequest): Observable<void>
    metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet({ referenceType, authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet({ referenceType, authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(referenceType, 'referenceType', 'metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/objects/documents/annotations/references/types/{reference_type}'.replace('{reference_type}', encodeURI(referenceType)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Annotation Type Metadata
     */
    metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet({ annotationType, authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetRequest): Observable<void>
    metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet({ annotationType, authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet({ annotationType, authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(annotationType, 'annotationType', 'metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/objects/documents/annotations/types/{annotation_type}'.replace('{annotation_type}', encodeURI(annotationType)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Event SubType Metadata
     */
    metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet({ eventType, eventSubtype, authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetRequest): Observable<void>
    metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet({ eventType, eventSubtype, authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet({ eventType, eventSubtype, authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(eventType, 'eventType', 'metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet');
        throwIfNullOrUndefined(eventSubtype, 'eventSubtype', 'metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/objects/documents/events/{event_type}/types/{event_subtype}'.replace('{event_type}', encodeURI(eventType)).replace('{event_subtype}', encodeURI(eventSubtype)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Event Types and Subtypes
     */
    metadataObjectsDocumentsEventsGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsEventsGetRequest): Observable<void>
    metadataObjectsDocumentsEventsGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsEventsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataObjectsDocumentsEventsGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsEventsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/objects/documents/events',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Lock Metadata
     */
    metadataObjectsDocumentsLockGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsLockGetRequest): Observable<void>
    metadataObjectsDocumentsLockGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsLockGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataObjectsDocumentsLockGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsLockGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/objects/documents/lock',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Common Document Fields
     */
    metadataObjectsDocumentsPropertiesFindCommonPost({ contentType, accept, authorization, xVaultAPIClientID }: MetadataObjectsDocumentsPropertiesFindCommonPostRequest): Observable<void>
    metadataObjectsDocumentsPropertiesFindCommonPost({ contentType, accept, authorization, xVaultAPIClientID }: MetadataObjectsDocumentsPropertiesFindCommonPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataObjectsDocumentsPropertiesFindCommonPost({ contentType, accept, authorization, xVaultAPIClientID }: MetadataObjectsDocumentsPropertiesFindCommonPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/objects/documents/properties/find_common',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve All Document Fields
     */
    metadataObjectsDocumentsPropertiesGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsPropertiesGetRequest): Observable<void>
    metadataObjectsDocumentsPropertiesGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsPropertiesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataObjectsDocumentsPropertiesGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsPropertiesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/objects/documents/properties',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Template Metadata
     */
    metadataObjectsDocumentsTemplatesGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsTemplatesGetRequest): Observable<void>
    metadataObjectsDocumentsTemplatesGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsTemplatesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataObjectsDocumentsTemplatesGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsTemplatesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/objects/documents/templates',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve All Document Types
     */
    metadataObjectsDocumentsTypesGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsTypesGetRequest): Observable<void>
    metadataObjectsDocumentsTypesGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsTypesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataObjectsDocumentsTypesGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsTypesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/objects/documents/types',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Type
     */
    metadataObjectsDocumentsTypesTypeGet({ type, authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsTypesTypeGetRequest): Observable<void>
    metadataObjectsDocumentsTypesTypeGet({ type, authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsTypesTypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataObjectsDocumentsTypesTypeGet({ type, authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsTypesTypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(type, 'type', 'metadataObjectsDocumentsTypesTypeGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/objects/documents/types/{type}'.replace('{type}', encodeURI(type)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Type Relationships
     */
    metadataObjectsDocumentsTypesTypeRelationshipsGet({ type, authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsTypesTypeRelationshipsGetRequest): Observable<void>
    metadataObjectsDocumentsTypesTypeRelationshipsGet({ type, authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsTypesTypeRelationshipsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataObjectsDocumentsTypesTypeRelationshipsGet({ type, authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsTypesTypeRelationshipsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(type, 'type', 'metadataObjectsDocumentsTypesTypeRelationshipsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/objects/documents/types/{type}/relationships'.replace('{type}', encodeURI(type)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Classification
     */
    metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet({ type, subtype, classification, authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetRequest): Observable<void>
    metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet({ type, subtype, classification, authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet({ type, subtype, classification, authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(type, 'type', 'metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet');
        throwIfNullOrUndefined(subtype, 'subtype', 'metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet');
        throwIfNullOrUndefined(classification, 'classification', 'metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}'.replace('{type}', encodeURI(type)).replace('{subtype}', encodeURI(subtype)).replace('{classification}', encodeURI(classification)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Subtype
     */
    metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet({ type, subtype, authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsTypesTypeSubtypesSubtypeGetRequest): Observable<void>
    metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet({ type, subtype, authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsTypesTypeSubtypesSubtypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet({ type, subtype, authorization, accept, xVaultAPIClientID }: MetadataObjectsDocumentsTypesTypeSubtypesSubtypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(type, 'type', 'metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet');
        throwIfNullOrUndefined(subtype, 'subtype', 'metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/objects/documents/types/{type}/subtypes/{subtype}'.replace('{type}', encodeURI(type)).replace('{subtype}', encodeURI(subtype)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Group Metadata
     */
    metadataObjectsGroupsGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsGroupsGetRequest): Observable<void>
    metadataObjectsGroupsGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsGroupsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataObjectsGroupsGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsGroupsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/objects/groups',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Security Policy Metadata
     */
    metadataObjectsSecuritypoliciesGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsSecuritypoliciesGetRequest): Observable<void>
    metadataObjectsSecuritypoliciesGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsSecuritypoliciesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataObjectsSecuritypoliciesGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsSecuritypoliciesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/objects/securitypolicies',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve User Metadata
     */
    metadataObjectsUsersGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsUsersGetRequest): Observable<void>
    metadataObjectsUsersGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsUsersGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataObjectsUsersGet({ authorization, accept, xVaultAPIClientID }: MetadataObjectsUsersGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/objects/users',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Archived Document Signature Metadata
     */
    metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet({ authorization, accept, xVaultAPIClientID }: MetadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetRequest): Observable<void>
    metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet({ authorization, accept, xVaultAPIClientID }: MetadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet({ authorization, accept, xVaultAPIClientID }: MetadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/query/archived_documents/relationships/document_signature__sysr',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Signature Metadata
     */
    metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet({ authorization, accept, xVaultAPIClientID }: MetadataQueryDocumentsRelationshipsDocumentSignatureSysrGetRequest): Observable<void>
    metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet({ authorization, accept, xVaultAPIClientID }: MetadataQueryDocumentsRelationshipsDocumentSignatureSysrGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet({ authorization, accept, xVaultAPIClientID }: MetadataQueryDocumentsRelationshipsDocumentSignatureSysrGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/query/documents/relationships/document_signature__sysr',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Object Collection
     */
    metadataVobjectsGet({ loc, authorization, accept, xVaultAPIClientID }: MetadataVobjectsGetRequest): Observable<void>
    metadataVobjectsGet({ loc, authorization, accept, xVaultAPIClientID }: MetadataVobjectsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataVobjectsGet({ loc, authorization, accept, xVaultAPIClientID }: MetadataVobjectsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (loc != null) { query['loc'] = loc; }

        return this.request<void>({
            url: '/metadata/vobjects',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Cancel Raw Object Deployment
     */
    metadataVobjectsObjectNameActionsCanceldeploymentPost({ objectName, authorization, accept, xVaultAPIClientID }: MetadataVobjectsObjectNameActionsCanceldeploymentPostRequest): Observable<void>
    metadataVobjectsObjectNameActionsCanceldeploymentPost({ objectName, authorization, accept, xVaultAPIClientID }: MetadataVobjectsObjectNameActionsCanceldeploymentPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataVobjectsObjectNameActionsCanceldeploymentPost({ objectName, authorization, accept, xVaultAPIClientID }: MetadataVobjectsObjectNameActionsCanceldeploymentPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'metadataVobjectsObjectNameActionsCanceldeploymentPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/vobjects/{object_name}/actions/canceldeployment'.replace('{object_name}', encodeURI(objectName)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Object Field Metadata
     */
    metadataVobjectsObjectNameFieldsObjectFieldNameGet({ objectName, objectFieldName, loc, authorization, accept, xVaultAPIClientID }: MetadataVobjectsObjectNameFieldsObjectFieldNameGetRequest): Observable<void>
    metadataVobjectsObjectNameFieldsObjectFieldNameGet({ objectName, objectFieldName, loc, authorization, accept, xVaultAPIClientID }: MetadataVobjectsObjectNameFieldsObjectFieldNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataVobjectsObjectNameFieldsObjectFieldNameGet({ objectName, objectFieldName, loc, authorization, accept, xVaultAPIClientID }: MetadataVobjectsObjectNameFieldsObjectFieldNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'metadataVobjectsObjectNameFieldsObjectFieldNameGet');
        throwIfNullOrUndefined(objectFieldName, 'objectFieldName', 'metadataVobjectsObjectNameFieldsObjectFieldNameGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (loc != null) { query['loc'] = loc; }

        return this.request<void>({
            url: '/metadata/vobjects/{object_name}/fields/{object_field_name}'.replace('{object_name}', encodeURI(objectName)).replace('{object_field_name}', encodeURI(objectFieldName)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Object Metadata
     */
    metadataVobjectsObjectNameGet({ objectName, loc, authorization, accept, xVaultAPIClientID }: MetadataVobjectsObjectNameGetRequest): Observable<void>
    metadataVobjectsObjectNameGet({ objectName, loc, authorization, accept, xVaultAPIClientID }: MetadataVobjectsObjectNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataVobjectsObjectNameGet({ objectName, loc, authorization, accept, xVaultAPIClientID }: MetadataVobjectsObjectNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'metadataVobjectsObjectNameGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (loc != null) { query['loc'] = loc; }

        return this.request<void>({
            url: '/metadata/vobjects/{object_name}'.replace('{object_name}', encodeURI(objectName)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Page Layouts
     */
    metadataVobjectsObjectNamePageLayoutsGet({ objectName, authorization, accept, xVaultAPIClientID }: MetadataVobjectsObjectNamePageLayoutsGetRequest): Observable<void>
    metadataVobjectsObjectNamePageLayoutsGet({ objectName, authorization, accept, xVaultAPIClientID }: MetadataVobjectsObjectNamePageLayoutsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataVobjectsObjectNamePageLayoutsGet({ objectName, authorization, accept, xVaultAPIClientID }: MetadataVobjectsObjectNamePageLayoutsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'metadataVobjectsObjectNamePageLayoutsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/vobjects/{object_name}/page_layouts'.replace('{object_name}', encodeURI(objectName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Page Layout Metadata
     */
    metadataVobjectsObjectNamePageLayoutsLayoutNameGet({ objectName, layoutName, authorization, accept, xVaultAPIClientID }: MetadataVobjectsObjectNamePageLayoutsLayoutNameGetRequest): Observable<void>
    metadataVobjectsObjectNamePageLayoutsLayoutNameGet({ objectName, layoutName, authorization, accept, xVaultAPIClientID }: MetadataVobjectsObjectNamePageLayoutsLayoutNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metadataVobjectsObjectNamePageLayoutsLayoutNameGet({ objectName, layoutName, authorization, accept, xVaultAPIClientID }: MetadataVobjectsObjectNamePageLayoutsLayoutNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'metadataVobjectsObjectNamePageLayoutsLayoutNameGet');
        throwIfNullOrUndefined(layoutName, 'layoutName', 'metadataVobjectsObjectNamePageLayoutsLayoutNameGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/metadata/vobjects/{object_name}/page_layouts/{layout_name}'.replace('{object_name}', encodeURI(objectName)).replace('{layout_name}', encodeURI(layoutName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Email Notification Histories
     */
    notificationsHistoriesGet({ startDate, endDate, allDates, formatResult, limit, offset, authorization, accept, xVaultAPIClientID }: NotificationsHistoriesGetRequest): Observable<void>
    notificationsHistoriesGet({ startDate, endDate, allDates, formatResult, limit, offset, authorization, accept, xVaultAPIClientID }: NotificationsHistoriesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    notificationsHistoriesGet({ startDate, endDate, allDates, formatResult, limit, offset, authorization, accept, xVaultAPIClientID }: NotificationsHistoriesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (startDate != null) { query['start_date'] = startDate; }
        if (endDate != null) { query['end_date'] = endDate; }
        if (allDates != null) { query['all_dates'] = allDates; }
        if (formatResult != null) { query['format_result'] = formatResult; }
        if (limit != null) { query['limit'] = limit; }
        if (offset != null) { query['offset'] = offset; }

        return this.request<void>({
            url: '/notifications/histories',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Bulk Workflow Action Details
     */
    objectWorkflowActionsActionGet({ action, authorization, accept, xVaultAPIClientID }: ObjectWorkflowActionsActionGetRequest): Observable<void>
    objectWorkflowActionsActionGet({ action, authorization, accept, xVaultAPIClientID }: ObjectWorkflowActionsActionGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectWorkflowActionsActionGet({ action, authorization, accept, xVaultAPIClientID }: ObjectWorkflowActionsActionGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(action, 'action', 'objectWorkflowActionsActionGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/object/workflow/actions/{action}'.replace('{action}', encodeURI(action)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Initiate Workflow Actions on Multiple Workflows
     */
    objectWorkflowActionsActionPost({ action, authorization, accept, contentType, xVaultAPIClientID }: ObjectWorkflowActionsActionPostRequest): Observable<void>
    objectWorkflowActionsActionPost({ action, authorization, accept, contentType, xVaultAPIClientID }: ObjectWorkflowActionsActionPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectWorkflowActionsActionPost({ action, authorization, accept, contentType, xVaultAPIClientID }: ObjectWorkflowActionsActionPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(action, 'action', 'objectWorkflowActionsActionPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/object/workflow/actions/{action}'.replace('{action}', encodeURI(action)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Cancel Workflow Tasks
     */
    objectWorkflowActionsCanceltasksPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectWorkflowActionsCanceltasksPostRequest): Observable<void>
    objectWorkflowActionsCanceltasksPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectWorkflowActionsCanceltasksPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectWorkflowActionsCanceltasksPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectWorkflowActionsCanceltasksPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/object/workflow/actions/canceltasks',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Cancel Workflows
     */
    objectWorkflowActionsCancelworkflowsPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectWorkflowActionsCancelworkflowsPostRequest): Observable<void>
    objectWorkflowActionsCancelworkflowsPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectWorkflowActionsCancelworkflowsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectWorkflowActionsCancelworkflowsPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectWorkflowActionsCancelworkflowsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/object/workflow/actions/cancelworkflows',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Bulk Workflow Actions
     */
    objectWorkflowActionsGet({ authorization, accept, xVaultAPIClientID }: ObjectWorkflowActionsGetRequest): Observable<void>
    objectWorkflowActionsGet({ authorization, accept, xVaultAPIClientID }: ObjectWorkflowActionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectWorkflowActionsGet({ authorization, accept, xVaultAPIClientID }: ObjectWorkflowActionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/object/workflow/actions',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Reassign Workflow Tasks
     */
    objectWorkflowActionsReassigntasksPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectWorkflowActionsReassigntasksPostRequest): Observable<void>
    objectWorkflowActionsReassigntasksPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectWorkflowActionsReassigntasksPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectWorkflowActionsReassigntasksPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectWorkflowActionsReassigntasksPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/object/workflow/actions/reassigntasks',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Replace Workflow Owner
     */
    objectWorkflowActionsReplaceworkflowownerPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectWorkflowActionsReplaceworkflowownerPostRequest): Observable<void>
    objectWorkflowActionsReplaceworkflowownerPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectWorkflowActionsReplaceworkflowownerPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectWorkflowActionsReplaceworkflowownerPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectWorkflowActionsReplaceworkflowownerPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/object/workflow/actions/replaceworkflowowner',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Binder Export Results
     */
    objectsBindersActionsExportJobIdResultsGet({ jobId, authorization, accept, xVaultAPIClientID }: ObjectsBindersActionsExportJobIdResultsGetRequest): Observable<void>
    objectsBindersActionsExportJobIdResultsGet({ jobId, authorization, accept, xVaultAPIClientID }: ObjectsBindersActionsExportJobIdResultsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersActionsExportJobIdResultsGet({ jobId, authorization, accept, xVaultAPIClientID }: ObjectsBindersActionsExportJobIdResultsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(jobId, 'jobId', 'objectsBindersActionsExportJobIdResultsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/actions/export/{job_id}/results'.replace('{job_id}', encodeURI(jobId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Export Binder (Latest Version)
     */
    objectsBindersBinderIdActionsExportPost({ binderId, source, renditiontype, docversion, attachments, _export, docfield, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdActionsExportPostRequest): Observable<void>
    objectsBindersBinderIdActionsExportPost({ binderId, source, renditiontype, docversion, attachments, _export, docfield, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdActionsExportPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersBinderIdActionsExportPost({ binderId, source, renditiontype, docversion, attachments, _export, docfield, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdActionsExportPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(binderId, 'binderId', 'objectsBindersBinderIdActionsExportPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (source != null) { query['source'] = source; }
        if (renditiontype != null) { query['renditiontype'] = renditiontype; }
        if (docversion != null) { query['docversion'] = docversion; }
        if (attachments != null) { query['attachments'] = attachments; }
        if (_export != null) { query['export'] = _export; }
        if (docfield != null) { query['docfield'] = docfield; }

        return this.request<void>({
            url: '/objects/binders/{binder_id}/actions/export'.replace('{binder_id}', encodeURI(binderId)),
            method: 'POST',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Refresh Binder Auto-Filing
     */
    objectsBindersBinderIdActionsPost({ binderId, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersBinderIdActionsPostRequest): Observable<void>
    objectsBindersBinderIdActionsPost({ binderId, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersBinderIdActionsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersBinderIdActionsPost({ binderId, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersBinderIdActionsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(binderId, 'binderId', 'objectsBindersBinderIdActionsPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{binder_id}/actions'.replace('{binder_id}', encodeURI(binderId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update Binding Rule
     */
    objectsBindersBinderIdBindingRulePut({ binderId, contentType, accept, authorization, xVaultAPIClientID }: ObjectsBindersBinderIdBindingRulePutRequest): Observable<void>
    objectsBindersBinderIdBindingRulePut({ binderId, contentType, accept, authorization, xVaultAPIClientID }: ObjectsBindersBinderIdBindingRulePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersBinderIdBindingRulePut({ binderId, contentType, accept, authorization, xVaultAPIClientID }: ObjectsBindersBinderIdBindingRulePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(binderId, 'binderId', 'objectsBindersBinderIdBindingRulePut');

        const headers: HttpHeaders = {
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{binder_id}/binding_rule'.replace('{binder_id}', encodeURI(binderId)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Binder
     */
    objectsBindersBinderIdDelete({ binderId, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdDeleteRequest): Observable<void>
    objectsBindersBinderIdDelete({ binderId, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersBinderIdDelete({ binderId, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(binderId, 'binderId', 'objectsBindersBinderIdDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{binder_id}'.replace('{binder_id}', encodeURI(binderId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update Binder Document Binding Rule
     */
    objectsBindersBinderIdDocumentsNodeIdBindingRulePut({ binderId, nodeId, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersBinderIdDocumentsNodeIdBindingRulePutRequest): Observable<void>
    objectsBindersBinderIdDocumentsNodeIdBindingRulePut({ binderId, nodeId, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersBinderIdDocumentsNodeIdBindingRulePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersBinderIdDocumentsNodeIdBindingRulePut({ binderId, nodeId, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersBinderIdDocumentsNodeIdBindingRulePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(binderId, 'binderId', 'objectsBindersBinderIdDocumentsNodeIdBindingRulePut');
        throwIfNullOrUndefined(nodeId, 'nodeId', 'objectsBindersBinderIdDocumentsNodeIdBindingRulePut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{binder_id}/documents/{node_id}/binding_rule'.replace('{binder_id}', encodeURI(binderId)).replace('{node_id}', encodeURI(nodeId)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Add Document to Binder
     */
    objectsBindersBinderIdDocumentsPost({ binderId, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersBinderIdDocumentsPostRequest): Observable<void>
    objectsBindersBinderIdDocumentsPost({ binderId, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersBinderIdDocumentsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersBinderIdDocumentsPost({ binderId, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersBinderIdDocumentsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(binderId, 'binderId', 'objectsBindersBinderIdDocumentsPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{binder_id}/documents'.replace('{binder_id}', encodeURI(binderId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Remove Document from Binder
     */
    objectsBindersBinderIdDocumentsSectionIdDelete({ binderId, sectionId, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdDocumentsSectionIdDeleteRequest): Observable<void>
    objectsBindersBinderIdDocumentsSectionIdDelete({ binderId, sectionId, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdDocumentsSectionIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersBinderIdDocumentsSectionIdDelete({ binderId, sectionId, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdDocumentsSectionIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(binderId, 'binderId', 'objectsBindersBinderIdDocumentsSectionIdDelete');
        throwIfNullOrUndefined(sectionId, 'sectionId', 'objectsBindersBinderIdDocumentsSectionIdDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{binder_id}/documents/{section_id}'.replace('{binder_id}', encodeURI(binderId)).replace('{section_id}', encodeURI(sectionId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Move Document in Binder
     */
    objectsBindersBinderIdDocumentsSectionIdPut({ binderId, sectionId, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersBinderIdDocumentsSectionIdPutRequest): Observable<void>
    objectsBindersBinderIdDocumentsSectionIdPut({ binderId, sectionId, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersBinderIdDocumentsSectionIdPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersBinderIdDocumentsSectionIdPut({ binderId, sectionId, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersBinderIdDocumentsSectionIdPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(binderId, 'binderId', 'objectsBindersBinderIdDocumentsSectionIdPut');
        throwIfNullOrUndefined(sectionId, 'sectionId', 'objectsBindersBinderIdDocumentsSectionIdPut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{binder_id}/documents/{section_id}'.replace('{binder_id}', encodeURI(binderId)).replace('{section_id}', encodeURI(sectionId)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Binder
     */
    objectsBindersBinderIdGet({ binderId, depth, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdGetRequest): Observable<void>
    objectsBindersBinderIdGet({ binderId, depth, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersBinderIdGet({ binderId, depth, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(binderId, 'binderId', 'objectsBindersBinderIdGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (depth != null) { query['depth'] = depth; }

        return this.request<void>({
            url: '/objects/binders/{binder_id}'.replace('{binder_id}', encodeURI(binderId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Create Binder Version
     */
    objectsBindersBinderIdPost({ binderId, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdPostRequest): Observable<void>
    objectsBindersBinderIdPost({ binderId, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersBinderIdPost({ binderId, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(binderId, 'binderId', 'objectsBindersBinderIdPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{binder_id}'.replace('{binder_id}', encodeURI(binderId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update Binder
     */
    objectsBindersBinderIdPut({ binderId, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersBinderIdPutRequest): Observable<void>
    objectsBindersBinderIdPut({ binderId, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersBinderIdPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersBinderIdPut({ binderId, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersBinderIdPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(binderId, 'binderId', 'objectsBindersBinderIdPut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{binder_id}'.replace('{binder_id}', encodeURI(binderId)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Remove Users & Groups from Roles on a Single Binder
     */
    objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete({ binderId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteRequest): Observable<void>
    objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete({ binderId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete({ binderId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(binderId, 'binderId', 'objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete');
        throwIfNullOrUndefined(roleNameAndUserOrGroup, 'roleNameAndUserOrGroup', 'objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete');
        throwIfNullOrUndefined(id, 'id', 'objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}'.replace('{binder_id}', encodeURI(binderId)).replace('{role_name_and_user_or_group}', encodeURI(roleNameAndUserOrGroup)).replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update Binder Section Binding Rule
     */
    objectsBindersBinderIdSectionsNodeIdBindingRulePut({ binderId, nodeId, contentType, accept, authorization, xVaultAPIClientID }: ObjectsBindersBinderIdSectionsNodeIdBindingRulePutRequest): Observable<void>
    objectsBindersBinderIdSectionsNodeIdBindingRulePut({ binderId, nodeId, contentType, accept, authorization, xVaultAPIClientID }: ObjectsBindersBinderIdSectionsNodeIdBindingRulePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersBinderIdSectionsNodeIdBindingRulePut({ binderId, nodeId, contentType, accept, authorization, xVaultAPIClientID }: ObjectsBindersBinderIdSectionsNodeIdBindingRulePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(binderId, 'binderId', 'objectsBindersBinderIdSectionsNodeIdBindingRulePut');
        throwIfNullOrUndefined(nodeId, 'nodeId', 'objectsBindersBinderIdSectionsNodeIdBindingRulePut');

        const headers: HttpHeaders = {
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{binder_id}/sections/{node_id}/binding_rule'.replace('{binder_id}', encodeURI(binderId)).replace('{node_id}', encodeURI(nodeId)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update Binder Section
     */
    objectsBindersBinderIdSectionsNodeIdPut({ binderId, nodeId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersBinderIdSectionsNodeIdPutRequest): Observable<void>
    objectsBindersBinderIdSectionsNodeIdPut({ binderId, nodeId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersBinderIdSectionsNodeIdPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersBinderIdSectionsNodeIdPut({ binderId, nodeId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersBinderIdSectionsNodeIdPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(binderId, 'binderId', 'objectsBindersBinderIdSectionsNodeIdPut');
        throwIfNullOrUndefined(nodeId, 'nodeId', 'objectsBindersBinderIdSectionsNodeIdPut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{binder_id}/sections/{node_id}'.replace('{binder_id}', encodeURI(binderId)).replace('{node_id}', encodeURI(nodeId)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create Binder Section
     */
    objectsBindersBinderIdSectionsPost({ binderId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersBinderIdSectionsPostRequest): Observable<void>
    objectsBindersBinderIdSectionsPost({ binderId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersBinderIdSectionsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersBinderIdSectionsPost({ binderId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersBinderIdSectionsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(binderId, 'binderId', 'objectsBindersBinderIdSectionsPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{binder_id}/sections'.replace('{binder_id}', encodeURI(binderId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Binder Section
     */
    objectsBindersBinderIdSectionsSectionIdDelete({ binderId, sectionId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersBinderIdSectionsSectionIdDeleteRequest): Observable<void>
    objectsBindersBinderIdSectionsSectionIdDelete({ binderId, sectionId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersBinderIdSectionsSectionIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersBinderIdSectionsSectionIdDelete({ binderId, sectionId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersBinderIdSectionsSectionIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(binderId, 'binderId', 'objectsBindersBinderIdSectionsSectionIdDelete');
        throwIfNullOrUndefined(sectionId, 'sectionId', 'objectsBindersBinderIdSectionsSectionIdDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{binder_id}/sections/{section_id}'.replace('{binder_id}', encodeURI(binderId)).replace('{section_id}', encodeURI(sectionId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Binder Sections
     */
    objectsBindersBinderIdSectionsSectionIdGet({ binderId, sectionId, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdSectionsSectionIdGetRequest): Observable<void>
    objectsBindersBinderIdSectionsSectionIdGet({ binderId, sectionId, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdSectionsSectionIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersBinderIdSectionsSectionIdGet({ binderId, sectionId, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdSectionsSectionIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(binderId, 'binderId', 'objectsBindersBinderIdSectionsSectionIdGet');
        throwIfNullOrUndefined(sectionId, 'sectionId', 'objectsBindersBinderIdSectionsSectionIdGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{binder_id}/sections/{section_id}'.replace('{binder_id}', encodeURI(binderId)).replace('{section_id}', encodeURI(sectionId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve All Binder Versions
     */
    objectsBindersBinderIdVersionsGet({ binderId, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsGetRequest): Observable<void>
    objectsBindersBinderIdVersionsGet({ binderId, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersBinderIdVersionsGet({ binderId, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(binderId, 'binderId', 'objectsBindersBinderIdVersionsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{binder_id}/versions'.replace('{binder_id}', encodeURI(binderId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Export Binder (Specific Version)
     */
    objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost({ binderId, majorVersion, minorVersion, source, renditiontype, docversion, attachments, _export, docfield, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostRequest): Observable<void>
    objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost({ binderId, majorVersion, minorVersion, source, renditiontype, docversion, attachments, _export, docfield, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost({ binderId, majorVersion, minorVersion, source, renditiontype, docversion, attachments, _export, docfield, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(binderId, 'binderId', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (source != null) { query['source'] = source; }
        if (renditiontype != null) { query['renditiontype'] = renditiontype; }
        if (docversion != null) { query['docversion'] = docversion; }
        if (attachments != null) { query['attachments'] = attachments; }
        if (_export != null) { query['export'] = _export; }
        if (docfield != null) { query['docfield'] = docfield; }

        return this.request<void>({
            url: '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export'.replace('{binder_id}', encodeURI(binderId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)),
            method: 'POST',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Delete Binder Version
     */
    objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete({ binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteRequest): Observable<void>
    objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete({ binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete({ binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(binderId, 'binderId', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}'.replace('{binder_id}', encodeURI(binderId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Binder Version
     */
    objectsBindersBinderIdVersionsMajorVersionMinorVersionGet({ binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionGetRequest): Observable<void>
    objectsBindersBinderIdVersionsMajorVersionMinorVersionGet({ binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersBinderIdVersionsMajorVersionMinorVersionGet({ binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(binderId, 'binderId', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionGet');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionGet');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}'.replace('{binder_id}', encodeURI(binderId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update Binder Version
     */
    objectsBindersBinderIdVersionsMajorVersionMinorVersionPut({ binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionPutRequest): Observable<void>
    objectsBindersBinderIdVersionsMajorVersionMinorVersionPut({ binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersBinderIdVersionsMajorVersionMinorVersionPut({ binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(binderId, 'binderId', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionPut');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionPut');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionPut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}'.replace('{binder_id}', encodeURI(binderId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create Binder Relationship
     */
    objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost({ binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostRequest): Observable<void>
    objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost({ binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost({ binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(binderId, 'binderId', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships'.replace('{binder_id}', encodeURI(binderId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Binder Relationship
     */
    objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete({ binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteRequest): Observable<void>
    objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete({ binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete({ binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(binderId, 'binderId', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete');
        throwIfNullOrUndefined(relationshipId, 'relationshipId', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'.replace('{binder_id}', encodeURI(binderId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)).replace('{relationship_id}', encodeURI(relationshipId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Binder Relationship
     */
    objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet({ binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetRequest): Observable<void>
    objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet({ binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet({ binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(binderId, 'binderId', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet');
        throwIfNullOrUndefined(relationshipId, 'relationshipId', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'.replace('{binder_id}', encodeURI(binderId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)).replace('{relationship_id}', encodeURI(relationshipId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Binder Version Section
     */
    objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet({ binderId, majorVersion, minorVersion, sectionId, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetRequest): Observable<void>
    objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet({ binderId, majorVersion, minorVersion, sectionId, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet({ binderId, majorVersion, minorVersion, sectionId, authorization, accept, xVaultAPIClientID }: ObjectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(binderId, 'binderId', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet');
        throwIfNullOrUndefined(sectionId, 'sectionId', 'objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}'.replace('{binder_id}', encodeURI(binderId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)).replace('{section_id}', encodeURI(sectionId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve All Binder Roles
     */
    objectsBindersIdRolesGet({ id, authorization, accept, xVaultAPIClientID }: ObjectsBindersIdRolesGetRequest): Observable<void>
    objectsBindersIdRolesGet({ id, authorization, accept, xVaultAPIClientID }: ObjectsBindersIdRolesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersIdRolesGet({ id, authorization, accept, xVaultAPIClientID }: ObjectsBindersIdRolesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'objectsBindersIdRolesGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{id}/roles'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Assign Users & Groups to Roles on a Single Binder
     */
    objectsBindersIdRolesPost({ id, authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersIdRolesPostRequest): Observable<void>
    objectsBindersIdRolesPost({ id, authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersIdRolesPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersIdRolesPost({ id, authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersIdRolesPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'objectsBindersIdRolesPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{id}/roles'.replace('{id}', encodeURI(id)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Role
     */
    objectsBindersIdRolesRoleNameGet({ id, roleName, authorization, accept, xVaultAPIClientID }: ObjectsBindersIdRolesRoleNameGetRequest): Observable<void>
    objectsBindersIdRolesRoleNameGet({ id, roleName, authorization, accept, xVaultAPIClientID }: ObjectsBindersIdRolesRoleNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersIdRolesRoleNameGet({ id, roleName, authorization, accept, xVaultAPIClientID }: ObjectsBindersIdRolesRoleNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'objectsBindersIdRolesRoleNameGet');
        throwIfNullOrUndefined(roleName, 'roleName', 'objectsBindersIdRolesRoleNameGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{id}/roles/{role_name}'.replace('{id}', encodeURI(id)).replace('{role_name}', encodeURI(roleName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Binder User Actions
     */
    objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet({ id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetRequest): Observable<void>
    objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet({ id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet({ id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions'.replace('{id}', encodeURI(id)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Binder Entry Criteria
     */
    objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet({ id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID }: ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetRequest): Observable<void>
    objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet({ id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID }: ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet({ id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID }: ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet');
        throwIfNullOrUndefined(nameV, 'nameV', 'objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements'.replace('{id}', encodeURI(id)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)).replace('{name__v}', encodeURI(nameV)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Initiate Binder User Action
     */
    objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut({ id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutRequest): Observable<void>
    objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut({ id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut({ id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut');
        throwIfNullOrUndefined(nameV, 'nameV', 'objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}'.replace('{id}', encodeURI(id)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)).replace('{name__v}', encodeURI(nameV)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve User Actions on Multiple Binders
     */
    objectsBindersLifecycleActionsPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersLifecycleActionsPostRequest): Observable<void>
    objectsBindersLifecycleActionsPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersLifecycleActionsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersLifecycleActionsPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersLifecycleActionsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/lifecycle_actions',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Initiate Bulk Binder User Actions
     */
    objectsBindersLifecycleActionsUserActionNamePut({ userActionName, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersLifecycleActionsUserActionNamePutRequest): Observable<void>
    objectsBindersLifecycleActionsUserActionNamePut({ userActionName, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersLifecycleActionsUserActionNamePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersLifecycleActionsUserActionNamePut({ userActionName, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersLifecycleActionsUserActionNamePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(userActionName, 'userActionName', 'objectsBindersLifecycleActionsUserActionNamePut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/lifecycle_actions/{user_action_name}'.replace('{user_action_name}', encodeURI(userActionName)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create Binder
     */
    objectsBindersPost({ async, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersPostRequest): Observable<void>
    objectsBindersPost({ async, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersPost({ async, authorization, contentType, accept, xVaultAPIClientID }: ObjectsBindersPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (async != null) { query['async'] = async; }

        return this.request<void>({
            url: '/objects/binders',
            method: 'POST',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Binder Template Collection
     */
    objectsBindersTemplatesGet({ authorization, accept, xVaultAPIClientID }: ObjectsBindersTemplatesGetRequest): Observable<void>
    objectsBindersTemplatesGet({ authorization, accept, xVaultAPIClientID }: ObjectsBindersTemplatesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersTemplatesGet({ authorization, accept, xVaultAPIClientID }: ObjectsBindersTemplatesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/templates',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create Binder Template
     */
    objectsBindersTemplatesPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersTemplatesPostRequest): Observable<void>
    objectsBindersTemplatesPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersTemplatesPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersTemplatesPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersTemplatesPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/templates',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update Binder Template
     */
    objectsBindersTemplatesPut({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersTemplatesPutRequest): Observable<void>
    objectsBindersTemplatesPut({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersTemplatesPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersTemplatesPut({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersTemplatesPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/templates',
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Binder Template Node Attributes
     */
    objectsBindersTemplatesTemplateNameBindernodesGet({ templateName, authorization, accept, xVaultAPIClientID }: ObjectsBindersTemplatesTemplateNameBindernodesGetRequest): Observable<void>
    objectsBindersTemplatesTemplateNameBindernodesGet({ templateName, authorization, accept, xVaultAPIClientID }: ObjectsBindersTemplatesTemplateNameBindernodesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersTemplatesTemplateNameBindernodesGet({ templateName, authorization, accept, xVaultAPIClientID }: ObjectsBindersTemplatesTemplateNameBindernodesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(templateName, 'templateName', 'objectsBindersTemplatesTemplateNameBindernodesGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/templates/{template_name}/bindernodes'.replace('{template_name}', encodeURI(templateName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create Binder Template Node
     */
    objectsBindersTemplatesTemplateNameBindernodesPost({ templateName, authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersTemplatesTemplateNameBindernodesPostRequest): Observable<void>
    objectsBindersTemplatesTemplateNameBindernodesPost({ templateName, authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersTemplatesTemplateNameBindernodesPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersTemplatesTemplateNameBindernodesPost({ templateName, authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersTemplatesTemplateNameBindernodesPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(templateName, 'templateName', 'objectsBindersTemplatesTemplateNameBindernodesPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/templates/{template_name}/bindernodes'.replace('{template_name}', encodeURI(templateName)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Replace Binder Template Nodes
     */
    objectsBindersTemplatesTemplateNameBindernodesPut({ templateName, authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersTemplatesTemplateNameBindernodesPutRequest): Observable<void>
    objectsBindersTemplatesTemplateNameBindernodesPut({ templateName, authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersTemplatesTemplateNameBindernodesPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersTemplatesTemplateNameBindernodesPut({ templateName, authorization, accept, contentType, xVaultAPIClientID }: ObjectsBindersTemplatesTemplateNameBindernodesPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(templateName, 'templateName', 'objectsBindersTemplatesTemplateNameBindernodesPut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/templates/{template_name}/bindernodes'.replace('{template_name}', encodeURI(templateName)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Binder Template
     */
    objectsBindersTemplatesTemplateNameDelete({ templateName, authorization, accept, xVaultAPIClientID }: ObjectsBindersTemplatesTemplateNameDeleteRequest): Observable<void>
    objectsBindersTemplatesTemplateNameDelete({ templateName, authorization, accept, xVaultAPIClientID }: ObjectsBindersTemplatesTemplateNameDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersTemplatesTemplateNameDelete({ templateName, authorization, accept, xVaultAPIClientID }: ObjectsBindersTemplatesTemplateNameDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(templateName, 'templateName', 'objectsBindersTemplatesTemplateNameDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/templates/{template_name}'.replace('{template_name}', encodeURI(templateName)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Binder Template Attributes
     */
    objectsBindersTemplatesTemplateNameGet({ templateName, authorization, accept, xVaultAPIClientID }: ObjectsBindersTemplatesTemplateNameGetRequest): Observable<void>
    objectsBindersTemplatesTemplateNameGet({ templateName, authorization, accept, xVaultAPIClientID }: ObjectsBindersTemplatesTemplateNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsBindersTemplatesTemplateNameGet({ templateName, authorization, accept, xVaultAPIClientID }: ObjectsBindersTemplatesTemplateNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(templateName, 'templateName', 'objectsBindersTemplatesTemplateNameGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/binders/templates/{template_name}'.replace('{template_name}', encodeURI(templateName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Deleted Document IDs
     */
    objectsDeletionsDocumentsGet({ startDate, endDate, authorization, contentType, accept, xVaultAPIClientID }: ObjectsDeletionsDocumentsGetRequest): Observable<void>
    objectsDeletionsDocumentsGet({ startDate, endDate, authorization, contentType, accept, xVaultAPIClientID }: ObjectsDeletionsDocumentsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDeletionsDocumentsGet({ startDate, endDate, authorization, contentType, accept, xVaultAPIClientID }: ObjectsDeletionsDocumentsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (startDate != null) { query['start_date'] = startDate; }
        if (endDate != null) { query['end_date'] = endDate; }

        return this.request<void>({
            url: '/objects/deletions/documents',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Deleted Object Record ID
     */
    objectsDeletionsVobjectsObjectNameGet({ objectName, authorization, accept, xVaultAPIClientID }: ObjectsDeletionsVobjectsObjectNameGetRequest): Observable<void>
    objectsDeletionsVobjectsObjectNameGet({ objectName, authorization, accept, xVaultAPIClientID }: ObjectsDeletionsVobjectsObjectNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDeletionsVobjectsObjectNameGet({ objectName, authorization, accept, xVaultAPIClientID }: ObjectsDeletionsVobjectsObjectNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'objectsDeletionsVobjectsObjectNameGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/deletions/vobjects/{object_name}'.replace('{object_name}', encodeURI(objectName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve All Document Workflows
     */
    objectsDocumentsActionsGet({ loc, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsActionsGetRequest): Observable<void>
    objectsDocumentsActionsGet({ loc, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsActionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsActionsGet({ loc, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsActionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (loc != null) { query['loc'] = loc; }

        return this.request<void>({
            url: '/objects/documents/actions',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Download Controlled Copy Job Results
     */
    objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet({ lifecycleAndStateAndAction, jobId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetRequest): Observable<void>
    objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet({ lifecycleAndStateAndAction, jobId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet({ lifecycleAndStateAndAction, jobId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(lifecycleAndStateAndAction, 'lifecycleAndStateAndAction', 'objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet');
        throwIfNullOrUndefined(jobId, 'jobId', 'objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results'.replace('{lifecycle_and_state_and_action}', encodeURI(lifecycleAndStateAndAction)).replace('{job_id}', encodeURI(jobId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Workflow Details
     */
    objectsDocumentsActionsWorkflowNameGet({ workflowName, loc, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsActionsWorkflowNameGetRequest): Observable<void>
    objectsDocumentsActionsWorkflowNameGet({ workflowName, loc, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsActionsWorkflowNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsActionsWorkflowNameGet({ workflowName, loc, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsActionsWorkflowNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(workflowName, 'workflowName', 'objectsDocumentsActionsWorkflowNameGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (loc != null) { query['loc'] = loc; }

        return this.request<void>({
            url: '/objects/documents/actions/{workflow_name}'.replace('{workflow_name}', encodeURI(workflowName)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Initiate Document Workflow
     */
    objectsDocumentsActionsWorkflowNamePost({ workflowName, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsActionsWorkflowNamePostRequest): Observable<void>
    objectsDocumentsActionsWorkflowNamePost({ workflowName, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsActionsWorkflowNamePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsActionsWorkflowNamePost({ workflowName, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsActionsWorkflowNamePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(workflowName, 'workflowName', 'objectsDocumentsActionsWorkflowNamePost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/actions/{workflow_name}'.replace('{workflow_name}', encodeURI(workflowName)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Annotations
     */
    objectsDocumentsAnnotationsBatchDelete({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsAnnotationsBatchDeleteRequest): Observable<void>
    objectsDocumentsAnnotationsBatchDelete({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsAnnotationsBatchDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsAnnotationsBatchDelete({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsAnnotationsBatchDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/annotations/batch',
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create Multiple Annotations
     */
    objectsDocumentsAnnotationsBatchPost({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsAnnotationsBatchPostRequest): Observable<void>
    objectsDocumentsAnnotationsBatchPost({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsAnnotationsBatchPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsAnnotationsBatchPost({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsAnnotationsBatchPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(authorization, 'authorization', 'objectsDocumentsAnnotationsBatchPost');
        throwIfNullOrUndefined(contentType, 'contentType', 'objectsDocumentsAnnotationsBatchPost');
        throwIfNullOrUndefined(accept, 'accept', 'objectsDocumentsAnnotationsBatchPost');
        throwIfNullOrUndefined(xVaultAPIClientID, 'xVaultAPIClientID', 'objectsDocumentsAnnotationsBatchPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/annotations/batch',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update Annotations
     */
    objectsDocumentsAnnotationsBatchPut({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsAnnotationsBatchPutRequest): Observable<void>
    objectsDocumentsAnnotationsBatchPut({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsAnnotationsBatchPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsAnnotationsBatchPut({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsAnnotationsBatchPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/annotations/batch',
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Add Annotation Replies
     */
    objectsDocumentsAnnotationsRepliesBatchPost({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsAnnotationsRepliesBatchPostRequest): Observable<void>
    objectsDocumentsAnnotationsRepliesBatchPost({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsAnnotationsRepliesBatchPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsAnnotationsRepliesBatchPost({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsAnnotationsRepliesBatchPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/annotations/replies/batch',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Multiple Document Attachments
     */
    objectsDocumentsAttachmentsBatchDelete({ accept, authorization, contentType, xVaultAPIClientID }: ObjectsDocumentsAttachmentsBatchDeleteRequest): Observable<void>
    objectsDocumentsAttachmentsBatchDelete({ accept, authorization, contentType, xVaultAPIClientID }: ObjectsDocumentsAttachmentsBatchDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsAttachmentsBatchDelete({ accept, authorization, contentType, xVaultAPIClientID }: ObjectsDocumentsAttachmentsBatchDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/attachments/batch',
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create Multiple Document Attachments
     */
    objectsDocumentsAttachmentsBatchPost({ accept, authorization, contentType, xVaultAPIClientID }: ObjectsDocumentsAttachmentsBatchPostRequest): Observable<void>
    objectsDocumentsAttachmentsBatchPost({ accept, authorization, contentType, xVaultAPIClientID }: ObjectsDocumentsAttachmentsBatchPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsAttachmentsBatchPost({ accept, authorization, contentType, xVaultAPIClientID }: ObjectsDocumentsAttachmentsBatchPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/attachments/batch',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update Multiple Document Attachment Descriptions
     */
    objectsDocumentsAttachmentsBatchPut({ accept, authorization, contentType, xVaultAPIClientID }: ObjectsDocumentsAttachmentsBatchPutRequest): Observable<void>
    objectsDocumentsAttachmentsBatchPut({ accept, authorization, contentType, xVaultAPIClientID }: ObjectsDocumentsAttachmentsBatchPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsAttachmentsBatchPut({ accept, authorization, contentType, xVaultAPIClientID }: ObjectsDocumentsAttachmentsBatchPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/attachments/batch',
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Export Results
     */
    objectsDocumentsBatchActionsFileextractJobIdResultsGet({ jobId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsBatchActionsFileextractJobIdResultsGetRequest): Observable<void>
    objectsDocumentsBatchActionsFileextractJobIdResultsGet({ jobId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsBatchActionsFileextractJobIdResultsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsBatchActionsFileextractJobIdResultsGet({ jobId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsBatchActionsFileextractJobIdResultsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(jobId, 'jobId', 'objectsDocumentsBatchActionsFileextractJobIdResultsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/batch/actions/fileextract/{job_id}/results'.replace('{job_id}', encodeURI(jobId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Export Documents
     */
    objectsDocumentsBatchActionsFileextractPost({ source, renditions, allversions, authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsBatchActionsFileextractPostRequest): Observable<void>
    objectsDocumentsBatchActionsFileextractPost({ source, renditions, allversions, authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsBatchActionsFileextractPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsBatchActionsFileextractPost({ source, renditions, allversions, authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsBatchActionsFileextractPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (source != null) { query['source'] = source; }
        if (renditions != null) { query['renditions'] = renditions; }
        if (allversions != null) { query['allversions'] = allversions; }

        return this.request<void>({
            url: '/objects/documents/batch/actions/fileextract',
            method: 'POST',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Reclassify Multiple Documents
     */
    objectsDocumentsBatchActionsReclassifyPut({ authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID }: ObjectsDocumentsBatchActionsReclassifyPutRequest): Observable<void>
    objectsDocumentsBatchActionsReclassifyPut({ authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID }: ObjectsDocumentsBatchActionsReclassifyPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsBatchActionsReclassifyPut({ authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID }: ObjectsDocumentsBatchActionsReclassifyPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIMigrationMode != null ? { 'X-VaultAPI-MigrationMode': String(xVaultAPIMigrationMode) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/batch/actions/reclassify',
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update Multiple Document Renditions
     */
    objectsDocumentsBatchActionsRerenderPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsBatchActionsRerenderPostRequest): Observable<void>
    objectsDocumentsBatchActionsRerenderPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsBatchActionsRerenderPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsBatchActionsRerenderPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsBatchActionsRerenderPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/batch/actions/rerender',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Multiple Documents
     */
    objectsDocumentsBatchDelete({ idParam, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsBatchDeleteRequest): Observable<void>
    objectsDocumentsBatchDelete({ idParam, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsBatchDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsBatchDelete({ idParam, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsBatchDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (idParam != null) { query['idParam'] = idParam; }

        return this.request<void>({
            url: '/objects/documents/batch',
            method: 'DELETE',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Undo Collaborative Authoring Checkout
     */
    objectsDocumentsBatchLockDelete({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsBatchLockDeleteRequest): Observable<void>
    objectsDocumentsBatchLockDelete({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsBatchLockDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsBatchLockDelete({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsBatchLockDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/batch/lock',
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create Multiple Documents
     */
    objectsDocumentsBatchPost({ authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID }: ObjectsDocumentsBatchPostRequest): Observable<void>
    objectsDocumentsBatchPost({ authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID }: ObjectsDocumentsBatchPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsBatchPost({ authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID }: ObjectsDocumentsBatchPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIMigrationMode != null ? { 'X-VaultAPI-MigrationMode': String(xVaultAPIMigrationMode) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/batch',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update Multiple Documents
     */
    objectsDocumentsBatchPut({ authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID }: ObjectsDocumentsBatchPutRequest): Observable<void>
    objectsDocumentsBatchPut({ authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID }: ObjectsDocumentsBatchPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsBatchPut({ authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID }: ObjectsDocumentsBatchPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIMigrationMode != null ? { 'X-VaultAPI-MigrationMode': String(xVaultAPIMigrationMode) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/batch',
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Anchor IDs
     */
    objectsDocumentsDocIdAnchorsGet({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdAnchorsGetRequest): Observable<void>
    objectsDocumentsDocIdAnchorsGet({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdAnchorsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdAnchorsGet({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdAnchorsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdAnchorsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/anchors'.replace('{doc_id}', encodeURI(docId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Export Document Annotations to PDF
     */
    objectsDocumentsDocIdAnnotationsFileGet({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdAnnotationsFileGetRequest): Observable<void>
    objectsDocumentsDocIdAnnotationsFileGet({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdAnnotationsFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdAnnotationsFileGet({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdAnnotationsFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdAnnotationsFileGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/annotations/file'.replace('{doc_id}', encodeURI(docId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Import Document Annotations from PDF
     */
    objectsDocumentsDocIdAnnotationsFilePost({ docId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdAnnotationsFilePostRequest): Observable<void>
    objectsDocumentsDocIdAnnotationsFilePost({ docId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdAnnotationsFilePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdAnnotationsFilePost({ docId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdAnnotationsFilePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdAnnotationsFilePost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/annotations/file'.replace('{doc_id}', encodeURI(docId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Single Document Attachment
     */
    objectsDocumentsDocIdAttachmentsAttachmentIdDelete({ docId, attachmentId, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdDeleteRequest): Observable<void>
    objectsDocumentsDocIdAttachmentsAttachmentIdDelete({ docId, attachmentId, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdAttachmentsAttachmentIdDelete({ docId, attachmentId, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdAttachmentsAttachmentIdDelete');
        throwIfNullOrUndefined(attachmentId, 'attachmentId', 'objectsDocumentsDocIdAttachmentsAttachmentIdDelete');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/attachments/{attachment_id}'.replace('{doc_id}', encodeURI(docId)).replace('{attachment_id}', encodeURI(attachmentId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Download Document Attachment
     */
    objectsDocumentsDocIdAttachmentsAttachmentIdFileGet({ docId, attachmentId, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdFileGetRequest): Observable<void>
    objectsDocumentsDocIdAttachmentsAttachmentIdFileGet({ docId, attachmentId, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdAttachmentsAttachmentIdFileGet({ docId, attachmentId, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdAttachmentsAttachmentIdFileGet');
        throwIfNullOrUndefined(attachmentId, 'attachmentId', 'objectsDocumentsDocIdAttachmentsAttachmentIdFileGet');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/attachments/{attachment_id}/file'.replace('{doc_id}', encodeURI(docId)).replace('{attachment_id}', encodeURI(attachmentId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Attachment Metadata
     */
    objectsDocumentsDocIdAttachmentsAttachmentIdGet({ docId, attachmentId, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdGetRequest): Observable<void>
    objectsDocumentsDocIdAttachmentsAttachmentIdGet({ docId, attachmentId, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdAttachmentsAttachmentIdGet({ docId, attachmentId, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdAttachmentsAttachmentIdGet');
        throwIfNullOrUndefined(attachmentId, 'attachmentId', 'objectsDocumentsDocIdAttachmentsAttachmentIdGet');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/attachments/{attachment_id}'.replace('{doc_id}', encodeURI(docId)).replace('{attachment_id}', encodeURI(attachmentId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update Document Attachment Description
     */
    objectsDocumentsDocIdAttachmentsAttachmentIdPut({ docId, attachmentId, accept, authorization, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdPutRequest): Observable<void>
    objectsDocumentsDocIdAttachmentsAttachmentIdPut({ docId, attachmentId, accept, authorization, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdAttachmentsAttachmentIdPut({ docId, attachmentId, accept, authorization, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdAttachmentsAttachmentIdPut');
        throwIfNullOrUndefined(attachmentId, 'attachmentId', 'objectsDocumentsDocIdAttachmentsAttachmentIdPut');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/attachments/{attachment_id}'.replace('{doc_id}', encodeURI(docId)).replace('{attachment_id}', encodeURI(attachmentId)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Single Document Attachment Version
     */
    objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete({ docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteRequest): Observable<void>
    objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete({ docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete({ docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete');
        throwIfNullOrUndefined(attachmentId, 'attachmentId', 'objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete');
        throwIfNullOrUndefined(attachmentVersion, 'attachmentVersion', 'objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}'.replace('{doc_id}', encodeURI(docId)).replace('{attachment_id}', encodeURI(attachmentId)).replace('{attachment_version}', encodeURI(attachmentVersion)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Download Document Attachment Version
     */
    objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet({ docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequest): Observable<void>
    objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet({ docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet({ docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet');
        throwIfNullOrUndefined(attachmentId, 'attachmentId', 'objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet');
        throwIfNullOrUndefined(attachmentVersion, 'attachmentVersion', 'objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file'.replace('{doc_id}', encodeURI(docId)).replace('{attachment_id}', encodeURI(attachmentId)).replace('{attachment_version}', encodeURI(attachmentVersion)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Attachment Version Metadata
     */
    objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet({ docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetRequest): Observable<void>
    objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet({ docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet({ docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet');
        throwIfNullOrUndefined(attachmentId, 'attachmentId', 'objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet');
        throwIfNullOrUndefined(attachmentVersion, 'attachmentVersion', 'objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}'.replace('{doc_id}', encodeURI(docId)).replace('{attachment_id}', encodeURI(attachmentId)).replace('{attachment_version}', encodeURI(attachmentVersion)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Restore Document Attachment Version
     */
    objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost({ docId, attachmentId, attachmentVersion, restore, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostRequest): Observable<void>
    objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost({ docId, attachmentId, attachmentVersion, restore, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost({ docId, attachmentId, attachmentVersion, restore, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost');
        throwIfNullOrUndefined(attachmentId, 'attachmentId', 'objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost');
        throwIfNullOrUndefined(attachmentVersion, 'attachmentVersion', 'objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (restore != null) { query['restore'] = restore; }

        return this.request<void>({
            url: '/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}'.replace('{doc_id}', encodeURI(docId)).replace('{attachment_id}', encodeURI(attachmentId)).replace('{attachment_version}', encodeURI(attachmentVersion)),
            method: 'POST',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Attachment Versions
     */
    objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet({ docId, attachmentId, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetRequest): Observable<void>
    objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet({ docId, attachmentId, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet({ docId, attachmentId, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet');
        throwIfNullOrUndefined(attachmentId, 'attachmentId', 'objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/attachments/{attachment_id}/versions'.replace('{doc_id}', encodeURI(docId)).replace('{attachment_id}', encodeURI(attachmentId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Download All Document Attachments
     */
    objectsDocumentsDocIdAttachmentsFileGet({ docId, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsFileGetRequest): Observable<void>
    objectsDocumentsDocIdAttachmentsFileGet({ docId, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdAttachmentsFileGet({ docId, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdAttachmentsFileGet');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/attachments/file'.replace('{doc_id}', encodeURI(docId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Attachments
     */
    objectsDocumentsDocIdAttachmentsGet({ docId, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsGetRequest): Observable<void>
    objectsDocumentsDocIdAttachmentsGet({ docId, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdAttachmentsGet({ docId, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdAttachmentsGet');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/attachments'.replace('{doc_id}', encodeURI(docId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create Document Attachment
     */
    objectsDocumentsDocIdAttachmentsPost({ docId, accept, authorization, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsPostRequest): Observable<void>
    objectsDocumentsDocIdAttachmentsPost({ docId, accept, authorization, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdAttachmentsPost({ docId, accept, authorization, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdAttachmentsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdAttachmentsPost');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/attachments'.replace('{doc_id}', encodeURI(docId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Complete Audit History for a Single Document
     */
    objectsDocumentsDocIdAudittrailGet({ docId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdAudittrailGetRequest): Observable<void>
    objectsDocumentsDocIdAudittrailGet({ docId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdAudittrailGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdAudittrailGet({ docId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdAudittrailGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdAudittrailGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (startDate != null) { query['start_date'] = startDate; }
        if (endDate != null) { query['end_date'] = endDate; }
        if (formatResult != null) { query['format_result'] = formatResult; }
        if (limit != null) { query['limit'] = limit; }
        if (offset != null) { query['offset'] = offset; }
        if (events != null) { query['events'] = events; }

        return this.request<void>({
            url: '/objects/documents/{doc_id}/audittrail'.replace('{doc_id}', encodeURI(docId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Delete Single Document
     */
    objectsDocumentsDocIdDelete({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdDeleteRequest): Observable<void>
    objectsDocumentsDocIdDelete({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdDelete({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}'.replace('{doc_id}', encodeURI(docId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Events
     */
    objectsDocumentsDocIdEventsGet({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdEventsGetRequest): Observable<void>
    objectsDocumentsDocIdEventsGet({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdEventsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdEventsGet({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdEventsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdEventsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/events'.replace('{doc_id}', encodeURI(docId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Download Document File
     */
    objectsDocumentsDocIdFileGet({ docId, lockDocument, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdFileGetRequest): Observable<void>
    objectsDocumentsDocIdFileGet({ docId, lockDocument, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdFileGet({ docId, lockDocument, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdFileGet');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (lockDocument != null) { query['lockDocument'] = lockDocument; }

        return this.request<void>({
            url: '/objects/documents/{doc_id}/file'.replace('{doc_id}', encodeURI(docId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document
     */
    objectsDocumentsDocIdGet({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdGetRequest): Observable<void>
    objectsDocumentsDocIdGet({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdGet({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}'.replace('{doc_id}', encodeURI(docId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Document Lock
     */
    objectsDocumentsDocIdLockDelete({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdLockDeleteRequest): Observable<void>
    objectsDocumentsDocIdLockDelete({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdLockDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdLockDelete({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdLockDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdLockDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/lock'.replace('{doc_id}', encodeURI(docId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Lock
     */
    objectsDocumentsDocIdLockGet({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdLockGetRequest): Observable<void>
    objectsDocumentsDocIdLockGet({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdLockGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdLockGet({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdLockGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdLockGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/lock'.replace('{doc_id}', encodeURI(docId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create Document Lock
     */
    objectsDocumentsDocIdLockPost({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdLockPostRequest): Observable<void>
    objectsDocumentsDocIdLockPost({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdLockPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdLockPost({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdLockPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdLockPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/lock'.replace('{doc_id}', encodeURI(docId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Download All Document Version Attachments
     */
    objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet({ docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetRequest): Observable<void>
    objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet({ docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet({ docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file'.replace('{doc_id}', encodeURI(docId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create Single Document Version
     */
    objectsDocumentsDocIdPost({ docId, suppressRendition, authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdPostRequest): Observable<void>
    objectsDocumentsDocIdPost({ docId, suppressRendition, authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdPost({ docId, suppressRendition, authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (suppressRendition != null) { query['suppressRendition'] = suppressRendition; }

        return this.request<void>({
            url: '/objects/documents/{doc_id}'.replace('{doc_id}', encodeURI(docId)),
            method: 'POST',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Update Single Document
     */
    objectsDocumentsDocIdPut({ docId, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID }: ObjectsDocumentsDocIdPutRequest): Observable<void>
    objectsDocumentsDocIdPut({ docId, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID }: ObjectsDocumentsDocIdPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdPut({ docId, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID }: ObjectsDocumentsDocIdPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdPut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIMigrationMode != null ? { 'X-VaultAPI-MigrationMode': String(xVaultAPIMigrationMode) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}'.replace('{doc_id}', encodeURI(docId)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Renditions
     */
    objectsDocumentsDocIdRenditionsGet({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdRenditionsGetRequest): Observable<void>
    objectsDocumentsDocIdRenditionsGet({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdRenditionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdRenditionsGet({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdRenditionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdRenditionsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/renditions'.replace('{doc_id}', encodeURI(docId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Single Document Rendition
     */
    objectsDocumentsDocIdRenditionsRenditionTypeDelete({ docId, renditionType, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdRenditionsRenditionTypeDeleteRequest): Observable<void>
    objectsDocumentsDocIdRenditionsRenditionTypeDelete({ docId, renditionType, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdRenditionsRenditionTypeDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdRenditionsRenditionTypeDelete({ docId, renditionType, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdRenditionsRenditionTypeDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdRenditionsRenditionTypeDelete');
        throwIfNullOrUndefined(renditionType, 'renditionType', 'objectsDocumentsDocIdRenditionsRenditionTypeDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/renditions/{rendition_type}'.replace('{doc_id}', encodeURI(docId)).replace('{rendition_type}', encodeURI(renditionType)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Download Document Rendition File
     */
    objectsDocumentsDocIdRenditionsRenditionTypeGet({ docId, renditionType, steadyState, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdRenditionsRenditionTypeGetRequest): Observable<void>
    objectsDocumentsDocIdRenditionsRenditionTypeGet({ docId, renditionType, steadyState, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdRenditionsRenditionTypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdRenditionsRenditionTypeGet({ docId, renditionType, steadyState, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdRenditionsRenditionTypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdRenditionsRenditionTypeGet');
        throwIfNullOrUndefined(renditionType, 'renditionType', 'objectsDocumentsDocIdRenditionsRenditionTypeGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (steadyState != null) { query['steadyState'] = steadyState; }

        return this.request<void>({
            url: '/objects/documents/{doc_id}/renditions/{rendition_type}'.replace('{doc_id}', encodeURI(docId)).replace('{rendition_type}', encodeURI(renditionType)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Add Single Document Rendition
     */
    objectsDocumentsDocIdRenditionsRenditionTypePost({ docId, renditionType, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdRenditionsRenditionTypePostRequest): Observable<void>
    objectsDocumentsDocIdRenditionsRenditionTypePost({ docId, renditionType, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdRenditionsRenditionTypePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdRenditionsRenditionTypePost({ docId, renditionType, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdRenditionsRenditionTypePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdRenditionsRenditionTypePost');
        throwIfNullOrUndefined(renditionType, 'renditionType', 'objectsDocumentsDocIdRenditionsRenditionTypePost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/renditions/{rendition_type}'.replace('{doc_id}', encodeURI(docId)).replace('{rendition_type}', encodeURI(renditionType)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Replace Document Rendition
     */
    objectsDocumentsDocIdRenditionsRenditionTypePut({ docId, renditionType, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdRenditionsRenditionTypePutRequest): Observable<void>
    objectsDocumentsDocIdRenditionsRenditionTypePut({ docId, renditionType, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdRenditionsRenditionTypePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdRenditionsRenditionTypePut({ docId, renditionType, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdRenditionsRenditionTypePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdRenditionsRenditionTypePut');
        throwIfNullOrUndefined(renditionType, 'renditionType', 'objectsDocumentsDocIdRenditionsRenditionTypePut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/renditions/{rendition_type}'.replace('{doc_id}', encodeURI(docId)).replace('{rendition_type}', encodeURI(renditionType)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Remove Users & Groups from Roles on a Single Document
     */
    objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete({ docId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteRequest): Observable<void>
    objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete({ docId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete({ docId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete');
        throwIfNullOrUndefined(roleNameAndUserOrGroup, 'roleNameAndUserOrGroup', 'objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete');
        throwIfNullOrUndefined(id, 'id', 'objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}'.replace('{doc_id}', encodeURI(docId)).replace('{role_name_and_user_or_group}', encodeURI(roleNameAndUserOrGroup)).replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Version Attachments
     */
    objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet({ docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetRequest): Observable<void>
    objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet({ docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet({ docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments'.replace('{doc_id}', encodeURI(docId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Versions
     */
    objectsDocumentsDocIdVersionsGet({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsGetRequest): Observable<void>
    objectsDocumentsDocIdVersionsGet({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdVersionsGet({ docId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdVersionsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/versions'.replace('{doc_id}', encodeURI(docId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Read Annotations by ID
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet({ docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetRequest): Observable<void>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet({ docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet({ docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet');
        throwIfNullOrUndefined(annotationId, 'annotationId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}'.replace('{doc_id}', encodeURI(docId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)).replace('{annotation_id}', encodeURI(annotationId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Read Replies of Parent Annotation
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet({ docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetRequest): Observable<void>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet({ docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet({ docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet');
        throwIfNullOrUndefined(annotationId, 'annotationId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies'.replace('{doc_id}', encodeURI(docId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)).replace('{annotation_id}', encodeURI(annotationId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Export Document Version Annotations to PDF
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet({ docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetRequest): Observable<void>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet({ docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet({ docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file'.replace('{doc_id}', encodeURI(docId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Import Document Version Annotations from PDF
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost({ docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostRequest): Observable<void>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost({ docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost({ docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file'.replace('{doc_id}', encodeURI(docId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Read Annotations by Document Version and Type
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet({ docId, majorVersion, minorVersion, limit, offset, annotationTypes, paginationId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetRequest): Observable<void>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet({ docId, majorVersion, minorVersion, limit, offset, annotationTypes, paginationId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet({ docId, majorVersion, minorVersion, limit, offset, annotationTypes, paginationId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (limit != null) { query['limit'] = limit; }
        if (offset != null) { query['offset'] = offset; }
        if (annotationTypes != null) { query['annotation_types'] = annotationTypes; }
        if (paginationId != null) { query['pagination_id'] = paginationId; }

        return this.request<void>({
            url: '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations'.replace('{doc_id}', encodeURI(docId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Download Document Version Attachment Version
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet({ docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequest): Observable<void>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet({ docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet({ docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet');
        throwIfNullOrUndefined(attachmentId, 'attachmentId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet');
        throwIfNullOrUndefined(attachmentVersion, 'attachmentVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file'.replace('{doc_id}', encodeURI(docId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)).replace('{attachment_id}', encodeURI(attachmentId)).replace('{attachment_version}', encodeURI(attachmentVersion)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Version Attachment Versions
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet({ docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetRequest): Observable<void>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet({ docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet({ docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet');
        throwIfNullOrUndefined(attachmentId, 'attachmentId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet');
        throwIfNullOrUndefined(attachmentVersion, 'attachmentVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}'.replace('{doc_id}', encodeURI(docId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)).replace('{attachment_id}', encodeURI(attachmentId)).replace('{attachment_version}', encodeURI(attachmentVersion)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Single Document Version
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete({ docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteRequest): Observable<void>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete({ docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete({ docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}'.replace('{doc_id}', encodeURI(docId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Version Notes as CSV
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet({ docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetRequest): Observable<void>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet({ docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet({ docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv'.replace('{doc_id}', encodeURI(docId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create Document Event
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost({ docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostRequest): Observable<void>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost({ docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost({ docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events'.replace('{doc_id}', encodeURI(docId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Video Annotations
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet({ docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetRequest): Observable<void>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet({ docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet({ docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations'.replace('{doc_id}', encodeURI(docId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Download Document Version File
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet({ docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetRequest): Observable<void>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet({ docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet({ docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file'.replace('{doc_id}', encodeURI(docId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Version
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet({ docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionGetRequest): Observable<void>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet({ docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet({ docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}'.replace('{doc_id}', encodeURI(docId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update Document Version
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut({ docId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionPutRequest): Observable<void>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut({ docId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut({ docId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIMigrationMode != null ? { 'X-VaultAPI-MigrationMode': String(xVaultAPIMigrationMode) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}'.replace('{doc_id}', encodeURI(docId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Relationships
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet({ docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetRequest): Observable<void>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet({ docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet({ docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships'.replace('{doc_id}', encodeURI(docId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create Single Document Relationship
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost({ docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostRequest): Observable<void>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost({ docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost({ docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships'.replace('{doc_id}', encodeURI(docId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Single Document Relationship
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete({ docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteRequest): Observable<void>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete({ docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete({ docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete');
        throwIfNullOrUndefined(relationshipId, 'relationshipId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'.replace('{doc_id}', encodeURI(docId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)).replace('{relationship_id}', encodeURI(relationshipId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Relationship
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet({ docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetRequest): Observable<void>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet({ docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet({ docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet');
        throwIfNullOrUndefined(relationshipId, 'relationshipId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}'.replace('{doc_id}', encodeURI(docId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)).replace('{relationship_id}', encodeURI(relationshipId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Version Renditions
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet({ docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetRequest): Observable<void>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet({ docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet({ docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions'.replace('{doc_id}', encodeURI(docId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Document Version Rendition
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete({ docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteRequest): Observable<void>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete({ docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete({ docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete');
        throwIfNullOrUndefined(renditionType, 'renditionType', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'.replace('{doc_id}', encodeURI(docId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)).replace('{rendition_type}', encodeURI(renditionType)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Download Document Version Rendition File
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet({ docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetRequest): Observable<void>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet({ docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet({ docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet');
        throwIfNullOrUndefined(renditionType, 'renditionType', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'.replace('{doc_id}', encodeURI(docId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)).replace('{rendition_type}', encodeURI(renditionType)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Upload Document Version Rendition
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost({ docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostRequest): Observable<void>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost({ docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost({ docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost');
        throwIfNullOrUndefined(renditionType, 'renditionType', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'.replace('{doc_id}', encodeURI(docId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)).replace('{rendition_type}', encodeURI(renditionType)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Replace Document Version Rendition
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut({ docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutRequest): Observable<void>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut({ docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut({ docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut');
        throwIfNullOrUndefined(renditionType, 'renditionType', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}'.replace('{doc_id}', encodeURI(docId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)).replace('{rendition_type}', encodeURI(renditionType)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Download Document Version Thumbnail File
     */
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet({ docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetRequest): Observable<void>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet({ docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet({ docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID }: ObjectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(docId, 'docId', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail'.replace('{doc_id}', encodeURI(docId)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve All Documents
     */
    objectsDocumentsGet({ namedFilter, scope, versionscope, search, limit, sort, start, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsGetRequest): Observable<void>
    objectsDocumentsGet({ namedFilter, scope, versionscope, search, limit, sort, start, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsGet({ namedFilter, scope, versionscope, search, limit, sort, start, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (namedFilter != null) { query['named_filter'] = namedFilter; }
        if (scope != null) { query['scope'] = scope; }
        if (versionscope != null) { query['versionscope'] = versionscope; }
        if (search != null) { query['search'] = search; }
        if (limit != null) { query['limit'] = limit; }
        if (sort != null) { query['sort'] = sort; }
        if (start != null) { query['start'] = start; }

        return this.request<void>({
            url: '/objects/documents',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve All Document Roles
     */
    objectsDocumentsIdRolesGet({ id, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsIdRolesGetRequest): Observable<void>
    objectsDocumentsIdRolesGet({ id, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsIdRolesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsIdRolesGet({ id, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsIdRolesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'objectsDocumentsIdRolesGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{id}/roles'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Assign Users & Groups to Roles on a Single Document
     */
    objectsDocumentsIdRolesPost({ id, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsIdRolesPostRequest): Observable<void>
    objectsDocumentsIdRolesPost({ id, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsIdRolesPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsIdRolesPost({ id, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsIdRolesPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'objectsDocumentsIdRolesPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{id}/roles'.replace('{id}', encodeURI(id)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Role
     */
    objectsDocumentsIdRolesRoleNameGet({ id, roleName, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsIdRolesRoleNameGetRequest): Observable<void>
    objectsDocumentsIdRolesRoleNameGet({ id, roleName, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsIdRolesRoleNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsIdRolesRoleNameGet({ id, roleName, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsIdRolesRoleNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'objectsDocumentsIdRolesRoleNameGet');
        throwIfNullOrUndefined(roleName, 'roleName', 'objectsDocumentsIdRolesRoleNameGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{id}/roles/{role_name}'.replace('{id}', encodeURI(id)).replace('{role_name}', encodeURI(roleName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document User Actions
     */
    objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet({ id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetRequest): Observable<void>
    objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet({ id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet({ id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions'.replace('{id}', encodeURI(id)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Entry Criteria
     */
    objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet({ id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetRequest): Observable<void>
    objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet({ id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet({ id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet');
        throwIfNullOrUndefined(nameV, 'nameV', 'objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements'.replace('{id}', encodeURI(id)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)).replace('{name__v}', encodeURI(nameV)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Initiate Document User Action
     */
    objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut({ id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutRequest): Observable<void>
    objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut({ id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut({ id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut');
        throwIfNullOrUndefined(majorVersion, 'majorVersion', 'objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut');
        throwIfNullOrUndefined(minorVersion, 'minorVersion', 'objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut');
        throwIfNullOrUndefined(nameV, 'nameV', 'objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}'.replace('{id}', encodeURI(id)).replace('{major_version}', encodeURI(majorVersion)).replace('{minor_version}', encodeURI(minorVersion)).replace('{name__v}', encodeURI(nameV)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve User Actions on Multiple Documents
     */
    objectsDocumentsLifecycleActionsPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsLifecycleActionsPostRequest): Observable<void>
    objectsDocumentsLifecycleActionsPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsLifecycleActionsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsLifecycleActionsPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsLifecycleActionsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/lifecycle_actions',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Initiate Bulk Document User Actions
     */
    objectsDocumentsLifecycleActionsUserActionNamePut({ userActionName, authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsLifecycleActionsUserActionNamePutRequest): Observable<void>
    objectsDocumentsLifecycleActionsUserActionNamePut({ userActionName, authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsLifecycleActionsUserActionNamePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsLifecycleActionsUserActionNamePut({ userActionName, authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsLifecycleActionsUserActionNamePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(userActionName, 'userActionName', 'objectsDocumentsLifecycleActionsUserActionNamePut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/lifecycle_actions/{user_action_name}'.replace('{user_action_name}', encodeURI(userActionName)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create Single Document
     */
    objectsDocumentsPost({ authorization, accept, xVaultAPIMigrationMode, xVaultAPIClientID }: ObjectsDocumentsPostRequest): Observable<void>
    objectsDocumentsPost({ authorization, accept, xVaultAPIMigrationMode, xVaultAPIClientID }: ObjectsDocumentsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsPost({ authorization, accept, xVaultAPIMigrationMode, xVaultAPIClientID }: ObjectsDocumentsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIMigrationMode != null ? { 'X-VaultAPI-MigrationMode': String(xVaultAPIMigrationMode) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Multiple Document Relationships
     */
    objectsDocumentsRelationshipsBatchDelete({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsRelationshipsBatchDeleteRequest): Observable<void>
    objectsDocumentsRelationshipsBatchDelete({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsRelationshipsBatchDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsRelationshipsBatchDelete({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsRelationshipsBatchDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/relationships/batch',
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create Multiple Document Relationships
     */
    objectsDocumentsRelationshipsBatchPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsRelationshipsBatchPostRequest): Observable<void>
    objectsDocumentsRelationshipsBatchPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsRelationshipsBatchPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsRelationshipsBatchPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsRelationshipsBatchPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/relationships/batch',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Multiple Document Renditions
     */
    objectsDocumentsRenditionsBatchDelete({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsRenditionsBatchDeleteRequest): Observable<void>
    objectsDocumentsRenditionsBatchDelete({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsRenditionsBatchDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsRenditionsBatchDelete({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsRenditionsBatchDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/renditions/batch',
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Add Multiple Document Renditions
     */
    objectsDocumentsRenditionsBatchPost({ idParam, largeSizeAsset, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID }: ObjectsDocumentsRenditionsBatchPostRequest): Observable<void>
    objectsDocumentsRenditionsBatchPost({ idParam, largeSizeAsset, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID }: ObjectsDocumentsRenditionsBatchPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsRenditionsBatchPost({ idParam, largeSizeAsset, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID }: ObjectsDocumentsRenditionsBatchPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIMigrationMode != null ? { 'X-VaultAPI-MigrationMode': String(xVaultAPIMigrationMode) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (idParam != null) { query['idParam'] = idParam; }
        if (largeSizeAsset != null) { query['largeSizeAsset'] = largeSizeAsset; }

        return this.request<void>({
            url: '/objects/documents/renditions/batch',
            method: 'POST',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Remove Users and Groups from Roles on Multiple Documents & Binders
     */
    objectsDocumentsRolesBatchDelete({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsRolesBatchDeleteRequest): Observable<void>
    objectsDocumentsRolesBatchDelete({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsRolesBatchDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsRolesBatchDelete({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsRolesBatchDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/roles/batch',
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Assign Users & Groups to Roles on Multiple Documents & Binders
     */
    objectsDocumentsRolesBatchPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsRolesBatchPostRequest): Observable<void>
    objectsDocumentsRolesBatchPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsRolesBatchPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsRolesBatchPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsRolesBatchPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/roles/batch',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Template Collection
     */
    objectsDocumentsTemplatesGet({ authorization, accept, xVaultAPIClientID }: ObjectsDocumentsTemplatesGetRequest): Observable<void>
    objectsDocumentsTemplatesGet({ authorization, accept, xVaultAPIClientID }: ObjectsDocumentsTemplatesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsTemplatesGet({ authorization, accept, xVaultAPIClientID }: ObjectsDocumentsTemplatesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/templates',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create Single Document Template
     */
    objectsDocumentsTemplatesPost({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsTemplatesPostRequest): Observable<void>
    objectsDocumentsTemplatesPost({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsTemplatesPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsTemplatesPost({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsTemplatesPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/templates',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update Multiple Document Templates
     */
    objectsDocumentsTemplatesPut({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsTemplatesPutRequest): Observable<void>
    objectsDocumentsTemplatesPut({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsTemplatesPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsTemplatesPut({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDocumentsTemplatesPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/templates',
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Basic Document Template
     */
    objectsDocumentsTemplatesTemplateNameDelete({ templateName, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsTemplatesTemplateNameDeleteRequest): Observable<void>
    objectsDocumentsTemplatesTemplateNameDelete({ templateName, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsTemplatesTemplateNameDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsTemplatesTemplateNameDelete({ templateName, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsTemplatesTemplateNameDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(templateName, 'templateName', 'objectsDocumentsTemplatesTemplateNameDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/templates/{template_name}'.replace('{template_name}', encodeURI(templateName)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Download Document Template File
     */
    objectsDocumentsTemplatesTemplateNameFileGet({ templateName, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsTemplatesTemplateNameFileGetRequest): Observable<void>
    objectsDocumentsTemplatesTemplateNameFileGet({ templateName, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsTemplatesTemplateNameFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsTemplatesTemplateNameFileGet({ templateName, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsTemplatesTemplateNameFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(templateName, 'templateName', 'objectsDocumentsTemplatesTemplateNameFileGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/templates/{template_name}/file'.replace('{template_name}', encodeURI(templateName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Document Template Attributes
     */
    objectsDocumentsTemplatesTemplateNameGet({ templateName, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsTemplatesTemplateNameGetRequest): Observable<void>
    objectsDocumentsTemplatesTemplateNameGet({ templateName, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsTemplatesTemplateNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsTemplatesTemplateNameGet({ templateName, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsTemplatesTemplateNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(templateName, 'templateName', 'objectsDocumentsTemplatesTemplateNameGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/templates/{template_name}'.replace('{template_name}', encodeURI(templateName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update Single Document Template
     */
    objectsDocumentsTemplatesTemplateNamePut({ templateName, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsTemplatesTemplateNamePutRequest): Observable<void>
    objectsDocumentsTemplatesTemplateNamePut({ templateName, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsTemplatesTemplateNamePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsTemplatesTemplateNamePut({ templateName, authorization, accept, xVaultAPIClientID }: ObjectsDocumentsTemplatesTemplateNamePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(templateName, 'templateName', 'objectsDocumentsTemplatesTemplateNamePut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/templates/{template_name}'.replace('{template_name}', encodeURI(templateName)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Document Tokens
     */
    objectsDocumentsTokensPost({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsTokensPostRequest): Observable<void>
    objectsDocumentsTokensPost({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsTokensPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsTokensPost({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsTokensPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/documents/tokens',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Export Document Versions
     */
    objectsDocumentsVersionsBatchActionsFileextractPost({ source, renditions, authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsVersionsBatchActionsFileextractPostRequest): Observable<void>
    objectsDocumentsVersionsBatchActionsFileextractPost({ source, renditions, authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsVersionsBatchActionsFileextractPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsVersionsBatchActionsFileextractPost({ source, renditions, authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsVersionsBatchActionsFileextractPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (source != null) { query['source'] = source; }
        if (renditions != null) { query['renditions'] = renditions; }

        return this.request<void>({
            url: '/objects/documents/versions/batch/actions/fileextract',
            method: 'POST',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Delete Multiple Document Versions
     */
    objectsDocumentsVersionsBatchDelete({ idParam, authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsVersionsBatchDeleteRequest): Observable<void>
    objectsDocumentsVersionsBatchDelete({ idParam, authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsVersionsBatchDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsVersionsBatchDelete({ idParam, authorization, contentType, accept, xVaultAPIClientID }: ObjectsDocumentsVersionsBatchDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (idParam != null) { query['idParam'] = idParam; }

        return this.request<void>({
            url: '/objects/documents/versions/batch',
            method: 'DELETE',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Create Multiple Document Versions
     */
    objectsDocumentsVersionsBatchPost({ idParam, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID }: ObjectsDocumentsVersionsBatchPostRequest): Observable<void>
    objectsDocumentsVersionsBatchPost({ idParam, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID }: ObjectsDocumentsVersionsBatchPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDocumentsVersionsBatchPost({ idParam, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID }: ObjectsDocumentsVersionsBatchPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIMigrationMode != null ? { 'X-VaultAPI-MigrationMode': String(xVaultAPIMigrationMode) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (idParam != null) { query['idParam'] = idParam; }

        return this.request<void>({
            url: '/objects/documents/versions/batch',
            method: 'POST',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Domain Information
     */
    objectsDomainGet({ includeApplication, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDomainGetRequest): Observable<void>
    objectsDomainGet({ includeApplication, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDomainGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDomainGet({ includeApplication, authorization, accept, contentType, xVaultAPIClientID }: ObjectsDomainGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (includeApplication != null) { query['include_application'] = includeApplication; }

        return this.request<void>({
            url: '/objects/domain',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Domains
     */
    objectsDomainsGet({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDomainsGetRequest): Observable<void>
    objectsDomainsGet({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDomainsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsDomainsGet({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsDomainsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/domains',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Add EDL Matched Documents
     */
    objectsEdlMatchedDocumentsBatchActionsAddPost({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsEdlMatchedDocumentsBatchActionsAddPostRequest): Observable<void>
    objectsEdlMatchedDocumentsBatchActionsAddPost({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsEdlMatchedDocumentsBatchActionsAddPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsEdlMatchedDocumentsBatchActionsAddPost({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsEdlMatchedDocumentsBatchActionsAddPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/edl_matched_documents/batch/actions/add',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Remove EDL Matched Documents
     */
    objectsEdlMatchedDocumentsBatchActionsRemovePost({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsEdlMatchedDocumentsBatchActionsRemovePostRequest): Observable<void>
    objectsEdlMatchedDocumentsBatchActionsRemovePost({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsEdlMatchedDocumentsBatchActionsRemovePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsEdlMatchedDocumentsBatchActionsRemovePost({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsEdlMatchedDocumentsBatchActionsRemovePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/edl_matched_documents/batch/actions/remove',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Auto Managed Groups
     */
    objectsGroupsAutoGet({ limit, offset, authorization, accept, xVaultAPIClientID }: ObjectsGroupsAutoGetRequest): Observable<void>
    objectsGroupsAutoGet({ limit, offset, authorization, accept, xVaultAPIClientID }: ObjectsGroupsAutoGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsGroupsAutoGet({ limit, offset, authorization, accept, xVaultAPIClientID }: ObjectsGroupsAutoGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (limit != null) { query['limit'] = limit; }
        if (offset != null) { query['offset'] = offset; }

        return this.request<void>({
            url: '/objects/groups/auto',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve All Groups
     */
    objectsGroupsGet({ includeImplied, authorization, accept, xVaultAPIClientID }: ObjectsGroupsGetRequest): Observable<void>
    objectsGroupsGet({ includeImplied, authorization, accept, xVaultAPIClientID }: ObjectsGroupsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsGroupsGet({ includeImplied, authorization, accept, xVaultAPIClientID }: ObjectsGroupsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (includeImplied != null) { query['includeImplied'] = includeImplied; }

        return this.request<void>({
            url: '/objects/groups',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Delete Group
     */
    objectsGroupsGroupIdDelete({ groupId, authorization, accept, xVaultAPIClientID }: ObjectsGroupsGroupIdDeleteRequest): Observable<void>
    objectsGroupsGroupIdDelete({ groupId, authorization, accept, xVaultAPIClientID }: ObjectsGroupsGroupIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsGroupsGroupIdDelete({ groupId, authorization, accept, xVaultAPIClientID }: ObjectsGroupsGroupIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(groupId, 'groupId', 'objectsGroupsGroupIdDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/groups/{group_id}'.replace('{group_id}', encodeURI(groupId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Group
     */
    objectsGroupsGroupIdGet({ groupId, includeImplied, authorization, accept, xVaultAPIClientID }: ObjectsGroupsGroupIdGetRequest): Observable<void>
    objectsGroupsGroupIdGet({ groupId, includeImplied, authorization, accept, xVaultAPIClientID }: ObjectsGroupsGroupIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsGroupsGroupIdGet({ groupId, includeImplied, authorization, accept, xVaultAPIClientID }: ObjectsGroupsGroupIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(groupId, 'groupId', 'objectsGroupsGroupIdGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (includeImplied != null) { query['includeImplied'] = includeImplied; }

        return this.request<void>({
            url: '/objects/groups/{group_id}'.replace('{group_id}', encodeURI(groupId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Update Group
     */
    objectsGroupsGroupIdPut({ groupId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsGroupsGroupIdPutRequest): Observable<void>
    objectsGroupsGroupIdPut({ groupId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsGroupsGroupIdPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsGroupsGroupIdPut({ groupId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsGroupsGroupIdPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(groupId, 'groupId', 'objectsGroupsGroupIdPut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/groups/{group_id}'.replace('{group_id}', encodeURI(groupId)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create Group 
     */
    objectsGroupsPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsGroupsPostRequest): Observable<void>
    objectsGroupsPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsGroupsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsGroupsPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsGroupsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/groups',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Application License Usage
     */
    objectsLicensesGet({ authorization, accept, xVaultAPIClientID }: ObjectsLicensesGetRequest): Observable<void>
    objectsLicensesGet({ authorization, accept, xVaultAPIClientID }: ObjectsLicensesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsLicensesGet({ authorization, accept, xVaultAPIClientID }: ObjectsLicensesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/licenses',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve All Multi-Record Workflows
     */
    objectsObjectworkflowsActionsGet({ authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsActionsGetRequest): Observable<void>
    objectsObjectworkflowsActionsGet({ authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsActionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsObjectworkflowsActionsGet({ authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsActionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/objectworkflows/actions',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Multi-Record Workflow Details
     */
    objectsObjectworkflowsActionsWorkflowNameGet({ workflowName, authorization, xVaultAPIClientID }: ObjectsObjectworkflowsActionsWorkflowNameGetRequest): Observable<void>
    objectsObjectworkflowsActionsWorkflowNameGet({ workflowName, authorization, xVaultAPIClientID }: ObjectsObjectworkflowsActionsWorkflowNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsObjectworkflowsActionsWorkflowNameGet({ workflowName, authorization, xVaultAPIClientID }: ObjectsObjectworkflowsActionsWorkflowNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(workflowName, 'workflowName', 'objectsObjectworkflowsActionsWorkflowNameGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/objectworkflows/actions/{workflow_name}'.replace('{workflow_name}', encodeURI(workflowName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Initiate Multi-Record Workflow
     */
    objectsObjectworkflowsActionsWorkflowNamePost({ workflowName, authorization, contentType, accept, xVaultAPIClientID }: ObjectsObjectworkflowsActionsWorkflowNamePostRequest): Observable<void>
    objectsObjectworkflowsActionsWorkflowNamePost({ workflowName, authorization, contentType, accept, xVaultAPIClientID }: ObjectsObjectworkflowsActionsWorkflowNamePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsObjectworkflowsActionsWorkflowNamePost({ workflowName, authorization, contentType, accept, xVaultAPIClientID }: ObjectsObjectworkflowsActionsWorkflowNamePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(workflowName, 'workflowName', 'objectsObjectworkflowsActionsWorkflowNamePost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/objectworkflows/actions/{workflow_name}'.replace('{workflow_name}', encodeURI(workflowName)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Workflows
     */
    objectsObjectworkflowsGet({ objectV, recordIdV, participant, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsGetRequest): Observable<void>
    objectsObjectworkflowsGet({ objectV, recordIdV, participant, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsObjectworkflowsGet({ objectV, recordIdV, participant, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (objectV != null) { query['object__v'] = objectV; }
        if (recordIdV != null) { query['record_id__v'] = recordIdV; }
        if (participant != null) { query['participant'] = participant; }
        if (statusV != null) { query['status__v'] = statusV; }
        if (offset != null) { query['offset'] = offset; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (loc != null) { query['loc'] = loc; }

        return this.request<void>({
            url: '/objects/objectworkflows',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Workflow Tasks
     */
    objectsObjectworkflowsTasksGet({ objectV, recordIdV, assigneeV, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsTasksGetRequest): Observable<void>
    objectsObjectworkflowsTasksGet({ objectV, recordIdV, assigneeV, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsTasksGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsObjectworkflowsTasksGet({ objectV, recordIdV, assigneeV, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsTasksGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (objectV != null) { query['object__v'] = objectV; }
        if (recordIdV != null) { query['record_id__v'] = recordIdV; }
        if (assigneeV != null) { query['assignee__v'] = assigneeV; }
        if (statusV != null) { query['status__v'] = statusV; }
        if (offset != null) { query['offset'] = offset; }
        if (pageSize != null) { query['page_size'] = pageSize; }
        if (loc != null) { query['loc'] = loc; }

        return this.request<void>({
            url: '/objects/objectworkflows/tasks',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Accept Single Record Workflow Task
     */
    objectsObjectworkflowsTasksTaskIdActionsAcceptPost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsAcceptPostRequest): Observable<void>
    objectsObjectworkflowsTasksTaskIdActionsAcceptPost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsAcceptPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsObjectworkflowsTasksTaskIdActionsAcceptPost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsAcceptPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(taskId, 'taskId', 'objectsObjectworkflowsTasksTaskIdActionsAcceptPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/objectworkflows/tasks/{task_id}/actions/accept'.replace('{task_id}', encodeURI(taskId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Cancel Workflow Task
     */
    objectsObjectworkflowsTasksTaskIdActionsCancelPost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsCancelPostRequest): Observable<void>
    objectsObjectworkflowsTasksTaskIdActionsCancelPost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsCancelPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsObjectworkflowsTasksTaskIdActionsCancelPost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsCancelPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(taskId, 'taskId', 'objectsObjectworkflowsTasksTaskIdActionsCancelPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/objectworkflows/tasks/{task_id}/actions/cancel'.replace('{task_id}', encodeURI(taskId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Complete Single Record Workflow Task
     */
    objectsObjectworkflowsTasksTaskIdActionsCompletePost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsCompletePostRequest): Observable<void>
    objectsObjectworkflowsTasksTaskIdActionsCompletePost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsCompletePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsObjectworkflowsTasksTaskIdActionsCompletePost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsCompletePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(taskId, 'taskId', 'objectsObjectworkflowsTasksTaskIdActionsCompletePost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/objectworkflows/tasks/{task_id}/actions/complete'.replace('{task_id}', encodeURI(taskId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Workflow Task Actions
     */
    objectsObjectworkflowsTasksTaskIdActionsGet({ taskId, authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsGetRequest): Observable<void>
    objectsObjectworkflowsTasksTaskIdActionsGet({ taskId, authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsObjectworkflowsTasksTaskIdActionsGet({ taskId, authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(taskId, 'taskId', 'objectsObjectworkflowsTasksTaskIdActionsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/objectworkflows/tasks/{task_id}/actions'.replace('{task_id}', encodeURI(taskId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Accept Multi-item Workflow Task
     */
    objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsMdwacceptPostRequest): Observable<void>
    objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsMdwacceptPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsMdwacceptPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(taskId, 'taskId', 'objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/objectworkflows/tasks/{task_id}/actions/mdwaccept'.replace('{task_id}', encodeURI(taskId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Complete Multi-item Workflow Task
     */
    objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsMdwcompletePostRequest): Observable<void>
    objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsMdwcompletePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsMdwcompletePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(taskId, 'taskId', 'objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete'.replace('{task_id}', encodeURI(taskId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Manage Multi-Item Workflow Content
     */
    objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostRequest): Observable<void>
    objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(taskId, 'taskId', 'objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent'.replace('{task_id}', encodeURI(taskId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Reassign Multi-item Workflow Task
     */
    objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsMdwreassignPostRequest): Observable<void>
    objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsMdwreassignPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsMdwreassignPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(taskId, 'taskId', 'objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/objectworkflows/tasks/{task_id}/actions/mdwreassign'.replace('{task_id}', encodeURI(taskId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Reassign Single Record Workflow Task
     */
    objectsObjectworkflowsTasksTaskIdActionsReassignPost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsReassignPostRequest): Observable<void>
    objectsObjectworkflowsTasksTaskIdActionsReassignPost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsReassignPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsObjectworkflowsTasksTaskIdActionsReassignPost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsReassignPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(taskId, 'taskId', 'objectsObjectworkflowsTasksTaskIdActionsReassignPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/objectworkflows/tasks/{task_id}/actions/reassign'.replace('{task_id}', encodeURI(taskId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Workflow Task Action Details
     */
    objectsObjectworkflowsTasksTaskIdActionsTaskActionGet({ taskId, taskAction, loc, authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsTaskActionGetRequest): Observable<void>
    objectsObjectworkflowsTasksTaskIdActionsTaskActionGet({ taskId, taskAction, loc, authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsTaskActionGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsObjectworkflowsTasksTaskIdActionsTaskActionGet({ taskId, taskAction, loc, authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsTaskActionGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(taskId, 'taskId', 'objectsObjectworkflowsTasksTaskIdActionsTaskActionGet');
        throwIfNullOrUndefined(taskAction, 'taskAction', 'objectsObjectworkflowsTasksTaskIdActionsTaskActionGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (loc != null) { query['loc'] = loc; }

        return this.request<void>({
            url: '/objects/objectworkflows/tasks/{task_id}/actions/{task_action}'.replace('{task_id}', encodeURI(taskId)).replace('{task_action}', encodeURI(taskAction)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Undo Workflow Task Acceptance
     */
    objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsUndoacceptPostRequest): Observable<void>
    objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsUndoacceptPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsUndoacceptPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(taskId, 'taskId', 'objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/objectworkflows/tasks/{task_id}/actions/undoaccept'.replace('{task_id}', encodeURI(taskId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update Workflow Task Due Date
     */
    objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostRequest): Observable<void>
    objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost({ taskId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(taskId, 'taskId', 'objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/objectworkflows/tasks/{task_id}/actions/updateduedate'.replace('{task_id}', encodeURI(taskId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Workflow Task Details
     */
    objectsObjectworkflowsTasksTaskIdGet({ taskId, loc, authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdGetRequest): Observable<void>
    objectsObjectworkflowsTasksTaskIdGet({ taskId, loc, authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsObjectworkflowsTasksTaskIdGet({ taskId, loc, authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsTasksTaskIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(taskId, 'taskId', 'objectsObjectworkflowsTasksTaskIdGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (loc != null) { query['loc'] = loc; }

        return this.request<void>({
            url: '/objects/objectworkflows/tasks/{task_id}'.replace('{task_id}', encodeURI(taskId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Workflow Actions
     */
    objectsObjectworkflowsWorkflowIdActionsGet({ workflowId, loc, authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsWorkflowIdActionsGetRequest): Observable<void>
    objectsObjectworkflowsWorkflowIdActionsGet({ workflowId, loc, authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsWorkflowIdActionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsObjectworkflowsWorkflowIdActionsGet({ workflowId, loc, authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsWorkflowIdActionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(workflowId, 'workflowId', 'objectsObjectworkflowsWorkflowIdActionsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (loc != null) { query['loc'] = loc; }

        return this.request<void>({
            url: '/objects/objectworkflows/{workflow_id}/actions'.replace('{workflow_id}', encodeURI(workflowId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Workflow Action Details
     */
    objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet({ workflowId, workflowAction, authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionGetRequest): Observable<void>
    objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet({ workflowId, workflowAction, authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet({ workflowId, workflowAction, authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(workflowId, 'workflowId', 'objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet');
        throwIfNullOrUndefined(workflowAction, 'workflowAction', 'objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/objectworkflows/{workflow_id}/actions/{workflow_action}'.replace('{workflow_id}', encodeURI(workflowId)).replace('{workflow_action}', encodeURI(workflowAction)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Initiate Workflow Action
     */
    objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost({ workflowId, workflowAction, documentsSys, authorization, contentType, accept, xVaultAPIClientID }: ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionPostRequest): Observable<void>
    objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost({ workflowId, workflowAction, documentsSys, authorization, contentType, accept, xVaultAPIClientID }: ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost({ workflowId, workflowAction, documentsSys, authorization, contentType, accept, xVaultAPIClientID }: ObjectsObjectworkflowsWorkflowIdActionsWorkflowActionPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(workflowId, 'workflowId', 'objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost');
        throwIfNullOrUndefined(workflowAction, 'workflowAction', 'objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (documentsSys != null) { query['documents__sys'] = documentsSys; }

        return this.request<void>({
            url: '/objects/objectworkflows/{workflow_id}/actions/{workflow_action}'.replace('{workflow_id}', encodeURI(workflowId)).replace('{workflow_action}', encodeURI(workflowAction)),
            method: 'POST',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Workflow Details
     */
    objectsObjectworkflowsWorkflowIdGet({ workflowId, loc, authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsWorkflowIdGetRequest): Observable<void>
    objectsObjectworkflowsWorkflowIdGet({ workflowId, loc, authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsWorkflowIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsObjectworkflowsWorkflowIdGet({ workflowId, loc, authorization, accept, xVaultAPIClientID }: ObjectsObjectworkflowsWorkflowIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(workflowId, 'workflowId', 'objectsObjectworkflowsWorkflowIdGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (loc != null) { query['loc'] = loc; }

        return this.request<void>({
            url: '/objects/objectworkflows/{workflow_id}'.replace('{workflow_id}', encodeURI(workflowId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve All Picklists
     */
    objectsPicklistsGet({ authorization, accept, xVaultAPIClientID }: ObjectsPicklistsGetRequest): Observable<void>
    objectsPicklistsGet({ authorization, accept, xVaultAPIClientID }: ObjectsPicklistsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsPicklistsGet({ authorization, accept, xVaultAPIClientID }: ObjectsPicklistsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/picklists',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Picklist Values
     */
    objectsPicklistsPicklistNameGet({ picklistName, authorization, accept, xVaultAPIClientID }: ObjectsPicklistsPicklistNameGetRequest): Observable<void>
    objectsPicklistsPicklistNameGet({ picklistName, authorization, accept, xVaultAPIClientID }: ObjectsPicklistsPicklistNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsPicklistsPicklistNameGet({ picklistName, authorization, accept, xVaultAPIClientID }: ObjectsPicklistsPicklistNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(picklistName, 'picklistName', 'objectsPicklistsPicklistNameGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/picklists/{picklist_name}'.replace('{picklist_name}', encodeURI(picklistName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Inactivate Picklist Value
     */
    objectsPicklistsPicklistNamePicklistValueNameDelete({ picklistName, picklistValueName, authorization, accept, xVaultAPIClientID }: ObjectsPicklistsPicklistNamePicklistValueNameDeleteRequest): Observable<void>
    objectsPicklistsPicklistNamePicklistValueNameDelete({ picklistName, picklistValueName, authorization, accept, xVaultAPIClientID }: ObjectsPicklistsPicklistNamePicklistValueNameDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsPicklistsPicklistNamePicklistValueNameDelete({ picklistName, picklistValueName, authorization, accept, xVaultAPIClientID }: ObjectsPicklistsPicklistNamePicklistValueNameDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(picklistName, 'picklistName', 'objectsPicklistsPicklistNamePicklistValueNameDelete');
        throwIfNullOrUndefined(picklistValueName, 'picklistValueName', 'objectsPicklistsPicklistNamePicklistValueNameDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/picklists/{picklist_name}/{picklist_value_name}'.replace('{picklist_name}', encodeURI(picklistName)).replace('{picklist_value_name}', encodeURI(picklistValueName)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update Picklist Value
     */
    objectsPicklistsPicklistNamePicklistValueNamePut({ picklistName, picklistValueName, authorization, accept, contentType, xVaultAPIClientID }: ObjectsPicklistsPicklistNamePicklistValueNamePutRequest): Observable<void>
    objectsPicklistsPicklistNamePicklistValueNamePut({ picklistName, picklistValueName, authorization, accept, contentType, xVaultAPIClientID }: ObjectsPicklistsPicklistNamePicklistValueNamePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsPicklistsPicklistNamePicklistValueNamePut({ picklistName, picklistValueName, authorization, accept, contentType, xVaultAPIClientID }: ObjectsPicklistsPicklistNamePicklistValueNamePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(picklistName, 'picklistName', 'objectsPicklistsPicklistNamePicklistValueNamePut');
        throwIfNullOrUndefined(picklistValueName, 'picklistValueName', 'objectsPicklistsPicklistNamePicklistValueNamePut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/picklists/{picklist_name}/{picklist_value_name}'.replace('{picklist_name}', encodeURI(picklistName)).replace('{picklist_value_name}', encodeURI(picklistValueName)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create Picklist Values
     */
    objectsPicklistsPicklistNamePost({ picklistName, authorization, accept, contentType, xVaultAPIClientID }: ObjectsPicklistsPicklistNamePostRequest): Observable<void>
    objectsPicklistsPicklistNamePost({ picklistName, authorization, accept, contentType, xVaultAPIClientID }: ObjectsPicklistsPicklistNamePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsPicklistsPicklistNamePost({ picklistName, authorization, accept, contentType, xVaultAPIClientID }: ObjectsPicklistsPicklistNamePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(picklistName, 'picklistName', 'objectsPicklistsPicklistNamePost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/picklists/{picklist_name}'.replace('{picklist_name}', encodeURI(picklistName)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update Picklist Value Label
     */
    objectsPicklistsPicklistNamePut({ picklistName, authorization, accept, contentType, xVaultAPIClientID }: ObjectsPicklistsPicklistNamePutRequest): Observable<void>
    objectsPicklistsPicklistNamePut({ picklistName, authorization, accept, contentType, xVaultAPIClientID }: ObjectsPicklistsPicklistNamePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsPicklistsPicklistNamePut({ picklistName, authorization, accept, contentType, xVaultAPIClientID }: ObjectsPicklistsPicklistNamePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(picklistName, 'picklistName', 'objectsPicklistsPicklistNamePut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/picklists/{picklist_name}'.replace('{picklist_name}', encodeURI(picklistName)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Build Production Vault
     */
    objectsSandboxActionsBuildproductionPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsSandboxActionsBuildproductionPostRequest): Observable<void>
    objectsSandboxActionsBuildproductionPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsSandboxActionsBuildproductionPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsSandboxActionsBuildproductionPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsSandboxActionsBuildproductionPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/sandbox/actions/buildproduction',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Promote to Production
     */
    objectsSandboxActionsPromoteproductionPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsSandboxActionsPromoteproductionPostRequest): Observable<void>
    objectsSandboxActionsPromoteproductionPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsSandboxActionsPromoteproductionPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsSandboxActionsPromoteproductionPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsSandboxActionsPromoteproductionPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/sandbox/actions/promoteproduction',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Recheck Sandbox Usage Limit
     */
    objectsSandboxActionsRecheckusagePost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsSandboxActionsRecheckusagePostRequest): Observable<void>
    objectsSandboxActionsRecheckusagePost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsSandboxActionsRecheckusagePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsSandboxActionsRecheckusagePost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsSandboxActionsRecheckusagePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/sandbox/actions/recheckusage',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Change Sandbox Size
     */
    objectsSandboxBatchChangesizePost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsSandboxBatchChangesizePostRequest): Observable<void>
    objectsSandboxBatchChangesizePost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsSandboxBatchChangesizePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsSandboxBatchChangesizePost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsSandboxBatchChangesizePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/sandbox/batch/changesize',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Set Sandbox Entitlements
     */
    objectsSandboxEntitlementsSetPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsSandboxEntitlementsSetPostRequest): Observable<void>
    objectsSandboxEntitlementsSetPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsSandboxEntitlementsSetPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsSandboxEntitlementsSetPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsSandboxEntitlementsSetPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/sandbox/entitlements/set',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Sandboxes
     */
    objectsSandboxGet({ authorization, accept, xVaultAPIClientID }: ObjectsSandboxGetRequest): Observable<void>
    objectsSandboxGet({ authorization, accept, xVaultAPIClientID }: ObjectsSandboxGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsSandboxGet({ authorization, accept, xVaultAPIClientID }: ObjectsSandboxGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/sandbox',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Sandbox
     */
    objectsSandboxNameDelete({ name, authorization, accept, xVaultAPIClientID }: ObjectsSandboxNameDeleteRequest): Observable<void>
    objectsSandboxNameDelete({ name, authorization, accept, xVaultAPIClientID }: ObjectsSandboxNameDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsSandboxNameDelete({ name, authorization, accept, xVaultAPIClientID }: ObjectsSandboxNameDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(name, 'name', 'objectsSandboxNameDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/sandbox/{name}'.replace('{name}', encodeURI(name)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create or Refresh Sandbox
     */
    objectsSandboxPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsSandboxPostRequest): Observable<void>
    objectsSandboxPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsSandboxPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsSandboxPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsSandboxPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/sandbox',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update Sandbox Snapshot
     */
    objectsSandboxSnapshotApiNameActionsUpdatePost({ apiName, authorization, accept, xVaultAPIClientID }: ObjectsSandboxSnapshotApiNameActionsUpdatePostRequest): Observable<void>
    objectsSandboxSnapshotApiNameActionsUpdatePost({ apiName, authorization, accept, xVaultAPIClientID }: ObjectsSandboxSnapshotApiNameActionsUpdatePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsSandboxSnapshotApiNameActionsUpdatePost({ apiName, authorization, accept, xVaultAPIClientID }: ObjectsSandboxSnapshotApiNameActionsUpdatePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(apiName, 'apiName', 'objectsSandboxSnapshotApiNameActionsUpdatePost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/sandbox/snapshot/{api_name}/actions/update'.replace('{api_name}', encodeURI(apiName)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Upgrade Sandbox Snapshot
     */
    objectsSandboxSnapshotApiNameActionsUpgradePost({ apiName, authorization, accept, xVaultAPIClientID }: ObjectsSandboxSnapshotApiNameActionsUpgradePostRequest): Observable<void>
    objectsSandboxSnapshotApiNameActionsUpgradePost({ apiName, authorization, accept, xVaultAPIClientID }: ObjectsSandboxSnapshotApiNameActionsUpgradePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsSandboxSnapshotApiNameActionsUpgradePost({ apiName, authorization, accept, xVaultAPIClientID }: ObjectsSandboxSnapshotApiNameActionsUpgradePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(apiName, 'apiName', 'objectsSandboxSnapshotApiNameActionsUpgradePost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/sandbox/snapshot/{api_name}/actions/upgrade'.replace('{api_name}', encodeURI(apiName)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Sandbox Snapshot
     */
    objectsSandboxSnapshotApiNameDelete({ apiName, authorization, accept, xVaultAPIClientID }: ObjectsSandboxSnapshotApiNameDeleteRequest): Observable<void>
    objectsSandboxSnapshotApiNameDelete({ apiName, authorization, accept, xVaultAPIClientID }: ObjectsSandboxSnapshotApiNameDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsSandboxSnapshotApiNameDelete({ apiName, authorization, accept, xVaultAPIClientID }: ObjectsSandboxSnapshotApiNameDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(apiName, 'apiName', 'objectsSandboxSnapshotApiNameDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/sandbox/snapshot/{api_name}'.replace('{api_name}', encodeURI(apiName)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Sandbox Snapshots
     */
    objectsSandboxSnapshotGet({ authorization, accept, xVaultAPIClientID }: ObjectsSandboxSnapshotGetRequest): Observable<void>
    objectsSandboxSnapshotGet({ authorization, accept, xVaultAPIClientID }: ObjectsSandboxSnapshotGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsSandboxSnapshotGet({ authorization, accept, xVaultAPIClientID }: ObjectsSandboxSnapshotGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/sandbox/snapshot',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create Sandbox Snapshot
     */
    objectsSandboxSnapshotPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsSandboxSnapshotPostRequest): Observable<void>
    objectsSandboxSnapshotPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsSandboxSnapshotPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsSandboxSnapshotPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsSandboxSnapshotPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/sandbox/snapshot',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Refresh Sandbox from Snapshot
     */
    objectsSandboxVaultIdActionsRefreshPost({ vaultId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsSandboxVaultIdActionsRefreshPostRequest): Observable<void>
    objectsSandboxVaultIdActionsRefreshPost({ vaultId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsSandboxVaultIdActionsRefreshPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsSandboxVaultIdActionsRefreshPost({ vaultId, authorization, accept, contentType, xVaultAPIClientID }: ObjectsSandboxVaultIdActionsRefreshPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(vaultId, 'vaultId', 'objectsSandboxVaultIdActionsRefreshPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/sandbox/{vault_id}/actions/refresh'.replace('{vault_id}', encodeURI(vaultId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Sandbox Details by ID
     */
    objectsSandboxVaultIdGet({ vaultId, authorization, accept, xVaultAPIClientID }: ObjectsSandboxVaultIdGetRequest): Observable<void>
    objectsSandboxVaultIdGet({ vaultId, authorization, accept, xVaultAPIClientID }: ObjectsSandboxVaultIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsSandboxVaultIdGet({ vaultId, authorization, accept, xVaultAPIClientID }: ObjectsSandboxVaultIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(vaultId, 'vaultId', 'objectsSandboxVaultIdGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/sandbox/{vault_id}'.replace('{vault_id}', encodeURI(vaultId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve All Security Policies
     */
    objectsSecuritypoliciesGet({ authorization, accept, xVaultAPIClientID }: ObjectsSecuritypoliciesGetRequest): Observable<void>
    objectsSecuritypoliciesGet({ authorization, accept, xVaultAPIClientID }: ObjectsSecuritypoliciesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsSecuritypoliciesGet({ authorization, accept, xVaultAPIClientID }: ObjectsSecuritypoliciesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/securitypolicies',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Security Policy
     */
    objectsSecuritypoliciesSecurityPolicyNameGet({ securityPolicyName, authorization, accept, xVaultAPIClientID }: ObjectsSecuritypoliciesSecurityPolicyNameGetRequest): Observable<void>
    objectsSecuritypoliciesSecurityPolicyNameGet({ securityPolicyName, authorization, accept, xVaultAPIClientID }: ObjectsSecuritypoliciesSecurityPolicyNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsSecuritypoliciesSecurityPolicyNameGet({ securityPolicyName, authorization, accept, xVaultAPIClientID }: ObjectsSecuritypoliciesSecurityPolicyNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(securityPolicyName, 'securityPolicyName', 'objectsSecuritypoliciesSecurityPolicyNameGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/securitypolicies/{security_policy_name}'.replace('{security_policy_name}', encodeURI(securityPolicyName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve All Users
     */
    objectsUsersGet({ vaults, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID }: ObjectsUsersGetRequest): Observable<void>
    objectsUsersGet({ vaults, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID }: ObjectsUsersGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsUsersGet({ vaults, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID }: ObjectsUsersGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (vaults != null) { query['vaults'] = vaults; }
        if (excludeVaultMembership != null) { query['exclude_vault_membership'] = excludeVaultMembership; }
        if (excludeAppLicensing != null) { query['exclude_app_licensing'] = excludeAppLicensing; }

        return this.request<void>({
            url: '/objects/users/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve User
     */
    objectsUsersIdGet({ id, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID }: ObjectsUsersIdGetRequest): Observable<void>
    objectsUsersIdGet({ id, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID }: ObjectsUsersIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsUsersIdGet({ id, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID }: ObjectsUsersIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'objectsUsersIdGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (excludeVaultMembership != null) { query['exclude_vault_membership'] = excludeVaultMembership; }
        if (excludeAppLicensing != null) { query['exclude_app_licensing'] = excludeAppLicensing; }

        return this.request<void>({
            url: '/objects/users/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve User Permissions
     */
    objectsUsersIdPermissionsGet({ id, filter, authorization, accept, xVaultAPIClientID }: ObjectsUsersIdPermissionsGetRequest): Observable<void>
    objectsUsersIdPermissionsGet({ id, filter, authorization, accept, xVaultAPIClientID }: ObjectsUsersIdPermissionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsUsersIdPermissionsGet({ id, filter, authorization, accept, xVaultAPIClientID }: ObjectsUsersIdPermissionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'objectsUsersIdPermissionsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (filter != null) { query['filter'] = filter; }

        return this.request<void>({
            url: '/objects/users/{id}/permissions'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Update Single User
     */
    objectsUsersIdPut({ id, authorization, contentType, xVaultAPIClientID }: ObjectsUsersIdPutRequest): Observable<void>
    objectsUsersIdPut({ id, authorization, contentType, xVaultAPIClientID }: ObjectsUsersIdPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsUsersIdPut({ id, authorization, contentType, xVaultAPIClientID }: ObjectsUsersIdPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'objectsUsersIdPut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/users/{id}'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Validate Session User
     */
    objectsUsersMeGet({ excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID }: ObjectsUsersMeGetRequest): Observable<void>
    objectsUsersMeGet({ excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID }: ObjectsUsersMeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsUsersMeGet({ excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID }: ObjectsUsersMeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (excludeVaultMembership != null) { query['exclude_vault_membership'] = excludeVaultMembership; }
        if (excludeAppLicensing != null) { query['exclude_app_licensing'] = excludeAppLicensing; }

        return this.request<void>({
            url: '/objects/users/me',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Change My Password
     */
    objectsUsersMePasswordPost({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsUsersMePasswordPostRequest): Observable<void>
    objectsUsersMePasswordPost({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsUsersMePasswordPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsUsersMePasswordPost({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsUsersMePasswordPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/users/me/password',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve My User Permissions
     */
    objectsUsersMePermissionsGet({ filter, authorization, accept, xVaultAPIClientID }: ObjectsUsersMePermissionsGetRequest): Observable<void>
    objectsUsersMePermissionsGet({ filter, authorization, accept, xVaultAPIClientID }: ObjectsUsersMePermissionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsUsersMePermissionsGet({ filter, authorization, accept, xVaultAPIClientID }: ObjectsUsersMePermissionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (filter != null) { query['filter'] = filter; }

        return this.request<void>({
            url: '/objects/users/me/permissions',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Update My User
     */
    objectsUsersMePut({ authorization, contentType, xVaultAPIClientID }: ObjectsUsersMePutRequest): Observable<void>
    objectsUsersMePut({ authorization, contentType, xVaultAPIClientID }: ObjectsUsersMePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsUsersMePut({ authorization, contentType, xVaultAPIClientID }: ObjectsUsersMePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/users/me',
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create Single User
     */
    objectsUsersPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsUsersPostRequest): Observable<void>
    objectsUsersPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsUsersPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsUsersPost({ authorization, accept, contentType, xVaultAPIClientID }: ObjectsUsersPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/users',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update Multiple Users
     */
    objectsUsersPut({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsUsersPutRequest): Observable<void>
    objectsUsersPut({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsUsersPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsUsersPut({ authorization, contentType, accept, xVaultAPIClientID }: ObjectsUsersPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/users',
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Disable User
     */
    objectsUsersUserIdDelete({ userId, domain, authorization, accept, xVaultAPIClientID }: ObjectsUsersUserIdDeleteRequest): Observable<void>
    objectsUsersUserIdDelete({ userId, domain, authorization, accept, xVaultAPIClientID }: ObjectsUsersUserIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsUsersUserIdDelete({ userId, domain, authorization, accept, xVaultAPIClientID }: ObjectsUsersUserIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(userId, 'userId', 'objectsUsersUserIdDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (domain != null) { query['domain'] = domain; }

        return this.request<void>({
            url: '/objects/users/{user_id}'.replace('{user_id}', encodeURI(userId)),
            method: 'DELETE',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Update Vault Membership
     */
    objectsUsersUserIdVaultMembershipVaultIdPut({ userId, vaultId, authorization, contentType, accept, xVaultAPIClientID }: ObjectsUsersUserIdVaultMembershipVaultIdPutRequest): Observable<void>
    objectsUsersUserIdVaultMembershipVaultIdPut({ userId, vaultId, authorization, contentType, accept, xVaultAPIClientID }: ObjectsUsersUserIdVaultMembershipVaultIdPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsUsersUserIdVaultMembershipVaultIdPut({ userId, vaultId, authorization, contentType, accept, xVaultAPIClientID }: ObjectsUsersUserIdVaultMembershipVaultIdPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(userId, 'userId', 'objectsUsersUserIdVaultMembershipVaultIdPut');
        throwIfNullOrUndefined(vaultId, 'vaultId', 'objectsUsersUserIdVaultMembershipVaultIdPut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/users/{user_id}/vault_membership/{vault_id}'.replace('{user_id}', encodeURI(userId)).replace('{vault_id}', encodeURI(vaultId)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Vault Compare
     */
    objectsVaultActionsComparePost({ authorization, contentType, xVaultAPIClientID }: ObjectsVaultActionsComparePostRequest): Observable<void>
    objectsVaultActionsComparePost({ authorization, contentType, xVaultAPIClientID }: ObjectsVaultActionsComparePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsVaultActionsComparePost({ authorization, contentType, xVaultAPIClientID }: ObjectsVaultActionsComparePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/vault/actions/compare',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Vault Configuration Report
     */
    objectsVaultActionsConfigreportPost({ authorization, contentType, xVaultAPIClientID }: ObjectsVaultActionsConfigreportPostRequest): Observable<void>
    objectsVaultActionsConfigreportPost({ authorization, contentType, xVaultAPIClientID }: ObjectsVaultActionsConfigreportPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    objectsVaultActionsConfigreportPost({ authorization, contentType, xVaultAPIClientID }: ObjectsVaultActionsConfigreportPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/objects/vault/actions/configreport',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Component Definition Query
     */
    queryComponentsPost({ authorization, accept, contentType, xVaultAPIClientID }: QueryComponentsPostRequest): Observable<void>
    queryComponentsPost({ authorization, accept, contentType, xVaultAPIClientID }: QueryComponentsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    queryComponentsPost({ authorization, accept, contentType, xVaultAPIClientID }: QueryComponentsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/query/components',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Next Page URL
     */
    queryNextPagePost({ nextPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID }: QueryNextPagePostRequest): Observable<void>
    queryNextPagePost({ nextPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID }: QueryNextPagePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    queryNextPagePost({ nextPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID }: QueryNextPagePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(nextPage, 'nextPage', 'queryNextPagePost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIDescribeQuery != null ? { 'X-VaultAPI-DescribeQuery': String(xVaultAPIDescribeQuery) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/query/{next_page}'.replace('{next_page}', encodeURI(nextPage)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Submitting a Query
     */
    queryPost({ authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID }: QueryPostRequest): Observable<void>
    queryPost({ authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID }: QueryPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    queryPost({ authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID }: QueryPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIDescribeQuery != null ? { 'X-VaultAPI-DescribeQuery': String(xVaultAPIDescribeQuery) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/query',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Previous Page URL
     */
    queryPreviousPagePost({ previousPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID }: QueryPreviousPagePostRequest): Observable<void>
    queryPreviousPagePost({ previousPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID }: QueryPreviousPagePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    queryPreviousPagePost({ previousPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID }: QueryPreviousPagePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(previousPage, 'previousPage', 'queryPreviousPagePost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIDescribeQuery != null ? { 'X-VaultAPI-DescribeQuery': String(xVaultAPIDescribeQuery) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/query/{previous_page}'.replace('{previous_page}', encodeURI(previousPage)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Current User with SCIM
     */
    scimV2MeGet({ attributes, excludedAttributes, authorization, accept, xVaultAPIClientID }: ScimV2MeGetRequest): Observable<void>
    scimV2MeGet({ attributes, excludedAttributes, authorization, accept, xVaultAPIClientID }: ScimV2MeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    scimV2MeGet({ attributes, excludedAttributes, authorization, accept, xVaultAPIClientID }: ScimV2MeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (attributes != null) { query['attributes'] = attributes; }
        if (excludedAttributes != null) { query['excludedAttributes'] = excludedAttributes; }

        return this.request<void>({
            url: '/scim/v2/Me',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Update Current User with SCIM
     */
    scimV2MePut({ attributes, excludedAttributes, authorization, accept, contentType, xVaultAPIClientID }: ScimV2MePutRequest): Observable<void>
    scimV2MePut({ attributes, excludedAttributes, authorization, accept, contentType, xVaultAPIClientID }: ScimV2MePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    scimV2MePut({ attributes, excludedAttributes, authorization, accept, contentType, xVaultAPIClientID }: ScimV2MePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (attributes != null) { query['attributes'] = attributes; }
        if (excludedAttributes != null) { query['excludedAttributes'] = excludedAttributes; }

        return this.request<void>({
            url: '/scim/v2/Me',
            method: 'PUT',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve All SCIM Resource Types
     */
    scimV2ResourceTypesGet({ authorization, accept, xVaultAPIClientID }: ScimV2ResourceTypesGetRequest): Observable<void>
    scimV2ResourceTypesGet({ authorization, accept, xVaultAPIClientID }: ScimV2ResourceTypesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    scimV2ResourceTypesGet({ authorization, accept, xVaultAPIClientID }: ScimV2ResourceTypesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/scim/v2/ResourceTypes',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Single SCIM Resource Type
     */
    scimV2ResourceTypesTypeGet({ type, authorization, accept, xVaultAPIClientID }: ScimV2ResourceTypesTypeGetRequest): Observable<void>
    scimV2ResourceTypesTypeGet({ type, authorization, accept, xVaultAPIClientID }: ScimV2ResourceTypesTypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    scimV2ResourceTypesTypeGet({ type, authorization, accept, xVaultAPIClientID }: ScimV2ResourceTypesTypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(type, 'type', 'scimV2ResourceTypesTypeGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/scim/v2/ResourceTypes/{type}'.replace('{type}', encodeURI(type)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve All SCIM Schema Information
     */
    scimV2SchemasGet({ authorization, accept, xVaultAPIClientID }: ScimV2SchemasGetRequest): Observable<void>
    scimV2SchemasGet({ authorization, accept, xVaultAPIClientID }: ScimV2SchemasGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    scimV2SchemasGet({ authorization, accept, xVaultAPIClientID }: ScimV2SchemasGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/scim/v2/Schemas',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Single SCIM Schema Information
     */
    scimV2SchemasIdGet({ id, authorization, accept, xVaultAPIClientID }: ScimV2SchemasIdGetRequest): Observable<void>
    scimV2SchemasIdGet({ id, authorization, accept, xVaultAPIClientID }: ScimV2SchemasIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    scimV2SchemasIdGet({ id, authorization, accept, xVaultAPIClientID }: ScimV2SchemasIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'scimV2SchemasIdGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/scim/v2/Schemas/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve SCIM Provider
     */
    scimV2ServiceProviderConfigGet({ authorization, accept, xVaultAPIClientID }: ScimV2ServiceProviderConfigGetRequest): Observable<void>
    scimV2ServiceProviderConfigGet({ authorization, accept, xVaultAPIClientID }: ScimV2ServiceProviderConfigGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    scimV2ServiceProviderConfigGet({ authorization, accept, xVaultAPIClientID }: ScimV2ServiceProviderConfigGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/scim/v2/ServiceProviderConfig',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve SCIM Resources
     */
    scimV2TypeGet({ type, filter, attributes, excludedAttributes, sortBy, sortOrder, startIndex, authorization, accept, xVaultAPIClientID }: ScimV2TypeGetRequest): Observable<void>
    scimV2TypeGet({ type, filter, attributes, excludedAttributes, sortBy, sortOrder, startIndex, authorization, accept, xVaultAPIClientID }: ScimV2TypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    scimV2TypeGet({ type, filter, attributes, excludedAttributes, sortBy, sortOrder, startIndex, authorization, accept, xVaultAPIClientID }: ScimV2TypeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(type, 'type', 'scimV2TypeGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (filter != null) { query['filter'] = filter; }
        if (attributes != null) { query['attributes'] = attributes; }
        if (excludedAttributes != null) { query['excludedAttributes'] = excludedAttributes; }
        if (sortBy != null) { query['sortBy'] = sortBy; }
        if (sortOrder != null) { query['sortOrder'] = sortOrder; }
        if (startIndex != null) { query['startIndex'] = startIndex; }

        return this.request<void>({
            url: '/scim/v2/{type}'.replace('{type}', encodeURI(type)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Single SCIM Resource
     */
    scimV2TypeIdGet({ type, id, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID }: ScimV2TypeIdGetRequest): Observable<void>
    scimV2TypeIdGet({ type, id, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID }: ScimV2TypeIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    scimV2TypeIdGet({ type, id, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID }: ScimV2TypeIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(type, 'type', 'scimV2TypeIdGet');
        throwIfNullOrUndefined(id, 'id', 'scimV2TypeIdGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (attributes != null) { query['attributes'] = attributes; }
        if (excludedAttributes != null) { query['excludedAttributes'] = excludedAttributes; }

        return this.request<void>({
            url: '/scim/v2/{type}/{id}'.replace('{type}', encodeURI(type)).replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve All Users with SCIM
     */
    scimV2UsersGet({ filter, attributes, excludedAttributes, sortBy, sortOrder, count, startIndex, authorization, accept, xVaultAPIClientID }: ScimV2UsersGetRequest): Observable<void>
    scimV2UsersGet({ filter, attributes, excludedAttributes, sortBy, sortOrder, count, startIndex, authorization, accept, xVaultAPIClientID }: ScimV2UsersGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    scimV2UsersGet({ filter, attributes, excludedAttributes, sortBy, sortOrder, count, startIndex, authorization, accept, xVaultAPIClientID }: ScimV2UsersGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (filter != null) { query['filter'] = filter; }
        if (attributes != null) { query['attributes'] = attributes; }
        if (excludedAttributes != null) { query['excludedAttributes'] = excludedAttributes; }
        if (sortBy != null) { query['sortBy'] = sortBy; }
        if (sortOrder != null) { query['sortOrder'] = sortOrder; }
        if (count != null) { query['count'] = count; }
        if (startIndex != null) { query['startIndex'] = startIndex; }

        return this.request<void>({
            url: '/scim/v2/Users',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Single User with SCIM
     */
    scimV2UsersIdGet({ id, filter, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID }: ScimV2UsersIdGetRequest): Observable<void>
    scimV2UsersIdGet({ id, filter, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID }: ScimV2UsersIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    scimV2UsersIdGet({ id, filter, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID }: ScimV2UsersIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'scimV2UsersIdGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (filter != null) { query['filter'] = filter; }
        if (attributes != null) { query['attributes'] = attributes; }
        if (excludedAttributes != null) { query['excludedAttributes'] = excludedAttributes; }

        return this.request<void>({
            url: '/scim/v2/Users/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Update User with SCIM
     */
    scimV2UsersIdPut({ id, authorization, accept, contentType, xVaultAPIClientID }: ScimV2UsersIdPutRequest): Observable<void>
    scimV2UsersIdPut({ id, authorization, accept, contentType, xVaultAPIClientID }: ScimV2UsersIdPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    scimV2UsersIdPut({ id, authorization, accept, contentType, xVaultAPIClientID }: ScimV2UsersIdPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'scimV2UsersIdPut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/scim/v2/Users/{id}'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create User with SCIM
     */
    scimV2UsersPost({ authorization, accept, contentType, xVaultAPIClientID }: ScimV2UsersPostRequest): Observable<void>
    scimV2UsersPost({ authorization, accept, contentType, xVaultAPIClientID }: ScimV2UsersPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    scimV2UsersPost({ authorization, accept, contentType, xVaultAPIClientID }: ScimV2UsersPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/scim/v2/Users',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Signing Certificate
     */
    servicesCertificateCertIdGet({ certId, authorization, accept, xVaultAPIClientID }: ServicesCertificateCertIdGetRequest): Observable<void>
    servicesCertificateCertIdGet({ certId, authorization, accept, xVaultAPIClientID }: ServicesCertificateCertIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesCertificateCertIdGet({ certId, authorization, accept, xVaultAPIClientID }: ServicesCertificateCertIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(certId, 'certId', 'servicesCertificateCertIdGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/certificate/{cert_id}'.replace('{cert_id}', encodeURI(certId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Disable Configuration Mode
     */
    servicesConfigurationModeActionsDisablePost({ authorization, accept, contentType, xVaultAPIClientID }: ServicesConfigurationModeActionsDisablePostRequest): Observable<void>
    servicesConfigurationModeActionsDisablePost({ authorization, accept, contentType, xVaultAPIClientID }: ServicesConfigurationModeActionsDisablePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesConfigurationModeActionsDisablePost({ authorization, accept, contentType, xVaultAPIClientID }: ServicesConfigurationModeActionsDisablePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/configuration_mode/actions/disable',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Enable Configuration Mode
     */
    servicesConfigurationModeActionsEnablePost({ authorization, accept, contentType, xVaultAPIClientID }: ServicesConfigurationModeActionsEnablePostRequest): Observable<void>
    servicesConfigurationModeActionsEnablePost({ authorization, accept, contentType, xVaultAPIClientID }: ServicesConfigurationModeActionsEnablePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesConfigurationModeActionsEnablePost({ authorization, accept, contentType, xVaultAPIClientID }: ServicesConfigurationModeActionsEnablePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/configuration_mode/actions/enable',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Available Direct Data Files
     */
    servicesDirectdataFilesGet({ extractType, startTime, stopTime, accept, authorization, xVaultAPIClientID }: ServicesDirectdataFilesGetRequest): Observable<void>
    servicesDirectdataFilesGet({ extractType, startTime, stopTime, accept, authorization, xVaultAPIClientID }: ServicesDirectdataFilesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesDirectdataFilesGet({ extractType, startTime, stopTime, accept, authorization, xVaultAPIClientID }: ServicesDirectdataFilesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (extractType != null) { query['extract_type'] = extractType; }
        if (startTime != null) { query['start_time'] = startTime; }
        if (stopTime != null) { query['stop_time'] = stopTime; }

        return this.request<void>({
            url: '/services/directdata/files',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Download Direct Data File
     */
    servicesDirectdataFilesNameGet({ name, accept, authorization, xVaultAPIClientID }: ServicesDirectdataFilesNameGetRequest): Observable<void>
    servicesDirectdataFilesNameGet({ name, accept, authorization, xVaultAPIClientID }: ServicesDirectdataFilesNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesDirectdataFilesNameGet({ name, accept, authorization, xVaultAPIClientID }: ServicesDirectdataFilesNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(name, 'name', 'servicesDirectdataFilesNameGet');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/directdata/files/{name}'.replace('{name}', encodeURI(name)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Download Item Content
     */
    servicesFileStagingItemsContentItemGet({ item, authorization, accept, range, xVaultAPIClientID }: ServicesFileStagingItemsContentItemGetRequest): Observable<void>
    servicesFileStagingItemsContentItemGet({ item, authorization, accept, range, xVaultAPIClientID }: ServicesFileStagingItemsContentItemGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesFileStagingItemsContentItemGet({ item, authorization, accept, range, xVaultAPIClientID }: ServicesFileStagingItemsContentItemGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(item, 'item', 'servicesFileStagingItemsContentItemGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(range != null ? { 'Range': String(range) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/file_staging/items/content/{item}'.replace('{item}', encodeURI(item)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete File or Folder
     */
    servicesFileStagingItemsItemDelete({ item, recursive, authorization, accept, xVaultAPIClientID }: ServicesFileStagingItemsItemDeleteRequest): Observable<void>
    servicesFileStagingItemsItemDelete({ item, recursive, authorization, accept, xVaultAPIClientID }: ServicesFileStagingItemsItemDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesFileStagingItemsItemDelete({ item, recursive, authorization, accept, xVaultAPIClientID }: ServicesFileStagingItemsItemDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(item, 'item', 'servicesFileStagingItemsItemDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (recursive != null) { query['recursive'] = recursive; }

        return this.request<void>({
            url: '/services/file_staging/items/{item}'.replace('{item}', encodeURI(item)),
            method: 'DELETE',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * List Items at a Path
     */
    servicesFileStagingItemsItemGet({ item, recursive, limit, formatResult, authorization, accept, xVaultAPIClientID }: ServicesFileStagingItemsItemGetRequest): Observable<void>
    servicesFileStagingItemsItemGet({ item, recursive, limit, formatResult, authorization, accept, xVaultAPIClientID }: ServicesFileStagingItemsItemGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesFileStagingItemsItemGet({ item, recursive, limit, formatResult, authorization, accept, xVaultAPIClientID }: ServicesFileStagingItemsItemGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(item, 'item', 'servicesFileStagingItemsItemGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (recursive != null) { query['recursive'] = recursive; }
        if (limit != null) { query['limit'] = limit; }
        if (formatResult != null) { query['format_result'] = formatResult; }

        return this.request<void>({
            url: '/services/file_staging/items/{item}'.replace('{item}', encodeURI(item)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Update Folder or File
     */
    servicesFileStagingItemsItemPut({ item, authorization, accept, xVaultAPIClientID }: ServicesFileStagingItemsItemPutRequest): Observable<void>
    servicesFileStagingItemsItemPut({ item, authorization, accept, xVaultAPIClientID }: ServicesFileStagingItemsItemPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesFileStagingItemsItemPut({ item, authorization, accept, xVaultAPIClientID }: ServicesFileStagingItemsItemPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(item, 'item', 'servicesFileStagingItemsItemPut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/file_staging/items/{item}'.replace('{item}', encodeURI(item)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create Folder or File
     */
    servicesFileStagingItemsPost({ authorization, accept, contentMD5, xVaultAPIClientID }: ServicesFileStagingItemsPostRequest): Observable<void>
    servicesFileStagingItemsPost({ authorization, accept, contentMD5, xVaultAPIClientID }: ServicesFileStagingItemsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesFileStagingItemsPost({ authorization, accept, contentMD5, xVaultAPIClientID }: ServicesFileStagingItemsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentMD5 != null ? { 'Content-MD5': String(contentMD5) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/file_staging/items',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * List Upload Sessions
     */
    servicesFileStagingUploadGet({ authorization, accept, xVaultAPIClientID }: ServicesFileStagingUploadGetRequest): Observable<void>
    servicesFileStagingUploadGet({ authorization, accept, xVaultAPIClientID }: ServicesFileStagingUploadGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesFileStagingUploadGet({ authorization, accept, xVaultAPIClientID }: ServicesFileStagingUploadGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/file_staging/upload/',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create Resumable Upload Session
     */
    servicesFileStagingUploadPost({ authorization, accept, xVaultAPIClientID }: ServicesFileStagingUploadPostRequest): Observable<void>
    servicesFileStagingUploadPost({ authorization, accept, xVaultAPIClientID }: ServicesFileStagingUploadPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesFileStagingUploadPost({ authorization, accept, xVaultAPIClientID }: ServicesFileStagingUploadPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/file_staging/upload',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Abort Upload Session
     */
    servicesFileStagingUploadUploadSessionIdDelete({ uploadSessionId, authorization, accept, xVaultAPIClientID }: ServicesFileStagingUploadUploadSessionIdDeleteRequest): Observable<void>
    servicesFileStagingUploadUploadSessionIdDelete({ uploadSessionId, authorization, accept, xVaultAPIClientID }: ServicesFileStagingUploadUploadSessionIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesFileStagingUploadUploadSessionIdDelete({ uploadSessionId, authorization, accept, xVaultAPIClientID }: ServicesFileStagingUploadUploadSessionIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(uploadSessionId, 'uploadSessionId', 'servicesFileStagingUploadUploadSessionIdDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/file_staging/upload/{upload_session_id}'.replace('{upload_session_id}', encodeURI(uploadSessionId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get Upload Session Details
     */
    servicesFileStagingUploadUploadSessionIdGet({ uploadSessionId, authorization, accept, xVaultAPIClientID }: ServicesFileStagingUploadUploadSessionIdGetRequest): Observable<void>
    servicesFileStagingUploadUploadSessionIdGet({ uploadSessionId, authorization, accept, xVaultAPIClientID }: ServicesFileStagingUploadUploadSessionIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesFileStagingUploadUploadSessionIdGet({ uploadSessionId, authorization, accept, xVaultAPIClientID }: ServicesFileStagingUploadUploadSessionIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(uploadSessionId, 'uploadSessionId', 'servicesFileStagingUploadUploadSessionIdGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/file_staging/upload/{upload_session_id}'.replace('{upload_session_id}', encodeURI(uploadSessionId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * List File Parts Uploaded to Session
     */
    servicesFileStagingUploadUploadSessionIdPartsGet({ uploadSessionId, limit, authorization, accept, xVaultAPIClientID }: ServicesFileStagingUploadUploadSessionIdPartsGetRequest): Observable<void>
    servicesFileStagingUploadUploadSessionIdPartsGet({ uploadSessionId, limit, authorization, accept, xVaultAPIClientID }: ServicesFileStagingUploadUploadSessionIdPartsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesFileStagingUploadUploadSessionIdPartsGet({ uploadSessionId, limit, authorization, accept, xVaultAPIClientID }: ServicesFileStagingUploadUploadSessionIdPartsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(uploadSessionId, 'uploadSessionId', 'servicesFileStagingUploadUploadSessionIdPartsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (limit != null) { query['limit'] = limit; }

        return this.request<void>({
            url: '/services/file_staging/upload/{upload_session_id}/parts'.replace('{upload_session_id}', encodeURI(uploadSessionId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Commit Upload Session
     */
    servicesFileStagingUploadUploadSessionIdPost({ uploadSessionId, authorization, accept, xVaultAPIClientID }: ServicesFileStagingUploadUploadSessionIdPostRequest): Observable<void>
    servicesFileStagingUploadUploadSessionIdPost({ uploadSessionId, authorization, accept, xVaultAPIClientID }: ServicesFileStagingUploadUploadSessionIdPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesFileStagingUploadUploadSessionIdPost({ uploadSessionId, authorization, accept, xVaultAPIClientID }: ServicesFileStagingUploadUploadSessionIdPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(uploadSessionId, 'uploadSessionId', 'servicesFileStagingUploadUploadSessionIdPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/file_staging/upload/{upload_session_id}'.replace('{upload_session_id}', encodeURI(uploadSessionId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Upload to a Session
     */
    servicesFileStagingUploadUploadSessionIdPut({ uploadSessionId, authorization, accept, contentType, xVaultAPIFilePartNumber, contentMD5, xVaultAPIClientID }: ServicesFileStagingUploadUploadSessionIdPutRequest): Observable<void>
    servicesFileStagingUploadUploadSessionIdPut({ uploadSessionId, authorization, accept, contentType, xVaultAPIFilePartNumber, contentMD5, xVaultAPIClientID }: ServicesFileStagingUploadUploadSessionIdPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesFileStagingUploadUploadSessionIdPut({ uploadSessionId, authorization, accept, contentType, xVaultAPIFilePartNumber, contentMD5, xVaultAPIClientID }: ServicesFileStagingUploadUploadSessionIdPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(uploadSessionId, 'uploadSessionId', 'servicesFileStagingUploadUploadSessionIdPut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIFilePartNumber != null ? { 'X-VaultAPI-FilePartNumber': String(xVaultAPIFilePartNumber) } : undefined),
            ...(contentMD5 != null ? { 'Content-MD5': String(contentMD5) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/file_staging/upload/{upload_session_id}'.replace('{upload_session_id}', encodeURI(uploadSessionId)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Job Histories
     */
    servicesJobsHistoriesGet({ startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID }: ServicesJobsHistoriesGetRequest): Observable<void>
    servicesJobsHistoriesGet({ startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID }: ServicesJobsHistoriesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesJobsHistoriesGet({ startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID }: ServicesJobsHistoriesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (startDate != null) { query['start_date'] = startDate; }
        if (endDate != null) { query['end_date'] = endDate; }
        if (status != null) { query['status'] = status; }
        if (limit != null) { query['limit'] = limit; }
        if (offset != null) { query['offset'] = offset; }

        return this.request<void>({
            url: '/services/jobs/histories',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Import Bulk Translation File Job Errors
     */
    servicesJobsJobIdErrorsGet({ jobId, authorization, accept, xVaultAPIClientID }: ServicesJobsJobIdErrorsGetRequest): Observable<void>
    servicesJobsJobIdErrorsGet({ jobId, authorization, accept, xVaultAPIClientID }: ServicesJobsJobIdErrorsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesJobsJobIdErrorsGet({ jobId, authorization, accept, xVaultAPIClientID }: ServicesJobsJobIdErrorsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(jobId, 'jobId', 'servicesJobsJobIdErrorsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/jobs/{job_id}/errors'.replace('{job_id}', encodeURI(jobId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Job Status
     */
    servicesJobsJobIdGet({ jobId, authorization, accept, xVaultAPIClientID }: ServicesJobsJobIdGetRequest): Observable<void>
    servicesJobsJobIdGet({ jobId, authorization, accept, xVaultAPIClientID }: ServicesJobsJobIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesJobsJobIdGet({ jobId, authorization, accept, xVaultAPIClientID }: ServicesJobsJobIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(jobId, 'jobId', 'servicesJobsJobIdGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/jobs/{job_id}'.replace('{job_id}', encodeURI(jobId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Import Bulk Translation File Job Summary
     */
    servicesJobsJobIdSummaryGet({ jobId, authorization, accept, xVaultAPIClientID }: ServicesJobsJobIdSummaryGetRequest): Observable<void>
    servicesJobsJobIdSummaryGet({ jobId, authorization, accept, xVaultAPIClientID }: ServicesJobsJobIdSummaryGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesJobsJobIdSummaryGet({ jobId, authorization, accept, xVaultAPIClientID }: ServicesJobsJobIdSummaryGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(jobId, 'jobId', 'servicesJobsJobIdSummaryGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/jobs/{job_id}/summary'.replace('{job_id}', encodeURI(jobId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve SDK Job Tasks
     */
    servicesJobsJobIdTasksGet({ jobId, authorization, accept, xVaultAPIClientID }: ServicesJobsJobIdTasksGetRequest): Observable<void>
    servicesJobsJobIdTasksGet({ jobId, authorization, accept, xVaultAPIClientID }: ServicesJobsJobIdTasksGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesJobsJobIdTasksGet({ jobId, authorization, accept, xVaultAPIClientID }: ServicesJobsJobIdTasksGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(jobId, 'jobId', 'servicesJobsJobIdTasksGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/jobs/{job_id}/tasks'.replace('{job_id}', encodeURI(jobId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Job Monitors
     */
    servicesJobsMonitorsGet({ startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID }: ServicesJobsMonitorsGetRequest): Observable<void>
    servicesJobsMonitorsGet({ startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID }: ServicesJobsMonitorsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesJobsMonitorsGet({ startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID }: ServicesJobsMonitorsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (startDate != null) { query['start_date'] = startDate; }
        if (endDate != null) { query['end_date'] = endDate; }
        if (status != null) { query['status'] = status; }
        if (limit != null) { query['limit'] = limit; }
        if (offset != null) { query['offset'] = offset; }

        return this.request<void>({
            url: '/services/jobs/monitors',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Start Job
     */
    servicesJobsStartNowJobIdPost({ jobId, authorization, accept, xVaultAPIClientID }: ServicesJobsStartNowJobIdPostRequest): Observable<void>
    servicesJobsStartNowJobIdPost({ jobId, authorization, accept, xVaultAPIClientID }: ServicesJobsStartNowJobIdPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesJobsStartNowJobIdPost({ jobId, authorization, accept, xVaultAPIClientID }: ServicesJobsStartNowJobIdPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(jobId, 'jobId', 'servicesJobsStartNowJobIdPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/jobs/start_now/{job_id}'.replace('{job_id}', encodeURI(jobId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Extract Data Files
     */
    servicesLoaderExtractPost({ authorization, accept, contentType, xVaultAPIClientID }: ServicesLoaderExtractPostRequest): Observable<void>
    servicesLoaderExtractPost({ authorization, accept, contentType, xVaultAPIClientID }: ServicesLoaderExtractPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesLoaderExtractPost({ authorization, accept, contentType, xVaultAPIClientID }: ServicesLoaderExtractPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/loader/extract',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Load Failure Log Results
     */
    servicesLoaderJobIdTasksTaskIdFailurelogGet({ jobId, taskId, authorization, accept, xVaultAPIClientID }: ServicesLoaderJobIdTasksTaskIdFailurelogGetRequest): Observable<void>
    servicesLoaderJobIdTasksTaskIdFailurelogGet({ jobId, taskId, authorization, accept, xVaultAPIClientID }: ServicesLoaderJobIdTasksTaskIdFailurelogGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesLoaderJobIdTasksTaskIdFailurelogGet({ jobId, taskId, authorization, accept, xVaultAPIClientID }: ServicesLoaderJobIdTasksTaskIdFailurelogGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(jobId, 'jobId', 'servicesLoaderJobIdTasksTaskIdFailurelogGet');
        throwIfNullOrUndefined(taskId, 'taskId', 'servicesLoaderJobIdTasksTaskIdFailurelogGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/loader/{job_id}/tasks/{task_id}/failurelog'.replace('{job_id}', encodeURI(jobId)).replace('{task_id}', encodeURI(taskId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Loader Extract Results
     */
    servicesLoaderJobIdTasksTaskIdResultsGet({ jobId, taskId, authorization, accept, xVaultAPIClientID }: ServicesLoaderJobIdTasksTaskIdResultsGetRequest): Observable<void>
    servicesLoaderJobIdTasksTaskIdResultsGet({ jobId, taskId, authorization, accept, xVaultAPIClientID }: ServicesLoaderJobIdTasksTaskIdResultsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesLoaderJobIdTasksTaskIdResultsGet({ jobId, taskId, authorization, accept, xVaultAPIClientID }: ServicesLoaderJobIdTasksTaskIdResultsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(jobId, 'jobId', 'servicesLoaderJobIdTasksTaskIdResultsGet');
        throwIfNullOrUndefined(taskId, 'taskId', 'servicesLoaderJobIdTasksTaskIdResultsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/loader/{job_id}/tasks/{task_id}/results'.replace('{job_id}', encodeURI(jobId)).replace('{task_id}', encodeURI(taskId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Loader Extract Renditions Results
     */
    servicesLoaderJobIdTasksTaskIdResultsRenditionsGet({ jobId, taskId, authorization, accept, xVaultAPIClientID }: ServicesLoaderJobIdTasksTaskIdResultsRenditionsGetRequest): Observable<void>
    servicesLoaderJobIdTasksTaskIdResultsRenditionsGet({ jobId, taskId, authorization, accept, xVaultAPIClientID }: ServicesLoaderJobIdTasksTaskIdResultsRenditionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesLoaderJobIdTasksTaskIdResultsRenditionsGet({ jobId, taskId, authorization, accept, xVaultAPIClientID }: ServicesLoaderJobIdTasksTaskIdResultsRenditionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(jobId, 'jobId', 'servicesLoaderJobIdTasksTaskIdResultsRenditionsGet');
        throwIfNullOrUndefined(taskId, 'taskId', 'servicesLoaderJobIdTasksTaskIdResultsRenditionsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/loader/{job_id}/tasks/{task_id}/results/renditions'.replace('{job_id}', encodeURI(jobId)).replace('{task_id}', encodeURI(taskId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Load Success Log Results
     */
    servicesLoaderJobIdTasksTaskIdSuccesslogGet({ jobId, taskId, authorization, accept, xVaultAPIClientID }: ServicesLoaderJobIdTasksTaskIdSuccesslogGetRequest): Observable<void>
    servicesLoaderJobIdTasksTaskIdSuccesslogGet({ jobId, taskId, authorization, accept, xVaultAPIClientID }: ServicesLoaderJobIdTasksTaskIdSuccesslogGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesLoaderJobIdTasksTaskIdSuccesslogGet({ jobId, taskId, authorization, accept, xVaultAPIClientID }: ServicesLoaderJobIdTasksTaskIdSuccesslogGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(jobId, 'jobId', 'servicesLoaderJobIdTasksTaskIdSuccesslogGet');
        throwIfNullOrUndefined(taskId, 'taskId', 'servicesLoaderJobIdTasksTaskIdSuccesslogGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/loader/{job_id}/tasks/{task_id}/successlog'.replace('{job_id}', encodeURI(jobId)).replace('{task_id}', encodeURI(taskId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Load Data Objects
     */
    servicesLoaderLoadPost({ authorization, contentType, accept, xVaultAPIClientID }: ServicesLoaderLoadPostRequest): Observable<void>
    servicesLoaderLoadPost({ authorization, contentType, accept, xVaultAPIClientID }: ServicesLoaderLoadPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesLoaderLoadPost({ authorization, contentType, accept, xVaultAPIClientID }: ServicesLoaderLoadPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/loader/load',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Validate Package
     */
    servicesPackageActionsValidatePost({ authorization, contentType, xVaultAPIClientID }: ServicesPackageActionsValidatePostRequest): Observable<void>
    servicesPackageActionsValidatePost({ authorization, contentType, xVaultAPIClientID }: ServicesPackageActionsValidatePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesPackageActionsValidatePost({ authorization, contentType, xVaultAPIClientID }: ServicesPackageActionsValidatePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/package/actions/validate',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Export Package
     */
    servicesPackagePost({ authorization, contentType, xVaultAPIClientID }: ServicesPackagePostRequest): Observable<void>
    servicesPackagePost({ authorization, contentType, xVaultAPIClientID }: ServicesPackagePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesPackagePost({ authorization, contentType, xVaultAPIClientID }: ServicesPackagePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/package',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Import Package
     */
    servicesPackagePut({ authorization, contentType, accept, xVaultAPIClientID }: ServicesPackagePutRequest): Observable<void>
    servicesPackagePut({ authorization, contentType, accept, xVaultAPIClientID }: ServicesPackagePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesPackagePut({ authorization, contentType, accept, xVaultAPIClientID }: ServicesPackagePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/package',
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve All Queues
     */
    servicesQueuesGet({ authorization, accept, xVaultAPIClientID }: ServicesQueuesGetRequest): Observable<void>
    servicesQueuesGet({ authorization, accept, xVaultAPIClientID }: ServicesQueuesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesQueuesGet({ authorization, accept, xVaultAPIClientID }: ServicesQueuesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/queues',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Disable Delivery
     */
    servicesQueuesQueueNameActionsDisableDeliveryPut({ queueName, authorization, accept, xVaultAPIClientID }: ServicesQueuesQueueNameActionsDisableDeliveryPutRequest): Observable<void>
    servicesQueuesQueueNameActionsDisableDeliveryPut({ queueName, authorization, accept, xVaultAPIClientID }: ServicesQueuesQueueNameActionsDisableDeliveryPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesQueuesQueueNameActionsDisableDeliveryPut({ queueName, authorization, accept, xVaultAPIClientID }: ServicesQueuesQueueNameActionsDisableDeliveryPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(queueName, 'queueName', 'servicesQueuesQueueNameActionsDisableDeliveryPut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/queues/{queue_name}/actions/disable_delivery'.replace('{queue_name}', encodeURI(queueName)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Enable Delivery
     */
    servicesQueuesQueueNameActionsEnableDeliveryPut({ queueName, authorization, accept, xVaultAPIClientID }: ServicesQueuesQueueNameActionsEnableDeliveryPutRequest): Observable<void>
    servicesQueuesQueueNameActionsEnableDeliveryPut({ queueName, authorization, accept, xVaultAPIClientID }: ServicesQueuesQueueNameActionsEnableDeliveryPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesQueuesQueueNameActionsEnableDeliveryPut({ queueName, authorization, accept, xVaultAPIClientID }: ServicesQueuesQueueNameActionsEnableDeliveryPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(queueName, 'queueName', 'servicesQueuesQueueNameActionsEnableDeliveryPut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/queues/{queue_name}/actions/enable_delivery'.replace('{queue_name}', encodeURI(queueName)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Reset Queue
     */
    servicesQueuesQueueNameActionsResetPut({ queueName, authorization, accept, xVaultAPIClientID }: ServicesQueuesQueueNameActionsResetPutRequest): Observable<void>
    servicesQueuesQueueNameActionsResetPut({ queueName, authorization, accept, xVaultAPIClientID }: ServicesQueuesQueueNameActionsResetPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesQueuesQueueNameActionsResetPut({ queueName, authorization, accept, xVaultAPIClientID }: ServicesQueuesQueueNameActionsResetPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(queueName, 'queueName', 'servicesQueuesQueueNameActionsResetPut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/queues/{queue_name}/actions/reset'.replace('{queue_name}', encodeURI(queueName)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Queue Status
     */
    servicesQueuesQueueNameGet({ queueName, authorization, accept, xVaultAPIClientID }: ServicesQueuesQueueNameGetRequest): Observable<void>
    servicesQueuesQueueNameGet({ queueName, authorization, accept, xVaultAPIClientID }: ServicesQueuesQueueNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesQueuesQueueNameGet({ queueName, authorization, accept, xVaultAPIClientID }: ServicesQueuesQueueNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(queueName, 'queueName', 'servicesQueuesQueueNameGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/queues/{queue_name}'.replace('{queue_name}', encodeURI(queueName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Validate Imported Package
     */
    servicesVobjectVaultPackageVPackageIdActionsValidatePost({ packageId, authorization, accept, xVaultAPIClientID }: ServicesVobjectVaultPackageVPackageIdActionsValidatePostRequest): Observable<void>
    servicesVobjectVaultPackageVPackageIdActionsValidatePost({ packageId, authorization, accept, xVaultAPIClientID }: ServicesVobjectVaultPackageVPackageIdActionsValidatePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    servicesVobjectVaultPackageVPackageIdActionsValidatePost({ packageId, authorization, accept, xVaultAPIClientID }: ServicesVobjectVaultPackageVPackageIdActionsValidatePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(packageId, 'packageId', 'servicesVobjectVaultPackageVPackageIdActionsValidatePost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/services/vobject/vault_package__v/{package_id}/actions/validate'.replace('{package_id}', encodeURI(packageId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * End Session
     */
    sessionDelete({ accept, authorization, xVaultAPIClientID }: SessionDeleteRequest): Observable<void>
    sessionDelete({ accept, authorization, xVaultAPIClientID }: SessionDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    sessionDelete({ accept, authorization, xVaultAPIClientID }: SessionDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/session',
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Download Single Client Code Distribution
     */
    uicodeDistributionsDistributionNameCodeGet({ distributionName, accept, authorization, xVaultAPIClientID }: UicodeDistributionsDistributionNameCodeGetRequest): Observable<void>
    uicodeDistributionsDistributionNameCodeGet({ distributionName, accept, authorization, xVaultAPIClientID }: UicodeDistributionsDistributionNameCodeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    uicodeDistributionsDistributionNameCodeGet({ distributionName, accept, authorization, xVaultAPIClientID }: UicodeDistributionsDistributionNameCodeGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(distributionName, 'distributionName', 'uicodeDistributionsDistributionNameCodeGet');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/uicode/distributions/{distribution_name}/code'.replace('{distribution_name}', encodeURI(distributionName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Single Client Code Distribution
     */
    uicodeDistributionsDistributionNameDelete({ distributionName, accept, authorization, xVaultAPIClientID }: UicodeDistributionsDistributionNameDeleteRequest): Observable<void>
    uicodeDistributionsDistributionNameDelete({ distributionName, accept, authorization, xVaultAPIClientID }: UicodeDistributionsDistributionNameDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    uicodeDistributionsDistributionNameDelete({ distributionName, accept, authorization, xVaultAPIClientID }: UicodeDistributionsDistributionNameDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(distributionName, 'distributionName', 'uicodeDistributionsDistributionNameDelete');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/uicode/distributions/{distribution_name}'.replace('{distribution_name}', encodeURI(distributionName)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Single Client Code Distribution Metadata
     */
    uicodeDistributionsDistributionNameGet({ distributionName, accept, authorization, xVaultAPIClientID }: UicodeDistributionsDistributionNameGetRequest): Observable<void>
    uicodeDistributionsDistributionNameGet({ distributionName, accept, authorization, xVaultAPIClientID }: UicodeDistributionsDistributionNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    uicodeDistributionsDistributionNameGet({ distributionName, accept, authorization, xVaultAPIClientID }: UicodeDistributionsDistributionNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(distributionName, 'distributionName', 'uicodeDistributionsDistributionNameGet');

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/uicode/distributions/{distribution_name}'.replace('{distribution_name}', encodeURI(distributionName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve All Client Code Distribution Metadata
     */
    uicodeDistributionsGet({ accept, authorization, xVaultAPIClientID }: UicodeDistributionsGetRequest): Observable<void>
    uicodeDistributionsGet({ accept, authorization, xVaultAPIClientID }: UicodeDistributionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    uicodeDistributionsGet({ accept, authorization, xVaultAPIClientID }: UicodeDistributionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/uicode/distributions',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Add or Replace Single Client Code Distribution
     */
    uicodeDistributionsPost({ accept, authorization, contentType, xVaultAPIClientID }: UicodeDistributionsPostRequest): Observable<void>
    uicodeDistributionsPost({ accept, authorization, contentType, xVaultAPIClientID }: UicodeDistributionsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    uicodeDistributionsPost({ accept, authorization, contentType, xVaultAPIClientID }: UicodeDistributionsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/uicode/distributions',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Deploy Package
     */
    vobjectVaultPackageVPackageIdActionsDeployPost({ packageId, authorization, contentType, accept, xVaultAPIClientID }: VobjectVaultPackageVPackageIdActionsDeployPostRequest): Observable<void>
    vobjectVaultPackageVPackageIdActionsDeployPost({ packageId, authorization, contentType, accept, xVaultAPIClientID }: VobjectVaultPackageVPackageIdActionsDeployPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectVaultPackageVPackageIdActionsDeployPost({ packageId, authorization, contentType, accept, xVaultAPIClientID }: VobjectVaultPackageVPackageIdActionsDeployPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(packageId, 'packageId', 'vobjectVaultPackageVPackageIdActionsDeployPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobject/vault_package__v/{package_id}/actions/deploy'.replace('{package_id}', encodeURI(packageId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Package Deploy Results
     */
    vobjectVaultPackageVPackageIdActionsDeployResultsGet({ packageId, authorization, accept, xVaultAPIClientID }: VobjectVaultPackageVPackageIdActionsDeployResultsGetRequest): Observable<void>
    vobjectVaultPackageVPackageIdActionsDeployResultsGet({ packageId, authorization, accept, xVaultAPIClientID }: VobjectVaultPackageVPackageIdActionsDeployResultsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectVaultPackageVPackageIdActionsDeployResultsGet({ packageId, authorization, accept, xVaultAPIClientID }: VobjectVaultPackageVPackageIdActionsDeployResultsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(packageId, 'packageId', 'vobjectVaultPackageVPackageIdActionsDeployResultsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobject/vault_package__v/{package_id}/actions/deploy/results'.replace('{package_id}', encodeURI(packageId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Results of Cascade Delete Job
     */
    vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet({ objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID }: VobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetRequest): Observable<void>
    vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet({ objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID }: VobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet({ objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID }: VobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet');
        throwIfNullOrUndefined(jobStatus, 'jobStatus', 'vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet');
        throwIfNullOrUndefined(jobId, 'jobId', 'vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}'.replace('{object_name}', encodeURI(objectName)).replace('{job_status}', encodeURI(jobStatus)).replace('{job_id}', encodeURI(jobId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Results of Deep Copy Job
     */
    vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet({ objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID }: VobjectsDeepcopyResultsObjectNameJobStatusJobIdGetRequest): Observable<void>
    vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet({ objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID }: VobjectsDeepcopyResultsObjectNameJobStatusJobIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet({ objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID }: VobjectsDeepcopyResultsObjectNameJobStatusJobIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet');
        throwIfNullOrUndefined(jobStatus, 'jobStatus', 'vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet');
        throwIfNullOrUndefined(jobId, 'jobId', 'vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}'.replace('{object_name}', encodeURI(objectName)).replace('{job_status}', encodeURI(jobStatus)).replace('{job_id}', encodeURI(jobId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create a Placeholder from an EDL Item
     */
    vobjectsEdlItemVActionsCreateplaceholderPost({ authorization, contentType, accept, xVaultAPIClientID }: VobjectsEdlItemVActionsCreateplaceholderPostRequest): Observable<void>
    vobjectsEdlItemVActionsCreateplaceholderPost({ authorization, contentType, accept, xVaultAPIClientID }: VobjectsEdlItemVActionsCreateplaceholderPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsEdlItemVActionsCreateplaceholderPost({ authorization, contentType, accept, xVaultAPIClientID }: VobjectsEdlItemVActionsCreateplaceholderPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/edl_item__v/actions/createplaceholder',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Download Merge Records Job Log
     */
    vobjectsMergesJobIdLogGet({ jobId, authorization, accept, xVaultAPIClientID }: VobjectsMergesJobIdLogGetRequest): Observable<void>
    vobjectsMergesJobIdLogGet({ jobId, authorization, accept, xVaultAPIClientID }: VobjectsMergesJobIdLogGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsMergesJobIdLogGet({ jobId, authorization, accept, xVaultAPIClientID }: VobjectsMergesJobIdLogGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(jobId, 'jobId', 'vobjectsMergesJobIdLogGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/merges/{job_id}/log'.replace('{job_id}', encodeURI(jobId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Record Merge Results
     */
    vobjectsMergesJobIdResultsGet({ jobId, authorization, accept, xVaultAPIClientID }: VobjectsMergesJobIdResultsGetRequest): Observable<void>
    vobjectsMergesJobIdResultsGet({ jobId, authorization, accept, xVaultAPIClientID }: VobjectsMergesJobIdResultsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsMergesJobIdResultsGet({ jobId, authorization, accept, xVaultAPIClientID }: VobjectsMergesJobIdResultsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(jobId, 'jobId', 'vobjectsMergesJobIdResultsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/merges/{job_id}/results'.replace('{job_id}', encodeURI(jobId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Record Merge Status
     */
    vobjectsMergesJobIdStatusGet({ jobId, authorization, accept, xVaultAPIClientID }: VobjectsMergesJobIdStatusGetRequest): Observable<void>
    vobjectsMergesJobIdStatusGet({ jobId, authorization, accept, xVaultAPIClientID }: VobjectsMergesJobIdStatusGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsMergesJobIdStatusGet({ jobId, authorization, accept, xVaultAPIClientID }: VobjectsMergesJobIdStatusGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(jobId, 'jobId', 'vobjectsMergesJobIdStatusGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/merges/{job_id}/status'.replace('{job_id}', encodeURI(jobId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Initiate Object Action on Multiple Records
     */
    vobjectsObjectNameActionsActionNamePost({ objectName, actionName, authorization, contentType, accept, xVaultAPIClientID }: VobjectsObjectNameActionsActionNamePostRequest): Observable<void>
    vobjectsObjectNameActionsActionNamePost({ objectName, actionName, authorization, contentType, accept, xVaultAPIClientID }: VobjectsObjectNameActionsActionNamePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameActionsActionNamePost({ objectName, actionName, authorization, contentType, accept, xVaultAPIClientID }: VobjectsObjectNameActionsActionNamePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameActionsActionNamePost');
        throwIfNullOrUndefined(actionName, 'actionName', 'vobjectsObjectNameActionsActionNamePost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/actions/{action_name}'.replace('{object_name}', encodeURI(objectName)).replace('{action_name}', encodeURI(actionName)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Change Object Type
     */
    vobjectsObjectNameActionsChangetypePost({ objectName, authorization, contentType, accept, xVaultAPIClientID }: VobjectsObjectNameActionsChangetypePostRequest): Observable<void>
    vobjectsObjectNameActionsChangetypePost({ objectName, authorization, contentType, accept, xVaultAPIClientID }: VobjectsObjectNameActionsChangetypePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameActionsChangetypePost({ objectName, authorization, contentType, accept, xVaultAPIClientID }: VobjectsObjectNameActionsChangetypePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameActionsChangetypePost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/actions/changetype'.replace('{object_name}', encodeURI(objectName)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Initiate Record Merge
     */
    vobjectsObjectNameActionsMergePost({ objectName, authorization, contentType, accept, xVaultAPIClientID, vobjectsObjectNameActionsMergePostRequestInner }: VobjectsObjectNameActionsMergePostRequest): Observable<void>
    vobjectsObjectNameActionsMergePost({ objectName, authorization, contentType, accept, xVaultAPIClientID, vobjectsObjectNameActionsMergePostRequestInner }: VobjectsObjectNameActionsMergePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameActionsMergePost({ objectName, authorization, contentType, accept, xVaultAPIClientID, vobjectsObjectNameActionsMergePostRequestInner }: VobjectsObjectNameActionsMergePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameActionsMergePost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/actions/merge'.replace('{object_name}', encodeURI(objectName)),
            method: 'POST',
            headers,
            body: vobjectsObjectNameActionsMergePostRequestInner,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Roll-up Field Recalculation Status
     */
    vobjectsObjectNameActionsRecalculaterollupsGet({ objectName, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameActionsRecalculaterollupsGetRequest): Observable<void>
    vobjectsObjectNameActionsRecalculaterollupsGet({ objectName, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameActionsRecalculaterollupsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameActionsRecalculaterollupsGet({ objectName, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameActionsRecalculaterollupsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameActionsRecalculaterollupsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/actions/recalculaterollups'.replace('{object_name}', encodeURI(objectName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Recalculate Roll-up Fields
     */
    vobjectsObjectNameActionsRecalculaterollupsPost({ objectName, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameActionsRecalculaterollupsPostRequest): Observable<void>
    vobjectsObjectNameActionsRecalculaterollupsPost({ objectName, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameActionsRecalculaterollupsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameActionsRecalculaterollupsPost({ objectName, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameActionsRecalculaterollupsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameActionsRecalculaterollupsPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/actions/recalculaterollups'.replace('{object_name}', encodeURI(objectName)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update Corporate Currency Fields
     */
    vobjectsObjectNameActionsUpdatecorporatecurrencyPut({ objectName, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameActionsUpdatecorporatecurrencyPutRequest): Observable<void>
    vobjectsObjectNameActionsUpdatecorporatecurrencyPut({ objectName, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameActionsUpdatecorporatecurrencyPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameActionsUpdatecorporatecurrencyPut({ objectName, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameActionsUpdatecorporatecurrencyPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameActionsUpdatecorporatecurrencyPut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/actions/updatecorporatecurrency'.replace('{object_name}', encodeURI(objectName)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Multiple Object Record Attachments
     */
    vobjectsObjectNameAttachmentsBatchDelete({ objectName, idParam, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameAttachmentsBatchDeleteRequest): Observable<void>
    vobjectsObjectNameAttachmentsBatchDelete({ objectName, idParam, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameAttachmentsBatchDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameAttachmentsBatchDelete({ objectName, idParam, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameAttachmentsBatchDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameAttachmentsBatchDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (idParam != null) { query['idParam'] = idParam; }

        return this.request<void>({
            url: '/vobjects/{object_name}/attachments/batch'.replace('{object_name}', encodeURI(objectName)),
            method: 'DELETE',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Create Multiple Object Record Attachments
     */
    vobjectsObjectNameAttachmentsBatchPost({ objectName, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameAttachmentsBatchPostRequest): Observable<void>
    vobjectsObjectNameAttachmentsBatchPost({ objectName, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameAttachmentsBatchPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameAttachmentsBatchPost({ objectName, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameAttachmentsBatchPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameAttachmentsBatchPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/attachments/batch'.replace('{object_name}', encodeURI(objectName)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update Multiple Object Record Attachment Descriptions
     */
    vobjectsObjectNameAttachmentsBatchPut({ objectName, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameAttachmentsBatchPutRequest): Observable<void>
    vobjectsObjectNameAttachmentsBatchPut({ objectName, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameAttachmentsBatchPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameAttachmentsBatchPut({ objectName, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameAttachmentsBatchPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameAttachmentsBatchPut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/attachments/batch'.replace('{object_name}', encodeURI(objectName)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Object Records
     */
    vobjectsObjectNameDelete({ objectName, authorization, contentType, accept, xVaultAPIClientID }: VobjectsObjectNameDeleteRequest): Observable<void>
    vobjectsObjectNameDelete({ objectName, authorization, contentType, accept, xVaultAPIClientID }: VobjectsObjectNameDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameDelete({ objectName, authorization, contentType, accept, xVaultAPIClientID }: VobjectsObjectNameDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}'.replace('{object_name}', encodeURI(objectName)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Object Record Roles
     */
    vobjectsObjectNameIdRolesRoleNameGet({ objectName, id, roleName, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameIdRolesRoleNameGetRequest): Observable<void>
    vobjectsObjectNameIdRolesRoleNameGet({ objectName, id, roleName, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameIdRolesRoleNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameIdRolesRoleNameGet({ objectName, id, roleName, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameIdRolesRoleNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameIdRolesRoleNameGet');
        throwIfNullOrUndefined(id, 'id', 'vobjectsObjectNameIdRolesRoleNameGet');
        throwIfNullOrUndefined(roleName, 'roleName', 'vobjectsObjectNameIdRolesRoleNameGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/{id}/roles/{role_name}'.replace('{object_name}', encodeURI(objectName)).replace('{id}', encodeURI(id)).replace('{role_name}', encodeURI(roleName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Object User Actions Details
     */
    vobjectsObjectNameObjectRecordIdActionsActionNameGet({ objectName, objectRecordId, actionName, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdActionsActionNameGetRequest): Observable<void>
    vobjectsObjectNameObjectRecordIdActionsActionNameGet({ objectName, objectRecordId, actionName, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdActionsActionNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameObjectRecordIdActionsActionNameGet({ objectName, objectRecordId, actionName, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdActionsActionNameGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameObjectRecordIdActionsActionNameGet');
        throwIfNullOrUndefined(objectRecordId, 'objectRecordId', 'vobjectsObjectNameObjectRecordIdActionsActionNameGet');
        throwIfNullOrUndefined(actionName, 'actionName', 'vobjectsObjectNameObjectRecordIdActionsActionNameGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/{object_record_id}/actions/{action_name}'.replace('{object_name}', encodeURI(objectName)).replace('{object_record_id}', encodeURI(objectRecordId)).replace('{action_name}', encodeURI(actionName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Initiate Object Action on a Single Record
     */
    vobjectsObjectNameObjectRecordIdActionsActionNamePost({ objectName, objectRecordId, actionName, authorization, contentType, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdActionsActionNamePostRequest): Observable<void>
    vobjectsObjectNameObjectRecordIdActionsActionNamePost({ objectName, objectRecordId, actionName, authorization, contentType, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdActionsActionNamePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameObjectRecordIdActionsActionNamePost({ objectName, objectRecordId, actionName, authorization, contentType, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdActionsActionNamePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameObjectRecordIdActionsActionNamePost');
        throwIfNullOrUndefined(objectRecordId, 'objectRecordId', 'vobjectsObjectNameObjectRecordIdActionsActionNamePost');
        throwIfNullOrUndefined(actionName, 'actionName', 'vobjectsObjectNameObjectRecordIdActionsActionNamePost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/{object_record_id}/actions/{action_name}'.replace('{object_name}', encodeURI(objectName)).replace('{object_record_id}', encodeURI(objectRecordId)).replace('{action_name}', encodeURI(actionName)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Cascade Delete Object Record
     */
    vobjectsObjectNameObjectRecordIdActionsCascadedeletePost({ objectName, objectRecordId, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdActionsCascadedeletePostRequest): Observable<void>
    vobjectsObjectNameObjectRecordIdActionsCascadedeletePost({ objectName, objectRecordId, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdActionsCascadedeletePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameObjectRecordIdActionsCascadedeletePost({ objectName, objectRecordId, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdActionsCascadedeletePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameObjectRecordIdActionsCascadedeletePost');
        throwIfNullOrUndefined(objectRecordId, 'objectRecordId', 'vobjectsObjectNameObjectRecordIdActionsCascadedeletePost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/{object_record_id}/actions/cascadedelete'.replace('{object_name}', encodeURI(objectName)).replace('{object_record_id}', encodeURI(objectRecordId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Deep Copy Object Record
     */
    vobjectsObjectNameObjectRecordIdActionsDeepcopyPost({ objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdActionsDeepcopyPostRequest): Observable<void>
    vobjectsObjectNameObjectRecordIdActionsDeepcopyPost({ objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdActionsDeepcopyPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameObjectRecordIdActionsDeepcopyPost({ objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdActionsDeepcopyPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameObjectRecordIdActionsDeepcopyPost');
        throwIfNullOrUndefined(objectRecordId, 'objectRecordId', 'vobjectsObjectNameObjectRecordIdActionsDeepcopyPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/{object_record_id}/actions/deepcopy'.replace('{object_name}', encodeURI(objectName)).replace('{object_record_id}', encodeURI(objectRecordId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Object Record User Actions
     */
    vobjectsObjectNameObjectRecordIdActionsGet({ objectName, objectRecordId, loc, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdActionsGetRequest): Observable<void>
    vobjectsObjectNameObjectRecordIdActionsGet({ objectName, objectRecordId, loc, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdActionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameObjectRecordIdActionsGet({ objectName, objectRecordId, loc, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdActionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameObjectRecordIdActionsGet');
        throwIfNullOrUndefined(objectRecordId, 'objectRecordId', 'vobjectsObjectNameObjectRecordIdActionsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (loc != null) { query['loc'] = loc; }

        return this.request<void>({
            url: '/vobjects/{object_name}/{object_record_id}/actions'.replace('{object_name}', encodeURI(objectName)).replace('{object_record_id}', encodeURI(objectRecordId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Download Attachment Field File
     */
    vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet({ objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetRequest): Observable<void>
    vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet({ objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet({ objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet');
        throwIfNullOrUndefined(objectRecordId, 'objectRecordId', 'vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet');
        throwIfNullOrUndefined(attachmentFieldName, 'attachmentFieldName', 'vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file'.replace('{object_name}', encodeURI(objectName)).replace('{object_record_id}', encodeURI(objectRecordId)).replace('{attachment_field_name}', encodeURI(attachmentFieldName)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update Attachment Field File
     */
    vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost({ objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostRequest): Observable<void>
    vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost({ objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost({ objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost');
        throwIfNullOrUndefined(objectRecordId, 'objectRecordId', 'vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost');
        throwIfNullOrUndefined(attachmentFieldName, 'attachmentFieldName', 'vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file'.replace('{object_name}', encodeURI(objectName)).replace('{object_record_id}', encodeURI(objectRecordId)).replace('{attachment_field_name}', encodeURI(attachmentFieldName)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Download All Attachment Field Files
     */
    vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet({ objectName, objectRecordId, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetRequest): Observable<void>
    vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet({ objectName, objectRecordId, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet({ objectName, objectRecordId, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet');
        throwIfNullOrUndefined(objectRecordId, 'objectRecordId', 'vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/{object_record_id}/attachment_fields/file'.replace('{object_name}', encodeURI(objectName)).replace('{object_record_id}', encodeURI(objectRecordId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Object Record Attachment
     */
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete({ objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteRequest): Observable<void>
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete({ objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete({ objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete');
        throwIfNullOrUndefined(objectRecordId, 'objectRecordId', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete');
        throwIfNullOrUndefined(attachmentId, 'attachmentId', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}'.replace('{object_name}', encodeURI(objectName)).replace('{object_record_id}', encodeURI(objectRecordId)).replace('{attachment_id}', encodeURI(attachmentId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Object Record Attachment Metadata
     */
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet({ objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetRequest): Observable<void>
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet({ objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet({ objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet');
        throwIfNullOrUndefined(objectRecordId, 'objectRecordId', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet');
        throwIfNullOrUndefined(attachmentId, 'attachmentId', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}'.replace('{object_name}', encodeURI(objectName)).replace('{object_record_id}', encodeURI(objectRecordId)).replace('{attachment_id}', encodeURI(attachmentId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Update Object Record Attachment Description
     */
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut({ objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutRequest): Observable<void>
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut({ objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut({ objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut');
        throwIfNullOrUndefined(objectRecordId, 'objectRecordId', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut');
        throwIfNullOrUndefined(attachmentId, 'attachmentId', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}'.replace('{object_name}', encodeURI(objectName)).replace('{object_record_id}', encodeURI(objectRecordId)).replace('{attachment_id}', encodeURI(attachmentId)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Delete Object Record Attachment Version
     */
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete({ objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteRequest): Observable<void>
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete({ objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete({ objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete');
        throwIfNullOrUndefined(objectRecordId, 'objectRecordId', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete');
        throwIfNullOrUndefined(attachmentId, 'attachmentId', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete');
        throwIfNullOrUndefined(attachmentVersion, 'attachmentVersion', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}'.replace('{object_name}', encodeURI(objectName)).replace('{object_record_id}', encodeURI(objectRecordId)).replace('{attachment_id}', encodeURI(attachmentId)).replace('{attachment_version}', encodeURI(attachmentVersion)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Download Object Record Attachment File
     */
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet({ objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequest): Observable<void>
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet({ objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet({ objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet');
        throwIfNullOrUndefined(objectRecordId, 'objectRecordId', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet');
        throwIfNullOrUndefined(attachmentId, 'attachmentId', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet');
        throwIfNullOrUndefined(attachmentVersion, 'attachmentVersion', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file'.replace('{object_name}', encodeURI(objectName)).replace('{object_record_id}', encodeURI(objectRecordId)).replace('{attachment_id}', encodeURI(attachmentId)).replace('{attachment_version}', encodeURI(attachmentVersion)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Object Record Attachment Version Metadata
     */
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet({ objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetRequest): Observable<void>
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet({ objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet({ objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet');
        throwIfNullOrUndefined(objectRecordId, 'objectRecordId', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet');
        throwIfNullOrUndefined(attachmentId, 'attachmentId', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet');
        throwIfNullOrUndefined(attachmentVersion, 'attachmentVersion', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}'.replace('{object_name}', encodeURI(objectName)).replace('{object_record_id}', encodeURI(objectRecordId)).replace('{attachment_id}', encodeURI(attachmentId)).replace('{attachment_version}', encodeURI(attachmentVersion)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Restore Object Record Attachment Version
     */
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost({ objectName, objectRecordId, attachmentId, attachmentVersion, restore, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostRequest): Observable<void>
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost({ objectName, objectRecordId, attachmentId, attachmentVersion, restore, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost({ objectName, objectRecordId, attachmentId, attachmentVersion, restore, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost');
        throwIfNullOrUndefined(objectRecordId, 'objectRecordId', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost');
        throwIfNullOrUndefined(attachmentId, 'attachmentId', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost');
        throwIfNullOrUndefined(attachmentVersion, 'attachmentVersion', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (restore != null) { query['restore'] = restore; }

        return this.request<void>({
            url: '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}'.replace('{object_name}', encodeURI(objectName)).replace('{object_record_id}', encodeURI(objectRecordId)).replace('{attachment_id}', encodeURI(attachmentId)).replace('{attachment_version}', encodeURI(attachmentVersion)),
            method: 'POST',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Object Record Attachment Versions
     */
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet({ objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetRequest): Observable<void>
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet({ objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet({ objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet');
        throwIfNullOrUndefined(objectRecordId, 'objectRecordId', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet');
        throwIfNullOrUndefined(attachmentId, 'attachmentId', 'vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions'.replace('{object_name}', encodeURI(objectName)).replace('{object_record_id}', encodeURI(objectRecordId)).replace('{attachment_id}', encodeURI(attachmentId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Download All Object Record Attachment Files
     */
    vobjectsObjectNameObjectRecordIdAttachmentsFileGet({ objectName, objectRecordId, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsFileGetRequest): Observable<void>
    vobjectsObjectNameObjectRecordIdAttachmentsFileGet({ objectName, objectRecordId, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameObjectRecordIdAttachmentsFileGet({ objectName, objectRecordId, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsFileGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameObjectRecordIdAttachmentsFileGet');
        throwIfNullOrUndefined(objectRecordId, 'objectRecordId', 'vobjectsObjectNameObjectRecordIdAttachmentsFileGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/{object_record_id}/attachments/file'.replace('{object_name}', encodeURI(objectName)).replace('{object_record_id}', encodeURI(objectRecordId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Object Record Attachments
     */
    vobjectsObjectNameObjectRecordIdAttachmentsGet({ objectName, objectRecordId, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsGetRequest): Observable<void>
    vobjectsObjectNameObjectRecordIdAttachmentsGet({ objectName, objectRecordId, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameObjectRecordIdAttachmentsGet({ objectName, objectRecordId, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameObjectRecordIdAttachmentsGet');
        throwIfNullOrUndefined(objectRecordId, 'objectRecordId', 'vobjectsObjectNameObjectRecordIdAttachmentsGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/{object_record_id}/attachments'.replace('{object_name}', encodeURI(objectName)).replace('{object_record_id}', encodeURI(objectRecordId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create Object Record Attachment
     */
    vobjectsObjectNameObjectRecordIdAttachmentsPost({ objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsPostRequest): Observable<void>
    vobjectsObjectNameObjectRecordIdAttachmentsPost({ objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameObjectRecordIdAttachmentsPost({ objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAttachmentsPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameObjectRecordIdAttachmentsPost');
        throwIfNullOrUndefined(objectRecordId, 'objectRecordId', 'vobjectsObjectNameObjectRecordIdAttachmentsPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/{object_record_id}/attachments'.replace('{object_name}', encodeURI(objectName)).replace('{object_record_id}', encodeURI(objectRecordId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Complete Audit History for a Single Object Record
     */
    vobjectsObjectNameObjectRecordIdAudittrailGet({ objectName, objectRecordId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAudittrailGetRequest): Observable<void>
    vobjectsObjectNameObjectRecordIdAudittrailGet({ objectName, objectRecordId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAudittrailGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameObjectRecordIdAudittrailGet({ objectName, objectRecordId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdAudittrailGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameObjectRecordIdAudittrailGet');
        throwIfNullOrUndefined(objectRecordId, 'objectRecordId', 'vobjectsObjectNameObjectRecordIdAudittrailGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (startDate != null) { query['start_date'] = startDate; }
        if (endDate != null) { query['end_date'] = endDate; }
        if (formatResult != null) { query['format_result'] = formatResult; }
        if (limit != null) { query['limit'] = limit; }
        if (offset != null) { query['offset'] = offset; }
        if (events != null) { query['events'] = events; }

        return this.request<void>({
            url: '/vobjects/{object_name}/{object_record_id}/audittrail'.replace('{object_name}', encodeURI(objectName)).replace('{object_record_id}', encodeURI(objectRecordId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Object Record
     */
    vobjectsObjectNameObjectRecordIdGet({ objectName, objectRecordId, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdGetRequest): Observable<void>
    vobjectsObjectNameObjectRecordIdGet({ objectName, objectRecordId, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameObjectRecordIdGet({ objectName, objectRecordId, authorization, accept, xVaultAPIClientID }: VobjectsObjectNameObjectRecordIdGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameObjectRecordIdGet');
        throwIfNullOrUndefined(objectRecordId, 'objectRecordId', 'vobjectsObjectNameObjectRecordIdGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/{object_record_id}'.replace('{object_name}', encodeURI(objectName)).replace('{object_record_id}', encodeURI(objectRecordId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Create & Upsert Object Records
     */
    vobjectsObjectNamePost({ objectName, idParam, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID }: VobjectsObjectNamePostRequest): Observable<void>
    vobjectsObjectNamePost({ objectName, idParam, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID }: VobjectsObjectNamePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNamePost({ objectName, idParam, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID }: VobjectsObjectNamePostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNamePost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIMigrationMode != null ? { 'X-VaultAPI-MigrationMode': String(xVaultAPIMigrationMode) } : undefined),
            ...(xVaultAPINoTriggers != null ? { 'X-VaultAPI-NoTriggers': String(xVaultAPINoTriggers) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        const query: HttpQuery = {};

        if (idParam != null) { query['idParam'] = idParam; }

        return this.request<void>({
            url: '/vobjects/{object_name}'.replace('{object_name}', encodeURI(objectName)),
            method: 'POST',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Update Object Records
     */
    vobjectsObjectNamePut({ objectName, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID }: VobjectsObjectNamePutRequest): Observable<void>
    vobjectsObjectNamePut({ objectName, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID }: VobjectsObjectNamePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNamePut({ objectName, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID }: VobjectsObjectNamePutRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNamePut');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIMigrationMode != null ? { 'X-VaultAPI-MigrationMode': String(xVaultAPIMigrationMode) } : undefined),
            ...(xVaultAPINoTriggers != null ? { 'X-VaultAPI-NoTriggers': String(xVaultAPINoTriggers) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}'.replace('{object_name}', encodeURI(objectName)),
            method: 'PUT',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Remove Users & Groups from Roles on Object Records
     */
    vobjectsObjectNameRolesDelete({ objectName, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameRolesDeleteRequest): Observable<void>
    vobjectsObjectNameRolesDelete({ objectName, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameRolesDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameRolesDelete({ objectName, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameRolesDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameRolesDelete');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/roles'.replace('{object_name}', encodeURI(objectName)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Assign Users & Groups to Roles on Object Records
     */
    vobjectsObjectNameRolesPost({ objectName, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameRolesPostRequest): Observable<void>
    vobjectsObjectNameRolesPost({ objectName, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameRolesPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsObjectNameRolesPost({ objectName, authorization, accept, contentType, xVaultAPIClientID }: VobjectsObjectNameRolesPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(objectName, 'objectName', 'vobjectsObjectNameRolesPost');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(contentType != null ? { 'Content-Type': String(contentType) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/{object_name}/roles'.replace('{object_name}', encodeURI(objectName)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve Outbound Package Dependencies
     */
    vobjectsOutboundPackageVPackageIdDependenciesGet({ packageId, authorization, accept, xVaultAPIClientID }: VobjectsOutboundPackageVPackageIdDependenciesGetRequest): Observable<void>
    vobjectsOutboundPackageVPackageIdDependenciesGet({ packageId, authorization, accept, xVaultAPIClientID }: VobjectsOutboundPackageVPackageIdDependenciesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    vobjectsOutboundPackageVPackageIdDependenciesGet({ packageId, authorization, accept, xVaultAPIClientID }: VobjectsOutboundPackageVPackageIdDependenciesGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(packageId, 'packageId', 'vobjectsOutboundPackageVPackageIdDependenciesGet');

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
            ...(accept != null ? { 'Accept': String(accept) } : undefined),
            ...(xVaultAPIClientID != null ? { 'X-VaultAPI-ClientID': String(xVaultAPIClientID) } : undefined),
        };

        return this.request<void>({
            url: '/vobjects/outbound_package__v/{package_id}/dependencies'.replace('{package_id}', encodeURI(packageId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}
